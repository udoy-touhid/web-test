/*
  Human
  homepage: <https://github.com/vladmandic/human>
  author: <https://github.com/vladmandic>'
*/

var q4=Object.create;var lw=Object.defineProperty;var j4=Object.getOwnPropertyDescriptor;var X4=Object.getOwnPropertyNames;var Y4=Object.getPrototypeOf,Q4=Object.prototype.hasOwnProperty;var jt=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),qe=(r,e)=>{for(var t in e)lw(r,t,{get:e[t],enumerable:!0})},Z4=(r,e,t,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of X4(e))!Q4.call(r,n)&&n!==t&&lw(r,n,{get:()=>e[n],enumerable:!(o=j4(e,n))||o.enumerable});return r};var Kp=(r,e,t)=>(t=r!=null?q4(Y4(r)):{},Z4(e||!r||!r.__esModule?lw(t,"default",{value:r,enumerable:!0}):t,r));var _k=jt((Lme,Tk)=>{Tk.exports=Tt;var Yo=null;try{Yo=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(r){}function Tt(r,e,t){this.low=r|0,this.high=e|0,this.unsigned=!!t}Tt.prototype.__isLong__;Object.defineProperty(Tt.prototype,"__isLong__",{value:!0});function jr(r){return(r&&r.__isLong__)===!0}Tt.isLong=jr;var yk={},bk={};function zu(r,e){var t,o,n;return e?(r>>>=0,(n=0<=r&&r<256)&&(o=bk[r],o)?o:(t=_t(r,(r|0)<0?-1:0,!0),n&&(bk[r]=t),t)):(r|=0,(n=-128<=r&&r<128)&&(o=yk[r],o)?o:(t=_t(r,r<0?-1:0,!1),n&&(yk[r]=t),t))}Tt.fromInt=zu;function Qo(r,e){if(isNaN(r))return e?Bu:Zo;if(e){if(r<0)return Bu;if(r>=Ik)return Nk}else{if(r<=-wk)return qr;if(r+1>=wk)return kk}return r<0?Qo(-r,e).neg():_t(r%ol|0,r/ol|0,e)}Tt.fromNumber=Qo;function _t(r,e,t){return new Tt(r,e,t)}Tt.fromBits=_t;var ud=Math.pow;function Iw(r,e,t){if(r.length===0)throw Error("empty string");if(r==="NaN"||r==="Infinity"||r==="+Infinity"||r==="-Infinity")return Zo;if(typeof e=="number"?(t=e,e=!1):e=!!e,t=t||10,t<2||36<t)throw RangeError("radix");var o;if((o=r.indexOf("-"))>0)throw Error("interior hyphen");if(o===0)return Iw(r.substring(1),e,t).neg();for(var n=Qo(ud(t,8)),s=Zo,a=0;a<r.length;a+=8){var i=Math.min(8,r.length-a),p=parseInt(r.substring(a,a+i),t);if(i<8){var u=Qo(ud(t,i));s=s.mul(u).add(Qo(p))}else s=s.mul(n),s=s.add(Qo(p))}return s.unsigned=e,s}Tt.fromString=Iw;function Ws(r,e){return typeof r=="number"?Qo(r,e):typeof r=="string"?Iw(r,e):_t(r.low,r.high,typeof e=="boolean"?e:r.unsigned)}Tt.fromValue=Ws;var Ck=65536,wH=1<<24,ol=Ck*Ck,Ik=ol*ol,wk=Ik/2,Sk=zu(wH),Zo=zu(0);Tt.ZERO=Zo;var Bu=zu(0,!0);Tt.UZERO=Bu;var rl=zu(1);Tt.ONE=rl;var vk=zu(1,!0);Tt.UONE=vk;var Sw=zu(-1);Tt.NEG_ONE=Sw;var kk=_t(-1,2147483647,!1);Tt.MAX_VALUE=kk;var Nk=_t(-1,-1,!0);Tt.MAX_UNSIGNED_VALUE=Nk;var qr=_t(0,-2147483648,!1);Tt.MIN_VALUE=qr;var de=Tt.prototype;de.toInt=function(){return this.unsigned?this.low>>>0:this.low};de.toNumber=function(){return this.unsigned?(this.high>>>0)*ol+(this.low>>>0):this.high*ol+(this.low>>>0)};de.toString=function(e){if(e=e||10,e<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(qr)){var t=Qo(e),o=this.div(t),n=o.mul(t).sub(this);return o.toString(e)+n.toInt().toString(e)}else return"-"+this.neg().toString(e);for(var s=Qo(ud(e,6),this.unsigned),a=this,i="";;){var p=a.div(s),u=a.sub(p.mul(s)).toInt()>>>0,l=u.toString(e);if(a=p,a.isZero())return l+i;for(;l.length<6;)l="0"+l;i=""+l+i}};de.getHighBits=function(){return this.high};de.getHighBitsUnsigned=function(){return this.high>>>0};de.getLowBits=function(){return this.low};de.getLowBitsUnsigned=function(){return this.low>>>0};de.getNumBitsAbs=function(){if(this.isNegative())return this.eq(qr)?64:this.neg().getNumBitsAbs();for(var e=this.high!=0?this.high:this.low,t=31;t>0&&!(e&1<<t);t--);return this.high!=0?t+33:t+1};de.isZero=function(){return this.high===0&&this.low===0};de.eqz=de.isZero;de.isNegative=function(){return!this.unsigned&&this.high<0};de.isPositive=function(){return this.unsigned||this.high>=0};de.isOdd=function(){return(this.low&1)===1};de.isEven=function(){return(this.low&1)===0};de.equals=function(e){return jr(e)||(e=Ws(e)),this.unsigned!==e.unsigned&&this.high>>>31===1&&e.high>>>31===1?!1:this.high===e.high&&this.low===e.low};de.eq=de.equals;de.notEquals=function(e){return!this.eq(e)};de.neq=de.notEquals;de.ne=de.notEquals;de.lessThan=function(e){return this.comp(e)<0};de.lt=de.lessThan;de.lessThanOrEqual=function(e){return this.comp(e)<=0};de.lte=de.lessThanOrEqual;de.le=de.lessThanOrEqual;de.greaterThan=function(e){return this.comp(e)>0};de.gt=de.greaterThan;de.greaterThanOrEqual=function(e){return this.comp(e)>=0};de.gte=de.greaterThanOrEqual;de.ge=de.greaterThanOrEqual;de.compare=function(e){if(jr(e)||(e=Ws(e)),this.eq(e))return 0;var t=this.isNegative(),o=e.isNegative();return t&&!o?-1:!t&&o?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1};de.comp=de.compare;de.negate=function(){return!this.unsigned&&this.eq(qr)?qr:this.not().add(rl)};de.neg=de.negate;de.add=function(e){jr(e)||(e=Ws(e));var t=this.high>>>16,o=this.high&65535,n=this.low>>>16,s=this.low&65535,a=e.high>>>16,i=e.high&65535,p=e.low>>>16,u=e.low&65535,l=0,c=0,m=0,d=0;return d+=s+u,m+=d>>>16,d&=65535,m+=n+p,c+=m>>>16,m&=65535,c+=o+i,l+=c>>>16,c&=65535,l+=t+a,l&=65535,_t(m<<16|d,l<<16|c,this.unsigned)};de.subtract=function(e){return jr(e)||(e=Ws(e)),this.add(e.neg())};de.sub=de.subtract;de.multiply=function(e){if(this.isZero())return Zo;if(jr(e)||(e=Ws(e)),Yo){var t=Yo.mul(this.low,this.high,e.low,e.high);return _t(t,Yo.get_high(),this.unsigned)}if(e.isZero())return Zo;if(this.eq(qr))return e.isOdd()?qr:Zo;if(e.eq(qr))return this.isOdd()?qr:Zo;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(Sk)&&e.lt(Sk))return Qo(this.toNumber()*e.toNumber(),this.unsigned);var o=this.high>>>16,n=this.high&65535,s=this.low>>>16,a=this.low&65535,i=e.high>>>16,p=e.high&65535,u=e.low>>>16,l=e.low&65535,c=0,m=0,d=0,f=0;return f+=a*l,d+=f>>>16,f&=65535,d+=s*l,m+=d>>>16,d&=65535,d+=a*u,m+=d>>>16,d&=65535,m+=n*l,c+=m>>>16,m&=65535,m+=s*u,c+=m>>>16,m&=65535,m+=a*p,c+=m>>>16,m&=65535,c+=o*l+n*u+s*p+a*i,c&=65535,_t(d<<16|f,c<<16|m,this.unsigned)};de.mul=de.multiply;de.divide=function(e){if(jr(e)||(e=Ws(e)),e.isZero())throw Error("division by zero");if(Yo){if(!this.unsigned&&this.high===-2147483648&&e.low===-1&&e.high===-1)return this;var t=(this.unsigned?Yo.div_u:Yo.div_s)(this.low,this.high,e.low,e.high);return _t(t,Yo.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?Bu:Zo;var o,n,s;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return Bu;if(e.gt(this.shru(1)))return vk;s=Bu}else{if(this.eq(qr)){if(e.eq(rl)||e.eq(Sw))return qr;if(e.eq(qr))return rl;var a=this.shr(1);return o=a.div(e).shl(1),o.eq(Zo)?e.isNegative()?rl:Sw:(n=this.sub(e.mul(o)),s=o.add(n.div(e)),s)}else if(e.eq(qr))return this.unsigned?Bu:Zo;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=Zo}for(n=this;n.gte(e);){o=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var i=Math.ceil(Math.log(o)/Math.LN2),p=i<=48?1:ud(2,i-48),u=Qo(o),l=u.mul(e);l.isNegative()||l.gt(n);)o-=p,u=Qo(o,this.unsigned),l=u.mul(e);u.isZero()&&(u=rl),s=s.add(u),n=n.sub(l)}return s};de.div=de.divide;de.modulo=function(e){if(jr(e)||(e=Ws(e)),Yo){var t=(this.unsigned?Yo.rem_u:Yo.rem_s)(this.low,this.high,e.low,e.high);return _t(t,Yo.get_high(),this.unsigned)}return this.sub(this.div(e).mul(e))};de.mod=de.modulo;de.rem=de.modulo;de.not=function(){return _t(~this.low,~this.high,this.unsigned)};de.and=function(e){return jr(e)||(e=Ws(e)),_t(this.low&e.low,this.high&e.high,this.unsigned)};de.or=function(e){return jr(e)||(e=Ws(e)),_t(this.low|e.low,this.high|e.high,this.unsigned)};de.xor=function(e){return jr(e)||(e=Ws(e)),_t(this.low^e.low,this.high^e.high,this.unsigned)};de.shiftLeft=function(e){return jr(e)&&(e=e.toInt()),(e&=63)===0?this:e<32?_t(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):_t(0,this.low<<e-32,this.unsigned)};de.shl=de.shiftLeft;de.shiftRight=function(e){return jr(e)&&(e=e.toInt()),(e&=63)===0?this:e<32?_t(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):_t(this.high>>e-32,this.high>=0?0:-1,this.unsigned)};de.shr=de.shiftRight;de.shiftRightUnsigned=function(e){if(jr(e)&&(e=e.toInt()),e&=63,e===0)return this;var t=this.high;if(e<32){var o=this.low;return _t(o>>>e|t<<32-e,t>>>e,this.unsigned)}else return e===32?_t(t,0,this.unsigned):_t(t>>>e-32,0,this.unsigned)};de.shru=de.shiftRightUnsigned;de.shr_u=de.shiftRightUnsigned;de.toSigned=function(){return this.unsigned?_t(this.low,this.high,!1):this};de.toUnsigned=function(){return this.unsigned?this:_t(this.low,this.high,!0)};de.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()};de.toBytesLE=function(){var e=this.high,t=this.low;return[t&255,t>>>8&255,t>>>16&255,t>>>24,e&255,e>>>8&255,e>>>16&255,e>>>24]};de.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,e&255,t>>>24,t>>>16&255,t>>>8&255,t&255]};Tt.fromBytes=function(e,t,o){return o?Tt.fromBytesLE(e,t):Tt.fromBytesBE(e,t)};Tt.fromBytesLE=function(e,t){return new Tt(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)};Tt.fromBytesBE=function(e,t){return new Tt(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}});var f1=jt(()=>{});var h1=jt(()=>{});var W2=jt((V2,tS)=>{(function(r,e,t){function o(i){var p=this,u=a();p.next=function(){var l=2091639*p.s0+p.c*23283064365386963e-26;return p.s0=p.s1,p.s1=p.s2,p.s2=l-(p.c=l|0)},p.c=1,p.s0=u(" "),p.s1=u(" "),p.s2=u(" "),p.s0-=u(i),p.s0<0&&(p.s0+=1),p.s1-=u(i),p.s1<0&&(p.s1+=1),p.s2-=u(i),p.s2<0&&(p.s2+=1),u=null}function n(i,p){return p.c=i.c,p.s0=i.s0,p.s1=i.s1,p.s2=i.s2,p}function s(i,p){var u=new o(i),l=p&&p.state,c=u.next;return c.int32=function(){return u.next()*4294967296|0},c.double=function(){return c()+(c()*2097152|0)*11102230246251565e-32},c.quick=c,l&&(typeof l=="object"&&n(l,u),c.state=function(){return n(u,{})}),c}function a(){var i=4022871197,p=function(u){u=String(u);for(var l=0;l<u.length;l++){i+=u.charCodeAt(l);var c=.02519603282416938*i;i=c>>>0,c-=i,c*=i,i=c>>>0,c-=i,i+=c*4294967296}return(i>>>0)*23283064365386963e-26};return p}e&&e.exports?e.exports=s:t&&t.amd?t(function(){return s}):this.alea=s})(V2,typeof tS=="object"&&tS,typeof define=="function"&&define)});var G2=jt((U2,rS)=>{(function(r,e,t){function o(a){var i=this,p="";i.x=0,i.y=0,i.z=0,i.w=0,i.next=function(){var l=i.x^i.x<<11;return i.x=i.y,i.y=i.z,i.z=i.w,i.w^=i.w>>>19^l^l>>>8},a===(a|0)?i.x=a:p+=a;for(var u=0;u<p.length+64;u++)i.x^=p.charCodeAt(u)|0,i.next()}function n(a,i){return i.x=a.x,i.y=a.y,i.z=a.z,i.w=a.w,i}function s(a,i){var p=new o(a),u=i&&i.state,l=function(){return(p.next()>>>0)/4294967296};return l.double=function(){do var c=p.next()>>>11,m=(p.next()>>>0)/4294967296,d=(c+m)/(1<<21);while(d===0);return d},l.int32=p.next,l.quick=l,u&&(typeof u=="object"&&n(u,p),l.state=function(){return n(p,{})}),l}e&&e.exports?e.exports=s:t&&t.amd?t(function(){return s}):this.xor128=s})(U2,typeof rS=="object"&&rS,typeof define=="function"&&define)});var K2=jt((H2,oS)=>{(function(r,e,t){function o(a){var i=this,p="";i.next=function(){var l=i.x^i.x>>>2;return i.x=i.y,i.y=i.z,i.z=i.w,i.w=i.v,(i.d=i.d+362437|0)+(i.v=i.v^i.v<<4^(l^l<<1))|0},i.x=0,i.y=0,i.z=0,i.w=0,i.v=0,a===(a|0)?i.x=a:p+=a;for(var u=0;u<p.length+64;u++)i.x^=p.charCodeAt(u)|0,u==p.length&&(i.d=i.x<<10^i.x>>>4),i.next()}function n(a,i){return i.x=a.x,i.y=a.y,i.z=a.z,i.w=a.w,i.v=a.v,i.d=a.d,i}function s(a,i){var p=new o(a),u=i&&i.state,l=function(){return(p.next()>>>0)/4294967296};return l.double=function(){do var c=p.next()>>>11,m=(p.next()>>>0)/4294967296,d=(c+m)/(1<<21);while(d===0);return d},l.int32=p.next,l.quick=l,u&&(typeof u=="object"&&n(u,p),l.state=function(){return n(p,{})}),l}e&&e.exports?e.exports=s:t&&t.amd?t(function(){return s}):this.xorwow=s})(H2,typeof oS=="object"&&oS,typeof define=="function"&&define)});var j2=jt((q2,nS)=>{(function(r,e,t){function o(a){var i=this;i.next=function(){var u=i.x,l=i.i,c,m,d;return c=u[l],c^=c>>>7,m=c^c<<24,c=u[l+1&7],m^=c^c>>>10,c=u[l+3&7],m^=c^c>>>3,c=u[l+4&7],m^=c^c<<7,c=u[l+7&7],c=c^c<<13,m^=c^c<<9,u[l]=m,i.i=l+1&7,m};function p(u,l){var c,m,d=[];if(l===(l|0))m=d[0]=l;else for(l=""+l,c=0;c<l.length;++c)d[c&7]=d[c&7]<<15^l.charCodeAt(c)+d[c+1&7]<<13;for(;d.length<8;)d.push(0);for(c=0;c<8&&d[c]===0;++c);for(c==8?m=d[7]=-1:m=d[c],u.x=d,u.i=0,c=256;c>0;--c)u.next()}p(i,a)}function n(a,i){return i.x=a.x.slice(),i.i=a.i,i}function s(a,i){a==null&&(a=+new Date);var p=new o(a),u=i&&i.state,l=function(){return(p.next()>>>0)/4294967296};return l.double=function(){do var c=p.next()>>>11,m=(p.next()>>>0)/4294967296,d=(c+m)/(1<<21);while(d===0);return d},l.int32=p.next,l.quick=l,u&&(u.x&&n(u,p),l.state=function(){return n(p,{})}),l}e&&e.exports?e.exports=s:t&&t.amd?t(function(){return s}):this.xorshift7=s})(q2,typeof nS=="object"&&nS,typeof define=="function"&&define)});var Y2=jt((X2,sS)=>{(function(r,e,t){function o(a){var i=this;i.next=function(){var u=i.w,l=i.X,c=i.i,m,d;return i.w=u=u+1640531527|0,d=l[c+34&127],m=l[c=c+1&127],d^=d<<13,m^=m<<17,d^=d>>>15,m^=m>>>12,d=l[c]=d^m,i.i=c,d+(u^u>>>16)|0};function p(u,l){var c,m,d,f,h,g=[],x=128;for(l===(l|0)?(m=l,l=null):(l=l+"\0",m=0,x=Math.max(x,l.length)),d=0,f=-32;f<x;++f)l&&(m^=l.charCodeAt((f+32)%l.length)),f===0&&(h=m),m^=m<<10,m^=m>>>15,m^=m<<4,m^=m>>>13,f>=0&&(h=h+1640531527|0,c=g[f&127]^=m+h,d=c==0?d+1:0);for(d>=128&&(g[(l&&l.length||0)&127]=-1),d=127,f=4*128;f>0;--f)m=g[d+34&127],c=g[d=d+1&127],m^=m<<13,c^=c<<17,m^=m>>>15,c^=c>>>12,g[d]=m^c;u.w=h,u.X=g,u.i=d}p(i,a)}function n(a,i){return i.i=a.i,i.w=a.w,i.X=a.X.slice(),i}function s(a,i){a==null&&(a=+new Date);var p=new o(a),u=i&&i.state,l=function(){return(p.next()>>>0)/4294967296};return l.double=function(){do var c=p.next()>>>11,m=(p.next()>>>0)/4294967296,d=(c+m)/(1<<21);while(d===0);return d},l.int32=p.next,l.quick=l,u&&(u.X&&n(u,p),l.state=function(){return n(p,{})}),l}e&&e.exports?e.exports=s:t&&t.amd?t(function(){return s}):this.xor4096=s})(X2,typeof sS=="object"&&sS,typeof define=="function"&&define)});var Z2=jt((Q2,aS)=>{(function(r,e,t){function o(a){var i=this,p="";i.next=function(){var l=i.b,c=i.c,m=i.d,d=i.a;return l=l<<25^l>>>7^c,c=c-m|0,m=m<<24^m>>>8^d,d=d-l|0,i.b=l=l<<20^l>>>12^c,i.c=c=c-m|0,i.d=m<<16^c>>>16^d,i.a=d-l|0},i.a=0,i.b=0,i.c=-1640531527,i.d=1367130551,a===Math.floor(a)?(i.a=a/4294967296|0,i.b=a|0):p+=a;for(var u=0;u<p.length+20;u++)i.b^=p.charCodeAt(u)|0,i.next()}function n(a,i){return i.a=a.a,i.b=a.b,i.c=a.c,i.d=a.d,i}function s(a,i){var p=new o(a),u=i&&i.state,l=function(){return(p.next()>>>0)/4294967296};return l.double=function(){do var c=p.next()>>>11,m=(p.next()>>>0)/4294967296,d=(c+m)/(1<<21);while(d===0);return d},l.int32=p.next,l.quick=l,u&&(typeof u=="object"&&n(u,p),l.state=function(){return n(p,{})}),l}e&&e.exports?e.exports=s:t&&t.amd?t(function(){return s}):this.tychei=s})(Q2,typeof aS=="object"&&aS,typeof define=="function"&&define)});var J2=jt(()=>{});var tN=jt((eN,qd)=>{(function(r,e,t){var o=256,n=6,s=52,a="random",i=t.pow(o,n),p=t.pow(2,s),u=p*2,l=o-1,c;function m(w,S,k){var T=[];S=S==!0?{entropy:!0}:S||{};var E=g(h(S.entropy?[w,b(e)]:w==null?x():w,3),T),R=new d(T),D=function(){for(var F=R.g(n),O=i,M=0;F<p;)F=(F+M)*o,O*=o,M=R.g(1);for(;F>=u;)F/=2,O/=2,M>>>=1;return(F+M)/O};return D.int32=function(){return R.g(4)|0},D.quick=function(){return R.g(4)/4294967296},D.double=D,g(b(R.S),e),(S.pass||k||function(F,O,M,L){return L&&(L.S&&f(L,R),F.state=function(){return f(R,{})}),M?(t[a]=F,O):F})(D,E,"global"in S?S.global:this==t,S.state)}function d(w){var S,k=w.length,T=this,E=0,R=T.i=T.j=0,D=T.S=[];for(k||(w=[k++]);E<o;)D[E]=E++;for(E=0;E<o;E++)D[E]=D[R=l&R+w[E%k]+(S=D[E])],D[R]=S;(T.g=function(F){for(var O,M=0,L=T.i,B=T.j,z=T.S;F--;)O=z[L=l&L+1],M=M*o+z[l&(z[L]=z[B=l&B+O])+(z[B]=O)];return T.i=L,T.j=B,M})(o)}function f(w,S){return S.i=w.i,S.j=w.j,S.S=w.S.slice(),S}function h(w,S){var k=[],T=typeof w,E;if(S&&T=="object")for(E in w)try{k.push(h(w[E],S-1))}catch(R){}return k.length?k:T=="string"?w:w+"\0"}function g(w,S){for(var k=w+"",T,E=0;E<k.length;)S[l&E]=l&(T^=S[l&E]*19)+k.charCodeAt(E++);return b(S)}function x(){try{var w;return c&&(w=c.randomBytes)?w=w(o):(w=new Uint8Array(o),(r.crypto||r.msCrypto).getRandomValues(w)),b(w)}catch(T){var S=r.navigator,k=S&&S.plugins;return[+new Date,r,k,r.screen,b(e)]}}function b(w){return String.fromCharCode.apply(0,w)}if(g(t.random(),e),typeof qd=="object"&&qd.exports){qd.exports=m;try{c=J2()}catch(w){}}else typeof define=="function"&&define.amd?define(function(){return m}):t["seed"+a]=m})(typeof self!="undefined"?self:eN,[],Math)});var iS=jt((FNe,rN)=>{var Q6=W2(),Z6=G2(),J6=K2(),ej=j2(),tj=Y2(),rj=Z2(),Zu=tN();Zu.alea=Q6;Zu.xor128=Z6;Zu.xorwow=J6;Zu.xorshift7=ej;Zu.xor4096=tj;Zu.tychei=rj;rN.exports=Zu});var ev=jt(()=>{});var tv=jt(()=>{});var Iz=jt(()=>{});var vz=jt(()=>{});var kz=jt(()=>{});var Nz=jt((Jg,ov)=>{var rv=(()=>{var r=typeof document!="undefined"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename!="undefined"&&(r=r||__filename),function(e){e=e||{};function t(){return oe.buffer!=Ke&&Et(oe.buffer),mt}function o(){return oe.buffer!=Ke&&Et(oe.buffer),ut}function n(){return oe.buffer!=Ke&&Et(oe.buffer),gt}function s(){return oe.buffer!=Ke&&Et(oe.buffer),Ur}function a(){return oe.buffer!=Ke&&Et(oe.buffer),Bt}function i(){return oe.buffer!=Ke&&Et(oe.buffer),io}function p(){return oe.buffer!=Ke&&Et(oe.buffer),sr}var u=typeof e!="undefined"?e:{},l,c;u.ready=new Promise(function(P,V){l=P,c=V});var m;typeof process!="undefined"&&process.listeners&&(m={uncaughtException:process.listeners("uncaughtException"),unhandledRejection:process.listeners("unhandledRejection")});var d=Object.assign({},u),f=[],h="./this.program",g=(P,V)=>{throw V},x=typeof window=="object",b=typeof importScripts=="function",w=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",S=u.ENVIRONMENT_IS_PTHREAD||!1,k="";function T(P){return u.locateFile?u.locateFile(P,k):k+P}var E,R,D,F;function O(P){if(P instanceof Du)return;j("exiting due to exception: "+P)}if(w){var M=ev(),L=tv();b?k=L.dirname(k)+"/":k=__dirname+"/",E=(V,pe)=>(V=zp(V)?new URL(V):L.normalize(V),M.readFileSync(V,pe?void 0:"utf8")),D=V=>{var pe=E(V,!0);return pe.buffer||(pe=new Uint8Array(pe)),pe},R=(V,pe,$e)=>{V=zp(V)?new URL(V):L.normalize(V),M.readFile(V,function(Be,Le){Be?$e(Be):pe(Le.buffer)})},process.argv.length>1&&(h=process.argv[1].replace(/\\/g,"/")),f=process.argv.slice(2),process.on("uncaughtException",function(V){if(!(V instanceof Du))throw V}),process.on("unhandledRejection",function(V){throw V}),g=(V,pe)=>{if(cn())throw process.exitCode=V,pe;O(pe),process.exit(V)},u.inspect=function(){return"[Emscripten Module object]"};let P;try{P=Iz()}catch(V){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),V}global.Worker=P.Worker}else(x||b)&&(b?k=self.location.href:typeof document!="undefined"&&document.currentScript&&(k=document.currentScript.src),typeof r!="undefined"&&r&&(k=r),k.indexOf("blob:")!==0?k=k.substr(0,k.replace(/[?#].*/,"").lastIndexOf("/")+1):k="",w||(E=P=>{var V=new XMLHttpRequest;return V.open("GET",P,!1),V.send(null),V.responseText},b&&(D=P=>{var V=new XMLHttpRequest;return V.open("GET",P,!1),V.responseType="arraybuffer",V.send(null),new Uint8Array(V.response)}),R=(P,V,pe)=>{var $e=new XMLHttpRequest;$e.open("GET",P,!0),$e.responseType="arraybuffer",$e.onload=()=>{if($e.status==200||$e.status==0&&$e.response){V($e.response);return}pe()},$e.onerror=pe,$e.send(null)}),F=P=>document.title=P);w&&typeof performance=="undefined"&&(global.performance=vz().performance);var B=console.log.bind(console),z=console.warn.bind(console);w&&(B=P=>M.writeSync(1,P+`
`),z=P=>M.writeSync(2,P+`
`));var U=u.print||B,j=u.printErr||z;Object.assign(u,d),d=null,u.arguments&&(f=u.arguments),u.thisProgram&&(h=u.thisProgram),u.quit&&(g=u.quit);var q=4,Y=Atomics.load,J=Atomics.store,re=Atomics.compareExchange,ne;u.wasmBinary&&(ne=u.wasmBinary);var ee=u.noExitRuntime||!0;typeof WebAssembly!="object"&&Ru("no native wasm support detected");var oe,ue,me=!1,be;function _e(P,V){P||Ru(V)}var ve=typeof TextDecoder!="undefined"?new TextDecoder("utf8"):void 0;function Fe(P,V,pe){V>>>=0;for(var $e=V+pe,Be=V;P[Be]&&!(Be>=$e);)++Be;if(Be-V>16&&P.buffer&&ve)return ve.decode(P.buffer instanceof SharedArrayBuffer?P.slice(V,Be):P.subarray(V,Be));for(var Le="";V<Be;){var ge=P[V++];if(!(ge&128)){Le+=String.fromCharCode(ge);continue}var Ne=P[V++]&63;if((ge&224)==192){Le+=String.fromCharCode((ge&31)<<6|Ne);continue}var Ot=P[V++]&63;if((ge&240)==224?ge=(ge&15)<<12|Ne<<6|Ot:ge=(ge&7)<<18|Ne<<12|Ot<<6|P[V++]&63,ge<65536)Le+=String.fromCharCode(ge);else{var co=ge-65536;Le+=String.fromCharCode(55296|co>>10,56320|co&1023)}}return Le}function Pe(P,V){return P>>>=0,P?Fe(o(),P,V):""}function at(P,V,pe,$e){if(pe>>>=0,!($e>0))return 0;for(var Be=pe,Le=pe+$e-1,ge=0;ge<P.length;++ge){var Ne=P.charCodeAt(ge);if(Ne>=55296&&Ne<=57343){var Ot=P.charCodeAt(++ge);Ne=65536+((Ne&1023)<<10)|Ot&1023}if(Ne<=127){if(pe>=Le)break;V[pe++>>>0]=Ne}else if(Ne<=2047){if(pe+1>=Le)break;V[pe++>>>0]=192|Ne>>6,V[pe++>>>0]=128|Ne&63}else if(Ne<=65535){if(pe+2>=Le)break;V[pe++>>>0]=224|Ne>>12,V[pe++>>>0]=128|Ne>>6&63,V[pe++>>>0]=128|Ne&63}else{if(pe+3>=Le)break;V[pe++>>>0]=240|Ne>>18,V[pe++>>>0]=128|Ne>>12&63,V[pe++>>>0]=128|Ne>>6&63,V[pe++>>>0]=128|Ne&63}}return V[pe>>>0]=0,pe-Be}function ct(P,V,pe){return at(P,o(),V,pe)}var Ke,mt,ut,gt,xt,Ur,Bt,io,sr;S&&(Ke=u.buffer);function Et(P){Ke=P,u.HEAP8=mt=new Int8Array(P),u.HEAP16=gt=new Int16Array(P),u.HEAP32=Ur=new Int32Array(P),u.HEAPU8=ut=new Uint8Array(P),u.HEAPU16=xt=new Uint16Array(P),u.HEAPU32=Bt=new Uint32Array(P),u.HEAPF32=io=new Float32Array(P),u.HEAPF64=sr=new Float64Array(P)}var ar=u.INITIAL_MEMORY||16777216;if(S)oe=u.wasmMemory,Ke=u.buffer;else if(u.wasmMemory)oe=u.wasmMemory;else if(oe=new WebAssembly.Memory({initial:ar/65536,maximum:65536,shared:!0}),!(oe.buffer instanceof SharedArrayBuffer))throw j("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),w&&j("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");oe&&(Ke=oe.buffer),ar=Ke.byteLength,Et(Ke);var ir,uo=[],po=[],xr=[],ja=!1;function cn(){return ee}function ta(){if(u.preRun)for(typeof u.preRun=="function"&&(u.preRun=[u.preRun]);u.preRun.length;)lc(u.preRun.shift());dc(uo)}function Zt(){ja=!0,!S&&dc(po)}function Xa(){if(!S){if(u.postRun)for(typeof u.postRun=="function"&&(u.postRun=[u.postRun]);u.postRun.length;)Zv(u.postRun.shift());dc(xr)}}function lc(P){uo.unshift(P)}function cc(P){po.unshift(P)}function Zv(P){xr.unshift(P)}var Pi=0,Bp=null,Ya=null;function Ay(P){Pi++,u.monitorRunDependencies&&u.monitorRunDependencies(Pi)}function Rm(P){if(Pi--,u.monitorRunDependencies&&u.monitorRunDependencies(Pi),Pi==0&&(Bp!==null&&(clearInterval(Bp),Bp=null),Ya)){var V=Ya;Ya=null,V()}}function Ru(P){u.onAbort&&u.onAbort(P),P="Aborted("+P+")",j(P),me=!0,be=1,P+=". Build with -sASSERTIONS for more info.";var V=new WebAssembly.RuntimeError(P);throw c(V),V}var Fy="data:application/octet-stream;base64,";function Dm(P){return P.startsWith(Fy)}function zp(P){return P.startsWith("file://")}var yr;yr="tfjs-backend-wasm-threaded-simd.wasm",Dm(yr)||(yr=T(yr));function Am(P){try{if(P==yr&&ne)return new Uint8Array(ne);if(D)return D(P);throw"both async and sync fetching of the wasm failed"}catch(V){Ru(V)}}function Py(){if(!ne&&(x||b)){if(typeof fetch=="function"&&!zp(yr))return fetch(yr,{credentials:"same-origin"}).then(function(P){if(!P.ok)throw"failed to load wasm binary file at '"+yr+"'";return P.arrayBuffer()}).catch(function(){return Am(yr)});if(R)return new Promise(function(P,V){R(yr,function(pe){P(new Uint8Array(pe))},V)})}return Promise.resolve().then(function(){return Am(yr)})}function Oy(){var P={env:Km,wasi_snapshot_preview1:Km};function V(ge,Ne){var Ot=ge.exports;if(u.asm=Ot,Hy(u.asm._emscripten_tls_init),ir=u.asm.__indirect_function_table,cc(u.asm.__wasm_call_ctors),ue=Ne,!S){var co=Me.unusedWorkers.length;Me.unusedWorkers.forEach(function(Za){Me.loadWasmModuleToWorker(Za,function(){--co||Rm("wasm-instantiate")})})}}S||Ay("wasm-instantiate");function pe(ge){V(ge.instance,ge.module)}function $e(ge){return Py().then(function(Ne){return WebAssembly.instantiate(Ne,P)}).then(function(Ne){return Ne}).then(ge,function(Ne){j("failed to asynchronously prepare wasm: "+Ne),Ru(Ne)})}function Be(){return!ne&&typeof WebAssembly.instantiateStreaming=="function"&&!Dm(yr)&&!zp(yr)&&!w&&typeof fetch=="function"?fetch(yr,{credentials:"same-origin"}).then(function(ge){var Ne=WebAssembly.instantiateStreaming(ge,P);return Ne.then(pe,function(Ot){return j("wasm streaming compile failed: "+Ot),j("falling back to ArrayBuffer instantiation"),$e(pe)})}):$e(pe)}if(u.instantiateWasm)try{var Le=u.instantiateWasm(P,V);return Le}catch(ge){j("Module.instantiateWasm callback failed with error: "+ge),c(ge)}return Be().catch(c),{}}var Jv,ek,Fm={};function Du(P){this.name="ExitStatus",this.message="Program terminated with exit("+P+")",this.status=P}function My(P){var V=Me.pthreads[P];delete Me.pthreads[P],V.terminate(),iw(P),Me.runningWorkers.splice(Me.runningWorkers.indexOf(V),1),V.pthread_ptr=0}function Ly(P){var V=Me.pthreads[P];V.postMessage({cmd:"cancel"})}function mc(P){var V=Me.pthreads[P];_e(V),Me.returnWorkerToPool(V)}function By(P){var V=Me.getNewWorker();if(!V)return 6;Me.runningWorkers.push(V),Me.pthreads[P.pthread_ptr]=V,V.pthread_ptr=P.pthread_ptr;var pe={cmd:"run",start_routine:P.startRoutine,arg:P.arg,pthread_ptr:P.pthread_ptr};return V.runPthread=()=>{w&&V.ref(),V.postMessage(pe,P.transferList),delete V.runPthread},V.loaded&&V.runPthread(),0}var Pm={varargs:void 0,get:function(){Pm.varargs+=4;var P=s()[Pm.varargs-4>>>2];return P},getStr:function(P){var V=Pe(P);return V}};function Om(P){if(S)return Oi(1,1,P);be=P,cn()||(Me.terminateAllThreads(),u.onExit&&u.onExit(P),me=!0),g(P,new Du(P))}function zy(P,V){if(be=P,!V&&S)throw Lm(P),"unwind";Om(P)}var Mm=zy;function Vy(P){if(P instanceof Du||P=="unwind")return be;g(1,P)}var Me={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},init:function(){S?Me.initWorker():Me.initMainThread()},initMainThread:function(){for(var P=8;P--;)Me.allocateUnusedWorker()},initWorker:function(){ee=!1},setExitStatus:function(P){be=P},terminateAllThreads:function(){for(var P of Object.values(Me.pthreads))Me.returnWorkerToPool(P);for(var P of Me.unusedWorkers)P.terminate();Me.unusedWorkers=[]},returnWorkerToPool:function(P){var V=P.pthread_ptr;delete Me.pthreads[V],Me.unusedWorkers.push(P),Me.runningWorkers.splice(Me.runningWorkers.indexOf(P),1),P.pthread_ptr=0,w&&P.unref(),iw(V)},receiveObjectTransfer:function(P){},threadInitTLS:function(){Me.tlsInitFunctions.forEach(P=>P())},loadWasmModuleToWorker:function(P,V){P.onmessage=Le=>{var ge=Le.data,Ne=ge.cmd;if(P.pthread_ptr&&(Me.currentProxiedOperationCallerThread=P.pthread_ptr),ge.targetThread&&ge.targetThread!=Zm()){var Ot=Me.pthreads[ge.targetThread];Ot?Ot.postMessage(ge,ge.transferList):j('Internal error! Worker sent a message "'+Ne+'" to target pthread '+ge.targetThread+", but that thread no longer exists!"),Me.currentProxiedOperationCallerThread=void 0;return}Ne==="processProxyingQueue"?fc(ge.queue):Ne==="spawnThread"?By(ge):Ne==="cleanupThread"?mc(ge.thread):Ne==="killThread"?My(ge.thread):Ne==="cancelThread"?Ly(ge.thread):Ne==="loaded"?(P.loaded=!0,w&&P.unref(),V&&V(P),P.runPthread&&P.runPthread()):Ne==="print"?U("Thread "+ge.threadId+": "+ge.text):Ne==="printErr"?j("Thread "+ge.threadId+": "+ge.text):Ne==="alert"?alert("Thread "+ge.threadId+": "+ge.text):ge.target==="setimmediate"?P.postMessage(ge):Ne==="callHandler"?u[ge.handler](...ge.args):Ne&&j("worker sent an unknown command "+Ne),Me.currentProxiedOperationCallerThread=void 0},P.onerror=Le=>{var ge="worker sent an error!";throw j(ge+" "+Le.filename+":"+Le.lineno+": "+Le.message),Le},w&&(P.on("message",function(Le){P.onmessage({data:Le})}),P.on("error",function(Le){P.onerror(Le)}),P.on("detachedExit",function(){}));var pe=[],$e=["onExit","onAbort","print","printErr"];for(var Be of $e)u.hasOwnProperty(Be)&&pe.push(Be);P.postMessage({cmd:"load",handlers:pe,urlOrBlob:u.mainScriptUrlOrBlob||r,wasmMemory:oe,wasmModule:ue})},allocateUnusedWorker:function(){var P,V=T("tfjs-backend-wasm-threaded-simd.worker.js");P=new Worker(V),Me.unusedWorkers.push(P)},getNewWorker:function(){return Me.unusedWorkers.length==0&&(Me.allocateUnusedWorker(),Me.loadWasmModuleToWorker(Me.unusedWorkers[0])),Me.unusedWorkers.pop()}};u.PThread=Me;function dc(P){for(;P.length>0;)P.shift()(u)}function Wy(){var P=Zm(),V=s()[P+52>>>2],pe=s()[P+56>>>2],$e=V-pe;ak(V,$e),Jm(V)}u.establishStackSpace=Wy;function Lm(P){if(S)return Oi(2,0,P);try{Mm(P)}catch(V){Vy(V)}}var Vp=[];function Uy(P){var V=Vp[P];return V||(P>=Vp.length&&(Vp.length=P+1),Vp[P]=V=ir.get(P)),V}function Gy(P,V){var pe=Uy(P)(V);cn()?Me.setExitStatus(pe):sk(pe)}u.invokeEntryPoint=Gy;function Hy(P){Me.tlsInitFunctions.push(P)}function Ky(P){rk(P,!b,1,!x),Me.threadInitTLS()}function qy(P){S?postMessage({cmd:"cleanupThread",thread:P}):mc(P)}function Bm(P,V,pe,$e){return S?Oi(3,1,P,V,pe,$e):zm(P,V,pe,$e)}function zm(P,V,pe,$e){if(typeof SharedArrayBuffer=="undefined")return j("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var Be=[],Le=0;if(S&&(Be.length===0||Le))return Bm(P,V,pe,$e);if(Le)return Le;var ge={startRoutine:pe,pthread_ptr:P,arg:$e,transferList:Be};return S?(ge.cmd="spawnThread",postMessage(ge,Be),0):By(ge)}function jy(){return 65536}var Xy=!0;function Yy(){return Xy}function fc(P){Atomics.store(s(),P>>2,1),Zm()&&nk(P),Atomics.compareExchange(s(),P>>2,1,0)}u.executeNotifiedProxyingQueue=fc;function Qy(P,V,pe,$e){if(P==V)setTimeout(()=>fc($e));else if(S)postMessage({targetThread:P,cmd:"processProxyingQueue",queue:$e});else{var Be=Me.pthreads[P];if(!Be)return;Be.postMessage({cmd:"processProxyingQueue",queue:$e})}return 1}function Zy(P,V,pe){return-1}function Jy(){Ru("")}function Au(P){Au.shown||(Au.shown={}),Au.shown[P]||(Au.shown[P]=1,w&&(P="warning: "+P),j(P))}function eb(){w||b||Au("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread")}function tb(){return Date.now()}function Vm(){return 4294901760}function rb(){return Vm()}var hc;w?hc=()=>{var P=process.hrtime();return P[0]*1e3+P[1]/1e6}:hc=()=>performance.timeOrigin+performance.now();function ob(P,V,pe){o().copyWithin(P>>>0,V>>>0,V+pe>>>0)}function nb(){return w?kz().cpus().length:navigator.hardwareConcurrency}function sb(P){var V=uw(),pe=P();return Jm(V),pe}function Oi(P,V){var pe=arguments.length-2,$e=arguments;return sb(()=>{for(var Be=pe,Le=ed(Be*8),ge=Le>>3,Ne=0;Ne<pe;Ne++){var Ot=$e[2+Ne];p()[ge+Ne>>>0]=Ot}return ok(P,Be,Le,V)})}var gc=[];function ab(P,V,pe){gc.length=V;for(var $e=pe>>3,Be=0;Be<V;Be++)gc[Be]=p()[$e+Be>>>0];var Le=P<0,ge=Le?Fm[-P-1]:hb[P];return ge.apply(null,gc)}function ib(P){try{return oe.grow(P-Ke.byteLength+65535>>>16),Et(oe.buffer),1}catch(V){}}function ub(P){var V=o().length;if(P=P>>>0,P<=V)return!1;var pe=Vm();if(P>pe)return!1;let $e=(Ot,co)=>Ot+(co-Ot%co)%co;for(var Be=1;Be<=4;Be*=2){var Le=V*(1+.2/Be);Le=Math.min(Le,P+100663296);var ge=Math.min(pe,$e(Math.max(P,Le),65536)),Ne=ib(ge);if(Ne)return!0}return!1}function pb(){throw"unwind"}function Wm(P){return S?Oi(4,1,P):52}function Um(P,V,pe,$e,Be){return S?Oi(5,1,P,V,pe,$e,Be):70}var lb=[null,[],[]];function cb(P,V){var pe=lb[P];V===0||V===10?((P===1?U:j)(Fe(pe,0)),pe.length=0):pe.push(V)}function Gm(P,V,pe,$e){if(S)return Oi(6,1,P,V,pe,$e);for(var Be=0,Le=0;Le<pe;Le++){var ge=a()[V>>>2],Ne=a()[V+4>>>2];V+=8;for(var Ot=0;Ot<Ne;Ot++)cb(P,o()[ge+Ot>>>0]);Be+=Ne}return a()[$e>>>2]=Be,0}function Hm(P){var V=u["_"+P];return V}function mb(P,V){t().set(P,V>>>0)}function db(P,V,pe,$e,Be){var Le={string:Gr=>{var Hp=0;if(Gr!=null&&Gr!==0){var pk=(Gr.length<<2)+1;Hp=ed(pk),ct(Gr,Hp,pk)}return Hp},array:Gr=>{var Hp=ed(Gr.length);return mb(Gr,Hp),Hp}};function ge(Gr){return V==="string"?Pe(Gr):V==="boolean"?!!Gr:Gr}var Ne=Hm(P),Ot=[],co=0;if($e)for(var Za=0;Za<$e.length;Za++){var uk=Le[pe[Za]];uk?(co===0&&(co=uw()),Ot[Za]=uk($e[Za])):Ot[Za]=$e[Za]}var pw=Ne.apply(null,Ot);function K4(Gr){return co!==0&&Jm(co),ge(Gr)}return pw=K4(pw),pw}function fb(P,V,pe,$e){pe=pe||[];var Be=pe.every(ge=>ge==="number"||ge==="boolean"),Le=V!=="string";return Le&&Be&&!$e?Hm(P):function(){return db(P,V,pe,arguments,$e)}}Me.init();var hb=[null,Om,Lm,Bm,Wm,Um,Gm],Km={__emscripten_init_main_thread_js:Ky,__emscripten_thread_cleanup:qy,__pthread_create_js:zm,_emscripten_default_pthread_stack_size:jy,_emscripten_get_now_is_monotonic:Yy,_emscripten_notify_task_queue:Qy,_emscripten_set_offscreencanvas_size:Zy,abort:Jy,emscripten_check_blocking_allowed:eb,emscripten_date_now:tb,emscripten_get_heap_max:rb,emscripten_get_now:hc,emscripten_memcpy_big:ob,emscripten_num_logical_cores:nb,emscripten_receive_on_main_thread_js:ab,emscripten_resize_heap:ub,emscripten_unwind_to_js_event_loop:pb,exit:Mm,fd_close:Wm,fd_seek:Um,fd_write:Gm,memory:oe||u.wasmMemory},tk=Oy(),gb=u.___wasm_call_ctors=function(){return(gb=u.___wasm_call_ctors=u.asm.__wasm_call_ctors).apply(null,arguments)},xb=u._init=function(){return(xb=u._init=u.asm.init).apply(null,arguments)},yb=u._init_with_threads_count=function(){return(yb=u._init_with_threads_count=u.asm.init_with_threads_count).apply(null,arguments)},bb=u._get_threads_count=function(){return(bb=u._get_threads_count=u.asm.get_threads_count).apply(null,arguments)},Cb=u._register_tensor=function(){return(Cb=u._register_tensor=u.asm.register_tensor).apply(null,arguments)},wb=u._dispose_data=function(){return(wb=u._dispose_data=u.asm.dispose_data).apply(null,arguments)},Sb=u._dispose=function(){return(Sb=u._dispose=u.asm.dispose).apply(null,arguments)},Ib=u._Abs=function(){return(Ib=u._Abs=u.asm.Abs).apply(null,arguments)},vb=u._Acos=function(){return(vb=u._Acos=u.asm.Acos).apply(null,arguments)},kb=u._Acosh=function(){return(kb=u._Acosh=u.asm.Acosh).apply(null,arguments)},Nb=u._Add=function(){return(Nb=u._Add=u.asm.Add).apply(null,arguments)},Tb=u._AddN=function(){return(Tb=u._AddN=u.asm.AddN).apply(null,arguments)},_b=u._All=function(){return(_b=u._All=u.asm.All).apply(null,arguments)},Eb=u._Any=function(){return(Eb=u._Any=u.asm.Any).apply(null,arguments)},$b=u._ArgMax=function(){return($b=u._ArgMax=u.asm.ArgMax).apply(null,arguments)},Rb=u._ArgMin=function(){return(Rb=u._ArgMin=u.asm.ArgMin).apply(null,arguments)},Db=u._Asin=function(){return(Db=u._Asin=u.asm.Asin).apply(null,arguments)},Ab=u._Asinh=function(){return(Ab=u._Asinh=u.asm.Asinh).apply(null,arguments)},Fb=u._Atan=function(){return(Fb=u._Atan=u.asm.Atan).apply(null,arguments)},Pb=u._Atan2=function(){return(Pb=u._Atan2=u.asm.Atan2).apply(null,arguments)},Ob=u._Atanh=function(){return(Ob=u._Atanh=u.asm.Atanh).apply(null,arguments)},Mb=u._AvgPool=function(){return(Mb=u._AvgPool=u.asm.AvgPool).apply(null,arguments)},Lb=u._AvgPool3D=function(){return(Lb=u._AvgPool3D=u.asm.AvgPool3D).apply(null,arguments)},Bb=u._AvgPool3DGrad=function(){return(Bb=u._AvgPool3DGrad=u.asm.AvgPool3DGrad).apply(null,arguments)},zb=u._AvgPoolGrad=function(){return(zb=u._AvgPoolGrad=u.asm.AvgPoolGrad).apply(null,arguments)},Vb=u._BatchMatMul=function(){return(Vb=u._BatchMatMul=u.asm.BatchMatMul).apply(null,arguments)},Wb=u._Bincount=function(){return(Wb=u._Bincount=u.asm.Bincount).apply(null,arguments)},Ub=u._BitwiseAnd=function(){return(Ub=u._BitwiseAnd=u.asm.BitwiseAnd).apply(null,arguments)},Gb=u._Ceil=function(){return(Gb=u._Ceil=u.asm.Ceil).apply(null,arguments)},Hb=u._ClipByValue=function(){return(Hb=u._ClipByValue=u.asm.ClipByValue).apply(null,arguments)},Kb=u._Conv2D=function(){return(Kb=u._Conv2D=u.asm.Conv2D).apply(null,arguments)},qb=u._Conv2DBackpropInput=function(){return(qb=u._Conv2DBackpropInput=u.asm.Conv2DBackpropInput).apply(null,arguments)},jb=u._Conv3D=function(){return(jb=u._Conv3D=u.asm.Conv3D).apply(null,arguments)},Xb=u._Conv3DBackpropFilterV2=function(){return(Xb=u._Conv3DBackpropFilterV2=u.asm.Conv3DBackpropFilterV2).apply(null,arguments)},Yb=u._Conv3DBackpropInputV2=function(){return(Yb=u._Conv3DBackpropInputV2=u.asm.Conv3DBackpropInputV2).apply(null,arguments)},Qb=u._Cos=function(){return(Qb=u._Cos=u.asm.Cos).apply(null,arguments)},Zb=u._Cosh=function(){return(Zb=u._Cosh=u.asm.Cosh).apply(null,arguments)},Jb=u._CropAndResize=function(){return(Jb=u._CropAndResize=u.asm.CropAndResize).apply(null,arguments)},eC=u._Cumprod=function(){return(eC=u._Cumprod=u.asm.Cumprod).apply(null,arguments)},tC=u._Cumsum=function(){return(tC=u._Cumsum=u.asm.Cumsum).apply(null,arguments)},rC=u._DenseBincount=function(){return(rC=u._DenseBincount=u.asm.DenseBincount).apply(null,arguments)},oC=u._DepthToSpace=function(){return(oC=u._DepthToSpace=u.asm.DepthToSpace).apply(null,arguments)},nC=u._DepthwiseConv2dNative=function(){return(nC=u._DepthwiseConv2dNative=u.asm.DepthwiseConv2dNative).apply(null,arguments)},sC=u._Diag=function(){return(sC=u._Diag=u.asm.Diag).apply(null,arguments)},aC=u._Dilation2D=function(){return(aC=u._Dilation2D=u.asm.Dilation2D).apply(null,arguments)},iC=u._Dilation2DBackpropFilter=function(){return(iC=u._Dilation2DBackpropFilter=u.asm.Dilation2DBackpropFilter).apply(null,arguments)},uC=u._Dilation2DBackpropInput=function(){return(uC=u._Dilation2DBackpropInput=u.asm.Dilation2DBackpropInput).apply(null,arguments)},pC=u._Elu=function(){return(pC=u._Elu=u.asm.Elu).apply(null,arguments)},lC=u._EluGrad=function(){return(lC=u._EluGrad=u.asm.EluGrad).apply(null,arguments)},cC=u._Equal=function(){return(cC=u._Equal=u.asm.Equal).apply(null,arguments)},mC=u._Erf=function(){return(mC=u._Erf=u.asm.Erf).apply(null,arguments)},dC=u._Exp=function(){return(dC=u._Exp=u.asm.Exp).apply(null,arguments)},fC=u._Expm1=function(){return(fC=u._Expm1=u.asm.Expm1).apply(null,arguments)},hC=u._FlipLeftRight=function(){return(hC=u._FlipLeftRight=u.asm.FlipLeftRight).apply(null,arguments)},gC=u._Floor=function(){return(gC=u._Floor=u.asm.Floor).apply(null,arguments)},xC=u._FloorDiv=function(){return(xC=u._FloorDiv=u.asm.FloorDiv).apply(null,arguments)},yC=u._FusedBatchNorm=function(){return(yC=u._FusedBatchNorm=u.asm.FusedBatchNorm).apply(null,arguments)},bC=u._FusedConv2D=function(){return(bC=u._FusedConv2D=u.asm.FusedConv2D).apply(null,arguments)},CC=u._FusedDepthwiseConv2D=function(){return(CC=u._FusedDepthwiseConv2D=u.asm.FusedDepthwiseConv2D).apply(null,arguments)},wC=u._Gather=function(){return(wC=u._Gather=u.asm.Gather).apply(null,arguments)},SC=u._GatherNd=function(){return(SC=u._GatherNd=u.asm.GatherNd).apply(null,arguments)},IC=u._Greater=function(){return(IC=u._Greater=u.asm.Greater).apply(null,arguments)},vC=u._GreaterEqual=function(){return(vC=u._GreaterEqual=u.asm.GreaterEqual).apply(null,arguments)},kC=u._IsFinite=function(){return(kC=u._IsFinite=u.asm.IsFinite).apply(null,arguments)},NC=u._IsInf=function(){return(NC=u._IsInf=u.asm.IsInf).apply(null,arguments)},TC=u._IsNan=function(){return(TC=u._IsNan=u.asm.IsNan).apply(null,arguments)},_C=u._LRN=function(){return(_C=u._LRN=u.asm.LRN).apply(null,arguments)},EC=u._LRNGrad=function(){return(EC=u._LRNGrad=u.asm.LRNGrad).apply(null,arguments)},$C=u._LeakyRelu=function(){return($C=u._LeakyRelu=u.asm.LeakyRelu).apply(null,arguments)},RC=u._Less=function(){return(RC=u._Less=u.asm.Less).apply(null,arguments)},DC=u._LessEqual=function(){return(DC=u._LessEqual=u.asm.LessEqual).apply(null,arguments)},AC=u._LinSpace=function(){return(AC=u._LinSpace=u.asm.LinSpace).apply(null,arguments)},FC=u._Log=function(){return(FC=u._Log=u.asm.Log).apply(null,arguments)},PC=u._Log1p=function(){return(PC=u._Log1p=u.asm.Log1p).apply(null,arguments)},OC=u._LogicalAnd=function(){return(OC=u._LogicalAnd=u.asm.LogicalAnd).apply(null,arguments)},MC=u._LogicalNot=function(){return(MC=u._LogicalNot=u.asm.LogicalNot).apply(null,arguments)},LC=u._LogicalOr=function(){return(LC=u._LogicalOr=u.asm.LogicalOr).apply(null,arguments)},BC=u._LogicalXor=function(){return(BC=u._LogicalXor=u.asm.LogicalXor).apply(null,arguments)},zC=u._Max=function(){return(zC=u._Max=u.asm.Max).apply(null,arguments)},VC=u._MaxPool=function(){return(VC=u._MaxPool=u.asm.MaxPool).apply(null,arguments)},WC=u._MaxPool3D=function(){return(WC=u._MaxPool3D=u.asm.MaxPool3D).apply(null,arguments)},UC=u._MaxPool3DGrad=function(){return(UC=u._MaxPool3DGrad=u.asm.MaxPool3DGrad).apply(null,arguments)},GC=u._MaxPoolGrad=function(){return(GC=u._MaxPoolGrad=u.asm.MaxPoolGrad).apply(null,arguments)},HC=u._MaxPoolWithArgmax=function(){return(HC=u._MaxPoolWithArgmax=u.asm.MaxPoolWithArgmax).apply(null,arguments)},KC=u._Maximum=function(){return(KC=u._Maximum=u.asm.Maximum).apply(null,arguments)},qC=u._Mean=function(){return(qC=u._Mean=u.asm.Mean).apply(null,arguments)},jC=u._Min=function(){return(jC=u._Min=u.asm.Min).apply(null,arguments)},XC=u._Minimum=function(){return(XC=u._Minimum=u.asm.Minimum).apply(null,arguments)},YC=u._MirrorPad=function(){return(YC=u._MirrorPad=u.asm.MirrorPad).apply(null,arguments)},QC=u._Mod=function(){return(QC=u._Mod=u.asm.Mod).apply(null,arguments)},ZC=u._Multinomial=function(){return(ZC=u._Multinomial=u.asm.Multinomial).apply(null,arguments)},JC=u._Multiply=function(){return(JC=u._Multiply=u.asm.Multiply).apply(null,arguments)},ew=u._Neg=function(){return(ew=u._Neg=u.asm.Neg).apply(null,arguments)},tw=u._NonMaxSuppressionV3=function(){return(tw=u._NonMaxSuppressionV3=u.asm.NonMaxSuppressionV3).apply(null,arguments)},rw=u._NonMaxSuppressionV4=function(){return(rw=u._NonMaxSuppressionV4=u.asm.NonMaxSuppressionV4).apply(null,arguments)},qm=u._NonMaxSuppressionV5=function(){return(qm=u._NonMaxSuppressionV5=u.asm.NonMaxSuppressionV5).apply(null,arguments)},jm=u._NotEqual=function(){return(jm=u._NotEqual=u.asm.NotEqual).apply(null,arguments)},xc=u._OneHot=function(){return(xc=u._OneHot=u.asm.OneHot).apply(null,arguments)},ow=u._PadV2=function(){return(ow=u._PadV2=u.asm.PadV2).apply(null,arguments)},nw=u._Pow=function(){return(nw=u._Pow=u.asm.Pow).apply(null,arguments)},Wp=u._Prelu=function(){return(Wp=u._Prelu=u.asm.Prelu).apply(null,arguments)},Xm=u._Prod=function(){return(Xm=u._Prod=u.asm.Prod).apply(null,arguments)},Up=u._RealDiv=function(){return(Up=u._RealDiv=u.asm.RealDiv).apply(null,arguments)},Gp=u._Reciprocal=function(){return(Gp=u._Reciprocal=u.asm.Reciprocal).apply(null,arguments)},sw=u._Relu=function(){return(sw=u._Relu=u.asm.Relu).apply(null,arguments)},K=u._Relu6=function(){return(K=u._Relu6=u.asm.Relu6).apply(null,arguments)},ae=u._ResizeBilinear=function(){return(ae=u._ResizeBilinear=u.asm.ResizeBilinear).apply(null,arguments)},Ee=u._ResizeBilinearGrad=function(){return(Ee=u._ResizeBilinearGrad=u.asm.ResizeBilinearGrad).apply(null,arguments)},it=u._ResizeNearestNeighbor=function(){return(it=u._ResizeNearestNeighbor=u.asm.ResizeNearestNeighbor).apply(null,arguments)},$t=u._ResizeNearestNeighborGrad=function(){return($t=u._ResizeNearestNeighborGrad=u.asm.ResizeNearestNeighborGrad).apply(null,arguments)},Rt=u._Reverse=function(){return(Rt=u._Reverse=u.asm.Reverse).apply(null,arguments)},Ze=u._RotateWithOffset=function(){return(Ze=u._RotateWithOffset=u.asm.RotateWithOffset).apply(null,arguments)},je=u._Round=function(){return(je=u._Round=u.asm.Round).apply(null,arguments)},Ht=u._Rsqrt=function(){return(Ht=u._Rsqrt=u.asm.Rsqrt).apply(null,arguments)},lo=u._ScatterNd=function(){return(lo=u._ScatterNd=u.asm.ScatterNd).apply(null,arguments)},Qa=u._SearchSorted=function(){return(Qa=u._SearchSorted=u.asm.SearchSorted).apply(null,arguments)},Ym=u._SelectV2=function(){return(Ym=u._SelectV2=u.asm.SelectV2).apply(null,arguments)},yc=u._Selu=function(){return(yc=u._Selu=u.asm.Selu).apply(null,arguments)},aw=u._Sigmoid=function(){return(aw=u._Sigmoid=u.asm.Sigmoid).apply(null,arguments)},wr=u._Sign=function(){return(wr=u._Sign=u.asm.Sign).apply(null,arguments)},Mi=u._Sin=function(){return(Mi=u._Sin=u.asm.Sin).apply(null,arguments)},Qm=u._Sinh=function(){return(Qm=u._Sinh=u.asm.Sinh).apply(null,arguments)},f4=u._Softmax=function(){return(f4=u._Softmax=u.asm.Softmax).apply(null,arguments)},h4=u._Softplus=function(){return(h4=u._Softplus=u.asm.Softplus).apply(null,arguments)},g4=u._SparseFillEmptyRows=function(){return(g4=u._SparseFillEmptyRows=u.asm.SparseFillEmptyRows).apply(null,arguments)},x4=u._SparseReshape=function(){return(x4=u._SparseReshape=u.asm.SparseReshape).apply(null,arguments)},y4=u._SparseSegmentReduction=function(){return(y4=u._SparseSegmentReduction=u.asm.SparseSegmentReduction).apply(null,arguments)},b4=u._SparseToDense=function(){return(b4=u._SparseToDense=u.asm.SparseToDense).apply(null,arguments)},C4=u._Sqrt=function(){return(C4=u._Sqrt=u.asm.Sqrt).apply(null,arguments)},w4=u._Square=function(){return(w4=u._Square=u.asm.Square).apply(null,arguments)},S4=u._SquaredDifference=function(){return(S4=u._SquaredDifference=u.asm.SquaredDifference).apply(null,arguments)},I4=u._Step=function(){return(I4=u._Step=u.asm.Step).apply(null,arguments)},v4=u._StridedSlice=function(){return(v4=u._StridedSlice=u.asm.StridedSlice).apply(null,arguments)},k4=u._Sub=function(){return(k4=u._Sub=u.asm.Sub).apply(null,arguments)},N4=u._Sum=function(){return(N4=u._Sum=u.asm.Sum).apply(null,arguments)},T4=u._Tan=function(){return(T4=u._Tan=u.asm.Tan).apply(null,arguments)},_4=u._Tanh=function(){return(_4=u._Tanh=u.asm.Tanh).apply(null,arguments)},E4=u._TensorScatterUpdate=function(){return(E4=u._TensorScatterUpdate=u.asm.TensorScatterUpdate).apply(null,arguments)},$4=u._Tile=function(){return($4=u._Tile=u.asm.Tile).apply(null,arguments)},R4=u._TopK=function(){return(R4=u._TopK=u.asm.TopK).apply(null,arguments)},D4=u._Transform=function(){return(D4=u._Transform=u.asm.Transform).apply(null,arguments)},A4=u._Transpose=function(){return(A4=u._Transpose=u.asm.Transpose).apply(null,arguments)},F4=u.__FusedMatMul=function(){return(F4=u.__FusedMatMul=u.asm._FusedMatMul).apply(null,arguments)},P4=u._malloc=function(){return(P4=u._malloc=u.asm.malloc).apply(null,arguments)},O4=u._free=function(){return(O4=u._free=u.asm.free).apply(null,arguments)},M4=u.__emscripten_tls_init=function(){return(M4=u.__emscripten_tls_init=u.asm._emscripten_tls_init).apply(null,arguments)},Zm=u._pthread_self=function(){return(Zm=u._pthread_self=u.asm.pthread_self).apply(null,arguments)},L4=u.___errno_location=function(){return(L4=u.___errno_location=u.asm.__errno_location).apply(null,arguments)},rk=u.__emscripten_thread_init=function(){return(rk=u.__emscripten_thread_init=u.asm._emscripten_thread_init).apply(null,arguments)},B4=u.__emscripten_thread_crashed=function(){return(B4=u.__emscripten_thread_crashed=u.asm._emscripten_thread_crashed).apply(null,arguments)},z4=u._emscripten_main_thread_process_queued_calls=function(){return(z4=u._emscripten_main_thread_process_queued_calls=u.asm.emscripten_main_thread_process_queued_calls).apply(null,arguments)},V4=u._emscripten_main_browser_thread_id=function(){return(V4=u._emscripten_main_browser_thread_id=u.asm.emscripten_main_browser_thread_id).apply(null,arguments)},ok=u._emscripten_run_in_main_runtime_thread_js=function(){return(ok=u._emscripten_run_in_main_runtime_thread_js=u.asm.emscripten_run_in_main_runtime_thread_js).apply(null,arguments)},W4=u._emscripten_dispatch_to_thread_=function(){return(W4=u._emscripten_dispatch_to_thread_=u.asm.emscripten_dispatch_to_thread_).apply(null,arguments)},nk=u.__emscripten_proxy_execute_task_queue=function(){return(nk=u.__emscripten_proxy_execute_task_queue=u.asm._emscripten_proxy_execute_task_queue).apply(null,arguments)},iw=u.__emscripten_thread_free_data=function(){return(iw=u.__emscripten_thread_free_data=u.asm._emscripten_thread_free_data).apply(null,arguments)},sk=u.__emscripten_thread_exit=function(){return(sk=u.__emscripten_thread_exit=u.asm._emscripten_thread_exit).apply(null,arguments)},ak=u._emscripten_stack_set_limits=function(){return(ak=u._emscripten_stack_set_limits=u.asm.emscripten_stack_set_limits).apply(null,arguments)},uw=u.stackSave=function(){return(uw=u.stackSave=u.asm.stackSave).apply(null,arguments)},Jm=u.stackRestore=function(){return(Jm=u.stackRestore=u.asm.stackRestore).apply(null,arguments)},ed=u.stackAlloc=function(){return(ed=u.stackAlloc=u.asm.stackAlloc).apply(null,arguments)},U4=u.dynCall_iijjiiii=function(){return(U4=u.dynCall_iijjiiii=u.asm.dynCall_iijjiiii).apply(null,arguments)},G4=u.dynCall_jiji=function(){return(G4=u.dynCall_jiji=u.asm.dynCall_jiji).apply(null,arguments)};u.keepRuntimeAlive=cn,u.wasmMemory=oe,u.cwrap=fb,u.ExitStatus=Du,u.PThread=Me;var td;Ya=function P(){td||ik(),td||(Ya=P)};function ik(P){if(P=P||f,Pi>0)return;if(S){l(u),Zt(),startWorker(u);return}if(ta(),Pi>0)return;function V(){td||(td=!0,u.calledRun=!0,!me&&(Zt(),l(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),Xa()))}u.setStatus?(u.setStatus("Running..."),setTimeout(function(){setTimeout(function(){u.setStatus("")},1),V()},1)):V()}if(u.preInit)for(typeof u.preInit=="function"&&(u.preInit=[u.preInit]);u.preInit.length>0;)u.preInit.pop()();ik();var rd;m&&(rd={uncaughtException:process.listeners("uncaughtException").filter(function(P){return!m.uncaughtException.indexOf(P)>-1}),unhandledRejection:process.listeners("unhandledRejection").filter(function(P){return!m.unhandledRejection.indexOf(P)>-1})});var od;if(typeof WasmBackendModule!="undefined")od=WasmBackendModule;else if(typeof e!="undefined")od=e;else throw new Error("Could not find wasm module in post.js");if(rd){var H4=od._dispose;od._dispose=function(){H4(),rd.uncaughtException.forEach(function(P){process.removeListener("uncaughtException",P)}),rd.unhandledRejection.forEach(function(P){process.removeListener("unhandledRejection",P)})}}return e.ready}})();typeof Jg=="object"&&typeof ov=="object"?ov.exports=rv:typeof define=="function"&&define.amd?define([],function(){return rv}):typeof Jg=="object"&&(Jg.WasmBackendModuleThreadedSimd=rv)});var _z=jt((EPt,Tz)=>{Tz.exports.wasmWorkerContents=`"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:function(f){(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f)},postMessage:function(msg){parentPort.postMessage(msg)},performance:global.performance||{now:function(){return Date.now()}}})}var initializedJS=false;var pendingNotifiedProxyingQueues=[];function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"
");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var instance=new WebAssembly.Instance(Module["wasmModule"],info);receiveInstance(instance);Module["wasmModule"]=null;return instance.exports};self.onunhandledrejection=e=>{throw e.reason??e};self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"})};self.onmessage=e=>{try{if(e.data.cmd==="load"){Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=function(){postMessage({cmd:"callHandler",handler:handler,args:[...arguments]})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}WasmBackendModuleThreadedSimd(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,0,0,1);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){pendingNotifiedProxyingQueues.forEach(queue=>{Module["executeNotifiedProxyingQueue"](queue)});pendingNotifiedProxyingQueues=[];initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){if(ex instanceof Module["ExitStatus"]){if(Module["keepRuntimeAlive"]()){}else{Module["__emscripten_thread_exit"](ex.status)}}else{throw ex}}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="processProxyingQueue"){if(initializedJS){Module["executeNotifiedProxyingQueue"](e.data.queue)}else{pendingNotifiedProxyingQueues.push(e.data.queue)}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}};`});var Ez=jt((ex,sv)=>{var nv=(()=>{var r=typeof document!="undefined"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename!="undefined"&&(r=r||__filename),function(e){e=e||{};var t=typeof e!="undefined"?e:{},o,n;t.ready=new Promise(function(K,ae){o=K,n=ae});var s;typeof process!="undefined"&&process.listeners&&(s={uncaughtException:process.listeners("uncaughtException"),unhandledRejection:process.listeners("unhandledRejection")});var a=Object.assign({},t),i=[],p="./this.program",u=(K,ae)=>{throw ae},l=typeof window=="object",c=typeof importScripts=="function",m=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",d="";function f(K){return t.locateFile?t.locateFile(K,d):d+K}var h,g,x,b;function w(K){if(K instanceof Bp)return;E("exiting due to exception: "+K)}if(m){var S=ev(),k=tv();c?d=k.dirname(d)+"/":d=__dirname+"/",h=(K,ae)=>(K=ta(K)?new URL(K):k.normalize(K),S.readFileSync(K,ae?void 0:"utf8")),x=K=>{var ae=h(K,!0);return ae.buffer||(ae=new Uint8Array(ae)),ae},g=(K,ae,Ee)=>{K=ta(K)?new URL(K):k.normalize(K),S.readFile(K,function(it,$t){it?Ee(it):ae($t.buffer)})},process.argv.length>1&&(p=process.argv[1].replace(/\\/g,"/")),i=process.argv.slice(2),process.on("uncaughtException",function(K){if(!(K instanceof Bp))throw K}),process.on("unhandledRejection",function(K){throw K}),u=(K,ae)=>{if(ut())throw process.exitCode=K,ae;w(ae),process.exit(K)},t.inspect=function(){return"[Emscripten Module object]"}}else(l||c)&&(c?d=self.location.href:typeof document!="undefined"&&document.currentScript&&(d=document.currentScript.src),r&&(d=r),d.indexOf("blob:")!==0?d=d.substr(0,d.replace(/[?#].*/,"").lastIndexOf("/")+1):d="",h=K=>{var ae=new XMLHttpRequest;return ae.open("GET",K,!1),ae.send(null),ae.responseText},c&&(x=K=>{var ae=new XMLHttpRequest;return ae.open("GET",K,!1),ae.responseType="arraybuffer",ae.send(null),new Uint8Array(ae.response)}),g=(K,ae,Ee)=>{var it=new XMLHttpRequest;it.open("GET",K,!0),it.responseType="arraybuffer",it.onload=()=>{if(it.status==200||it.status==0&&it.response){ae(it.response);return}Ee()},it.onerror=Ee,it.send(null)},b=K=>document.title=K);var T=t.print||console.log.bind(console),E=t.printErr||console.warn.bind(console);Object.assign(t,a),a=null,t.arguments&&(i=t.arguments),t.thisProgram&&(p=t.thisProgram),t.quit&&(u=t.quit);var R=4,D;t.wasmBinary&&(D=t.wasmBinary);var F=t.noExitRuntime||!0;typeof WebAssembly!="object"&&xr("no native wasm support detected");var O,M=!1,L;function B(K,ae){K||xr(ae)}var z=typeof TextDecoder!="undefined"?new TextDecoder("utf8"):void 0;function U(K,ae,Ee){ae>>>=0;for(var it=ae+Ee,$t=ae;K[$t]&&!($t>=it);)++$t;if($t-ae>16&&K.buffer&&z)return z.decode(K.subarray(ae,$t));for(var Rt="";ae<$t;){var Ze=K[ae++];if(!(Ze&128)){Rt+=String.fromCharCode(Ze);continue}var je=K[ae++]&63;if((Ze&224)==192){Rt+=String.fromCharCode((Ze&31)<<6|je);continue}var Ht=K[ae++]&63;if((Ze&240)==224?Ze=(Ze&15)<<12|je<<6|Ht:Ze=(Ze&7)<<18|je<<12|Ht<<6|K[ae++]&63,Ze<65536)Rt+=String.fromCharCode(Ze);else{var lo=Ze-65536;Rt+=String.fromCharCode(55296|lo>>10,56320|lo&1023)}}return Rt}function j(K,ae){return K>>>=0,K?U(ne,K,ae):""}function q(K,ae,Ee,it){if(Ee>>>=0,!(it>0))return 0;for(var $t=Ee,Rt=Ee+it-1,Ze=0;Ze<K.length;++Ze){var je=K.charCodeAt(Ze);if(je>=55296&&je<=57343){var Ht=K.charCodeAt(++Ze);je=65536+((je&1023)<<10)|Ht&1023}if(je<=127){if(Ee>=Rt)break;ae[Ee++>>>0]=je}else if(je<=2047){if(Ee+1>=Rt)break;ae[Ee++>>>0]=192|je>>6,ae[Ee++>>>0]=128|je&63}else if(je<=65535){if(Ee+2>=Rt)break;ae[Ee++>>>0]=224|je>>12,ae[Ee++>>>0]=128|je>>6&63,ae[Ee++>>>0]=128|je&63}else{if(Ee+3>=Rt)break;ae[Ee++>>>0]=240|je>>18,ae[Ee++>>>0]=128|je>>12&63,ae[Ee++>>>0]=128|je>>6&63,ae[Ee++>>>0]=128|je&63}}return ae[Ee>>>0]=0,Ee-$t}function Y(K,ae,Ee){return q(K,ne,ae,Ee)}var J,re,ne,ee,oe,ue,me,be,_e;function ve(K){J=K,t.HEAP8=re=new Int8Array(K),t.HEAP16=ee=new Int16Array(K),t.HEAP32=ue=new Int32Array(K),t.HEAPU8=ne=new Uint8Array(K),t.HEAPU16=oe=new Uint16Array(K),t.HEAPU32=me=new Uint32Array(K),t.HEAPF32=be=new Float32Array(K),t.HEAPF64=_e=new Float64Array(K)}var Fe=t.INITIAL_MEMORY||16777216,Pe,at=[],ct=[],Ke=[],mt=!1;function ut(){return F}function gt(){if(t.preRun)for(typeof t.preRun=="function"&&(t.preRun=[t.preRun]);t.preRun.length;)Bt(t.preRun.shift());Ya(at)}function xt(){mt=!0,Ya(ct)}function Ur(){if(t.postRun)for(typeof t.postRun=="function"&&(t.postRun=[t.postRun]);t.postRun.length;)sr(t.postRun.shift());Ya(Ke)}function Bt(K){at.unshift(K)}function io(K){ct.unshift(K)}function sr(K){Ke.unshift(K)}var Et=0,ar=null,ir=null;function uo(K){Et++,t.monitorRunDependencies&&t.monitorRunDependencies(Et)}function po(K){if(Et--,t.monitorRunDependencies&&t.monitorRunDependencies(Et),Et==0&&(ar!==null&&(clearInterval(ar),ar=null),ir)){var ae=ir;ir=null,ae()}}function xr(K){t.onAbort&&t.onAbort(K),K="Aborted("+K+")",E(K),M=!0,L=1,K+=". Build with -sASSERTIONS for more info.";var ae=new WebAssembly.RuntimeError(K);throw n(ae),ae}var ja="data:application/octet-stream;base64,";function cn(K){return K.startsWith(ja)}function ta(K){return K.startsWith("file://")}var Zt;Zt="tfjs-backend-wasm.wasm",cn(Zt)||(Zt=f(Zt));function Xa(K){try{if(K==Zt&&D)return new Uint8Array(D);if(x)return x(K);throw"both async and sync fetching of the wasm failed"}catch(ae){xr(ae)}}function lc(){if(!D&&(l||c)){if(typeof fetch=="function"&&!ta(Zt))return fetch(Zt,{credentials:"same-origin"}).then(function(K){if(!K.ok)throw"failed to load wasm binary file at '"+Zt+"'";return K.arrayBuffer()}).catch(function(){return Xa(Zt)});if(g)return new Promise(function(K,ae){g(Zt,function(Ee){K(new Uint8Array(Ee))},ae)})}return Promise.resolve().then(function(){return Xa(Zt)})}function cc(){var K={env:mc,wasi_snapshot_preview1:mc};function ae(Ze,je){var Ht=Ze.exports;t.asm=Ht,O=t.asm.memory,ve(O.buffer),Pe=t.asm.__indirect_function_table,io(t.asm.__wasm_call_ctors),po("wasm-instantiate")}uo("wasm-instantiate");function Ee(Ze){ae(Ze.instance)}function it(Ze){return lc().then(function(je){return WebAssembly.instantiate(je,K)}).then(function(je){return je}).then(Ze,function(je){E("failed to asynchronously prepare wasm: "+je),xr(je)})}function $t(){return!D&&typeof WebAssembly.instantiateStreaming=="function"&&!cn(Zt)&&!ta(Zt)&&!m&&typeof fetch=="function"?fetch(Zt,{credentials:"same-origin"}).then(function(Ze){var je=WebAssembly.instantiateStreaming(Ze,K);return je.then(Ee,function(Ht){return E("wasm streaming compile failed: "+Ht),E("falling back to ArrayBuffer instantiation"),it(Ee)})}):it(Ee)}if(t.instantiateWasm)try{var Rt=t.instantiateWasm(K,ae);return Rt}catch(Ze){E("Module.instantiateWasm callback failed with error: "+Ze),n(Ze)}return $t().catch(n),{}}var Zv,Pi;function Bp(K){this.name="ExitStatus",this.message="Program terminated with exit("+K+")",this.status=K}function Ya(K){for(;K.length>0;)K.shift()(t)}function Ay(){xr("")}function Rm(){return 4294901760}function Ru(){return Rm()}function Fy(K,ae,Ee){ne.copyWithin(K>>>0,ae>>>0,ae+Ee>>>0)}function Dm(K){try{return O.grow(K-J.byteLength+65535>>>16),ve(O.buffer),1}catch(ae){}}function zp(K){var ae=ne.length;K=K>>>0;var Ee=Rm();if(K>Ee)return!1;let it=(Ht,lo)=>Ht+(lo-Ht%lo)%lo;for(var $t=1;$t<=4;$t*=2){var Rt=ae*(1+.2/$t);Rt=Math.min(Rt,K+100663296);var Ze=Math.min(Ee,it(Math.max(K,Rt),65536)),je=Dm(Ze);if(je)return!0}return!1}var yr={varargs:void 0,get:function(){yr.varargs+=4;var K=ue[yr.varargs-4>>>2];return K},getStr:function(K){var ae=j(K);return ae}};function Am(K){return 52}function Py(K,ae,Ee,it,$t){return 70}var Oy=[null,[],[]];function Jv(K,ae){var Ee=Oy[K];ae===0||ae===10?((K===1?T:E)(U(Ee,0)),Ee.length=0):Ee.push(ae)}function ek(K,ae,Ee,it){for(var $t=0,Rt=0;Rt<Ee;Rt++){var Ze=me[ae>>>2],je=me[ae+4>>>2];ae+=8;for(var Ht=0;Ht<je;Ht++)Jv(K,ne[Ze+Ht>>>0]);$t+=je}return me[it>>>2]=$t,0}function Fm(K){var ae=t["_"+K];return ae}function Du(K,ae){re.set(K,ae>>>0)}function My(K,ae,Ee,it,$t){var Rt={string:wr=>{var Mi=0;if(wr!=null&&wr!==0){var Qm=(wr.length<<2)+1;Mi=xc(Qm),Y(wr,Mi,Qm)}return Mi},array:wr=>{var Mi=xc(wr.length);return Du(wr,Mi),Mi}};function Ze(wr){return ae==="string"?j(wr):ae==="boolean"?!!wr:wr}var je=Fm(K),Ht=[],lo=0;if(it)for(var Qa=0;Qa<it.length;Qa++){var Ym=Rt[Ee[Qa]];Ym?(lo===0&&(lo=qm()),Ht[Qa]=Ym(it[Qa])):Ht[Qa]=it[Qa]}var yc=je.apply(null,Ht);function aw(wr){return lo!==0&&jm(lo),Ze(wr)}return yc=aw(yc),yc}function Ly(K,ae,Ee,it){Ee=Ee||[];var $t=Ee.every(Ze=>Ze==="number"||Ze==="boolean"),Rt=ae!=="string";return Rt&&$t&&!it?Fm(K):function(){return My(K,ae,Ee,arguments,it)}}var mc={abort:Ay,emscripten_get_heap_max:Ru,emscripten_memcpy_big:Fy,emscripten_resize_heap:zp,fd_close:Am,fd_seek:Py,fd_write:ek},By=cc(),Pm=t.___wasm_call_ctors=function(){return(Pm=t.___wasm_call_ctors=t.asm.__wasm_call_ctors).apply(null,arguments)},Om=t._init=function(){return(Om=t._init=t.asm.init).apply(null,arguments)},zy=t._init_with_threads_count=function(){return(zy=t._init_with_threads_count=t.asm.init_with_threads_count).apply(null,arguments)},Mm=t._get_threads_count=function(){return(Mm=t._get_threads_count=t.asm.get_threads_count).apply(null,arguments)},Vy=t._register_tensor=function(){return(Vy=t._register_tensor=t.asm.register_tensor).apply(null,arguments)},Me=t._dispose_data=function(){return(Me=t._dispose_data=t.asm.dispose_data).apply(null,arguments)},dc=t._dispose=function(){return(dc=t._dispose=t.asm.dispose).apply(null,arguments)},Wy=t._Abs=function(){return(Wy=t._Abs=t.asm.Abs).apply(null,arguments)},Lm=t._Acos=function(){return(Lm=t._Acos=t.asm.Acos).apply(null,arguments)},Vp=t._Acosh=function(){return(Vp=t._Acosh=t.asm.Acosh).apply(null,arguments)},Uy=t._Add=function(){return(Uy=t._Add=t.asm.Add).apply(null,arguments)},Gy=t._AddN=function(){return(Gy=t._AddN=t.asm.AddN).apply(null,arguments)},Hy=t._All=function(){return(Hy=t._All=t.asm.All).apply(null,arguments)},Ky=t._Any=function(){return(Ky=t._Any=t.asm.Any).apply(null,arguments)},qy=t._ArgMax=function(){return(qy=t._ArgMax=t.asm.ArgMax).apply(null,arguments)},Bm=t._ArgMin=function(){return(Bm=t._ArgMin=t.asm.ArgMin).apply(null,arguments)},zm=t._Asin=function(){return(zm=t._Asin=t.asm.Asin).apply(null,arguments)},jy=t._Asinh=function(){return(jy=t._Asinh=t.asm.Asinh).apply(null,arguments)},Xy=t._Atan=function(){return(Xy=t._Atan=t.asm.Atan).apply(null,arguments)},Yy=t._Atan2=function(){return(Yy=t._Atan2=t.asm.Atan2).apply(null,arguments)},fc=t._Atanh=function(){return(fc=t._Atanh=t.asm.Atanh).apply(null,arguments)},Qy=t._AvgPool=function(){return(Qy=t._AvgPool=t.asm.AvgPool).apply(null,arguments)},Zy=t._AvgPool3D=function(){return(Zy=t._AvgPool3D=t.asm.AvgPool3D).apply(null,arguments)},Jy=t._AvgPool3DGrad=function(){return(Jy=t._AvgPool3DGrad=t.asm.AvgPool3DGrad).apply(null,arguments)},Au=t._AvgPoolGrad=function(){return(Au=t._AvgPoolGrad=t.asm.AvgPoolGrad).apply(null,arguments)},eb=t._BatchMatMul=function(){return(eb=t._BatchMatMul=t.asm.BatchMatMul).apply(null,arguments)},tb=t._Bincount=function(){return(tb=t._Bincount=t.asm.Bincount).apply(null,arguments)},Vm=t._BitwiseAnd=function(){return(Vm=t._BitwiseAnd=t.asm.BitwiseAnd).apply(null,arguments)},rb=t._Ceil=function(){return(rb=t._Ceil=t.asm.Ceil).apply(null,arguments)},hc=t._ClipByValue=function(){return(hc=t._ClipByValue=t.asm.ClipByValue).apply(null,arguments)},ob=t._Conv2D=function(){return(ob=t._Conv2D=t.asm.Conv2D).apply(null,arguments)},nb=t._Conv2DBackpropInput=function(){return(nb=t._Conv2DBackpropInput=t.asm.Conv2DBackpropInput).apply(null,arguments)},sb=t._Conv3D=function(){return(sb=t._Conv3D=t.asm.Conv3D).apply(null,arguments)},Oi=t._Conv3DBackpropFilterV2=function(){return(Oi=t._Conv3DBackpropFilterV2=t.asm.Conv3DBackpropFilterV2).apply(null,arguments)},gc=t._Conv3DBackpropInputV2=function(){return(gc=t._Conv3DBackpropInputV2=t.asm.Conv3DBackpropInputV2).apply(null,arguments)},ab=t._Cos=function(){return(ab=t._Cos=t.asm.Cos).apply(null,arguments)},ib=t._Cosh=function(){return(ib=t._Cosh=t.asm.Cosh).apply(null,arguments)},ub=t._CropAndResize=function(){return(ub=t._CropAndResize=t.asm.CropAndResize).apply(null,arguments)},pb=t._Cumprod=function(){return(pb=t._Cumprod=t.asm.Cumprod).apply(null,arguments)},Wm=t._Cumsum=function(){return(Wm=t._Cumsum=t.asm.Cumsum).apply(null,arguments)},Um=t._DenseBincount=function(){return(Um=t._DenseBincount=t.asm.DenseBincount).apply(null,arguments)},lb=t._DepthToSpace=function(){return(lb=t._DepthToSpace=t.asm.DepthToSpace).apply(null,arguments)},cb=t._DepthwiseConv2dNative=function(){return(cb=t._DepthwiseConv2dNative=t.asm.DepthwiseConv2dNative).apply(null,arguments)},Gm=t._Diag=function(){return(Gm=t._Diag=t.asm.Diag).apply(null,arguments)},Hm=t._Dilation2D=function(){return(Hm=t._Dilation2D=t.asm.Dilation2D).apply(null,arguments)},mb=t._Dilation2DBackpropFilter=function(){return(mb=t._Dilation2DBackpropFilter=t.asm.Dilation2DBackpropFilter).apply(null,arguments)},db=t._Dilation2DBackpropInput=function(){return(db=t._Dilation2DBackpropInput=t.asm.Dilation2DBackpropInput).apply(null,arguments)},fb=t._Elu=function(){return(fb=t._Elu=t.asm.Elu).apply(null,arguments)},hb=t._EluGrad=function(){return(hb=t._EluGrad=t.asm.EluGrad).apply(null,arguments)},Km=t._Equal=function(){return(Km=t._Equal=t.asm.Equal).apply(null,arguments)},tk=t._Erf=function(){return(tk=t._Erf=t.asm.Erf).apply(null,arguments)},gb=t._Exp=function(){return(gb=t._Exp=t.asm.Exp).apply(null,arguments)},xb=t._Expm1=function(){return(xb=t._Expm1=t.asm.Expm1).apply(null,arguments)},yb=t._FlipLeftRight=function(){return(yb=t._FlipLeftRight=t.asm.FlipLeftRight).apply(null,arguments)},bb=t._Floor=function(){return(bb=t._Floor=t.asm.Floor).apply(null,arguments)},Cb=t._FloorDiv=function(){return(Cb=t._FloorDiv=t.asm.FloorDiv).apply(null,arguments)},wb=t._FusedBatchNorm=function(){return(wb=t._FusedBatchNorm=t.asm.FusedBatchNorm).apply(null,arguments)},Sb=t._FusedConv2D=function(){return(Sb=t._FusedConv2D=t.asm.FusedConv2D).apply(null,arguments)},Ib=t._FusedDepthwiseConv2D=function(){return(Ib=t._FusedDepthwiseConv2D=t.asm.FusedDepthwiseConv2D).apply(null,arguments)},vb=t._Gather=function(){return(vb=t._Gather=t.asm.Gather).apply(null,arguments)},kb=t._GatherNd=function(){return(kb=t._GatherNd=t.asm.GatherNd).apply(null,arguments)},Nb=t._Greater=function(){return(Nb=t._Greater=t.asm.Greater).apply(null,arguments)},Tb=t._GreaterEqual=function(){return(Tb=t._GreaterEqual=t.asm.GreaterEqual).apply(null,arguments)},_b=t._IsFinite=function(){return(_b=t._IsFinite=t.asm.IsFinite).apply(null,arguments)},Eb=t._IsInf=function(){return(Eb=t._IsInf=t.asm.IsInf).apply(null,arguments)},$b=t._IsNan=function(){return($b=t._IsNan=t.asm.IsNan).apply(null,arguments)},Rb=t._LRN=function(){return(Rb=t._LRN=t.asm.LRN).apply(null,arguments)},Db=t._LRNGrad=function(){return(Db=t._LRNGrad=t.asm.LRNGrad).apply(null,arguments)},Ab=t._LeakyRelu=function(){return(Ab=t._LeakyRelu=t.asm.LeakyRelu).apply(null,arguments)},Fb=t._Less=function(){return(Fb=t._Less=t.asm.Less).apply(null,arguments)},Pb=t._LessEqual=function(){return(Pb=t._LessEqual=t.asm.LessEqual).apply(null,arguments)},Ob=t._LinSpace=function(){return(Ob=t._LinSpace=t.asm.LinSpace).apply(null,arguments)},Mb=t._Log=function(){return(Mb=t._Log=t.asm.Log).apply(null,arguments)},Lb=t._Log1p=function(){return(Lb=t._Log1p=t.asm.Log1p).apply(null,arguments)},Bb=t._LogicalAnd=function(){return(Bb=t._LogicalAnd=t.asm.LogicalAnd).apply(null,arguments)},zb=t._LogicalNot=function(){return(zb=t._LogicalNot=t.asm.LogicalNot).apply(null,arguments)},Vb=t._LogicalOr=function(){return(Vb=t._LogicalOr=t.asm.LogicalOr).apply(null,arguments)},Wb=t._LogicalXor=function(){return(Wb=t._LogicalXor=t.asm.LogicalXor).apply(null,arguments)},Ub=t._Max=function(){return(Ub=t._Max=t.asm.Max).apply(null,arguments)},Gb=t._MaxPool=function(){return(Gb=t._MaxPool=t.asm.MaxPool).apply(null,arguments)},Hb=t._MaxPool3D=function(){return(Hb=t._MaxPool3D=t.asm.MaxPool3D).apply(null,arguments)},Kb=t._MaxPool3DGrad=function(){return(Kb=t._MaxPool3DGrad=t.asm.MaxPool3DGrad).apply(null,arguments)},qb=t._MaxPoolGrad=function(){return(qb=t._MaxPoolGrad=t.asm.MaxPoolGrad).apply(null,arguments)},jb=t._MaxPoolWithArgmax=function(){return(jb=t._MaxPoolWithArgmax=t.asm.MaxPoolWithArgmax).apply(null,arguments)},Xb=t._Maximum=function(){return(Xb=t._Maximum=t.asm.Maximum).apply(null,arguments)},Yb=t._Mean=function(){return(Yb=t._Mean=t.asm.Mean).apply(null,arguments)},Qb=t._Min=function(){return(Qb=t._Min=t.asm.Min).apply(null,arguments)},Zb=t._Minimum=function(){return(Zb=t._Minimum=t.asm.Minimum).apply(null,arguments)},Jb=t._MirrorPad=function(){return(Jb=t._MirrorPad=t.asm.MirrorPad).apply(null,arguments)},eC=t._Mod=function(){return(eC=t._Mod=t.asm.Mod).apply(null,arguments)},tC=t._Multinomial=function(){return(tC=t._Multinomial=t.asm.Multinomial).apply(null,arguments)},rC=t._Multiply=function(){return(rC=t._Multiply=t.asm.Multiply).apply(null,arguments)},oC=t._Neg=function(){return(oC=t._Neg=t.asm.Neg).apply(null,arguments)},nC=t._NonMaxSuppressionV3=function(){return(nC=t._NonMaxSuppressionV3=t.asm.NonMaxSuppressionV3).apply(null,arguments)},sC=t._NonMaxSuppressionV4=function(){return(sC=t._NonMaxSuppressionV4=t.asm.NonMaxSuppressionV4).apply(null,arguments)},aC=t._NonMaxSuppressionV5=function(){return(aC=t._NonMaxSuppressionV5=t.asm.NonMaxSuppressionV5).apply(null,arguments)},iC=t._NotEqual=function(){return(iC=t._NotEqual=t.asm.NotEqual).apply(null,arguments)},uC=t._OneHot=function(){return(uC=t._OneHot=t.asm.OneHot).apply(null,arguments)},pC=t._PadV2=function(){return(pC=t._PadV2=t.asm.PadV2).apply(null,arguments)},lC=t._Pow=function(){return(lC=t._Pow=t.asm.Pow).apply(null,arguments)},cC=t._Prelu=function(){return(cC=t._Prelu=t.asm.Prelu).apply(null,arguments)},mC=t._Prod=function(){return(mC=t._Prod=t.asm.Prod).apply(null,arguments)},dC=t._RealDiv=function(){return(dC=t._RealDiv=t.asm.RealDiv).apply(null,arguments)},fC=t._Reciprocal=function(){return(fC=t._Reciprocal=t.asm.Reciprocal).apply(null,arguments)},hC=t._Relu=function(){return(hC=t._Relu=t.asm.Relu).apply(null,arguments)},gC=t._Relu6=function(){return(gC=t._Relu6=t.asm.Relu6).apply(null,arguments)},xC=t._ResizeBilinear=function(){return(xC=t._ResizeBilinear=t.asm.ResizeBilinear).apply(null,arguments)},yC=t._ResizeBilinearGrad=function(){return(yC=t._ResizeBilinearGrad=t.asm.ResizeBilinearGrad).apply(null,arguments)},bC=t._ResizeNearestNeighbor=function(){return(bC=t._ResizeNearestNeighbor=t.asm.ResizeNearestNeighbor).apply(null,arguments)},CC=t._ResizeNearestNeighborGrad=function(){return(CC=t._ResizeNearestNeighborGrad=t.asm.ResizeNearestNeighborGrad).apply(null,arguments)},wC=t._Reverse=function(){return(wC=t._Reverse=t.asm.Reverse).apply(null,arguments)},SC=t._RotateWithOffset=function(){return(SC=t._RotateWithOffset=t.asm.RotateWithOffset).apply(null,arguments)},IC=t._Round=function(){return(IC=t._Round=t.asm.Round).apply(null,arguments)},vC=t._Rsqrt=function(){return(vC=t._Rsqrt=t.asm.Rsqrt).apply(null,arguments)},kC=t._ScatterNd=function(){return(kC=t._ScatterNd=t.asm.ScatterNd).apply(null,arguments)},NC=t._SearchSorted=function(){return(NC=t._SearchSorted=t.asm.SearchSorted).apply(null,arguments)},TC=t._SelectV2=function(){return(TC=t._SelectV2=t.asm.SelectV2).apply(null,arguments)},_C=t._Selu=function(){return(_C=t._Selu=t.asm.Selu).apply(null,arguments)},EC=t._Sigmoid=function(){return(EC=t._Sigmoid=t.asm.Sigmoid).apply(null,arguments)},$C=t._Sign=function(){return($C=t._Sign=t.asm.Sign).apply(null,arguments)},RC=t._Sin=function(){return(RC=t._Sin=t.asm.Sin).apply(null,arguments)},DC=t._Sinh=function(){return(DC=t._Sinh=t.asm.Sinh).apply(null,arguments)},AC=t._Softmax=function(){return(AC=t._Softmax=t.asm.Softmax).apply(null,arguments)},FC=t._Softplus=function(){return(FC=t._Softplus=t.asm.Softplus).apply(null,arguments)},PC=t._SparseFillEmptyRows=function(){return(PC=t._SparseFillEmptyRows=t.asm.SparseFillEmptyRows).apply(null,arguments)},OC=t._SparseReshape=function(){return(OC=t._SparseReshape=t.asm.SparseReshape).apply(null,arguments)},MC=t._SparseSegmentReduction=function(){return(MC=t._SparseSegmentReduction=t.asm.SparseSegmentReduction).apply(null,arguments)},LC=t._SparseToDense=function(){return(LC=t._SparseToDense=t.asm.SparseToDense).apply(null,arguments)},BC=t._Sqrt=function(){return(BC=t._Sqrt=t.asm.Sqrt).apply(null,arguments)},zC=t._Square=function(){return(zC=t._Square=t.asm.Square).apply(null,arguments)},VC=t._SquaredDifference=function(){return(VC=t._SquaredDifference=t.asm.SquaredDifference).apply(null,arguments)},WC=t._Step=function(){return(WC=t._Step=t.asm.Step).apply(null,arguments)},UC=t._StridedSlice=function(){return(UC=t._StridedSlice=t.asm.StridedSlice).apply(null,arguments)},GC=t._Sub=function(){return(GC=t._Sub=t.asm.Sub).apply(null,arguments)},HC=t._Sum=function(){return(HC=t._Sum=t.asm.Sum).apply(null,arguments)},KC=t._Tan=function(){return(KC=t._Tan=t.asm.Tan).apply(null,arguments)},qC=t._Tanh=function(){return(qC=t._Tanh=t.asm.Tanh).apply(null,arguments)},jC=t._TensorScatterUpdate=function(){return(jC=t._TensorScatterUpdate=t.asm.TensorScatterUpdate).apply(null,arguments)},XC=t._Tile=function(){return(XC=t._Tile=t.asm.Tile).apply(null,arguments)},YC=t._TopK=function(){return(YC=t._TopK=t.asm.TopK).apply(null,arguments)},QC=t._Transform=function(){return(QC=t._Transform=t.asm.Transform).apply(null,arguments)},ZC=t._Transpose=function(){return(ZC=t._Transpose=t.asm.Transpose).apply(null,arguments)},JC=t.__FusedMatMul=function(){return(JC=t.__FusedMatMul=t.asm._FusedMatMul).apply(null,arguments)},ew=t._malloc=function(){return(ew=t._malloc=t.asm.malloc).apply(null,arguments)},tw=t._free=function(){return(tw=t._free=t.asm.free).apply(null,arguments)},rw=t.___errno_location=function(){return(rw=t.___errno_location=t.asm.__errno_location).apply(null,arguments)},qm=t.stackSave=function(){return(qm=t.stackSave=t.asm.stackSave).apply(null,arguments)},jm=t.stackRestore=function(){return(jm=t.stackRestore=t.asm.stackRestore).apply(null,arguments)},xc=t.stackAlloc=function(){return(xc=t.stackAlloc=t.asm.stackAlloc).apply(null,arguments)},ow=t.dynCall_iijjiiii=function(){return(ow=t.dynCall_iijjiiii=t.asm.dynCall_iijjiiii).apply(null,arguments)},nw=t.dynCall_jiji=function(){return(nw=t.dynCall_jiji=t.asm.dynCall_jiji).apply(null,arguments)};t.cwrap=Ly;var Wp;ir=function K(){Wp||Xm(),Wp||(ir=K)};function Xm(K){if(K=K||i,Et>0||(gt(),Et>0))return;function ae(){Wp||(Wp=!0,t.calledRun=!0,!M&&(xt(),o(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),Ur()))}t.setStatus?(t.setStatus("Running..."),setTimeout(function(){setTimeout(function(){t.setStatus("")},1),ae()},1)):ae()}if(t.preInit)for(typeof t.preInit=="function"&&(t.preInit=[t.preInit]);t.preInit.length>0;)t.preInit.pop()();Xm();var Up;s&&(Up={uncaughtException:process.listeners("uncaughtException").filter(function(K){return!s.uncaughtException.indexOf(K)>-1}),unhandledRejection:process.listeners("unhandledRejection").filter(function(K){return!s.unhandledRejection.indexOf(K)>-1})});var Gp;if(typeof e!="undefined")Gp=e;else if(typeof WasmBackendModuleThreadedSimd!="undefined")Gp=WasmBackendModuleThreadedSimd;else throw new Error("Could not find wasm module in post.js");if(Up){var sw=Gp._dispose;Gp._dispose=function(){sw(),Up.uncaughtException.forEach(function(K){process.removeListener("uncaughtException",K)}),Up.unhandledRejection.forEach(function(K){process.removeListener("unhandledRejection",K)})}}return e.ready}})();typeof ex=="object"&&typeof sv=="object"?sv.exports=nv:typeof define=="function"&&define.amd?define([],function(){return nv}):typeof ex=="object"&&(ex.WasmBackendModule=nv)});var mn=class{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}},mo=class{refCount(e){return Hr("refCount")}incRef(e){return Hr("incRef")}timerAvailable(){return!0}time(e){return Hr("time")}read(e){return Hr("read")}readSync(e){return Hr("readSync")}readToGPU(e,t){return Hr("readToGPU")}numDataIds(){return Hr("numDataIds")}disposeData(e,t){return Hr("disposeData")}write(e,t,o){return Hr("write")}move(e,t,o,n,s){return Hr("move")}createTensorFromGPUData(e,t,o){return Hr("createTensorFromGPUData")}memory(){return Hr("memory")}floatPrecision(){return Hr("floatPrecision")}epsilon(){return this.floatPrecision()===32?1e-7:1e-4}dispose(){return Hr("dispose")}};function Hr(r){throw new Error(`'${r}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function lk(r){let e=r.length,t=0;for(;e>0;)t=Math.random()*e|0,e--,nd(r,e,t)}function J4(r,e){if(r.length!==e.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${r.length}Second array length was ${e.length}`);let t=r.length,o=0;for(;t>0;)o=Math.random()*t|0,t--,nd(r,t,o),nd(e,t,o)}function qp(r,e,t){return Math.max(r,Math.min(e,t))}function eH(r){return r%2===0?r:r+1}function nd(r,e,t){let o=r[e];r[e]=r[t],r[t]=o}function tH(r){let e=0;for(let t=0;t<r.length;t++)e+=r[t];return e}function rH(r,e){let t=Math.random();return e*t+(1-t)*r}function oH(r,e){let t=0;for(let o=0;o<r.length;o++){let n=Number(r[o])-Number(e[o]);t+=n*n}return t}function $(r,e){if(!r)throw new Error(typeof e=="string"?e:e())}function yt(r,e,t=""){$(Sr(r,e),()=>t+` Shapes ${r} and ${e} must match`)}function fo(r){$(r!=null,()=>"The input to the tensor constructor must be a non-null value.")}function ze(r){if(r.length===0)return 1;let e=r[0];for(let t=1;t<r.length;t++)e*=r[t];return e}function nH(r){return r.length===0}function cw(r,e){if(r===e)return!0;if(r==null||e==null||r.length!==e.length)return!1;for(let t=0;t<r.length;t++)if(r[t]!==null&&e[t]!==null&&r[t]!==e[t])return!1;return!0}function Sr(r,e){if(r===e)return!0;if(r==null||e==null||r.length!==e.length)return!1;for(let t=0;t<r.length;t++)if(r[t]!==e[t])return!1;return!0}function Ja(r){return r%1===0}function sH(r){if(Math.tanh!=null)return Math.tanh(r);if(r===1/0)return 1;if(r===-1/0)return-1;{let e=Math.exp(2*r);return(e-1)/(e+1)}}function aH(r){let e=Math.ceil(Math.sqrt(r));return[e,Math.ceil(r/e)]}function iH(r){let e=new Uint32Array(r);for(let t=0;t<r;++t)e[t]=t;return lk(e),e}function Pu(r,e){return e<=r.length?r:r+" ".repeat(e-r.length)}function uH(r,e=n=>0,t,o){return new Promise((n,s)=>{let a=0,i=()=>{if(r()){n();return}a++;let p=e(a);if(t!=null&&a>=t){s();return}o!=null?o(i,p):setTimeout(i,p)};i()})}function pH(r,e){let t=1,o=-1;for(let s=0;s<r.length;++s)if(r[s]>=0)t*=r[s];else if(r[s]===-1){if(o!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${o} and dim ${s}`);o=s}else if(r[s]<0)throw Error(`Shapes can not be < 0. Found ${r[s]} at dim ${s}`);if(o===-1){if(e>0&&e!==t)throw Error(`Size(${e}) must match the product of shape ${r}`);return r}if(t===0)throw Error(`Cannot infer the missing size in [${r}] when there are 0 elements`);if(e%t!==0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${t}`);let n=r.slice();return n[o]=e/t,n}function Li(r,e){let t=e.length;return r=r==null?e.map((o,n)=>n):[].concat(r),$(r.every(o=>o>=-t&&o<t),()=>`All values in axis param must be in range [-${t}, ${t}) but got axis ${r}`),$(r.every(o=>Ja(o)),()=>`All values in axis param must be integers but got axis ${r}`),r.map(o=>o<0?t+o:o)}function mw(r,e){let t=[],o=[],n=e!=null&&Array.isArray(e)&&e.length===0,s=e==null||n?null:Li(e,r).sort(),a=0;for(let i=0;i<r.length;++i){if(s!=null){if(s[a]===i&&r[i]!==1)throw new Error(`Can't squeeze axis ${i} since its dim '${r[i]}' is not 1`);(s[a]==null||s[a]>i)&&r[i]===1&&(t.push(r[i]),o.push(i)),s[a]<=i&&a++}r[i]!==1&&(t.push(r[i]),o.push(i))}return{newShape:t,keptDims:o}}function dw(r,e){return sd(r,e)}function sd(r,e){let t=null;if(r==null||r==="float32")t=new Float32Array(e);else if(r==="int32")t=new Int32Array(e);else if(r==="bool")t=new Uint8Array(e);else if(r==="string")t=new Array(e);else throw new Error(`Unknown data type ${r}`);return t}function fw(r,e){for(let t=0;t<r.length;t++){let o=r[t];if(isNaN(o)||!isFinite(o))throw Error(`A tensor of type ${e} being uploaded contains ${o}.`)}}function hw(r){return r==="bool"||r==="complex64"||r==="float32"||r==="int32"||r==="string"}function lH(r,e){return!(e==="complex64"||e==="float32"&&r!=="complex64"||e==="int32"&&r!=="float32"&&r!=="complex64"||e==="bool"&&r==="bool")}function jp(r){if(r==="float32"||r==="int32")return 4;if(r==="complex64")return 8;if(r==="bool")return 1;throw new Error(`Unknown dtype ${r}`)}function gw(r){if(r==null)return 0;let e=0;return r.forEach(t=>e+=t.length),e}function dn(r){return typeof r=="string"||r instanceof String}function ck(r){return typeof r=="boolean"}function mk(r){return typeof r=="number"}function Bi(r){return Array.isArray(r)?Bi(r[0]):r instanceof Float32Array?"float32":r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray?"int32":mk(r)?"float32":dn(r)?"string":ck(r)?"bool":"float32"}function ra(r){return!!(r&&r.constructor&&r.call&&r.apply)}function Xp(r,e){for(let t=e;t<r;++t)if(r%t===0)return t;return r}function oa(r){let e=r.length;if(e<2)return[];let t=new Array(e-1);t[e-2]=r[e-1];for(let o=e-3;o>=0;--o)t[o]=t[o+1]*r[o+1];return t}function dk(r,e,t,o=!1){let n=new Array;if(e.length===1){let s=e[0]*(o?2:1);for(let a=0;a<s;a++)n[a]=t[r+a]}else{let s=e[0],a=e.slice(1),i=a.reduce((p,u)=>p*u)*(o?2:1);for(let p=0;p<s;p++)n[p]=dk(r+p*i,a,t,o)}return n}function Fu(r,e,t=!1){if(r.length===0)return e[0];let o=r.reduce((n,s)=>n*s)*(t?2:1);if(o===0)return[];if(o!==e.length)throw new Error(`[${r}] does not match the input size ${e.length}${t?" for a complex tensor":""}.`);return dk(0,r,e,t)}function cH(r,e){if(Array.isArray(r))return r;if(e==="float32")return r instanceof Float32Array?r:new Float32Array(r);if(e==="int32")return r instanceof Int32Array?r:new Int32Array(r);if(e==="bool"||e==="string")return Uint8Array.from(new Int32Array(r));throw new Error(`Unknown dtype ${e}`)}function bc(r,e){let t=Yp(r,e);for(let o=0;o<t.length;o++)t[o]=1;return t}function Yp(r,e){if(e==null||e==="float32"||e==="complex64")return new Float32Array(r);if(e==="int32")return new Int32Array(r);if(e==="bool")return new Uint8Array(r);throw new Error(`Unknown data type ${e}`)}function mH(r,e){let t=r.reduce((o,n)=>o*n,1);if(e==null||e==="float32")return Fu(r,new Float32Array(t));if(e==="int32")return Fu(r,new Int32Array(t));if(e==="bool")return Fu(r,new Uint8Array(t));throw new Error(`Unknown data type ${e}`)}function St(r){r.forEach(e=>{$(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${r}].`)})}function dH(r,e,t){if(e===0)return 0;if(e===1)return r[0];let o=r[r.length-1];for(let n=0;n<r.length-1;++n)o+=t[n]*r[n];return o}function fH(r,e,t){if(e===0)return[];if(e===1)return[r];let o=new Array(e);for(let n=0;n<o.length-1;++n)o[n]=Math.floor(r/t[n]),r-=o[n]*t[n];return o[o.length-1]=r,o}function Ou(r){return r&&r.then&&typeof r.then=="function"}var fk="tfjsflags",Cc=class{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=gH,this.populateURLFlags()}setPlatform(e,t){this.platform!=null&&(A().getBool("IS_TEST")||A().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,o){if(this.flagRegistry[e]={evaluationFn:t,setHook:o},this.urlFlags[e]!=null){let n=this.urlFlags[e];A().getBool("IS_TEST")||A().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${n}.`),this.set(e,n)}}async getAsync(e){return e in this.flags?this.flags[e]:(this.flags[e]=await this.evaluateFlag(e),this.flags[e])}get(e){if(e in this.flags)return this.flags[e];let t=this.evaluateFlag(e);if(Ou(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(this.flagRegistry[e]==null)throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,this.flagRegistry[e].setHook!=null&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(this.flagRegistry[e]==null)throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global=="undefined"||typeof this.global.location=="undefined"||typeof this.global.location.search=="undefined")return;let e=this.getQueryParams(this.global.location.search);fk in e&&e[fk].split(",").forEach(o=>{let[n,s]=o.split(":");this.urlFlags[n]=yH(n,s)})}};function gH(r){let e={};return r.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...o)=>(xH(e,o[0],o[1]),o.join("="))),e}function xH(r,e,t){r[decodeURIComponent(e)]=decodeURIComponent(t||"")}function yH(r,e){let t=e.toLowerCase();return t==="true"||t==="false"?t==="true":`${+t}`===t?+t:e}function A(){return xw}var xw=null;function hk(r){xw=r}var yw;function bw(){if(yw==null){let r;if(typeof window!="undefined")r=window;else if(typeof global!="undefined")r=global;else if(typeof process!="undefined")r=process;else if(typeof self!="undefined")r=self;else throw new Error("Could not find a global object");yw=r}return yw}function bH(){let r=bw();return r._tfGlobals==null&&(r._tfGlobals=new Map),r._tfGlobals}function wc(r,e){let t=bH();if(t.has(r))return t.get(r);{let o=e();return t.set(r,o),t.get(r)}}var fn="Abs",hn="Acos",gn="Acosh",Rr="Add",xn="AddN",yn="All",bn="Any",na="ArgMax",sa="ArgMin",Cn="Asin",wn="Asinh",Sn="Atan",In="Atanh",vn="Atan2",kn="AvgPool",zi="AvgPoolGrad",aa="AvgPool3D",Vi="AvgPool3DGrad",Nn="BatchMatMul",ia="BatchToSpaceND",Tn="Bincount",_n="BitwiseAnd",Sme="BroadcastTo",ua="BroadcastArgs",ho="Cast",go="Ceil",Go="ClipByValue",ei="Complex",Wi="ComplexAbs",pa="Concat",En="Conv2D",Ui="Conv2DBackpropFilter",$n="Conv2DBackpropInput",Rn="Conv3D",ti="Conv3DBackpropFilterV2",Dn="Conv3DBackpropInputV2",An="Cos",Fn="Cosh",Pn="Cumprod",On="Cumsum",Mn="CropAndResize",la="DenseBincount",Ln="DepthToSpace",Bn="DepthwiseConv2dNative",Gi="DepthwiseConv2dNativeBackpropFilter",Hi="DepthwiseConv2dNativeBackpropInput",ca="Diag",zn="Dilation2D",Ki="Dilation2DBackpropInput",qi="Dilation2DBackpropFilter",Mu="Draw",Vn="RealDiv",ji="Einsum",Wn="Elu",ri="EluGrad",Un="Erf",xo="Equal",yo="Exp",ma="ExpandDims",bo="Expm1",Xi="FFT",da="Fill",Gn="FlipLeftRight",Co="Floor",wo="FloorDiv",Hn="FusedBatchNorm",fa="GatherV2",Kn="GatherNd",So="Greater",Io="GreaterEqual",vo="Identity",Yi="IFFT",Qi="Imag",qn="IsFinite",jn="IsInf",Xn="IsNan",Yn="LeakyRelu",ko="Less",No="LessEqual",Qn="LinSpace",To="Log",Zn="Log1p",Jn="LogicalAnd",es="LogicalNot",ts="LogicalOr",gk="LogicalXor",Ime="LogSoftmax",vme="LowerBound",rs="LRN",oi="LRNGrad",kme="MatrixBandPart",os="Max",_o="Maximum",ns="MaxPool",Zi="MaxPoolGrad",ha="MaxPool3D",Ji="MaxPool3DGrad",ga="MaxPoolWithArgmax",ss="Mean",as="Min",Eo="Minimum",is="MirrorPad",us="Mod",ps="Multinomial",$o="Multiply",ls="Neg",Ro="NotEqual",cs="NonMaxSuppressionV3",ni="NonMaxSuppressionV4",ms="NonMaxSuppressionV5",xa="OnesLike",ds="OneHot",ya="Pack",fs="PadV2",Nme="Pool",hs="Pow",gs="Prelu",Ho="Prod",Qp="RaggedGather",Zp="RaggedRange",Jp="RaggedTensorToTensor",ba="Range",si="Real",xs="Reciprocal",ys="Relu",Ca="Reshape",bs="ResizeNearestNeighbor",ai="ResizeNearestNeighborGrad",Cs="ResizeBilinear",ii="ResizeBilinearGrad",ws="Relu6",Ss="Reverse",Is="Round",Do="Rsqrt",vs="ScatterNd",ks="TensorScatterUpdate",Ns="SearchSorted",wa="Select",Ts="Selu",_s="Slice",Es="Sin",$s="Sinh",Rs="Sign",Ao="Sigmoid",Ds="Softplus",Fo="Sqrt",As="Sum",Sa="SpaceToBatchND",Ia="SplitV",Fs="Softmax",eu="SparseFillEmptyRows",ui="SparseReshape",va="SparseSegmentMean",ka="SparseSegmentSum",Ps="SparseToDense",Po="SquaredDifference",tu="Square",pi="StaticRegexReplace",Os="StridedSlice",Na="StringNGrams",ru="StringSplit",ou="StringToHashBucketFast",Oo="Sub",Ms="Tan",Ls="Tanh",Mo="Tile",Bs="TopK",zs="Transform",Kr="Transpose",nu="Unique",Ta="Unpack",su="UnsortedSegmentSum",Tme="UpperBound",_a="ZerosLike",Ko="Step",Lu="FromPixels",Vs="RotateWithOffset",qo="_FusedMatMul",jo="FusedConv2D",Xo="FusedDepthwiseConv2D";function Ea(...r){A().getBool("IS_TEST")||A().getBool("PROD")||console.warn(...r)}function CH(...r){A().getBool("IS_TEST")||A().getBool("PROD")||console.log(...r)}var el=wc("kernelRegistry",()=>new Map),Sc=wc("gradRegistry",()=>new Map);function tl(r,e){let t=ww(r,e);return el.get(t)}function Cw(r){return Sc.get(r)}function ad(r){let e=el.entries(),t=[];for(;;){let{done:o,value:n}=e.next();if(o)break;let[s,a]=n,[i]=s.split("_");i===r&&t.push(a)}return t}function li(r){let{kernelName:e,backendName:t}=r,o=ww(e,t);el.has(o)&&Ea(`The kernel '${e}' for backend '${t}' is already registered`),el.set(o,r)}function Dme(r){let{kernelName:e}=r;Sc.has(e)&&A().getBool("DEBUG")&&Ea(`Overriding the gradient for '${e}'`),Sc.set(e,r)}function Ame(r,e){let t=ww(r,e);if(!el.has(t))throw new Error(`The kernel '${r}' for backend '${e}' is not registered`);el.delete(t)}function Fme(r){if(!Sc.has(r))throw new Error(`The gradient '${r}' for backend is not registered`);Sc.delete(r)}function Pme(r,e){ad(r).forEach(o=>{let n=Object.assign({},o,{backendName:e});li(n)})}function ww(r,e){return`${e}_${r}`}var y={};qe(y,{arraysEqual:()=>Sr,arraysEqualWithNull:()=>cw,assert:()=>$,assertNonNegativeIntegerDimensions:()=>St,assertNonNull:()=>fo,assertShapesMatch:()=>yt,bytesFromStringArray:()=>gw,bytesPerElement:()=>jp,checkConversionForErrors:()=>fw,clamp:()=>qp,computeStrides:()=>oa,convertBackendValuesAndArrayBuffer:()=>cH,createScalarValue:()=>TH,createShuffledIndices:()=>iH,decodeString:()=>sl,distSquared:()=>oH,encodeString:()=>iu,fetch:()=>EH,fingerPrint64:()=>NH,flatten:()=>Us,getArrayFromDType:()=>sd,getTypedArrayFromDType:()=>dw,hasEncodingLoss:()=>lH,hexToLong:()=>Ic,indexToLoc:()=>fH,inferDtype:()=>Bi,inferFromImplicitShape:()=>pH,isBoolean:()=>ck,isFunction:()=>ra,isInt:()=>Ja,isNumber:()=>mk,isPromise:()=>Ou,isScalarShape:()=>nH,isString:()=>dn,isTypedArray:()=>Mt,isValidDtype:()=>hw,locToIndex:()=>dH,makeOnesTypedArray:()=>bc,makeZerosNestedTypedArray:()=>mH,makeZerosTypedArray:()=>Yp,nearestDivisor:()=>Xp,nearestLargerEven:()=>eH,now:()=>Uu,parseAxisParam:()=>Li,randUniform:()=>rH,repeatedTry:()=>uH,rightPad:()=>Pu,shuffle:()=>lk,shuffleCombo:()=>J4,sizeFromShape:()=>ze,sizeToSquarishShape:()=>aH,squeezeShape:()=>mw,sum:()=>tH,swap:()=>nd,tanh:()=>sH,toNestedArray:()=>Fu,toTypedArray:()=>nl});function id(r){return r instanceof Float32Array||r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray}var kw=Kp(_k());var Wu=kw.default||kw;function Ic(r){return Wu.fromString(r,!0,16)}var $k=Ic("c3a5c85c97cb3127"),Vu=Ic("b492b66fbe98f273"),Ir=Ic("9ae16a3b2f90404f");function vw(r){return r.xor(r.shru(47))}function Rk(r,e,t){let o=r.slice(e,e+t);return Wu.fromBytes(Array.from(o),!0,!0)}function It(r,e){return Rk(r,e,8)}function Ek(r,e){return Rk(r,e,4)}function Jt(r,e){return e===0?r:r.shru(e).or(r.shl(64-e))}function au(r,e,t=Ic("9ddfea08eb382d69")){let o=r.xor(e).mul(t);o=o.xor(o.shru(47));let n=e.xor(o).mul(t);return n=n.xor(n.shru(47)),n=n.mul(t),n}function SH(r,e,t,o,n,s){n=n.add(r),s=Jt(s.add(n).add(o),21);let a=n;return n=n.add(e),n=n.add(t),s=s.add(Jt(n,44)),[n.add(o),s.add(a)]}function pd(r,e,t,o){return SH(It(r,e),It(r,e+8),It(r,e+16),It(r,e+24),t,o)}function IH(r,e=r.length){if(e>=8){let t=Ir.add(e*2),o=It(r,0).add(Ir),n=It(r,e-8),s=Jt(n,37).mul(t).add(o),a=Jt(o,25).add(n).mul(t);return au(s,a,t)}if(e>=4){let t=Ir.add(e*2),o=Ek(r,0);return au(o.shl(3).add(e),Ek(r,e-4),t)}if(e>0){let t=r[0],o=r[e>>1],n=r[e-1],s=t+(o<<8),a=e+(n<<2);return vw(Ir.mul(s).xor($k.mul(a))).mul(Ir)}return Ir}function vH(r,e=r.length){let t=Ir.add(e*2),o=It(r,0).mul(Vu),n=It(r,8),s=It(r,e-8).mul(t),a=It(r,e-16).mul(Ir);return au(Jt(o.add(n),43).add(Jt(s,30)).add(a),o.add(Jt(n.add(Ir),18)).add(s),t)}function kH(r,e=r.length){let t=Ir.add(e*2),o=It(r,0).mul(Ir),n=It(r,8),s=It(r,e-8).mul(t),a=It(r,e-16).mul(Ir),i=Jt(o.add(n),43).add(Jt(s,30)).add(a),p=au(i,o.add(Jt(n.add(Ir),18)).add(s),t),u=It(r,16).mul(t),l=It(r,24),c=i.add(It(r,e-32)).mul(t),m=p.add(It(r,e-24)).mul(t);return au(Jt(u.add(l),43).add(Jt(c,30)).add(m),u.add(Jt(l.add(o),18)).add(c),t)}function NH(r,e=r.length){let t=Wu.fromNumber(81,!0);if(e<=32)return e<=16?IH(r,e):vH(r,e);if(e<=64)return kH(r,e);let o=t,n=t.mul(Vu).add(113),s=vw(n.mul(Ir).add(113)).mul(Ir),a=[Wu.UZERO,Wu.UZERO],i=[Wu.UZERO,Wu.UZERO];o=o.mul(Ir).add(It(r,0));let p=0,u=(e-1>>6)*64,l=u+(e-1&63)-63;do o=Jt(o.add(n).add(a[0]).add(It(r,p+8)),37).mul(Vu),n=Jt(n.add(a[1]).add(It(r,p+48)),42).mul(Vu),o=o.xor(i[1]),n=n.add(a[0]).add(It(r,p+40)),s=Jt(s.add(i[0]),33).mul(Vu),a=pd(r,p,a[1].mul(Vu),o.add(i[0])),i=pd(r,p+32,s.add(i[1]),n.add(It(r,p+16))),[s,o]=[o,s],p+=64;while(p!==u);let c=Vu.add(s.and(255).shl(1));return p=l,i[0]=i[0].add(e-1&63),a[0]=a[0].add(i[0]),i[0]=i[0].add(a[0]),o=Jt(o.add(n).add(a[0]).add(It(r,p+8)),37).mul(c),n=Jt(n.add(a[1]).add(It(r,p+48)),42).mul(c),o=o.xor(i[1].mul(9)),n=n.add(a[0].mul(9).add(It(r,p+40))),s=Jt(s.add(i[0]),33).mul(c),a=pd(r,p,a[1].mul(c),o.add(i[0])),i=pd(r,p+32,s.add(i[1]),n.add(It(r,p+16))),[s,o]=[o,s],au(au(a[0],i[0],c).add(vw(n).mul($k)).add(s),au(a[1],i[1],c).add(o),c)}function TH(r,e){return e==="string"?iu(r):nl([r],e)}function _H(r,e){return r instanceof Float32Array&&e==="float32"||r instanceof Int32Array&&e==="int32"||r instanceof Uint8Array&&e==="bool"}function nl(r,e){if(e==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(r)&&(r=Us(r)),A().getBool("DEBUG")&&fw(r,e),_H(r,e))return r;if(e==null||e==="float32"||e==="complex64")return new Float32Array(r);if(e==="int32")return new Int32Array(r);if(e==="bool"){let t=new Uint8Array(r.length);for(let o=0;o<t.length;++o)Math.round(r[o])!==0&&(t[o]=1);return t}else throw new Error(`Unknown data type ${e}`)}function Uu(){return A().platform.now()}function EH(r,e){return A().platform.fetch(r,e)}function iu(r,e="utf-8"){return e=e||"utf-8",A().platform.encode(r,e)}function sl(r,e="utf-8"){return e=e||"utf-8",A().platform.decode(r,e)}function Mt(r){return A().platform.isTypedArray!=null?A().platform.isTypedArray(r):id(r)}function Us(r,e=[],t=!1){if(e==null&&(e=[]),typeof r=="boolean"||typeof r=="number"||typeof r=="string"||Ou(r)||r==null||Mt(r)&&t)e.push(r);else if(Array.isArray(r)||Mt(r))for(let o=0;o<r.length;++o)Us(r[o],e,t);else{let o=-1;for(let n of Object.keys(r))/^([1-9]+[0-9]*|0)$/.test(n)&&(o=Math.max(o,Number(n)));for(let n=0;n<=o;n++)Us(r[n],e,t)}return e}var ld=class{constructor(e,t){this.backendTimer=e,this.logger=t,t==null&&(this.logger=new Nw)}profileKernel(e,t,o){let n,s=()=>{n=o()},a,i=Uu();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(let u of n)u.dataSync();a=Promise.resolve({kernelMs:Uu()-i})}if(A().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<n.length;u++){let l=n[u];l.data().then(c=>{$H(c,l.dtype,e)})}return{kernelName:e,outputs:n,inputs:t,timeMs:a.then(u=>u.kernelMs),extraInfo:a.then(u=>u.getExtraProfileInfo!=null?u.getExtraProfileInfo():"")}}logKernelProfile(e){let{kernelName:t,outputs:o,timeMs:n,inputs:s,extraInfo:a}=e;o.forEach(i=>{Promise.all([i.data(),n,a]).then(p=>{this.logger.logKernelProfile(t,i,p[0],p[1],s,p[2])})})}};function $H(r,e,t){if(e!=="float32")return!1;for(let o=0;o<r.length;o++){let n=r[o];if(isNaN(n)||!isFinite(n))return console.warn(`Found ${n} in the result of '${t}'`),!0}return!1}var Nw=class{logKernelProfile(e,t,o,n,s,a){let i=typeof n=="number"?Pu(`${n}ms`,9):n.error,p=Pu(e,25),u=t.rank,l=t.size,c=Pu(t.shape.toString(),14),m="";for(let d in s){let f=s[d];if(f!=null){let h=f.shape||t.shape,g=h.length;m+=`${d}: ${g}D ${g>0?h:""} `}}console.log(`%c${p}	%c${i}	%c${u}D ${c}	%c${l}	%c${m}	%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}};function Dk(r,e,t){let o={},n={};for(let p=0;p<e.length;p++)o[e[p].id]=!0;for(let p=0;p<r.length;p++){let u=r[p],l=u.inputs;for(let c in l){let m=l[c],d=!1;for(let f=0;f<e.length;f++)if(o[m.id]){u.outputs.forEach(h=>o[h.id]=!0),d=!0,n[u.id]=!0;break}if(d)break}}let s={};s[t.id]=!0;let a={};for(let p=r.length-1;p>=0;p--){let u=r[p],l=u.inputs;for(let c=0;c<u.outputs.length;c++)if(s[u.outputs[c].id]){for(let m in l)s[l[m].id]=!0,a[u.id]=!0;break}}let i=[];for(let p=0;p<r.length;p++){let u=r[p];if(n[u.id]&&a[u.id]){let l={};for(let m in u.inputs){let d=u.inputs[m];o[d.id]&&(l[m]=d)}let c=Object.assign({},u);c.inputs=l,c.outputs=u.outputs,i.push(c)}}return i}function Ak(r,e,t,o){for(let n=e.length-1;n>=0;n--){let s=e[n],a=[];if(s.outputs.forEach(p=>{let u=r[p.id];u!=null?a.push(u):a.push(null)}),s.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);let i=s.gradient(a);for(let p in s.inputs){if(!(p in i))throw new Error(`Cannot backprop through input ${p}. Available gradients found: ${Object.keys(i)}.`);let u=t(()=>i[p]());if(u.dtype!=="float32")throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${p} must have 'float32' dtype, but has '${u.dtype}'`);let l=s.inputs[p];if(!Sr(u.shape,l.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${p}' has shape '${u.shape}', which does not match the shape of the input '${l.shape}'`);if(r[l.id]==null)r[l.id]=u;else{let c=r[l.id];r[l.id]=o(c,u),c.dispose()}}}}var Fk=20,vc=3,Tw=7;function Pk(r,e,t,o){let n=oa(e),s=RH(r,e,t,n),a=e.length,i=cd(r,e,t,n,s),p=["Tensor"];return o&&(p.push(`  dtype: ${t}`),p.push(`  rank: ${a}`),p.push(`  shape: [${e}]`),p.push("  values:")),p.push(i.map(u=>"    "+u).join(`
`)),p.join(`
`)}function RH(r,e,t,o){let n=ze(e),s=o[o.length-1],a=new Array(s).fill(0),i=e.length,p=t==="complex64"?Nc(r):r;if(i>1)for(let u=0;u<n/s;u++){let l=u*s;for(let c=0;c<s;c++)a[c]=Math.max(a[c],kc(p[l+c],0,t).length)}return a}function kc(r,e,t){let o;return Array.isArray(r)?o=`${parseFloat(r[0].toFixed(Tw))} + ${parseFloat(r[1].toFixed(Tw))}j`:dn(r)?o=`'${r}'`:t==="bool"?o=Ok(r):o=parseFloat(r.toFixed(Tw)).toString(),Pu(o,e)}function Ok(r){return r===0?"false":"true"}function cd(r,e,t,o,n,s=!0){let a=t==="complex64"?2:1,i=e[0],p=e.length;if(p===0){if(t==="complex64"){let h=Nc(r);return[kc(h[0],0,t)]}return t==="bool"?[Ok(r[0])]:[r[0].toString()]}if(p===1){if(i>Fk){let g=vc*a,x=Array.from(r.slice(0,g)),b=Array.from(r.slice((i-vc)*a,i*a));return t==="complex64"&&(x=Nc(x),b=Nc(b)),["["+x.map((w,S)=>kc(w,n[S],t)).join(", ")+", ..., "+b.map((w,S)=>kc(w,n[i-vc+S],t)).join(", ")+"]"]}return["["+(t==="complex64"?Nc(r):Array.from(r)).map((g,x)=>kc(g,n[x],t)).join(", ")+"]"]}let u=e.slice(1),l=o.slice(1),c=o[0]*a,m=[];if(i>Fk){for(let h=0;h<vc;h++){let g=h*c,x=g+c;m.push(...cd(r.slice(g,x),u,t,l,n,!1))}m.push("...");for(let h=i-vc;h<i;h++){let g=h*c,x=g+c;m.push(...cd(r.slice(g,x),u,t,l,n,h===i-1))}}else for(let h=0;h<i;h++){let g=h*c,x=g+c;m.push(...cd(r.slice(g,x),u,t,l,n,h===i-1))}let d=p===2?",":"";m[0]="["+(i>0?m[0]+d:"");for(let h=1;h<m.length-1;h++)m[h]=" "+m[h]+d;let f=`,
`;for(let h=2;h<p;h++)f+=`
`;return m[m.length-1]=" "+m[m.length-1]+"]"+(s?"":f),m}function Nc(r){let e=[];for(let t=0;t<r.length;t+=2)e.push([r[t],r[t+1]]);return e}var Ge=class{constructor(e,t,o){if(this.dtype=t,this.shape=e.slice(),this.size=ze(e),o!=null){let n=o.length;$(n===this.size,()=>`Length of values '${n}' does not match the size inferred by the shape '${this.size}'.`)}if(t==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=o||sd(t,this.size),this.strides=oa(e)}set(e,...t){t.length===0&&(t=[0]),$(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);let o=this.locToIndex(t);this.values[o]=e}get(...e){e.length===0&&(e=[0]);let t=0;for(let n of e){if(n<0||n>=this.shape[t]){let s=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(s)}t++}let o=e[e.length-1];for(let n=0;n<e.length-1;++n)o+=this.strides[n]*e[n];return this.values[o]}locToIndex(e){if(this.rank===0)return 0;if(this.rank===1)return e[0];let t=e[e.length-1];for(let o=0;o<e.length-1;++o)t+=this.strides[o]*e[o];return t}indexToLoc(e){if(this.rank===0)return[];if(this.rank===1)return[e];let t=new Array(this.shape.length);for(let o=0;o<t.length-1;++o)t[o]=Math.floor(e/this.strides[o]),e-=t[o]*this.strides[o];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Gs().makeTensor(this.values,this.shape,this.dtype)}},Gs=null,al=null,DH=null;function Mk(r){Gs=r}function Lk(r){al=r}function Bk(r){DH=r}var dt=class{constructor(e,t,o,n){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=ze(e),this.strides=oa(e),this.dataId=o,this.id=n,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){let e=await this.data();return al.buffer(this.shape,this.dtype,e)}bufferSync(){return al.buffer(this.shape,this.dtype,this.dataSync())}async array(){let e=await this.data();return Fu(this.shape,e,this.dtype==="complex64")}arraySync(){return Fu(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();let e=Gs().read(this.dataId);if(this.dtype==="string"){let t=await e;try{return t.map(o=>sl(o))}catch(o){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Gs().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();let e=Gs().readSync(this.dataId);if(this.dtype==="string")try{return e.map(t=>sl(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();let e=await Gs().read(this.dataId);return this.dtype==="string"?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),Gs().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return al.print(this,e)}clone(){return this.throwIfDisposed(),al.clone(this)}toString(e=!1){let t=this.dataSync();return Pk(t,this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),al.cast(this,e)}variable(e=!0,t,o){return this.throwIfDisposed(),Gs().makeVariable(this,e,t,o)}};Object.defineProperty(dt,Symbol.hasInstance,{value:r=>!!r&&r.data!=null&&r.dataSync!=null&&r.throwIfDisposed!=null});function _w(){return wc("Tensor",()=>dt)}_w();var ci=class extends dt{constructor(e,t,o,n){super(e.shape,e.dtype,e.dataId,n),this.trainable=t,this.name=o}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!Sr(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Gs().disposeTensor(this),this.dataId=e.dataId,Gs().incRef(this,null)}dispose(){Gs().disposeVariable(this),this.isDisposedInternal=!0}};Object.defineProperty(ci,Symbol.hasInstance,{value:r=>r instanceof dt&&r.assign!=null&&r.assign instanceof Function});var Vk={};qe(Vk,{assertTypesMatch:()=>Fw,getTensorsInContainer:()=>Tc,isTensorInList:()=>FH,makeTypesMatch:()=>Oe});var Ew;(function(r){r.R0="R0",r.R1="R1",r.R2="R2",r.R3="R3",r.R4="R4",r.R5="R5",r.R6="R6"})(Ew||(Ew={}));var $w;(function(r){r.float32="float32",r.int32="int32",r.bool="int32",r.complex64="complex64"})($w||($w={}));var Rw;(function(r){r.float32="float32",r.int32="int32",r.bool="bool",r.complex64="complex64"})(Rw||(Rw={}));var Dw;(function(r){r.float32="float32",r.int32="float32",r.bool="float32",r.complex64="complex64"})(Dw||(Dw={}));var Aw;(function(r){r.float32="complex64",r.int32="complex64",r.bool="complex64",r.complex64="complex64"})(Aw||(Aw={}));var AH={float32:Dw,int32:$w,bool:Rw,complex64:Aw};function pt(r,e){if(r==="string"||e==="string"){if(r==="string"&&e==="string")return"string";throw new Error(`Can not upcast ${r} with ${e}`)}return AH[r][e]}function mi(r){return pt(r,"int32")}function md(r){return r!=null&&typeof r=="object"&&"texture"in r&&r.texture instanceof WebGLTexture}function dd(r){return typeof GPUBuffer!="undefined"&&r!=null&&typeof r=="object"&&"buffer"in r&&r.buffer instanceof GPUBuffer}function Oe(r,e){if(r.dtype===e.dtype)return[r,e];let t=pt(r.dtype,e.dtype);return[r.cast(t),e.cast(t)]}function Fw(r,e){$(r.dtype===e.dtype,()=>`The dtypes of the first(${r.dtype}) and second(${e.dtype}) input must match`)}function FH(r,e){return e.some(t=>t.id===r.id)}function Tc(r){let e=[];return zk(r,e,new Set),e}function zk(r,e,t){if(r==null)return;if(r instanceof dt){e.push(r);return}if(!PH(r))return;let o=r;for(let n in o){let s=o[n];t.has(s)||(t.add(s),zk(s,e,t))}}function PH(r){return Array.isArray(r)||typeof r=="object"}function Pw(r){return r.kernelName!=null}var fd=class{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(let e in this.registeredVariables)this.registeredVariables[e].dispose()}},_c=class r{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new fd}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let o=e[t];if(await this.initializeBackend(o).success){await this.setBackend(o);return}}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){let{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry))if(e in this.registryFactory){let{asyncInit:t}=this.initializeBackend(e);if(t)return null}else return null;return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,o=1){return e in this.registryFactory?(Ea(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:o},!0)}async setBackend(e){if(this.registryFactory[e]==null)throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,this.registry[e]==null){this.backendInstance=null;let{success:t,asyncInit:o}=this.initializeBackend(e);if(!(o?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new ld(this.backendInstance),!0}setupRegisteredKernels(){ad(this.backendName).forEach(t=>{t.setupFunc!=null&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){ad(e).forEach(o=>{o.disposeFunc!=null&&o.disposeFunc(this.registry[e])})}initializeBackend(e){let t=this.registryFactory[e];if(t==null)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{let o=t.factory();if(o&&!(o instanceof mo)&&typeof o.then=="function"){let n=++this.pendingBackendInitId,s=o.then(a=>n<this.pendingBackendInitId?!1:(this.registry[e]=a,this.pendingBackendInit=null,!0)).catch(a=>(n<this.pendingBackendInitId||(this.pendingBackendInit=null,Ea(`Initialization of backend ${e} failed`),Ea(a.stack||a.message)),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}else return this.registry[e]=o,{success:!0,asyncInit:!1}}catch(o){return Ea(`Initialization of backend ${e} failed`),Ea(o.stack||o.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let o=e[t],{success:n,asyncInit:s}=this.initializeBackend(o);if(s||n)return{name:o,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){let o=this.state.tensorInfo.get(t),n=o.backend,s=this.readSync(t),a=n.refCount(t);n.disposeData(t,!0),o.backend=e,e.move(t,s,o.shape,o.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let o=null;if(t==null){if(typeof e!="function")throw new Error("Please provide a function to tidy()");t=e}else{if(typeof e!="string"&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof t!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=e}let n;return this.scopedRun(()=>this.startScope(o),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,o){e();try{let n=o();return t(),n}catch(n){throw t(),n}}nextTensorId(){return r.nextTensorId++}nextVariableId(){return r.nextVariableId++}clone(e){let t=_.runKernel(vo,{x:e}),o={x:e},n=a=>({x:()=>{let i="float32",p={x:a},u={dtype:i};return _.runKernel(ho,p,u)}}),s=[];return this.addTapeNode(this.state.activeScope.name,o,[t],n,s,{}),t}runKernel(e,t,o){if(this.backendName==null&&this.backend,!(tl(e,this.backendName)!=null))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:o})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,o){let n=this.backend.numDataIds(),s=0;o.forEach(p=>{s+=p.dtype==="complex64"?3:1});let a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=n-t-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,o=[],n=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);let i;this.backendName==null&&this.backend;let p,u=Pw(e)?e.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(Pw(e)){let{kernelName:f,inputs:h,attrs:g}=e;this.backendName==null&&this.backend;let x=tl(f,this.backendName);$(x!=null,()=>`Cannot find registered kernel '${f}' for backend '${this.backendName}'`),i=()=>{let b=this.backend.numDataIds();p=x.kernelFunc({inputs:h,attrs:g,backend:this.backend});let w=Array.isArray(p)?p:[p];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(f,b,w);let S=w.map(k=>k.rank!=null?k:this.makeTensorFromTensorInfo(k));if(n){let k=this.getTensorsForGradient(f,h,S);o=this.saveTensorsForBackwardMode(k)}return S}}else{let{forwardFunc:f}=e,h=g=>{n&&(o=g.map(x=>this.keep(this.clone(x))))};i=()=>{let g=this.backend.numDataIds();p=this.tidy(()=>f(this.backend,h));let x=Array.isArray(p)?p:[p];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,g,x),x}}let{inputs:l,attrs:c}=e,m=Pw(e)?null:e.backwardsFunc,d;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{!this.ENV.getBool("DEBUG")&&!this.state.profiling?t=i():(d=this.profiler.profileKernel(u,l,()=>i()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs)}),n&&this.addTapeNode(u,l,t,m,o,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map(f=>l[f]!=null?l[f].shape:null),outputShapes:t.map(f=>f.shape),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(p)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(o=>this.keep(this.clone(o)))}getTensorsForGradient(e,t,o){let n=Cw(e);if(n!=null){let s=n.inputsToSave||[],a=n.outputsToSave||[],i;n.saveAllInputs?($(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),i=Object.keys(t).map(u=>t[u])):i=s.map(u=>t[u]);let p=o.filter((u,l)=>a[l]);return i.concat(p)}return[]}makeTensor(e,t,o,n){if(e==null)throw new Error("Values passed to engine.makeTensor() are null");o=o||"float32",n=n||this.backend;let s=e;o==="string"&&dn(e[0])&&(s=e.map(p=>iu(p)));let a=n.write(s,t,o),i=new dt(t,o,a,this.nextTensorId());if(this.trackTensor(i,n),o==="string"){let p=this.state.tensorInfo.get(a),u=gw(s);this.state.numBytes+=u-p.bytes,p.bytes=u}return i}makeTensorFromDataId(e,t,o,n){o=o||"float32";let s={dataId:e,shape:t,dtype:o};return this.makeTensorFromTensorInfo(s,n)}makeTensorFromTensorInfo(e,t){let{dataId:o,shape:n,dtype:s}=e,a=new dt(n,s,o,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,o,n){o=o||this.nextVariableId().toString(),n!=null&&n!==e.dtype&&(e=e.cast(n));let s=new ci(e,t,o,this.nextTensorId());if(this.state.registeredVariables[s.name]!=null)throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,e.dtype==="string"&&this.state.numStringTensors++;let o=0;e.dtype!=="complex64"&&e.dtype!=="string"&&(o=e.size*jp(e.dtype)),this.state.numBytes+=o,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:o})),e instanceof ci||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;let t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,e.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),e.dtype!=="complex64"&&e.dtype!=="string"){let o=e.size*jp(e.dtype);this.state.numBytes-=o}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(let e in this.state.registeredVariables){let t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),this.state.registeredVariables[e.name]!=null&&delete this.state.registeredVariables[e.name]}memory(){let e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,e.reasons==null&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;let t=this.state.numBytes,o=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(n=>n.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-o;for(let n of this.state.activeProfile.kernels)n.kernelTimeMs=await n.kernelTimeMs,n.extraInfo=await n.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(e,t,o,n,s,a){let i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:o,saved:s},p=Cw(e);p!=null&&(n=p.gradFunc),n!=null&&(i.gradient=u=>(u=u.map((l,c)=>{if(l==null){let m=o[c],d=Yp(m.size,m.dtype);return this.makeTensor(d,m.shape,m.dtype)}return l}),n(u.length>1?u:u[0],s,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){let t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){let t=Tc(e),o=new Set(t.map(s=>s.id));for(let s=0;s<this.state.activeScope.track.length;s++){let a=this.state.activeScope.track[s];!a.kept&&!o.has(a.id)&&a.dispose()}let n=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(s=>{!s.kept&&s.scopeId===n.id&&this.track(s)})}gradients(e,t,o,n=!1){if($(t.length>0,()=>"gradients() received an empty list of xs."),o!=null&&o.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${o.dtype}'`);let s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));$(s instanceof dt,()=>"The result y returned by f() must be a tensor.");let a=Dk(this.state.activeTape,t,s);if(!n&&a.length===0&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{let i={};i[s.id]=o==null?OH(s.shape):o,Ak(i,a,u=>this.tidy(u),MH);let p=t.map(u=>i[u.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(u=>{for(let l of u.saved)l.dispose()}),this.state.activeTape=null),{value:s,grads:p}})}customGrad(e){return $(ra(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{$(t.every(i=>i instanceof dt),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let o,n={};t.forEach((i,p)=>{n[p]=i});let s=(i,p)=>(o=e(...t,p),$(o.value instanceof dt,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),$(ra(o.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),o.value),a=(i,p)=>{let u=o.gradFunc(i,p),l=Array.isArray(u)?u:[u];$(l.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),$(l.every(m=>m instanceof dt),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");let c={};return l.forEach((m,d)=>{c[d]=()=>m}),c};return this.runKernelFunc({forwardFunc:s,backwardsFunc:a,inputs:n})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){let t=Uu(),o=await this.backend.time(e);return o.wallMs=Uu()-t,o}track(e){return this.state.activeScope!=null&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new fd;for(let e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}};_c.nextTensorId=0;_c.nextVariableId=0;function OH(r){let e=bc(ze(r),"float32");return _.makeTensor(e,r,"float32")}function Ow(){let r=bw();if(r._tfengine==null){let e=new Cc(r);r._tfengine=new _c(e)}return hk(r._tfengine.ENV),Mk(()=>r._tfengine),r._tfengine}var _=Ow();function MH(r,e){let t={a:r,b:e};return _.runKernel(Rr,t)}var uu={};qe(uu,{isBrowser:()=>Lw,isMobile:()=>zH,mockIsMobile:()=>BH});function LH(){return typeof navigator!="undefined"&&navigator!=null}var Mw;function BH(r){Mw=r}function zH(r){if(Mw!==void 0)return Mw;if(r||LH()){if(r||(r=navigator),r.product==="ReactNative")return!0;let e=r.userAgent||r.vendor||(typeof window!="undefined"?window.opera:"");if(!e){let t=r;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function Lw(){return typeof window!="undefined"&&window.document!=null||typeof WorkerGlobalScope!="undefined"}var Dr=A();Dr.registerFlag("DEBUG",()=>!1,r=>{r&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")});Dr.registerFlag("IS_BROWSER",()=>Lw());Dr.registerFlag("IS_NODE",()=>typeof process!="undefined"&&typeof process.versions!="undefined"&&typeof process.versions.node!="undefined");Dr.registerFlag("IS_CHROME",()=>typeof navigator!="undefined"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor));Dr.registerFlag("IS_SAFARI",()=>typeof navigator!="undefined"&&navigator!=null&&navigator.userAgent!=null&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor));Dr.registerFlag("PROD",()=>!1);Dr.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Dr.getBool("DEBUG"));Dr.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0);Dr.registerFlag("IS_TEST",()=>!1);Dr.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>Dr.getBool("DEBUG"));Dr.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1);Dr.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1);Dr.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);function ur(r,e){let t=r;if(Mt(r))return e==="string"?[]:[r.length];if(md(r)){let n=r.channels||"RGBA";return[r.height,r.width*n.length]}else if(dd(r))return[r.buffer.size/(e==null?4:jp(e))];if(!Array.isArray(r))return[];let o=[];for(;Array.isArray(t)||Mt(t)&&e!=="string";)o.push(t.length),t=t[0];return Array.isArray(r)&&A().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Uk(r,o,[]),o}function Uk(r,e,t){if(t=t||[],!Array.isArray(r)&&!Mt(r)){$(e.length===0,()=>`Element arr[${t.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`);return}$(e.length>0,()=>`Element arr[${t.join("][")}] should be a primitive, but is an array of ${r.length} elements`),$(r.length===e[0],()=>`Element arr[${t.join("][")}] should have ${e[0]} elements, but has ${r.length} elements`);let o=e.slice(1);for(let n=0;n<r.length;++n)Uk(r[n],o,t.concat(n))}function Wk(r,e,t,o){if(r!=="string_or_numeric"){if(r==null)throw new Error("Expected dtype cannot be null.");if(r!=="numeric"&&r!==e||r==="numeric"&&e==="string")throw new Error(`Argument '${t}' passed to '${o}' must be ${r} tensor, but got ${e} tensor`)}}function v(r,e,t,o="numeric"){if(r instanceof _w())return Wk(o,r.dtype,e,t),r;let n=Bi(r);if(n!=="string"&&["bool","int32","float32"].indexOf(o)>=0&&(n=o),Wk(o,n,e,t),r==null||!Mt(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string"){let p=r==null?"null":r.constructor.name;throw new Error(`Argument '${e}' passed to '${t}' must be a Tensor or TensorLike, but got '${p}'`)}let s=ur(r,n);!Mt(r)&&!Array.isArray(r)&&(r=[r]);let i=n!=="string"?nl(r,n):Us(r,[],!0);return _.makeTensor(i,s,n)}function di(r,e,t,o="numeric"){if(!Array.isArray(r))throw new Error(`Argument ${e} passed to ${t} must be a \`Tensor[]\` or \`TensorLike[]\``);return r.map((s,a)=>v(s,`${e}[${a}]`,t,o))}var Bw="__op";function N(r){let e=Object.keys(r);if(e.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);let t=e[0],o=r[t];t.endsWith("_")&&(t=t.substring(0,t.length-1)),t=t+Bw;let n=(...s)=>{_.startScope(t);try{let a=o(...s);return Ou(a)&&console.error("Cannot return a Promise inside of tidy."),_.endScope(a),a}catch(a){throw _.endScope(null),a}};return Object.defineProperty(n,"name",{value:t,configurable:!0}),n}function VH(r,e){let t=v(r,"real","complex"),o=v(e,"imag","complex");yt(t.shape,o.shape,`real and imag shapes, ${t.shape} and ${o.shape}, must match in call to tf.complex().`);let n={real:t,imag:o};return _.runKernel(ei,n)}var Ar=N({complex_:VH});function vr(r,e,t,o){if(o==null)o=Bi(r);else if(o==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(dd(r)||md(r)){if(o!=="float32"&&o!=="int32")throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${o}.`);return _.backend.createTensorFromGPUData(r,e||t,o)}if(!Mt(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(e!=null){St(e);let n=ze(e),s=ze(t);$(n===s,()=>`Based on the provided shape, [${e}], the tensor should have ${n} values but has ${s}`);for(let a=0;a<t.length;++a){let i=t[a],p=a===t.length-1?i!==ze(e.slice(a)):!0;$(t[a]===e[a]||!p,()=>`Error creating a new Tensor. Inferred shape (${t}) does not match the provided shape (${e}). `)}}return!Mt(r)&&!Array.isArray(r)&&(r=[r]),e=e||t,r=o!=="string"?nl(r,o):Us(r,[],!0),_.makeTensor(r,e,o)}function pr(r,e,t){let o=ur(r,t);return vr(r,e,o,t)}var fi={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var lr=class r{static join(e){return new r(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,e==null||(e instanceof Array||(e=[e]),e=e.map(o=>Mt(o)?o.buffer:o),e.length===0))return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let o=0;o<e.length;o++){let n=e[o];o!==e.length-1&&n.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);let s=t+n.byteLength;this.shards.push({buffer:n,start:t,end:s}),t=s}this.shards.length===0&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(this.shards.length===0)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),t=Math.min(this.byteLength,t),t<=e)return new ArrayBuffer(0);let o=this.findShardForByte(e);if(o===-1)throw new Error(`Could not find start shard for byte ${e}`);let n=t-e,s=new ArrayBuffer(n),a=new Uint8Array(s),i=0;for(let p=o;p<this.shards.length;p++){let u=this.shards[p],c=e+i-u.start,m=i,f=Math.min(t,u.end)-u.start,h=new Uint8Array(u.buffer,c,f-c);if(a.set(h,m),i+=h.length,t<u.end)break}return s}findShardForByte(e){if(this.shards.length===0||e<0||e>=this.byteLength)return-1;if(this.bufferUniformSize!=null)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(n){return e<n.start?-1:e>=n.end?1:0}if(t(this.shards[this.previousShardIndex])===0)return this.previousShardIndex;let o=WH(this.shards,t);return o===-1?-1:(this.previousShardIndex=o,this.previousShardIndex)}};function WH(r,e){let t=0,o=r.length;for(;t<=o;){let n=Math.floor((o-t)/2)+t,s=e(r[n]);if(s===0)return n;s<0?o=n:t=n+1}return-1}function Gde(){A().set("PROD",!0)}function Hde(){A().set("DEBUG",!0)}function Kde(){A().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function zw(r){A().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(r+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}Bk(zw);function qde(){_.disposeVariables()}function cr(){return _}function jde(){return _.memory()}function Xde(r){return _.profile(r)}function De(r,e){return _.tidy(r,e)}function Lt(r){Tc(r).forEach(t=>t.dispose())}function Fr(r){return _.keep(r)}function Yde(r){return _.time(r)}function Qde(r){return _.setBackend(r)}function Zde(){return _.ready()}function Gk(){return _.backendName}function Jde(r){_.removeBackend(r)}function efe(r){return _.findBackend(r)}function tfe(r){return _.findBackendFactory(r)}function pu(r,e,t=1){return _.registerBackend(r,e,t)}function Hk(){return _.backend}function rfe(r,e){A().setPlatform(r,e)}var lu=4;async function jk(r,e){let t=[],o=[],n=Array.isArray(r)?r.map(a=>a.name):Object.keys(r);for(let a=0;a<n.length;++a){let i=n[a],p=Array.isArray(r)?r[a].tensor:r[i];if(p.dtype!=="float32"&&p.dtype!=="int32"&&p.dtype!=="bool"&&p.dtype!=="string"&&p.dtype!=="complex64")throw new Error(`Unsupported dtype in weight '${i}': ${p.dtype}`);let u={name:i,shape:p.shape,dtype:p.dtype};if(p.dtype==="string"){let l=new Promise(async c=>{let m=await p.bytes(),d=m.reduce((g,x)=>g+x.length,0)+lu*m.length,f=new Uint8Array(d),h=0;for(let g=0;g<m.length;g++){let x=m[g],b=new Uint8Array(new Uint32Array([x.length]).buffer);f.set(b,h),h+=lu,f.set(x,h),h+=x.length}c(f)});o.push(l)}else o.push(p.data());e!=null&&(u.group=e),t.push(u)}let s=await Promise.all(o);return{data:HH(s),specs:t}}function hd(r,e){let t=new lr(r),o={},n=0;for(let s of e){let a=UH(s,(i,p)=>t.slice(n+i,n+p));o[s.name]=Xk(s,t.slice(n,n+a)),n+=a}return o}function UH(r,e){let t=ze(r.shape),o;if("quantization"in r){let n=r.quantization;o=fi[n.dtype]}else if(r.dtype==="string"){let n=0;for(let s=0;s<t;s++)n+=lu+new Uint32Array(e(n,n+lu))[0];return n}else o=fi[r.dtype];return t*o}async function GH(r,e){let t=ze(r.shape),o;if("quantization"in r){let n=r.quantization;o=fi[n.dtype]}else if(r.dtype==="string"){let n=0;for(let s=0;s<t;s++)n+=lu+new Uint32Array(await e(n,n+lu))[0];return n}else o=fi[r.dtype];return t*o}function Xk(r,e){let t=r.name,o=r.dtype,n=r.shape,s=ze(n),a,i=0;if("quantization"in r){let p=r.quantization;if(p.dtype==="uint8"||p.dtype==="uint16"){if(!("min"in p&&"scale"in p))throw new Error(`Weight ${r.name} with quantization ${p.dtype} doesn't have corresponding metadata min and scale.`)}else if(p.dtype==="float16"){if(o!=="float32")throw new Error(`Weight ${r.name} is quantized with ${p.dtype} which only supports weights of type float32 not ${o}.`)}else throw new Error(`Weight ${r.name} has unknown quantization dtype ${p.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);let u=fi[p.dtype],l=p.dtype==="uint8"?new Uint8Array(e):new Uint16Array(e);if(o==="float32")if(p.dtype==="uint8"||p.dtype==="uint16"){a=new Float32Array(l.length);for(let c=0;c<l.length;c++){let m=l[c];a[c]=m*p.scale+p.min}}else if(p.dtype==="float16")a=XH()(l);else throw new Error(`Unsupported quantization type ${p.dtype} for weight type float32.`);else if(o==="int32"){if(p.dtype!=="uint8"&&p.dtype!=="uint16")throw new Error(`Unsupported quantization type ${p.dtype} for weight type int32.`);a=new Int32Array(l.length);for(let c=0;c<l.length;c++){let m=l[c];a[c]=Math.round(m*p.scale+p.min)}}else throw new Error(`Unsupported dtype in weight '${t}': ${o}`);i+=s*u}else if(o==="string"){let p=ze(r.shape);a=[];for(let u=0;u<p;u++){let l=new Uint32Array(e.slice(i,i+lu))[0];i+=lu;let c=new Uint8Array(e.slice(i,i+l));a.push(c),i+=l}}else{let p=fi[o];if(o==="float32")a=new Float32Array(e);else if(o==="int32")a=new Int32Array(e);else if(o==="bool")a=new Uint8Array(e);else if(o==="complex64"){a=new Float32Array(e);let u=new Float32Array(a.length/2),l=new Float32Array(a.length/2);for(let f=0;f<u.length;f++)u[f]=a[f*2],l[f]=a[f*2+1];let c=pr(u,n,"float32"),m=pr(l,n,"float32"),d=Ar(c,m);return c.dispose(),m.dispose(),d}else throw new Error(`Unsupported dtype in weight '${t}': ${o}`);i+=s*p}return pr(a,n,o)}async function Kk(r,e,t){let o=new Uint8Array(e);for(;o.byteLength<t;){let{done:n,value:s}=await r.read();if(n&&s==null){let i=t-o.byteLength;throw new Error(`Reader is done but ${i} bytes are still expected`)}let a=new Uint8Array(o.length+s.byteLength);a.set(o,0),a.set(new Uint8Array(s),o.length),o=a}return o.buffer}async function gd(r,e){let t={},o=r.getReader(),n=new ArrayBuffer(0);for(let s of e){let a=await GH(s,async(u,l)=>(n=await Kk(o,n,l),n.slice(u,l)));n=await Kk(o,n,a);let i=n.slice(0,a);n=n.slice(a);let p=Xk(s,i);if(t[s.name]=p,Gk()==="webgpu"){let u=Hk();"uploadToGPU"in u&&ze(p.shape)>=A().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD")&&u.uploadToGPU(p.dataId)}}return t}function HH(r){if(r===null)throw new Error(`Invalid input value: ${JSON.stringify(r)}`);let e=0,t=[];r.forEach(s=>{if(e+=s.byteLength,t.push(s.byteLength===s.buffer.byteLength?s:new s.constructor(s)),!(s instanceof Float32Array||s instanceof Int32Array||s instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`)});let o=new Uint8Array(e),n=0;return t.forEach(s=>{o.set(new Uint8Array(s.buffer),n),n+=s.byteLength}),o.buffer}var Vw=typeof Buffer!="undefined"&&(typeof Blob=="undefined"||typeof atob=="undefined"||typeof btoa=="undefined");function qk(r){return Vw?Buffer.byteLength(r,"utf8"):new Blob([r]).size}function Yk(r){if(Vw)return Buffer.from(r).toString("base64");let e=new Uint8Array(r),t="";for(let o=0,n=e.length;o<n;o++)t+=String.fromCharCode(e[o]);return btoa(t)}function Qk(r){if(Vw){let o=Buffer.from(r,"base64");return o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength)}let e=atob(r),t=new Uint8Array(e.length);for(let o=0;o<e.length;++o)t.set([e.charCodeAt(o)],o);return t.buffer}function Zk(r){return lr.join(r)}function Ww(r){let e="/";for(r=r.trim();r.endsWith(e);)r=r.slice(0,r.length-1);let t=r.split(e);return t[t.length-1]}function xd(r,e){let t={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy,weightsManifest:e};return r.signature!=null&&(t.signature=r.signature),r.userDefinedMetadata!=null&&(t.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(t.modelInitializer=r.modelInitializer),r.initializerSignature!=null&&(t.initializerSignature=r.initializerSignature),r.trainingConfig!=null&&(t.trainingConfig=r.trainingConfig),t}function Uw(r,e,t){let o={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy};if(r.trainingConfig!=null&&(o.trainingConfig=r.trainingConfig),r.weightsManifest!=null){if(!e)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!t)throw new Error("modelJSON has weightsManifest but weightData is null");o.weightSpecs=e,o.weightData=t}return r.signature!=null&&(o.signature=r.signature),r.userDefinedMetadata!=null&&(o.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(o.modelInitializer=r.modelInitializer),r.initializerSignature!=null&&(o.initializerSignature=r.initializerSignature),o}async function il(r,e){let t,o;return r.weightsManifest!=null&&([t,o]=await e(r.weightsManifest)),Uw(r,t,o)}function $a(r){if(r.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:r.modelTopology==null?0:qk(JSON.stringify(r.modelTopology)),weightSpecsBytes:r.weightSpecs==null?0:qk(JSON.stringify(r.weightSpecs)),weightDataBytes:r.weightData==null?0:new lr(r.weightData).byteLength}}function Ec(r){let e=[];for(let t of r)e.push(...t.weights);return e}function KH(){let r=t=>{let o=t<<13,n=0;for(;!(o&8388608);)n-=8388608,o<<=1;return o&=-8388609,n+=947912704,o|n},e=new Uint32Array(2048);e[0]=0;for(let t=1;t<1024;t++)e[t]=r(t);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}function qH(){let r=new Uint32Array(64);r[0]=0,r[31]=1199570944,r[32]=2147483648,r[63]=3347054592;for(let e=1;e<31;e++)r[e]=e<<23;for(let e=33;e<63;e++)r[e]=2147483648+(e-32<<23);return r}function jH(){let r=new Uint32Array(64);for(let e=0;e<64;e++)r[e]=1024;return r[0]=r[32]=0,r}function XH(){let r=KH(),e=qH(),t=jH();return o=>{let n=new ArrayBuffer(4*o.length),s=new Uint32Array(n);for(let a=0;a<o.length;a++){let i=o[a],p=r[t[i>>10]+(i&1023)]+e[i>>10];s[a]=p}return new Float32Array(n)}}var Xt=class r{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return r.instance==null&&(r.instance=new r),r.instance}static registerSaveRouter(e){r.getInstance().saveRouters.push(e)}static registerLoadRouter(e){r.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return r.getHandlers(e,"save")}static getLoadHandlers(e,t){return r.getHandlers(e,"load",t)}static getHandlers(e,t,o){let n=[];return(t==="load"?r.getInstance().loadRouters:r.getInstance().saveRouters).forEach(a=>{let i=a(e,o);i!==null&&n.push(i)}),n}},Jk=r=>Xt.registerSaveRouter(r),e1=r=>Xt.registerLoadRouter(r),t1=r=>Xt.getSaveHandlers(r),r1=(r,e)=>Xt.getLoadHandlers(r,e);var Gw="tensorflowjs",Hw=1,Gu="models_store",cu="model_info_store";function o1(){if(!A().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");let r=typeof window=="undefined"?self:window,e=r.indexedDB||r.mozIndexedDB||r.webkitIndexedDB||r.msIndexedDB||r.shimIndexedDB;if(e==null)throw new Error("The current browser does not appear to support IndexedDB.");return e}function Kw(r){let e=r.result;e.createObjectStore(Gu,{keyPath:"modelPath"}),e.createObjectStore(cu,{keyPath:"modelPath"})}var Ra=class{constructor(e){if(this.indexedDB=o1(),e==null||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((o,n)=>{let s=this.indexedDB.open(Gw,Hw);s.onupgradeneeded=()=>Kw(s),s.onsuccess=()=>{let a=s.result;if(t==null){let i=a.transaction(Gu,"readonly"),u=i.objectStore(Gu).get(this.modelPath);u.onsuccess=()=>{if(u.result==null)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));o(u.result.modelArtifacts)},u.onerror=l=>(a.close(),n(u.error)),i.oncomplete=()=>a.close()}else{t.weightData=lr.join(t.weightData);let i=$a(t),p=a.transaction(cu,"readwrite"),u=p.objectStore(cu),l;try{l=u.put({modelPath:this.modelPath,modelArtifactsInfo:i})}catch(m){return n(m)}let c;l.onsuccess=()=>{c=a.transaction(Gu,"readwrite");let m=c.objectStore(Gu),d;try{d=m.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:i})}catch(f){return n(f)}d.onsuccess=()=>o({modelArtifactsInfo:i}),d.onerror=f=>{u=p.objectStore(cu);let h=u.delete(this.modelPath);h.onsuccess=()=>(a.close(),n(d.error)),h.onerror=g=>(a.close(),n(d.error))}},l.onerror=m=>(a.close(),n(l.error)),p.oncomplete=()=>{c==null?a.close():c.oncomplete=()=>a.close()}}},s.onerror=a=>n(s.error)})}};Ra.URL_SCHEME="indexeddb://";var n1=r=>A().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(Ra.URL_SCHEME)?YH(r.slice(Ra.URL_SCHEME.length)):null;Xt.registerSaveRouter(n1);Xt.registerLoadRouter(n1);function YH(r){return new Ra(r)}function QH(r){return r.startsWith(Ra.URL_SCHEME)?r.slice(Ra.URL_SCHEME.length):r}var yd=class{constructor(){this.indexedDB=o1()}async listModels(){return new Promise((e,t)=>{let o=this.indexedDB.open(Gw,Hw);o.onupgradeneeded=()=>Kw(o),o.onsuccess=()=>{let n=o.result,s=n.transaction(cu,"readonly"),i=s.objectStore(cu).getAll();i.onsuccess=()=>{let p={};for(let u of i.result)p[u.modelPath]=u.modelArtifactsInfo;e(p)},i.onerror=p=>(n.close(),t(i.error)),s.oncomplete=()=>n.close()},o.onerror=n=>t(o.error)})}async removeModel(e){return e=QH(e),new Promise((t,o)=>{let n=this.indexedDB.open(Gw,Hw);n.onupgradeneeded=()=>Kw(n),n.onsuccess=()=>{let s=n.result,a=s.transaction(cu,"readwrite"),i=a.objectStore(cu),p=i.get(e),u;p.onsuccess=()=>{if(p.result==null)return s.close(),o(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{let l=i.delete(e),c=()=>{u=s.transaction(Gu,"readwrite");let d=u.objectStore(Gu).delete(e);d.onsuccess=()=>t(p.result.modelArtifactsInfo),d.onerror=f=>o(p.error)};l.onsuccess=c,l.onerror=m=>(c(),s.close(),o(p.error))}},p.onerror=l=>(s.close(),o(p.error)),a.oncomplete=()=>{u==null?s.close():u.oncomplete=()=>s.close()}},n.onerror=s=>o(n.error)})}};var hi="/",ul="tensorflowjs_models",s1="info",ZH="model_topology",JH="weight_specs",eK="weight_data",tK="model_metadata";function a1(r){return{info:[ul,r,s1].join(hi),topology:[ul,r,ZH].join(hi),weightSpecs:[ul,r,JH].join(hi),weightData:[ul,r,eK].join(hi),modelMetadata:[ul,r,tK].join(hi)}}function i1(r){for(let e of Object.values(r))window.localStorage.removeItem(e)}function rK(r){let e=r.split(hi);if(e.length<3)throw new Error(`Invalid key format: ${r}`);return e.slice(1,e.length-1).join(hi)}function oK(r){return r.startsWith(Da.URL_SCHEME)?r.slice(Da.URL_SCHEME.length):r}var Da=class{constructor(e){if(!A().getBool("IS_BROWSER")||typeof window=="undefined"||typeof window.localStorage=="undefined")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,e==null||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=a1(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let t=JSON.stringify(e.modelTopology),o=JSON.stringify(e.weightSpecs),n=$a(e),s=lr.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(n)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,o),this.LS.setItem(this.keys.weightData,Yk(s));let a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:e.signature!=null?e.signature:void 0,userDefinedMetadata:e.userDefinedMetadata!=null?e.userDefinedMetadata:void 0,modelInitializer:e.modelInitializer!=null?e.modelInitializer:void 0,initializerSignature:e.initializerSignature!=null?e.initializerSignature:void 0,trainingConfig:e.trainingConfig!=null?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:n}}catch(a){throw i1(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${n.modelTopologyBytes}, weightSpecsBytes=${n.weightSpecsBytes}, weightDataBytes=${n.weightDataBytes}.`)}}}async load(){let e=JSON.parse(this.LS.getItem(this.keys.info));if(e==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(e.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let t={},o=JSON.parse(this.LS.getItem(this.keys.topology));if(o==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=o;let n=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(n==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=n;let s=this.LS.getItem(this.keys.modelMetadata);if(s!=null){let i=JSON.parse(s);t.format=i.format,t.generatedBy=i.generatedBy,t.convertedBy=i.convertedBy,i.signature!=null&&(t.signature=i.signature),i.userDefinedMetadata!=null&&(t.userDefinedMetadata=i.userDefinedMetadata),i.modelInitializer!=null&&(t.modelInitializer=i.modelInitializer),i.initializerSignature!=null&&(t.initializerSignature=i.initializerSignature),i.trainingConfig!=null&&(t.trainingConfig=i.trainingConfig)}let a=this.LS.getItem(this.keys.weightData);if(a==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=Qk(a),t}};Da.URL_SCHEME="localstorage://";var u1=r=>A().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(Da.URL_SCHEME)?nK(r.slice(Da.URL_SCHEME.length)):null;Xt.registerSaveRouter(u1);Xt.registerLoadRouter(u1);function nK(r){return new Da(r)}var bd=class{constructor(){$(A().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),$(typeof window=="undefined"||typeof window.localStorage!="undefined",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let e={},t=ul+hi,o=hi+s1;for(let n=0;n<this.LS.length;++n){let s=this.LS.key(n);if(s.startsWith(t)&&s.endsWith(o)){let a=rK(s);e[a]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){e=oK(e);let t=a1(e);if(this.LS.getItem(t.info)==null)throw new Error(`Cannot find model at path '${e}'`);let o=JSON.parse(this.LS.getItem(t.info));return i1(t),o}};var pl="://",Hs=class r{constructor(){this.managers={}}static getInstance(){return r.instance==null&&(r.instance=new r),r.instance}static registerManager(e,t){$(e!=null,()=>"scheme must not be undefined or null."),e.endsWith(pl)&&(e=e.slice(0,e.indexOf(pl))),$(e.length>0,()=>"scheme must not be an empty string.");let o=r.getInstance();$(o.managers[e]==null,()=>`A model store manager is already registered for scheme '${e}'.`),o.managers[e]=t}static getManager(e){let t=r.getInstance().managers[e];if(t==null)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(r.getInstance().managers)}};function Cd(r){if(r.indexOf(pl)===-1)throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Hs.getSchemes().join(",")}`);return{scheme:r.split(pl)[0],path:r.split(pl)[1]}}async function p1(r,e,t=!1){$(r!==e,()=>`Old path and new path are the same: '${r}'`);let o=Xt.getLoadHandlers(r);$(o.length>0,()=>`Copying failed because no load handler is found for source URL ${r}.`),$(o.length<2,()=>`Copying failed because more than one (${o.length}) load handlers for source URL ${r}.`);let n=o[0],s=Xt.getSaveHandlers(e);$(s.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),$(s.length<2,()=>`Copying failed because more than one (${o.length}) save handlers for destination URL ${e}.`);let a=s[0],i=Cd(r).scheme,p=Cd(r).path,u=i===Cd(r).scheme,l=await n.load();t&&u&&await Hs.getManager(i).removeModel(p);let c=await a.save(l);return t&&!u&&await Hs.getManager(i).removeModel(p),c.modelArtifactsInfo}async function l1(){let r=Hs.getSchemes(),e={};for(let t of r){let o=await Hs.getManager(t).listModels();for(let n in o){let s=t+pl+n;e[s]=o[n]}}return e}async function c1(r){let e=Cd(r);return Hs.getManager(e.scheme).removeModel(e.path)}async function m1(r,e){return p1(r,e,!1)}async function d1(r,e){return p1(r,e,!0)}var qw=class{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if(t!=="utf-8"&&t!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){if(typeof window=="undefined"||!A().getBool("USE_SETTIMEOUTCUSTOM")){setTimeout(e,t);return}this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",o=>{if(o.source===window&&o.data.name===this.messageName){o.stopPropagation();let n=this.functionRefs[o.data.index];n(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}},!0))}isTypedArray(e){return id(e)}};if(A().get("IS_BROWSER")){A().setPlatform("browser",new qw);try{Hs.registerManager(Da.URL_SCHEME,new bd)}catch(r){}try{Hs.registerManager(Ra.URL_SCHEME,new yd)}catch(r){}}var sK={importFetch:()=>f1()},jw;var Xw=class{constructor(){this.util=h1(),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return A().global.fetch!=null?A().global.fetch(e,t):(jw==null&&(jw=sK.importFetch()),jw(e,t))}now(){let e=process.hrtime();return e[0]*1e3+e[1]/1e6}encode(e,t){if(t!=="utf-8"&&t!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return e.length===0?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}};A().get("IS_NODE")&&!A().get("IS_BROWSER")&&A().setPlatform("node",new Xw);function ie(r,e="float32",t){return e=e||"float32",St(r),new Ge(r,e,t)}function aK(r,e){let t=v(r,"x","cast");if(!hw(e))throw new Error(`Failed to cast to unknown dtype ${e}`);if(e==="string"&&t.dtype!=="string"||e!=="string"&&t.dtype==="string")throw new Error("Only strings can be casted to strings");let o={x:t},n={dtype:e};return _.runKernel(ho,o,n)}var Ue=N({cast_:aK});function iK(r){let t={x:v(r,"x","clone","string_or_numeric")};return _.runKernel(vo,t)}var Xr=N({clone_:iK});function wd(r,e=!1){console.log(r.toString(e))}Ow();var uK={buffer:ie,cast:Ue,clone:Xr,print:wd};Lk(uK);function pK(r,e){let t=v(r,"a","add"),o=v(e,"b","add");[t,o]=Oe(t,o);let n={a:t,b:o};return _.runKernel(Rr,n)}var Ce=N({add_:pK});function lK(r,e){let t=v(r,"a","floorDiv"),o=v(e,"b","floorDiv");[t,o]=Oe(t,o);let n={a:t,b:o};return _.runKernel(wo,n)}var Sd=N({floorDiv_:lK});function cK(r,e){let t=v(r,"a","div"),o=v(e,"b","div");if([t,o]=Oe(t,o),t.dtype==="int32"&&o.dtype==="int32")return Sd(t,o);let n={a:t,b:o},s={};return _.runKernel(Vn,n,s)}var Xe=N({div_:cK});function mK(r,e){let t=v(r,"a","mul"),o=v(e,"b","mul");[t,o]=Oe(t,o);let n={a:t,b:o};return _.runKernel($o,n)}var se=N({mul_:mK});function dK(r){let e=v(r,"x","abs");if(e.dtype==="complex64"){let t={x:e};return _.runKernel(Wi,t)}else{let t={x:e};return _.runKernel(fn,t)}}var er=N({abs_:dK});function fK(r){let t={x:v(r,"x","acos")};return _.runKernel(hn,t)}var g1=N({acos_:fK});function hK(r){let t={x:v(r,"x","acosh")};return _.runKernel(gn,t)}var x1=N({acosh_:hK});function gK(r){$(Array.isArray(r),()=>"The argument passed to tf.addN() must be a list of tensors"),$(r.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${r.length}`);let e=r.map((n,s)=>v(n,`tensors${s}`,"addN")),t=e[0];e.forEach(n=>{if(n.dtype!==t.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(n=>{if(!Sr(n.shape,t.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});let o=e;return _.runKernel(xn,o)}var y1=N({addN_:gK});function xK(r,e=null,t=!1){let n={x:v(r,"x","all","bool")},s={axis:e,keepDims:t};return _.runKernel(yn,n,s)}var b1=N({all_:xK});function yK(r,e=null,t=!1){let n={x:v(r,"x","any","bool")},s={axis:e,keepDims:t};return _.runKernel(bn,n,s)}var C1=N({any_:yK});function bK(r,e=0){let o={x:v(r,"x","argMax")},n={axis:e};return _.runKernel(na,o,n)}var w1=N({argMax_:bK});function CK(r,e=0){let o={x:v(r,"x","argMin")},n={axis:e};return _.runKernel(sa,o,n)}var S1=N({argMin_:CK});function wK(r){let t={x:v(r,"x","asin")};return _.runKernel(Cn,t)}var I1=N({asin_:wK});function SK(r){let t={x:v(r,"x","asinh")};return _.runKernel(wn,t)}var v1=N({asinh_:SK});function IK(r){let t={x:v(r,"x","atan")};return _.runKernel(Sn,t)}var k1=N({atan_:IK});function vK(r,e){let t=v(r,"a","atan2"),o=v(e,"b","atan2");[t,o]=Oe(t,o);let n={a:t,b:o};return _.runKernel(vn,n)}var N1=N({atan2_:vK});function kK(r){let t={x:v(r,"x","atanh")};return _.runKernel(In,t)}var T1=N({atanh_:kK});function NK(r,e,t,o,n="NHWC",s){let a=r[3],i=[...e,a],p=E1(n);return Ku(r,i,t,s,o,null,null,p)}function Qw(r,e,t,o,n,s,a="channelsLast"){let[i,p]=$c(e),u;if(a==="channelsLast")u=[i,p,r[3],r[3]];else if(a==="channelsFirst")u=[i,p,r[1],r[1]];else throw new Error(`Unknown dataFormat ${a}`);return Ku(r,u,t,o,n,s,!1,a)}function TK(r,e,t,o,n,s,a="NDHWC"){let[i,p,u]=Yw(e),l,c;if(a==="NDHWC")c="channelsLast",l=[i,p,u,r[4],r[4]];else if(a==="NCDHW")c="channelsFirst",l=[i,p,u,r[1],r[1]];else throw new Error(`Unknown dataFormat ${a}`);return _1(r,l,t,o,n,!1,c,s)}function Ku(r,e,t,o,n,s,a=!1,i="channelsLast"){let[p,u,l,c]=[-1,-1,-1,-1];if(i==="channelsLast")[p,u,l,c]=r;else if(i==="channelsFirst")[p,c,u,l]=r;else throw new Error(`Unknown dataFormat ${i}`);let[m,d,,f]=e,[h,g]=$c(t),[x,b]=$c(o),w=ll(m,x),S=ll(d,b),{padInfo:k,outHeight:T,outWidth:E}=$K(n,u,l,h,g,w,S,s,i),R=a?f*c:f,D;return i==="channelsFirst"?D=[p,R,T,E]:i==="channelsLast"&&(D=[p,T,E,R]),{batchSize:p,dataFormat:i,inHeight:u,inWidth:l,inChannels:c,outHeight:T,outWidth:E,outChannels:R,padInfo:k,strideHeight:h,strideWidth:g,filterHeight:m,filterWidth:d,effectiveFilterHeight:w,effectiveFilterWidth:S,dilationHeight:x,dilationWidth:b,inShape:r,outShape:D,filterShape:e}}function _1(r,e,t,o,n,s=!1,a="channelsLast",i){let[p,u,l,c,m]=[-1,-1,-1,-1,-1];if(a==="channelsLast")[p,u,l,c,m]=r;else if(a==="channelsFirst")[p,m,u,l,c]=r;else throw new Error(`Unknown dataFormat ${a}`);let[d,f,h,,g]=e,[x,b,w]=Yw(t),[S,k,T]=Yw(o),E=ll(d,S),R=ll(f,k),D=ll(h,T),{padInfo:F,outDepth:O,outHeight:M,outWidth:L}=RK(n,u,l,c,x,b,w,E,R,D,i),B=s?g*m:g,z;return a==="channelsFirst"?z=[p,B,O,M,L]:a==="channelsLast"&&(z=[p,O,M,L,B]),{batchSize:p,dataFormat:a,inDepth:u,inHeight:l,inWidth:c,inChannels:m,outDepth:O,outHeight:M,outWidth:L,outChannels:B,padInfo:F,strideDepth:x,strideHeight:b,strideWidth:w,filterDepth:d,filterHeight:f,filterWidth:h,effectiveFilterDepth:E,effectiveFilterHeight:R,effectiveFilterWidth:D,dilationDepth:S,dilationHeight:k,dilationWidth:T,inShape:r,outShape:z,filterShape:e}}function _K(r,e,t,o,n){o==null&&(o=Zw(r,e,t));let s=r[0],a=r[1],i=Rc((s-e+2*o)/t+1,n),p=Rc((a-e+2*o)/t+1,n);return[i,p]}function EK(r,e,t,o,n,s){n==null&&(n=Zw(r,e[0],o[0]));let a=[0,0,0,t];for(let i=0;i<3;i++)r[i]+2*n>=e[i]&&(a[i]=Rc((r[i]-e[i]+2*n)/o[i]+1,s));return a}function Zw(r,e,t,o=1){let n=ll(e,o);return Math.floor((r[0]*(t-1)-t+n)/2)}function $c(r){return typeof r=="number"?[r,r,r]:r.length===2?[r[0],r[1],1]:r}function Yw(r){return typeof r=="number"?[r,r,r]:r}function ll(r,e){return e<=1?r:r+(r-1)*(e-1)}function $K(r,e,t,o,n,s,a,i,p){let u,l,c;if(typeof r=="number"){u={top:r,bottom:r,left:r,right:r,type:r===0?"VALID":"NUMBER"};let d=_K([e,t],s,o,r,i);l=d[0],c=d[1]}else if(r==="same"){l=Math.ceil(e/o),c=Math.ceil(t/n);let m=Math.max(0,(l-1)*o+s-e),d=Math.max(0,(c-1)*n+a-t),f=Math.floor(m/2),h=m-f,g=Math.floor(d/2),x=d-g;u={top:f,bottom:h,left:g,right:x,type:"SAME"}}else if(r==="valid")u={top:0,bottom:0,left:0,right:0,type:"VALID"},l=Math.ceil((e-s+1)/o),c=Math.ceil((t-a+1)/n);else if(typeof r=="object"){let m=p==="channelsLast"?r[1][0]:r[2][0],d=p==="channelsLast"?r[1][1]:r[2][1],f=p==="channelsLast"?r[2][0]:r[3][0],h=p==="channelsLast"?r[2][1]:r[3][1];u={top:m,bottom:d,left:f,right:h,type:m===0&&d===0&&f===0&&h===0?"VALID":"EXPLICIT"},l=Rc((e-s+m+d)/o+1,i),c=Rc((t-a+f+h)/n+1,i)}else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:u,outHeight:l,outWidth:c}}function RK(r,e,t,o,n,s,a,i,p,u,l){let c,m,d,f;if(r==="valid"&&(r=0),typeof r=="number"){c={top:r,bottom:r,left:r,right:r,front:r,back:r,type:r===0?"VALID":"NUMBER"};let g=EK([e,t,o,1],[i,p,u],1,[n,s,a],r,l);m=g[0],d=g[1],f=g[2]}else if(r==="same"){m=Math.ceil(e/n),d=Math.ceil(t/s),f=Math.ceil(o/a);let h=(m-1)*n+i-e,g=(d-1)*s+p-t,x=(f-1)*a+u-o,b=Math.floor(h/2),w=h-b,S=Math.floor(g/2),k=g-S,T=Math.floor(x/2),E=x-T;c={top:S,bottom:k,left:T,right:E,front:b,back:w,type:"SAME"}}else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:c,outDepth:m,outHeight:d,outWidth:f}}function Rc(r,e){if(!e)return Math.trunc(r);switch(e){case"round":return Math.round(r);case"ceil":return Math.ceil(r);case"floor":return Math.floor(r);default:throw new Error(`Unknown roundingMode ${e}`)}}function Hu(r){let[e,t,o]=$c(r);return e===1&&t===1&&o===1}function br(r,e){return Hu(r)||Hu(e)}function Aa(r){return $c(r).every(e=>e>0)}function E1(r){if(r==="NHWC")return"channelsLast";if(r==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${r}`)}function zt(r,e,t){if(t!=null){if(typeof e=="string")throw Error(`Error in ${r}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);if(typeof e=="number")$(Ja(e),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);else if(typeof e=="object")e.forEach(o=>{o.forEach(n=>{$(Ja(n),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${t} but got pad ${n}.`)})});else throw Error(`Error in ${r}: Unknown padding parameter: ${e}`)}}function DK(r,e){let o={x:v(r,"x","reshape","string_or_numeric")},n={shape:e};return _.runKernel(Ca,o,n)}var W=N({reshape_:DK});function AK(r,e,t,o,n){let s=v(r,"x","avgPool","float32"),a=1;$(br(t,a),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`);let i=s,p=!1;s.rank===3&&(p=!0,i=W(s,[1,s.shape[0],s.shape[1],s.shape[2]])),$(i.rank===4,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),zt("avgPool",o,n);let u={x:i},l={filterSize:e,strides:t,pad:o,dimRoundingMode:n},c=_.runKernel(kn,u,l);return c=Ue(c,s.dtype),p?W(c,[c.shape[1],c.shape[2],c.shape[3]]):c}var Id=N({avgPool_:AK});function FK(r,e,t,o,n,s="NDHWC"){let a=v(r,"x","avgPool3d","float32"),i=a,p=!1;a.rank===4&&(p=!0,i=W(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),$(i.rank===5,()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`),$(s==="NDHWC",()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),$(typeof t=="number"&&t>0||Array.isArray(t)&&t[0]>0&&t[1]>0&&t[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${t}'`),zt("avgPool3d",o,n);let u={x:i},l={filterSize:e,strides:t,pad:o,dimRoundingMode:n,dataFormat:s},c=_.runKernel(aa,u,l);return c=Ue(c,i.dtype),p?W(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}var $1=N({avgPool3d_:FK});function PK(r,e=0){$(r.length>=1,()=>"Pass at least one tensor to concat");let t=di(r,"tensors","concat","string_or_numeric");if(t[0].dtype==="complex64"&&t.forEach(s=>{if(s.dtype!=="complex64")throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `)}),t.length===1)return Xr(t[0]);let o=t,n={axis:e};return _.runKernel(pa,o,n)}var bt=N({concat_:PK});function OK(r,e,t=!1,o=!1){let n=v(r,"a","matMul"),s=v(e,"b","matMul");[n,s]=Oe(n,s);let a={a:n,b:s},i={transposeA:t,transposeB:o};return _.runKernel(Nn,a,i)}var Je=N({matMul_:OK});function MK(r){let t={x:v(r,"x","sigmoid","float32")};return _.runKernel(Ao,t)}var Pa=N({sigmoid_:MK});function LK(r,e,t){let o=v(r,"x","slice","string_or_numeric");if(o.rank===0)throw new Error("Slicing scalar is not possible");let n={x:o},s={begin:e,size:t};return _.runKernel(_s,n,s)}var Ye=N({slice_:LK});function BK(r){let t={x:v(r,"x","tanh","float32")};return _.runKernel(Ls,t)}var Dc=N({tanh_:BK});function zK(r,e,t,o,n,s){let a=v(r,"forgetBias","basicLSTMCell"),i=v(e,"lstmKernel","basicLSTMCell"),p=v(t,"lstmBias","basicLSTMCell"),u=v(o,"data","basicLSTMCell"),l=v(n,"c","basicLSTMCell"),c=v(s,"h","basicLSTMCell"),m=bt([u,c],1),d=Je(m,i),f=Ce(d,p),h=f.shape[0],g=f.shape[1]/4,x=[h,g],b=Ye(f,[0,0],x),w=Ye(f,[0,g],x),S=Ye(f,[0,g*2],x),k=Ye(f,[0,g*3],x),T=Ce(se(Pa(b),Dc(w)),se(l,Pa(Ce(a,S)))),E=se(Dc(T),Pa(k));return[T,E]}var R1=N({basicLSTMCell_:zK});function VK(r,e,t){let o=v(r,"x","batchToSpaceND"),n=e.reduce((i,p)=>i*p);$(o.rank>=1+e.length,()=>`input rank is ${o.rank} but should be > than blockShape.length ${e.length}`),$(t.length===e.length,()=>`crops.length is ${t.length} but should be equal to blockShape.length  ${e.length}`),$(o.shape[0]%n===0,()=>`input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${n}`);let s={x:o},a={blockShape:e,crops:t};return _.runKernel(ia,s,a)}var vd=N({batchToSpaceND_:VK});function D1(r){let e;return r.rank===0||r.rank===1?e=W(r,[1,1,1,r.size]):r.rank===2?e=W(r,[1,1,r.shape[0],r.shape[1]]):r.rank===3?e=W(r,[1,r.shape[0],r.shape[1],r.shape[2]]):e=r,e}function WK(r,e,t,o,n,s){s==null&&(s=.001);let a=v(r,"x","batchNorm"),i=v(e,"mean","batchNorm"),p=v(t,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let l;o!=null&&(l=v(o,"offset","batchNorm")),$(i.rank===p.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),$(l==null||i.rank===l.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),$(u==null||i.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let m={x:D1(a),scale:u,offset:l,mean:i,variance:p},d={varianceEpsilon:s},f=_.runKernel(Hn,m,d);return W(f,a.shape)}var mu=N({batchNorm_:WK});function UK(r,e,t,o,n,s){let a=v(r,"x","batchNorm"),i=v(e,"mean","batchNorm"),p=v(t,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let l;return o!=null&&(l=v(o,"offset","batchNorm")),$(a.rank===2,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${a.rank}.`),$(i.rank===2||i.rank===1,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),$(p.rank===2||p.rank===1,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${p.rank}.`),u!=null&&$(u.rank===2||u.rank===1,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),l!=null&&$(l.rank===2||l.rank===1,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${l.rank}.`),mu(a,i,p,l,u,s)}var A1=N({batchNorm2d_:UK});function GK(r,e,t,o,n,s){let a=v(r,"x","batchNorm"),i=v(e,"mean","batchNorm"),p=v(t,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let l;return o!=null&&(l=v(o,"offset","batchNorm")),$(a.rank===3,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${a.rank}.`),$(i.rank===3||i.rank===1,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),$(p.rank===3||p.rank===1,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${p.rank}.`),u!=null&&$(u.rank===3||u.rank===1,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),l!=null&&$(l.rank===3||l.rank===1,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${l.rank}.`),mu(a,i,p,l,u,s)}var F1=N({batchNorm3d_:GK});function HK(r,e,t,o,n,s){let a=v(r,"x","batchNorm"),i=v(e,"mean","batchNorm"),p=v(t,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let l;return o!=null&&(l=v(o,"offset","batchNorm")),$(a.rank===4,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${a.rank}.`),$(i.rank===4||i.rank===1,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),$(p.rank===4||p.rank===1,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${p.rank}.`),u!=null&&$(u.rank===4||u.rank===1,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),l!=null&&$(l.rank===4||l.rank===1,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${l.rank}.`),mu(a,i,p,l,u,s)}var P1=N({batchNorm4d_:HK});function KK(r,e,t){let o=v(r,"x","bincount"),n=v(e,"weights","bincount");$(o.dtype==="int32",()=>`Error in bincount: input dtype must be int32, but got ${o.dtype}`),$(t>=0,()=>`size must be non-negative, but got ${t}.`),$(n.size===o.size||n.size===0,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${o.shape}, weights shape: ${n.shape}.`);let s={x:o,weights:n},a={size:t};return _.runKernel(Tn,s,a)}var kd=N({bincount_:KK});function qK(r,e){let t=v(r,"x","bitwiseAnd"),o=v(e,"y","bitwiseAnd");if(!Sr(t.shape,o.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${t.shape}, y: ${o.shape}`);if(t.dtype!=="int32"||o.dtype!=="int32")throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${t.dtype} and type of y: ${o.dtype}`);let n={a:t,b:o};return _.runKernel(_n,n)}var O1=N({bitwiseAnd_:qK});function jK(r,e){let t=v(r,"s0","broadcastArgs","int32"),o=v(e,"s1","broadcastArgs","int32");if(t.rank!==1)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${t.rank}`);if(o.rank!==1)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${o.rank}`);let n={s0:t,s1:o};return _.runKernel(ua,n)}var M1=N({broadcastArgs_:jK});function XK(r,e){let t=v(r,"broadcastTo","x"),o=t.shape;if(St(e),e.length<t.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${t.rank}.`);if(e.length>t.rank){let u=t.shape.slice();for(;u.length<e.length;)u.unshift(1);t=W(t,u)}let n=t.shape,s=Array.from(e);for(let u=e.length-1;u>=0;u--)if(n[u]===e[u])s[u]=1;else if(t.shape[u]!==1)throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${e}].`);if(s.map((u,l)=>u>1?l:-1).filter(u=>u>=0).length===0)return Xr(t);let i={x:t},p={reps:s};return _.runKernel(Mo,i,p)}var Oa=N({broadcastTo_:XK});function YK(r){let t={x:v(r,"x","ceil","float32")};return _.runKernel(go,t)}var L1=N({ceil_:YK});function Ma(r,e,t){St(r),t=t||Bi(e);let o={shape:r,value:e,dtype:t};return _.runKernel(da,{},o)}function QK(r,e,t){let o=v(r,"x","clipByValue");if($(e<=t,()=>`Error in clip: min (${e}) must be less than or equal to max (${t}).`),e===t)return Ma(o.shape,e,o.dtype);let n={x:o},s={clipValueMin:e,clipValueMax:t};return _.runKernel(Go,n,s)}var B1=N({clipByValue_:QK});function ZK(r){return bt(r,0)}var z1=N({concat1d_:ZK});function JK(r,e){return bt(r,e)}var V1=N({concat2d_:JK});function eq(r,e){return bt(r,e)}var W1=N({concat3d_:eq});function tq(r,e){return bt(r,e)}var U1=N({concat4d_:tq});function rq(r,e,t,o,n="NHWC",s=[1,1],a){let i=v(r,"x","conv2d","float32"),p=v(e,"filter","conv2d","float32"),u=i,l=!1;i.rank===3&&(l=!0,u=W(i,[1,i.shape[0],i.shape[1],i.shape[2]])),$(u.rank===4,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),$(p.rank===4,()=>`Error in conv2d: filter must be rank 4, but got rank ${p.rank}.`),zt("conv2d",o,a);let c=n==="NHWC"?u.shape[3]:u.shape[1];$(c===p.shape[2],()=>`Error in conv2d: depth of input (${c}) must match input depth for filter ${p.shape[2]}.`),$(br(t,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${s}'`),$(Aa(s),()=>"Error in conv2D: Dilated rates should be larger than 0."),$(Aa(t),()=>"Error in conv2D: Strides should be larger than 0.");let m={x:u,filter:p},d={strides:t,pad:o,dataFormat:n,dilations:s,dimRoundingMode:a},f=_.runKernel(En,m,d);return l?W(f,[f.shape[1],f.shape[2],f.shape[3]]):f}var du=N({conv2d_:rq});function oq(r,e,t,o,n="NWC",s=1,a){let i=v(r,"x","conv1d"),p=v(e,"filter","conv1d"),u=i,l=!1;i.rank===2&&(l=!0,u=W(i,[1,i.shape[0],i.shape[1]])),$(u.rank===3,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),$(p.rank===3,()=>`Error in conv1d: filter must be rank 3, but got rank ${p.rank}.`),zt("conv1d",o,a),$(u.shape[2]===p.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${p.shape[1]}.`),$(br(t,s),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${t} and dilation '${s}'`),$(Aa(s),()=>"Error in conv1D: Dilated rates should be larger than 0."),$(Aa(t),()=>"Error in conv1D: Stride should be larger than 0."),$(n==="NWC",()=>`Error in conv1d: got dataFormat of ${n} but only NWC is currently supported.`);let c=W(p,[1,p.shape[0],p.shape[1],p.shape[2]]),m=W(u,[u.shape[0],1,u.shape[1],u.shape[2]]),g=du(m,c,[1,t],o,"NHWC",[1,s],a);return l?W(g,[g.shape[2],g.shape[3]]):W(g,[g.shape[0],g.shape[2],g.shape[3]])}var G1=N({conv1d_:oq});function nq(r,e,t,o,n,s="NHWC",a){$(r.length===e.rank,()=>`Length of inShape (${r.length}) and rank of dy (${e.rank}) must match`);let i=r,p=e,u=!1;e.rank===3&&(u=!0,p=W(e,[1,e.shape[0],e.shape[1],e.shape[2]]),i=[1,r[0],r[1],r[2]]),$(i.length===4,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`),$(p.rank===4,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${p.rank}`),$(t.rank===4,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${t.rank}`);let l=s==="NHWC"?i[3]:i[1],c=s==="NHWC"?p.shape[3]:p.shape[1];$(l===t.shape[2],()=>`Error in conv2dDerInput: depth of input (${l}) must match input depth for filter ${t.shape[2]}.`),$(c===t.shape[3],()=>`Error in conv2dDerInput: depth of output (${c}) must match output depth for filter ${t.shape[3]}.`),zt("conv2dDerInput",n,a);let m={dy:p,filter:t},d={strides:o,pad:n,dataFormat:s,dimRoundingMode:a,inputShape:i},f=_.runKernel($n,m,d);return u?W(f,[f.shape[1],f.shape[2],f.shape[3]]):f}var Nd=N({conv2DBackpropInput_:nq});function sq(r,e,t,o,n,s){let a=v(r,"x","conv2dTranspose"),i=v(e,"filter","conv2dTranspose");return Nd(t,a,i,o,n,"NHWC",s)}var H1=N({conv2dTranspose_:sq});function aq(r,e,t,o,n="NDHWC",s=[1,1,1]){let a=v(r,"x","conv3d"),i=v(e,"filter","conv3d"),p=a,u=!1;a.rank===4&&(u=!0,p=W(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),$(p.rank===5,()=>`Error in conv3d: input must be rank 5, but got rank ${p.rank}.`),$(i.rank===5,()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`),$(p.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${p.shape[4]}) must match input depth for filter ${i.shape[3]}.`),$(br(t,s),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${t} and dilations '${s}'`),$(n==="NDHWC",()=>`Error in conv3d: got dataFormat of ${n} but only NDHWC is currently supported.`),$(Aa(s),()=>"Error in conv3D: Dilated rates should be larger than 0."),$(Aa(t),()=>"Error in conv3D: Strides should be larger than 0.");let l={x:p,filter:i},c={strides:t,pad:o,dataFormat:n,dilations:s},m=_.runKernel(Rn,l,c);return u?W(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var K1=N({conv3d_:aq});function iq(r,e,t,o,n){$(r.length===e.rank,()=>`Length of inShape (${r.length}) and rank of dy (${e.rank}) must match`);let s=r,a=e,i=!1;e.rank===4&&(i=!0,a=W(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),s=[1,r[0],r[1],r[2],r[3]]);let p=s[4],u=a.shape[4];$(s.length===5,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`),$(a.rank===5,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${a.rank}`),$(t.rank===5,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${t.rank}`),$(p===t.shape[3],()=>`Error in conv3dDerInput: depth of input (${p}) must match input depth for filter ${t.shape[3]}.`),$(u===t.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${t.shape[4]}.`);let l={dy:a,filter:t},c={pad:n,strides:o,inputShape:s},m=_.runKernel(Dn,l,c);return i?W(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var q1=N({conv3DBackpropInput_:iq});function uq(r,e,t,o,n){let s=v(r,"x","conv3dTranspose"),a=v(e,"filter","conv3dTranspose");return q1(t,s,a,o,n)}var j1=N({conv3dTranspose_:uq});function pq(r){let t={x:v(r,"x","cos","float32")};return _.runKernel(An,t)}var X1=N({cos_:pq});function lq(r){let t={x:v(r,"x","cosh","float32")};return _.runKernel(Fn,t)}var Y1=N({cosh_:lq});function cq(r,e=0,t=!1,o=!1){let s={x:v(r,"x","cumprod")},a={axis:e,exclusive:t,reverse:o};return _.runKernel(Pn,s,a)}var Q1=N({cumprod_:cq});function mq(r,e=0,t=!1,o=!1){let s={x:v(r,"x","cumsum")},a={axis:e,exclusive:t,reverse:o};return _.runKernel(On,s,a)}var Z1=N({cumsum_:mq});function dq(r,e,t,o=!1){let n=v(r,"x","denseBincount"),s=v(e,"weights","denseBincount");$(n.dtype==="int32",()=>`Error in denseBincount: input dtype must be int32, but got ${n.dtype}`),$(n.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${n.rank}.`),$(t>=0,()=>`size must be non-negative, but got ${t}.`),$(s.size===n.size||s.size===0,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${n.shape}, weights shape: ${s.shape}.`);let a={x:n,weights:s},i={size:t,binaryOutput:o};return _.runKernel(la,a,i)}var J1=N({denseBincount_:dq});function fq(r,e,t="NHWC"){let o=v(r,"x","depthToSpace","float32"),n=t==="NHWC"?o.shape[1]:o.shape[2],s=t==="NHWC"?o.shape[2]:o.shape[3],a=t==="NHWC"?o.shape[3]:o.shape[1];$(e>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${e}`),$(n*e>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${n} and ${e}  for depthToSpace with input shape
    ${o.shape}`),$(s*e>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${s} and ${e} for depthToSpace with input shape
        ${o.shape}`),$(a%(e*e)===0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${a} for depthToSpace with input shape ${o.shape}`);let i={x:o},p={blockSize:e,dataFormat:t};return _.runKernel(Ln,i,p)}var e2=N({depthToSpace_:fq});function hq(r,e,t,o,n="NHWC",s=[1,1],a){let i=v(r,"x","depthwiseConv2d","float32"),p=v(e,"filter","depthwiseConv2d","float32"),u=i,l=!1;i.rank===3&&(l=!0,u=W(i,[1,i.shape[0],i.shape[1],i.shape[2]])),$(u.rank===4,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),$(p.rank===4,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`);let c=n==="NHWC"?u.shape[3]:u.shape[1];$(c===p.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${c}) must match the inChannels dimension in filter ${p.shape[2]}.`),zt("depthwiseConv2d",o,a);let m={x:u,filter:p},d={strides:t,pad:o,dataFormat:n,dilations:s,dimRoundingMode:a},f=_.runKernel(Bn,m,d);return l?W(f,[f.shape[1],f.shape[2],f.shape[3]]):f}var cl=N({depthwiseConv2d_:hq});function gq(r){let t={x:v(r,"x","diag")};return _.runKernel(ca,t)}var t2=N({diag_:gq});function xq(r,e,t,o,n=[1,1],s="NHWC"){let a=v(r,"x","dilation2d"),i=v(e,"filter","dilation2d");$(a.rank===3||a.rank===4,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${a.rank}.`),$(i.rank===3,()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`),$(s==="NHWC",()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);let p=a,u=!1;a.rank===3&&(p=W(a,[1,a.shape[0],a.shape[1],a.shape[2]]),u=!0),$(p.shape[3]===i.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${p.shape[3]} vs ${i.shape[2]}`);let l={x:p,filter:i},c={strides:t,pad:o,dilations:n},m=_.runKernel(zn,l,c);return u?W(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var r2=N({dilation2d_:xq});var kr={};qe(kr,{assertAndGetBroadcastShape:()=>rt,getBroadcastDims:()=>o2,getReductionAxes:()=>Td});function o2(r,e){let t=r.length,o=[];for(let n=0;n<t;n++){let s=t-1-n,a=r[s]||1;(e[e.length-1-n]||1)>1&&a===1&&o.unshift(s)}return o}function Td(r,e){let t=[];for(let o=0;o<e.length;o++){let n=r[r.length-o-1],s=e.length-o-1,a=e[s];(n==null||n===1&&a>1)&&t.unshift(s)}return t}function rt(r,e){let t=Math.max(r.length,e.length),o=new Array(t);for(let n=0;n<t;n++){let s=r[r.length-n-1];s==null&&(s=1);let a=e[e.length-n-1];if(a==null&&(a=1),s===1)o[t-n-1]=a;else if(a===1)o[t-n-1]=s;else if(s!==a){let i=`Operands could not be broadcast together with shapes ${r} and ${e}.`;throw Error(i)}else o[t-n-1]=s}return o}function yq(r,e){let t=v(r,"a","equal","string_or_numeric"),o=v(e,"b","equal","string_or_numeric");[t,o]=Oe(t,o),rt(t.shape,o.shape);let n={a:t,b:o};return _.runKernel(xo,n)}var _d=N({equal_:yq});function bq(r,e,t){let o=v(e,"a","where"),n=v(t,"b","where"),s=v(r,"condition","where","bool"),a=rt(rt(s.shape,o.shape),n.shape),i=Oa(s,a),p=Oa(o,a),u=Oa(n,a),l={condition:i,t:p,e:u};return _.runKernel(wa,l)}var Lo=N({where_:bq});function Cq(r){let t={x:v(r,"x","zerosLike")};return _.runKernel(_a,t)}var Kt=N({zerosLike_:Cq});function wq(r,e){let t=v(r,"a","div"),o=v(e,"b","div");[t,o]=Oe(t,o);let n=Xe(t,o),s=Kt(n),a=_d(o,s);return Lo(a,s,n)}var n2=N({divNoNan_:wq});function Sq(r,e){let t=v(r,"t1","dot"),o=v(e,"t2","dot");$((t.rank===1||t.rank===2)&&(o.rank===1||o.rank===2),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${t.rank} and ${o.rank}.`);let n=t.rank===1?t.size:t.shape[1],s=o.rank===1?o.size:o.shape[0];if($(n===s,()=>`Error in dot: inner dimensions of inputs must match, but got ${n} and ${s}.`),t.rank===1&&o.rank===1){let a=W(t,[1,-1]),i=W(o,[-1,1]),p=Je(a,i);return W(p,[])}else if(t.rank===1&&o.rank===2){let a=W(t,[1,-1]),i=W(o,[o.shape[0],o.shape[1]]),p=Je(a,i);return W(p,[p.size])}else if(t.rank===2&&o.rank===1){let a=W(o,[-1,1]),i=Je(t,a);return W(i,[i.size])}else{let a=W(o,[o.shape[0],o.shape[1]]);return Je(t,a)}}var s2=N({dot_:Sq});function Iq(r,...e){let t=e.map((n,s)=>v(n,`tensors${s}`,"einsum")),o={equation:r};return _.runKernel(ji,t,o)}var fu=N({einsum_:Iq});function vq(r){let t={x:v(r,"x","elu","float32")};return _.runKernel(Wn,t)}var Ed=N({elu_:vq});function kq(r,e){let t=v(r,"x","ensureShape","string_or_numeric");if(!cw(t.shape,e))throw new Error(`EnsureShape: Shape of tensor ${t.shape} is not compatible with expected shape ${e}`);return r}var a2=N({ensureShape_:kq});function Nq(r){let e=v(r,"x","erf");$(e.dtype==="int32"||e.dtype==="float32",()=>"Input dtype must be `int32` or `float32`."),e.dtype==="int32"&&(e=Ue(e,"float32"));let t={x:e};return _.runKernel(Un,t)}var i2=N({erf_:Nq});function Jw(r,e){for(let t=0;t<r.length;++t)if(r[r.length-t-1]!==e-1-t)return!1;return!0}function u2(r,e,t){let o=r.length+e.length,n=[],s=0,a=0;for(let i=0;i<o;i++)t.indexOf(i)===-1?n.push(r[s++]):n.push(e[a++]);return n}function Tq(r,e){let t=[],o=r.length;for(let s=0;s<o;s++)e.indexOf(s)===-1&&t.push(r[s]);let n=e.map(s=>r[s]);return[t,n]}function gi(r,e){let t=e.map(o=>1);return u2(r,t,e)}function _q(r,e,t){$(Jw(e,t),()=>`${r} supports only inner-most axes for now. Got axes ${e} and rank-${t} input.`)}function Eq(r,e){if(Jw(r,e))return null;let t=[];for(let o=0;o<e;++o)r.indexOf(o)===-1&&t.push(o);return r.forEach(o=>t.push(o)),t}function $q(r){return r.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function Rq(r,e){let t=[];for(let o=e-r;o<e;++o)t.push(o);return t}function Aq(r,e=null,t=!1){let n={x:v(r,"x","max")},s={reductionIndices:e,keepDims:t};return _.runKernel(os,n,s)}var La=N({max_:Aq});function Fq(r,e=null,t=!1){let n={x:v(r,"x","min")},s={axis:e,keepDims:t};return _.runKernel(as,n,s)}var Ac=N({min_:Fq});function Pq(r,e){let t=v(r,"base","pow"),o=v(e,"exp","pow");[t,o]=Oe(t,o);let n={a:t,b:o};return _.runKernel(hs,n)}var xi=N({pow_:Pq});function ke(r,e){if((Mt(r)&&e!=="string"||Array.isArray(r))&&e!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(e==="string"&&Mt(r)&&!(r instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return vr(r,[],[],e)}function Oq(r){let t={x:v(r,"x","sqrt","float32")};return _.runKernel(Fo,t)}var Pr=N({sqrt_:Oq});function Mq(r){let e=v(r,"x","square"),t={};return _.runKernel("Square",{x:e},t)}var tr=N({square_:Mq});function Lq(r,e=null,t=!1){let o=v(r,"x","sum");o.dtype==="bool"&&(o=Ue(o,"int32"));let n={x:o},s={axis:e,keepDims:t};return _.runKernel(As,n,s)}var ot=N({sum_:Lq});function Bq(r,e="euclidean",t=null,o=!1){r=v(r,"x","norm");let n=p2(r,e,t),s=n.shape;if(o){let a=Li(t,r.shape);s=gi(n.shape,a)}return W(n,s)}function p2(r,e,t=null){if(r.rank===0)return er(r);if(r.rank!==1&&t===null)return p2(W(r,[-1]),e,t);if(r.rank===1||typeof t=="number"||Array.isArray(t)&&t.length===1){if(e===1)return ot(er(r),t);if(e===1/0)return La(er(r),t);if(e===-1/0)return Ac(er(r),t);if(e==="euclidean"||e===2)return Pr(ot(xi(er(r),ke(2,"int32")),t));throw new Error(`Error in norm: invalid ord value: ${e}`)}if(Array.isArray(t)&&t.length===2){if(e===1)return La(ot(er(r),t[0]),t[1]-1);if(e===1/0)return La(ot(er(r),t[1]),t[0]);if(e===-1/0)return Ac(ot(er(r),t[1]),t[0]);if(e==="fro"||e==="euclidean")return Pr(ot(tr(r),t));throw new Error(`Error in norm: invalid ord value: ${e}`)}throw new Error(`Error in norm: invalid axis: ${t}`)}var qu=N({norm_:Bq});function zq(r,e=null,t=!1){return qu(r,"euclidean",e,t)}var l2=N({euclideanNorm_:zq});function Vq(r){let t={x:v(r,"x","exp")};return _.runKernel(yo,t)}var Jo=N({exp_:Vq});function Wq(r,e=0){let t=v(r,"x","expandDims","string_or_numeric");$(e<=t.rank,()=>"Axis must be <= rank of the tensor");let o={input:t},n={dim:e};return _.runKernel(ma,o,n)}var Ks=N({expandDims_:Wq});function Uq(r){let t={x:v(r,"x","expm1")};return _.runKernel(bo,t)}var c2=N({expm1_:Uq});function Gq(r,e){let t=v(r,"x","tile","string_or_numeric");$(t.rank===e.length,()=>`Error in transpose: rank of input ${t.rank} must match length of reps ${e}.`);let o={x:t},n={reps:e};return _.runKernel(Mo,o,n)}var hu=N({tile_:Gq});function Hq(r,e,t,o="float32"){e==null&&(e=r);let n=ie([r,e],o),s=r<=e?r:e;for(let i=0;i<s;++i)n.set(1,i,i);let a=W(n.toTensor(),[r,e]);if(t==null)return a;if(t.length===1)return hu(Ks(a,0),[t[0],1,1]);if(t.length===2)return hu(Ks(Ks(a,0),0),[t[0],t[1],1,1]);if(t.length===3)return hu(Ks(Ks(Ks(a,0),0),0),[t[0],t[1],t[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${t.length}D.`)}var $d=N({eye_:Hq});function Kq(r){let t={x:v(r,"x","floor","float32")};return _.runKernel(Co,t)}var Rd=N({floor_:Kq});function qq(r,e,t=0,o=0){let n=v(r,"x","gather"),s=v(e,"indices","gather","int32"),a={x:n,indices:s},i={axis:t,batchDims:o};return _.runKernel(fa,a,i)}var Dd=N({gather_:qq});function jq(r,e){let t=v(r,"a","greater","string_or_numeric"),o=v(e,"b","greater","string_or_numeric");[t,o]=Oe(t,o),rt(t.shape,o.shape);let n={a:t,b:o};return _.runKernel(So,n)}var ju=N({greater_:jq});function Xq(r,e){let t=v(r,"a","greaterEqual","string_or_numeric"),o=v(e,"b","greaterEqual","string_or_numeric");[t,o]=Oe(t,o),rt(t.shape,o.shape);let n={a:t,b:o};return _.runKernel(Io,n)}var Ad=N({greaterEqual_:Xq});function Yq(r){let t={input:v(r,"input","imag")};return _.runKernel(Qi,t)}var gu=N({imag_:Yq});function Qq(r){let t={x:v(r,"x","isFinite")};return _.runKernel(qn,t)}var m2=N({isFinite_:Qq});function Zq(r){let t={x:v(r,"x","isInf")};return _.runKernel(jn,t)}var d2=N({isInf_:Zq});function Jq(r){let t={x:v(r,"x","isNaN")};return _.runKernel(Xn,t)}var f2=N({isNaN_:Jq});function e6(r,e=.2){let o={x:v(r,"x","leakyRelu")},n={alpha:e};return _.runKernel(Yn,o,n)}var Fd=N({leakyRelu_:e6});function t6(r,e){let t=v(r,"a","less","string_or_numeric"),o=v(e,"b","less","string_or_numeric");[t,o]=Oe(t,o),rt(t.shape,o.shape);let n={a:t,b:o};return _.runKernel(ko,n)}var Fc=N({less_:t6});function r6(r,e){let t=v(r,"a","lessEqual","string_or_numeric"),o=v(e,"b","lessEqual","string_or_numeric");[t,o]=Oe(t,o),rt(t.shape,o.shape);let n={a:t,b:o};return _.runKernel(No,n)}var ml=N({lessEqual_:r6});function h2(r,e,t){if(t<=0)throw new Error("The number of values should be positive.");let o={start:r,stop:e,num:t};return _.runKernel(Qn,{},o)}function o6(r,e=5,t=1,o=1,n=.5){let s=v(r,"x","localResponseNormalization");$(s.rank===4||s.rank===3,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`),$(Ja(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let a=s,i=!1;s.rank===3&&(i=!0,a=W(s,[1,s.shape[0],s.shape[1],s.shape[2]]));let p={x:a},u={depthRadius:e,bias:t,alpha:o,beta:n},l=_.runKernel(rs,p,u);return i?W(l,[l.shape[1],l.shape[2],l.shape[3]]):l}var g2=N({localResponseNormalization_:o6});function n6(r){let t={x:v(r,"x","log","float32")};return _.runKernel(To,t)}var yi=N({log_:n6});function s6(r){let t={x:v(r,"x","log1p")};return _.runKernel(Zn,t)}var Pd=N({log1p_:s6});function a6(r){return $(ra(r),()=>"The f passed in grad(f) must be a function"),(e,t)=>{let o=v(e,"x","tf.grad","string_or_numeric"),n=t!=null?v(t,"dy","tf.grad"):null;return _.tidy(()=>{let{value:s,grads:a}=_.gradients(()=>r(o),[o],n);return n!=null&&yt(s.shape,n.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Od(a),a[0]})}}function i6(r){return $(ra(r),()=>"The f passed in grads(f) must be a function"),(e,t)=>{$(Array.isArray(e),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");let o=di(e,"args","tf.grads","string_or_numeric"),n=t!=null?v(t,"dy","tf.grads"):null;return _.tidy(()=>{let{value:s,grads:a}=_.gradients(()=>r(...o),o,n);return n!=null&&yt(s.shape,n.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Od(a),a})}}function u6(r){return $(ra(r),()=>"The f passed in valueAndGrad(f) must be a function"),(e,t)=>{$(e instanceof dt,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),$(t==null||t instanceof dt,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");let{grads:o,value:n}=_.gradients(()=>r(e),[e],t);return Od(o),{grad:o[0],value:n}}}function p6(r){return $(ra(r),()=>"The f passed in valueAndGrads(f) must be a function"),(e,t)=>{$(Array.isArray(e)&&e.every(n=>n instanceof dt),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),$(t==null||t instanceof dt,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");let o=_.gradients(()=>r(...e),e,t);return t!=null&&yt(o.value.shape,t.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Od(o.grads),o}}function eS(r,e){$(ra(r),()=>"The f passed in variableGrads(f) must be a function"),$(e==null||Array.isArray(e)&&e.every(u=>u instanceof ci),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");let t=e!=null;if(!t){e=[];for(let u in _.registeredVariables)e.push(_.registeredVariables[u])}let o=t?e.filter(u=>!u.trainable):null,n=e.length;e=e.filter(u=>u.trainable),$(e.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${n} variables is trainable.`);let s=!0,{value:a,grads:i}=_.gradients(r,e,null,s);$(i.some(u=>u!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),$(a.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);let p={};return e.forEach((u,l)=>{i[l]!=null&&(p[u.name]=i[l])}),o!=null&&o.forEach(u=>p[u.name]=null),{value:a,grads:p}}function Nr(r){return _.customGrad(r)}function Od(r){if(r.filter(t=>t==null).length>0)throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`)}function l6(r){let t={x:v(r,"x","neg")};return _.runKernel(ls,t)}var mr=N({neg_:l6});function c6(r){let t={x:v(r,"x","softplus")};return _.runKernel(Ds,t)}var Md=N({softplus_:c6});function m6(r){let e=v(r,"x","logSigmoid");return Nr(o=>({value:mr(Md(mr(o))),gradFunc:a=>se(a,Pa(mr(o)))}))(e)}var x2=N({logSigmoid_:m6});function d6(r,e){let t=v(r,"a","sub"),o=v(e,"b","sub");[t,o]=Oe(t,o);let n={a:t,b:o};return _.runKernel(Oo,n)}var Te=N({sub_:d6});function f6(r,e=-1){let t=v(r,"logits","logSoftmax");if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and axis was ${e}`);return Nr((n,s)=>{let i=La(n,e,!0),p=Te(n,i),u=Te(Ue(p,"float32"),yi(ot(Jo(p),e,!0)));return s([u]),{value:u,gradFunc:(c,m)=>{let[d]=m,f=!0,h=Jo(d);return Te(c,se(ot(c,e,f),h))}}})(t)}var y2=N({logSoftmax_:f6});function h6(r,e=null,t=!1){let o=v(r,"x","logSumExp"),n=Li(e,o.shape),s=La(o,n,!0),a=Te(o,s),i=Jo(a),p=ot(i,n),u=yi(p),l=Ce(W(s,u.shape),u);if(t){let c=gi(l.shape,n);return W(l,c)}return l}var Ld=N({logSumExp_:h6});function g6(r,e){let t=v(r,"a","logicalAnd","bool"),o=v(e,"b","logicalAnd","bool");rt(t.shape,o.shape);let n={a:t,b:o};return _.runKernel(Jn,n)}var Xu=N({logicalAnd_:g6});function x6(r){let t={x:v(r,"x","logicalNot","bool")};return _.runKernel(es,t)}var Bd=N({logicalNot_:x6});function y6(r,e){let t=v(r,"a","logicalOr","bool"),o=v(e,"b","logicalOr","bool");rt(t.shape,o.shape);let n={a:t,b:o};return _.runKernel(ts,n)}var zd=N({logicalOr_:y6});function b6(r,e){let t=v(r,"a","logicalXor","bool"),o=v(e,"b","logicalXor","bool");return rt(t.shape,o.shape),Xu(zd(r,e),Bd(Xu(r,e)))}var b2=N({logicalXor_:b6});var Vd=2147483648;function C6(r,e,t="left"){let o=v(r,"sortedSequence","searchSorted"),n=v(e,"values","searchSorted"),s=o.shape[o.shape.length-1],a=n.shape[n.shape.length-1],i=W(o,[-1,s]),p=W(n,[-1,a]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==p.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(ze(p.shape)>=Vd)throw new Error(`values tensor size must less than ${Vd}`);if(i.shape[1]>=Vd)throw new Error(`trailing dim_size must less than ${Vd} for int32 output type, was ${i.shape[1]}`);let u={sortedSequence:i,values:p},l={side:t};return _.runKernel(Ns,u,l)}var Pc=N({searchSorted_:C6});function C2(r,e){return Pc(r,e,"left")}function w6(r,e,t,o,n){let s=v(r,"x","maxPool"),a=1,i=s,p=!1;s.rank===3&&(p=!0,i=W(s,[1,s.shape[0],s.shape[1],s.shape[2]])),$(i.rank===4,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),$(br(t,a),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`),zt("maxPool",o,n);let u={x:i},l={filterSize:e,strides:t,pad:o,dimRoundingMode:n},c=_.runKernel(ns,u,l);return p?W(c,[c.shape[1],c.shape[2],c.shape[3]]):c}var Wd=N({maxPool_:w6});function S6(r,e=[1,1,1],t,o,n,s="NDHWC"){let a=v(r,"x","maxPool3d"),i=a,p=!1;a.rank===4&&(p=!0,i=W(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),$(i.rank===5,()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`),$(s==="NDHWC",()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),zt("maxPool3d",o,n);let u={x:i},l={filterSize:e,strides:t,pad:o,dimRoundingMode:n,dataFormat:s},c=_.runKernel(ha,u,l);return p?W(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}var w2=N({maxPool3d_:S6});function I6(r,e,t,o,n=!1){let a={x:v(r,"x","maxPoolWithArgmax")},i={filterSize:e,strides:t,pad:o,includeBatchInIndex:n},p=_.runKernel(ga,a,i);return{result:p[0],indexes:p[1]}}var S2=N({maxPoolWithArgmax_:I6});function v6(r,e){let t=v(r,"a","maximum"),o=v(e,"b","maximum");[t,o]=Oe(t,o),t.dtype==="bool"&&(t=Ue(t,"int32"),o=Ue(o,"int32")),rt(t.shape,o.shape);let n={a:t,b:o};return _.runKernel(_o,n)}var Ud=N({maximum_:v6});function k6(r,e=null,t=!1){let n={x:v(r,"x","mean")},s={axis:e,keepDims:t};return _.runKernel(ss,n,s)}var Yu=N({mean_:k6});function Yr(r,e="float32"){if(St(r),e==="complex64"){let o=Yr(r,"float32"),n=Yr(r,"float32");return Ar(o,n)}let t=Yp(ze(r),e);return _.makeTensor(t,r,e)}function Ba(r,e="float32"){if(St(r),e==="complex64"){let o=Ba(r,"float32"),n=Yr(r,"float32");return Ar(o,n)}let t=bc(ze(r),e);return _.makeTensor(t,r,e)}function I2(r,e,{indexing:t="xy"}={}){if(t!=="xy"&&t!=="ij")throw new TypeError(`${t} is not a valid third argument to meshgrid`);if(r===void 0)return[];let o=v(r,"x","meshgrid",r instanceof dt?r.dtype:"float32");if(e===void 0)return[o];let n=v(e,"y","meshgrid",e instanceof dt?e.dtype:"float32"),s=ze(o.shape),a=ze(n.shape);return t==="xy"?(o=W(o,[1,-1]),n=W(n,[-1,1]),[Je(Ba([a,1],o.dtype),o),Je(n,Ba([1,s],n.dtype))]):(o=W(o,[-1,1]),n=W(n,[1,-1]),[Je(o,Ba([1,a],o.dtype)),Je(Ba([s,1],n.dtype),n)])}function N6(r,e){let t=v(r,"a","minimum"),o=v(e,"b","minimum");[t,o]=Oe(t,o),t.dtype==="bool"&&(t=Ue(t,"int32"),o=Ue(o,"int32")),rt(t.shape,o.shape);let n={a:t,b:o};return _.runKernel(Eo,n)}var Qu=N({minimum_:N6});function T6(r,e,t){$(t==="reflect"||t==="symmetric",()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${t}.`);let o=v(r,"x","mirrorPad");if(o.rank===0)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");$(e.length===o.rank,()=>`Padding doesn't match input. Must be ${o.rank}. Got ${e.length}.`);let n=t==="reflect"?1:0;for(let i=0;i<o.rank;i++)$(e[i].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),$(e[i][0]>=0&&e[i][0]<=o.shape[i]-n&&e[i][1]>=0&&e[i][1]<=o.shape[i]-n,()=>`Padding in dimension ${i} cannot be greater than or equal to ${o.shape[i]-n} or less than 0 for input of shape ${o.shape}`);let s={paddings:e,mode:t},a={x:o};return _.runKernel(is,a,s)}var v2=N({mirrorPad_:T6});function _6(r,e){let t=v(r,"a","mod"),o=v(e,"b","mod");[t,o]=Oe(t,o);let n={a:t,b:o};return _.runKernel(us,n)}var k2=N({mod_:_6});function E6(r,e=null,t=!1){r=v(r,"x","moments");let o=Li(e,r.shape),n=Yu(r,o,t),s=n.shape;t||(s=gi(n.shape,o));let a=tr(Te(Ue(r,"float32"),W(n,s))),i=Yu(a,o,t);return{mean:n,variance:i}}var N2=N({moments_:E6});function $6(r,e,t,o){let n=v(e,"data","multiRNNCell"),s=di(t,"c","multiRNNCell"),a=di(o,"h","multiRNNCell"),i=n,p=[];for(let c=0;c<r.length;c++){let m=r[c](i,s[c],a[c]);p.push(m[0]),p.push(m[1]),i=m[1]}let u=[],l=[];for(let c=0;c<p.length;c+=2)u.push(p[c]),l.push(p[c+1]);return[u,l]}var T2=N({multiRNNCell_:$6});function R6(r,e,t,o=!1){let n=v(r,"logits","multinomial"),s=n.size,a=n.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(a>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${a}`);t=t||Math.random();let p={logits:a===1?W(n,[1,-1]):n},u={numSamples:e,seed:t,normalized:o},l=_.runKernel(ps,p,u);return a===1?W(l,[l.size]):l}var _2=N({multinomial_:R6});function D6(r,e){let t=v(r,"a","notEqual","string_or_numeric"),o=v(e,"b","notEqual","string_or_numeric");[t,o]=Oe(t,o),rt(t.shape,o.shape);let n={a:t,b:o};return _.runKernel(Ro,n)}var Gd=N({notEqual_:D6});function A6(r,e,t=1,o=0,n="int32"){if(e<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);let a={indices:v(r,"indices","oneHot","int32")},i={dtype:n,depth:e,onValue:t,offValue:o};return _.runKernel(ds,a,i)}var Oc=N({oneHot_:A6});function F6(r){let t={x:v(r,"x","onesLike")};return _.runKernel(xa,t)}var E2=N({onesLike_:F6});function P6(r,e){let t=v(r,"v1","outerProduct"),o=v(e,"v2","outerProduct");$(t.rank===1&&o.rank===1,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${t.rank} and ${o.rank}.`);let n=W(t,[-1,1]),s=W(o,[1,-1]);return Je(n,s)}var $2=N({outerProduct_:P6});function O6(r,e,t=0){let o=v(r,"x","pad");if(o.rank===0)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");let n={paddings:e,constantValue:t},s={x:o};return _.runKernel(fs,s,n)}var za=N({pad_:O6});function M6(r,e,t=0){return $(e.length===2,()=>"Invalid number of paddings. Must be length of 2."),za(r,[e],t)}var R2=N({pad1d_:M6});function L6(r,e,t=0){return $(e.length===2&&e[0].length===2&&e[1].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),za(r,e,t)}var D2=N({pad2d_:L6});function B6(r,e,t=0){return $(e.length===3&&e[0].length===2&&e[1].length===2&&e[2].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),za(r,e,t)}var A2=N({pad3d_:B6});function z6(r,e,t=0){return $(e.length===4&&e[0].length===2&&e[1].length===2&&e[2].length===2&&e[3].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),za(r,e,t)}var F2=N({pad4d_:z6});function V6(r,e,t){let o=v(r,"x","spaceToBatchND");$(o.rank>=1+e.length,()=>`input rank ${o.rank} should be > than [blockShape] ${e.length}`),$(t.length===e.length,()=>`paddings.shape[0] ${t.length} must be equal to [blockShape] ${e.length}`),$(o.shape.reduce((a,i,p)=>p>0&&p<=e.length?a&&(i+t[p-1][0]+t[p-1][1])%e[p-1]===0:a,!0),()=>`input spatial dimensions ${o.shape.slice(1)} with paddings ${t.toString()} must be divisible by blockShapes ${e.toString()}`);let n={x:o},s={blockShape:e,paddings:t};return _.runKernel(Sa,n,s)}var Hd=N({spaceToBatchND_:V6});function W6(r,e,t,o,n,s,a){n==null&&(n=[1,1]),s==null&&(s=1),o===0&&(o="valid");let i=v(r,"x","maxPool"),p=i,u=!1;i.rank===3&&(u=!0,p=W(i,[1,i.shape[0],i.shape[1],i.shape[2]])),$(br(s,n),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${n}'`);let l=Qw(p.shape,e,s,n,o),c=[l.dilationHeight,l.dilationWidth],m;o==="same"?m=G6([l.filterHeight,l.filterWidth],c):m=[[0,0],[0,0]];let d=c[0]===1&&c[1]===1,[f,h]=U6([l.inHeight,l.inWidth],c,m),g=d?o:"valid",x=d?p:Hd(p,c,f),w=(t==="avg"?()=>Id(x,e,s,g,a):()=>Wd(x,e,s,g,a))(),S=d?w:vd(w,c,h);return u?W(S,[S.shape[1],S.shape[2],S.shape[3]]):S}function U6(r,e,t){let o=t.map(l=>l[0]),n=t.map(l=>l[1]),s=r.concat(o,n),a=e.map((l,c)=>(l-s[c]%l)%l),i=n.map((l,c)=>l+a[c]),p=e.map((l,c)=>[o[c],i[c]]),u=e.map((l,c)=>[0,a[c]]);return[p,u]}function G6(r,e){let o=r.map((a,i)=>a+(a-1)*(e[i]-1)).map(a=>a-1),n=o.map(a=>Math.floor(a/2)),s=o.map((a,i)=>a-n[i]);return o.map((a,i)=>[n[i],s[i]])}var P2=N({pool_:W6});function H6(r,e){let t=v(r,"x","prelu"),o=v(e,"alpha","prelu"),n={x:t,alpha:o};return _.runKernel(gs,n)}var Kd=N({prelu_:H6});function K6(r,e=null,t=!1){let o=v(r,"x","prod");o.dtype==="bool"&&(o=Ue(o,"int32"));let n={x:o},s={axis:e,keepDims:t};return _.runKernel(Ho,n,s)}var O2=N({prod_:K6});function q6(r,e,t,o){let n=r.map((l,c)=>v(l,`tensors${c}`,"raggedGather","int32")),s=v(e,"paramsDenseValues","raggedGather"),a=v(t,"indices","raggedGather","int32"),i={paramsNestedSplits:n,paramsDenseValues:s,indices:a},p={outputRaggedRank:o},u=_.runKernel(Qp,i,p);return{outputNestedSplits:u.slice(0,u.length-1),outputDenseValues:u[u.length-1]}}var M2=N({raggedGather_:q6});function j6(r,e,t){let o=v(r,"starts","raggedRange"),n=v(e,"limits","raggedRange",o.dtype),s=v(t,"deltas","raggedRange",o.dtype),a={starts:o,limits:n,deltas:s},i=_.runKernel(Zp,a);return{rtNestedSplits:i[0],rtDenseValues:i[1]}}var L2=N({raggedRange_:j6});function X6(r,e,t,o,n){let s=v(r,"shape","raggedTensorToTensor","int32"),a=v(e,"values","raggedTensorToTensor"),i=v(t,"defaultValue","raggedTensorToTensor",a.dtype),p=o.map((c,m)=>v(c,`tensors${m}`,"raggedTensorToTensor","int32")),u={shape:s,values:a,defaultValue:i,rowPartitionTensors:p},l={rowPartitionTypes:n};return _.runKernel(Jp,u,l)}var B2=N({raggedTensorToTensor_:X6});function Y6(r,e,t){St(r);let o=ze(r),n=null;if(t==null||t==="float32")n=new Float32Array(o);else if(t==="int32")n=new Int32Array(o);else if(t==="bool")n=new Uint8Array(o);else throw new Error(`Unknown data type ${t}`);for(let s=0;s<o;s++)n[s]=e();return _.makeTensor(n,r,t)}var z2=N({rand_:Y6});var Qd=Kp(iS());var aN={};qe(aN,{TEST_EPSILON_FLOAT16:()=>oN,createVideoElement:()=>pj,encodeStrings:()=>sN,expectArrayBuffersEqual:()=>uj,expectArraysClose:()=>nj,expectArraysEqual:()=>aj,expectNumbersClose:()=>nN,expectPromiseToFail:()=>sj,expectValuesInRange:()=>ij,play:()=>lj,testEpsilon:()=>jd});var oj=.001,oN=.1;function nj(r,e,t){return t==null&&(t=jd()),uS(r,e,(o,n)=>pS(o,n,t))}function jd(){return _.backend.floatPrecision()===32?oj:oN}function uS(r,e,t){let o=!0;if((Mt(r)||Mt(e))&&(o=!1),Mt(r)&&Mt(e)&&(o=!0),o){let a=r.constructor.name,i=e.constructor.name;if(a!==i)throw new Error(`Arrays are of different type. Actual: ${a}. Expected: ${i}`)}if(Array.isArray(r)&&Array.isArray(e)){let a=ur(r),i=ur(e);if(!Sr(a,i))throw new Error(`Arrays have different shapes. Actual: [${a}]. Expected: [${i}]`)}let n=Mt(r)?r:Us(r),s=Mt(e)?e:Us(e);if(n.length!==s.length)throw new Error(`Arrays have different lengths actual: ${n.length} vs expected: ${s.length}.
Actual:   ${n}.
Expected: ${s}.`);for(let a=0;a<s.length;++a){let i=n[a],p=s[a];if(!t(i,p))throw new Error(`Arrays differ: actual[${a}] = ${i}, expected[${a}] = ${p}.
Actual:   ${n}.
Expected: ${s}.`)}typeof expect!="undefined"&&expect().nothing()}function sj(r,e){r().then(()=>e.fail(),()=>e()),typeof expect!="undefined"&&expect().nothing()}function aj(r,e){let t=typeof e=="string"||typeof e=="number"||typeof e=="boolean"?[e]:e;return dn(r)||dn(r[0])||dn(e)||dn(e[0])?uS(r,t,(o,n)=>o==n):uS(r,e,(o,n)=>pS(o,n,0))}function nN(r,e,t){if(t==null&&(t=jd()),!pS(r,e,t))throw new Error(`Numbers differ: actual === ${r}, expected === ${e}`);typeof expect!="undefined"&&expect().nothing()}function pS(r,e,t){return!isFinite(r)&&!isFinite(e)?!0:!(isNaN(r)||isNaN(e)||Math.abs(r-e)>t)}function ij(r,e,t){for(let o=0;o<r.length;o++)if(r[o]<e||r[o]>t)throw new Error(`Value out of range:${r[o]} low: ${e}, high: ${t}`)}function uj(r,e){let t=new Float32Array(r),o=new Float32Array(e);if(t.length!==o.length)throw new Error(`Expected ArrayBuffer to be of length ${o.length}, but it was ${t.length}`);for(let n=0;n<o.length;n++)if(t[n]!==o[n])throw new Error(`Expected ArrayBuffer value at ${n} to be ${o[n]} but got ${t[n]} instead`)}function sN(r){for(let e=0;e<r.length;e++){let t=r[e];Array.isArray(t)?sN(t):r[e]=iu(t)}return r}function pj(r){let e=document.createElement("video");return"playsInline"in e&&(e.playsInline=!0),e.muted=!0,e.loop=!0,e.style.position="fixed",e.style.left="0px",e.style.top="0px",e.preload="auto",e.appendChild(r),new Promise(t=>{e.addEventListener("loadeddata",o=>t(e)),e.load()})}async function lj(r){await r.play(),"requestVideoFrameCallback"in r&&await new Promise(e=>{r.requestVideoFrameCallback(e)})}var Ju=class{constructor(e,t,o,n,s){this.mean=e,this.stdDev=t,this.dtype=o,this.nextVal=NaN,this.truncated=n,this.truncated&&(this.upper=this.mean+this.stdDev*2,this.lower=this.mean-this.stdDev*2);let a=s||Math.random();this.random=Qd.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){let n=this.nextVal;return this.nextVal=NaN,n}let e,t,o=!1;for(;!o;){let n,s,a;do n=2*this.random()-1,s=2*this.random()-1,a=n*n+s*s;while(a>=1||a===0);let i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*n*i,t=this.mean+this.stdDev*s*i,(!this.truncated||this.isValidTruncated(e))&&(o=!0)}return(!this.truncated||this.isValidTruncated(t))&&(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return this.dtype==null||this.dtype==="float32"?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}},Xd=class{constructor(e,t,o,n){this.alpha=e,this.beta=1/t,this.dtype=o;let s=n||Math.random();this.randu=Qd.alea(s.toString()),this.randn=new Ju(0,1,o,!1,this.randu()),e<1?this.d=e+2/3:this.d=e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,o,n,s,a;for(;;){do n=this.randn.nextValue(),a=1+this.c*n;while(a<=0);if(a*=a*a,e=n*n,t=1-.331*e*e,o=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<o)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return this.dtype==="float32"?e:Math.round(e)}},Yd=class{constructor(e=0,t=1,o,n){if(this.canReturnFloat=()=>this.dtype==null||this.dtype==="float32",this.min=e,this.range=t-e,this.dtype=o,n==null&&(n=Math.random()),typeof n=="number"&&(n=n.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Qd.alea(n)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}};function cj(r,e,t=1,o="float32",n){if(St(r),t==null&&(t=1),o==null&&(o="float32"),o!=="float32"&&o!=="int32")throw new Error(`Unsupported data type ${o}`);let s=new Xd(e,t,o,n),a=ie(r,o);for(let i=0;i<a.values.length;i++)a.values[i]=s.nextValue();return a.toTensor()}var iN=N({randomGamma_:cj});function mj(r,e=0,t=1,o,n){if(St(r),o!=null&&o==="bool")throw new Error(`Unsupported data type ${o}`);let s=new Ju(e,t,o,!1,n),a=ie(r,o);for(let i=0;i<a.values.length;i++)a.values[i]=s.nextValue();return a.toTensor()}var Zd=N({randomNormal_:mj});function dj(r,e,t){if(e!=null&&e==="bool")throw new Error(`Unsupported data type ${e}`);return Zd(r,0,1,e,t)}var uN=N({randomStandardNormal_:dj});function fj(r,e=0,t=1,o="float32",n){St(r);let s=ie(r,o),a=new Yd(e,t,null,n);for(let i=0;i<s.values.length;i++)s.values[i]=a.nextValue();return s.toTensor()}var dl=N({randomUniform_:fj});function hj(r,e,t,o){return dl(r,e,t,"int32",o)}var pN=N({randomUniformInt_:hj});function xu(r,e,t=1,o="float32"){if(t===0)throw new Error("Cannot have a step of zero");let n={start:r,stop:e,step:t,dtype:o};return _.runKernel(ba,{},n)}function gj(r){let t={input:v(r,"input","real")};return _.runKernel(si,t)}var bi=N({real_:gj});function xj(r){let t={x:v(r,"x","reciprocal")};return _.runKernel(xs,t)}var lN=N({reciprocal_:xj});function yj(r){let t={x:v(r,"x","relu")};return _.runKernel(ys,t)}var yu=N({relu_:yj});function bj(r){let t={x:v(r,"x","relu6")};return _.runKernel(ws,t)}var Jd=N({relu6_:bj});function Cj(r,e){let o={x:v(r,"x","reverse")},n={dims:e};return _.runKernel(Ss,o,n)}var Bo=N({reverse_:Cj});function wj(r){let e=v(r,"x","reverse");return $(e.rank===1,()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`),Bo(e,0)}var cN=N({reverse1d_:wj});function Sj(r,e){let t=v(r,"x","reverse");return $(t.rank===2,()=>`Error in reverse2D: x must be rank 2 but got rank ${t.rank}.`),Bo(t,e)}var mN=N({reverse2d_:Sj});function Ij(r,e){let t=v(r,"x","reverse");return $(t.rank===3,()=>`Error in reverse3D: x must be rank 3 but got rank ${t.rank}.`),Bo(t,e)}var dN=N({reverse3d_:Ij});function vj(r,e){let t=v(r,"x","reverse");return $(t.rank===4,()=>`Error in reverse4D: x must be rank 4 but got rank ${t.rank}.`),Bo(t,e)}var fN=N({reverse4d_:vj});function kj(r){let t={x:v(r,"x","round")};return _.runKernel(Is,t)}var ef=N({round_:kj});function Nj(r){let t={x:v(r,"x","rsqrt","float32")};return _.runKernel(Do,t)}var hN=N({rsqrt_:Nj});function Tj(r){let t={x:v(r,"x","selu")};return _.runKernel(Ts,t)}var gN=N({selu_:Tj});function _j(r,e,t,o,n,s=[1,1],a="NHWC"){let i=v(r,"x","separableConv2d"),p=v(e,"depthwiseFilter","separableConv2d"),u=v(t,"pointwiseFilter","separableConv2d"),l=i,c=!1;if(i.rank===3&&(c=!0,l=W(i,[1,i.shape[0],i.shape[1],i.shape[2]])),a==="NCHW")throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");$(l.rank===4,()=>`Error in separableConv2d: input must be rank 4, but got rank ${l.rank}.`),$(p.rank===4,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${p.rank}.`),$(u.rank===4,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${p.rank}.`),$(u.shape[0]===1,()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),$(u.shape[1]===1,()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);let m=p.shape[2],d=p.shape[3];$(u.shape[2]===m*d,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${m*d}, but got ${u.shape[2]}.`);let f=cl(l,p,o,n,a,s),g=du(f,u,1,"valid",a);return c?W(g,[g.shape[1],g.shape[2],g.shape[3]]):g}var xN=N({separableConv2d_:_j});async function Ej(r,e){let t=v(r,"x","setdiff1d"),o=v(e,"y","setdiff1d");$(t.dtype===o.dtype,()=>`x and y should have the same dtype, but got x (${t.dtype}) and y (${o.dtype}).`),$(t.rank===1,()=>`x should be 1D tensor, but got x (${t.shape}).`),$(o.rank===1,()=>`y should be 1D tensor, but got y (${o.shape}).`);let n=await t.data(),s=await o.data(),a=new Set(s),i=0;for(let l=0;l<n.length;l++)a.has(n[l])||i++;let p=new Ge([i],t.dtype),u=new Ge([i],"int32");for(let l=0,c=0;l<n.length;l++)a.has(n[l])||(p.values[c]=n[l],u.values[c]=l,c++);return[p.toTensor(),u.toTensor()]}var yN=Ej;function $j(r){let t={x:v(r,"x","sign")};return _.runKernel(Rs,t)}var bN=N({sign_:$j});function Rj(r){let t={x:v(r,"x","sin","float32")};return _.runKernel(Es,t)}var CN=N({sin_:Rj});function Dj(r){let t={x:v(r,"x","sinh")};return _.runKernel($s,t)}var wN=N({sinh_:Dj});function Aj(r,e,t){let o=v(r,"x","slice1d");return $(o.rank===1,()=>`slice1d expects a rank-1 tensor, but got a rank-${o.rank} tensor`),Ye(o,[e],[t])}var SN=N({slice1d_:Aj});function Fj(r,e,t){let o=v(r,"x","slice2d");return $(o.rank===2,()=>`slice2d expects a rank-2 tensor, but got a rank-${o.rank} tensor`),Ye(o,e,t)}var IN=N({slice2d_:Fj});function Pj(r,e,t){let o=v(r,"x","slice3d");return $(o.rank===3,()=>`slice3d expects a rank-3 tensor, but got a rank-${o.rank} tensor`),Ye(o,e,t)}var vN=N({slice3d_:Pj});function Oj(r,e,t){let o=v(r,"x","slice4d");return $(o.rank===4,()=>`slice4d expects a rank-4 tensor, but got a rank-${o.rank} tensor`),Ye(o,e,t)}var kN=N({slice4d_:Oj});function Mj(r,e=-1){let t=v(r,"logits","softmax","float32");if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and dim was ${e}`);let o={logits:t},n={dim:e};return _.runKernel(Fs,o,n)}var NN=N({softmax_:Mj});function Lj(r){$(r.dtype==="complex64",()=>`The dtype for tf.spectral.fft() must be complex64 but got ${r.dtype}.`);let e={input:r};return _.runKernel(Xi,e)}var fl=N({fft_:Lj});function Bj(r){$(r.dtype==="complex64",()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${r.dtype}.`);let e={input:r};return _.runKernel(Yi,e)}var ep=N({ifft_:Bj});function zj(r){let e=r.shape[r.shape.length-1],t=r.size/e,o;if(e<=2){let n=W(r,[t,e]);o=ep(n)}else{let n=[t,2*(e-1)],s=W(bi(r),[t,e]),a=W(gu(r),[t,e]),i=Bo(Ye(s,[0,1],[t,e-2]),1),p=se(Bo(Ye(a,[0,1],[t,e-2]),1),ke(-1)),u=bt([s,i],1),l=bt([a,p],1),c=W(Ar(u,l),[n[0],n[1]]);o=ep(c)}if(o=bi(o),r.rank===3&&r.shape[0]!==0){let n=o,s=r.shape[0];o=W(o,[s,o.shape[0]/s,o.shape[1]]),n.dispose()}return o}var tf=N({irfft_:zj});function Vj(r,e,t=0){let n={x:v(r,"x","split")},s={numOrSizeSplits:e,axis:t};return _.runKernel(Ia,n,s)}var Ci=N({split_:Vj});function Wj(r,e){$(r.dtype==="float32",()=>`The dtype for rfft() must be real value but got ${r.dtype}`);let t=r.shape[r.shape.length-1],o=r.size/t,n;if(e!=null&&e<t){let f=r.shape.map(g=>0),h=r.shape.map(g=>g);h[r.shape.length-1]=e,n=Ye(r,f,h),t=e}else if(e!=null&&e>t){let f=r.shape.map(h=>h);f[r.shape.length-1]=e-t,n=bt([r,Yr(f)],r.shape.length-1),t=e}else n=r;let s=Kt(n),a=W(Ar(n,s),[o,t]),i=fl(a),p=Math.floor(t/2)+1,u=bi(i),l=gu(i),c=Ci(u,[p,t-p],u.shape.length-1),m=Ci(l,[p,t-p],l.shape.length-1),d=n.shape.slice();return d[n.shape.length-1]=p,W(Ar(c[0],m[0]),d)}var hl=N({rfft_:Wj});function Uj(r,e){let t=v(r,"a","squaredDifference"),o=v(e,"b","squaredDifference");[t,o]=Oe(t,o),rt(t.shape,o.shape);let n={a:t,b:o},s={};return _.runKernel(Po,n,s)}var rf=N({squaredDifference_:Uj});function Gj(r,e){let t=v(r,"x","squeeze","string_or_numeric");return W(t,mw(t.shape,e).newShape)}var gl=N({squeeze_:Gj});function Hj(r,e=0){let t=di(r,"tensors","stack","string_or_numeric");$(t.length>=1,()=>"Pass at least one tensor to tf.stack"),t.length>0&&$(e<=t[0].rank,()=>"Axis must be <= rank of the tensor");let o=t,n={axis:e};return _.runKernel(ya,o,n)}var Tr=N({stack_:Hj});function Kj(r,e=0){let o={x:v(r,"x","step")},n={alpha:e};return _.runKernel(Ko,o,n)}var of=N({step_:Kj});function qj(r,e,t,o,n=0,s=0,a=0,i=0,p=0){let l={x:v(r,"x","stridedSlice","string_or_numeric")},c={begin:e,end:t,strides:o,beginMask:n,endMask:s,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:p};return _.runKernel(Os,l,c)}var TN=N({stridedSlice_:qj});function jj(r){let t={x:v(r,"x","tan","float32")};return _.runKernel(Ms,t)}var _N=N({tan_:jj});function rr(r,e){fo(r);let t=ur(r,e);if(t.length!==1)throw new Error("tensor1d() requires values to be a flat/TypedArray");return vr(r,null,t,e)}function bu(r,e,t){if(fo(r),e!=null&&e.length!==2)throw new Error("tensor2d() requires shape to have two numbers");let o=ur(r,t);if(o.length!==2&&o.length!==1)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(o.length===1&&e==null)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return vr(r,e,o,t)}function nf(r,e,t){if(fo(r),e!=null&&e.length!==3)throw new Error("tensor3d() requires shape to have three numbers");let o=ur(r,t);if(o.length!==3&&o.length!==1)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(o.length===1&&e==null)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return vr(r,e,o,t)}function EN(r,e,t){if(fo(r),e!=null&&e.length!==4)throw new Error("tensor4d() requires shape to have four numbers");let o=ur(r,t);if(o.length!==4&&o.length!==1)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(o.length===1&&e==null)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return vr(r,e,o,t)}function $N(r,e,t){if(fo(r),e!=null&&e.length!==5)throw new Error("tensor5d() requires shape to have five numbers");let o=ur(r,t);if(o.length!==5&&o.length!==1)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(o.length===1&&e==null)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return vr(r,e,o,t)}function RN(r,e,t){if(fo(r),e!=null&&e.length!==6)throw new Error("tensor6d() requires shape to have six numbers");let o=ur(r,t);if(o.length!==6&&o.length!==1)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(o.length===1&&e==null)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return e=e||o,vr(r,e,o,t)}var Cu={};qe(Cu,{calculateShapes:()=>DN,validateInput:()=>xl,validateUpdateShape:()=>lS});function lS(r,e,t){let o=e.rank>1?e.shape[e.rank-1]:1,n=e.rank>1?e.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${t.shape}, indices.shape: ${e.shape}, shape: ${r}, sliceDim: ${o}, and batchDim: ${n}.`;if(t.rank<n)throw new Error(s+` update.rank < ${n}. `);if(r.length<o+(t.rank-n))throw new Error(s+` Output shape length < ${o+(t.rank-n)}`);if(t.rank!==n+r.length-o)throw new Error(s+` update.rank != ${n+r.length-o}`);for(let a=0;a<n;++a)if(t.shape[a]!==e.shape[a])throw new Error(s+` updates.shape[${a}] (${t.shape[a]}) != indices.shape[${a}] (${e.shape[a]}).`);for(let a=0;a<t.rank-n;++a)if(t.shape[a+n]!==r[a+o])throw new Error(s+` updates.shape[${a+n}] (${t.shape[a+n]}) != shape[${a+n}] (${r[a+n]})`)}function xl(r,e,t){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(r.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${r.rank}.`);if(e.dtype!=="int32")throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);if(t.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${t}`);if(t.length===0){if(e.size===0)throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);if(r.size===0)throw new Error(`Updates specified for empty output. updates shape: ${r.shape}`)}lS(t,e,r)}function DN(r,e,t){let o=e.shape.length,n=o>1?e.shape[o-1]:1,s=t.length,a=1;for(let c=n;c<s;++c)a*=t[c];let i=n<1?1:n,p=ze(e.shape)/i,u=[...oa(t.slice(0,n)),1],l=ze(t);return{sliceRank:n,numUpdates:p,sliceSize:a,strides:u,outputSize:l}}function Xj(r,e,t){let o=v(r,"tensor","tensorScatterupdate"),n=v(e,"indices","tensorScatterupdate","int32"),s=v(t,"updates","tensorScatterupdate");if(xl(s,n,o.shape),o.dtype!==s.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${o.dtype} and ${s.dtype}.`);let a={tensor:o,indices:n,updates:s},i={};return _.runKernel(ks,a,i)}var AN=N({tensorScatterUpdate_:Xj});function Yj(r,e=1,t=!0){let o=v(r,"x","topk");if(o.rank===0)throw new Error("topk() expects the input to be of rank 1 or higher");let n=o.shape[o.shape.length-1];if(e<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);if(e>n)throw new Error(`'k' passed to topk() must be <= the last dimension (${n}) but got ${e}`);let s={x:o},a={k:e,sorted:t},[i,p]=_.runKernel(Bs,s,a);return{values:i,indices:p}}var FN=N({topk_:Yj});function Qj(r,e=0,t=1,o,n){if(St(r),o!=null&&o==="bool")throw new Error("Unsupported data type $ { dtype }");let s=new Ju(e,t,o,!0,n),a=ie(r,o);for(let i=0;i<a.values.length;i++)a.values[i]=s.nextValue();return a.toTensor()}var PN=N({truncatedNormal_:Qj});function Zj(r,e=0){let t=v(r,"x","unique","string_or_numeric");$(t.rank>0,()=>"The input tensor must be at least 1D");let o={x:t},n={axis:e},[s,a]=_.runKernel(nu,o,n);return{values:s,indices:a}}var ON=N({unique_:Zj});function Jj(r,e,t){let o=v(r,"x","unsortedSegmentSum"),n=v(e,"segmentIds","unsortedSegmentSum","int32");$(Ja(t),()=>"numSegments must be of dtype int");let s={x:o,segmentIds:n},a={numSegments:t};return _.runKernel(su,s,a)}var MN=N({unsortedSegmentSum_:Jj});function eX(r,e=0){let t=v(r,"x","unstack","string_or_numeric");$(e>=-t.shape.length&&e<t.shape.length,()=>`Axis = ${e} is not in [-${t.shape.length}, ${t.shape.length})`);let o={value:t},n={axis:e};return _.runKernel(Ta,o,n)}var zo=N({unstack_:eX});function LN(r,e){return Pc(r,e,"right")}function BN(r,e=!0,t,o){return _.makeVariable(r,e,t,o)}function sf(r,e){let t=[];for(let s=0;s<e.length;s++)e[s]&&t.push(s);let o=ie(r,"int32"),n=ie([t.length,r.length],"int32");for(let s=0;s<t.length;s++){let a=o.indexToLoc(t[s]),i=s*r.length;n.values.set(a,i)}return n.toTensor()}async function tX(r){let e=v(r,"condition","whereAsync","bool"),t=await e.data(),o=sf(e.shape,t);return r!==e&&e.dispose(),o}var af=tX;async function rX(r,e,t){let o=v(r,"tensor","boolMask"),n=v(e,"mask","boolMask","bool"),s=t==null?0:t,a=n.rank,i=o.shape;$(a>0,()=>"mask cannot be scalar"),yt(i.slice(s,s+a),n.shape,"mask's shape must match the first K dimensions of tensor's shape,");let p=1;for(let h=s;h<s+a;h++)p*=i[h];let u=i.slice(0,s).concat([p],i.slice(s+a)),l=W(o,u),c=W(n,[-1]),m=await af(c),d=gl(m,[1]),f=Dd(l,d,s);return r!==o&&o.dispose(),e!==n&&n.dispose(),d.dispose(),l.dispose(),c.dispose(),m.dispose(),f}var oX=rX;function nX(r,e,t){let o=v(r,"x","transpose");if(e==null&&(e=o.shape.map((a,i)=>i).reverse()),$(o.rank===e.length,()=>`Error in transpose: rank of input ${o.rank} must match length of perm ${e}.`),e.forEach(a=>{$(a>=0&&a<o.rank,()=>`All entries in 'perm' must be between 0 and ${o.rank-1} but got ${e}`)}),o.rank<=1)return o.clone();let n={x:o},s={perm:e};return o.dtype==="complex64"?De(()=>{let a=bi(o),i=gu(o);return a=_.runKernel(Kr,{x:a},s),i=_.runKernel(Kr,{x:i},s),t&&(i=mr(i)),Ar(a,i)}):_.runKernel(Kr,n,s)}var yl=N({transpose_:nX});function sX(r,e,t,o,n=!0){let s=v(r,"v","movingAverage"),a=v(e,"x","movingAverage"),i=v(t,"decay","movingAverage");Fw(s,a),$(Sr(s.shape,a.shape),()=>"Shape mismatch in v and x");let p=ke(1),u=Te(p,i),l=se(Te(a,s),u);if(n){$(o!=null,()=>"When using zeroDebias: true, step is required.");let c=v(o,"step","movingAverage");l=Xe(l,Te(p,xi(i,c)))}return Ce(s,l)}var aX=N({movingAverage_:sX});function iX(r,e,t){St(t);let o=v(r,"indices","scatterND","int32"),n=v(e,"updates","scatterND");xl(n,o,t);let s={indices:o,updates:n},a={shape:t};return _.runKernel(vs,s,a)}var uX=N({scatterND_:iX});function zN(r,e,t,o){if(r.dtype!=="int32")throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${r.dtype}.`);if(r.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${r.shape}.`);let n=r.rank>0?r.shape[0]:1,s=r.rank>1?r.shape[1]:1;if(t.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${t.length}, should be: ${s}.`);let a=e.size;if(!(e.rank===0||e.rank===1&&a===n))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${n}]`);if(e.dtype!==o.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}function lX(r,e,t,o=0){St(t);let n=v(r,"sparseIndices","sparseToDense","int32"),s=v(e,"sparseValues","sparseToDense","string_or_numeric"),a=v(o,"defaultValue","sparseToDense",s.dtype);zN(n,s,t,a);let i={sparseIndices:n,sparseValues:s,defaultValue:a},p={outputShape:t};return _.runKernel(Ps,i,p)}var cX=N({sparseToDense_:lX});function mX(r,e){let t=v(e,"indices","gatherND","int32"),n={params:v(r,"x","gatherND","string_or_numeric"),indices:t};return _.runKernel(Kn,n)}var dX=N({gatherND_:mX});function VN(r,e){if(e==null)return r.shape.slice();if(Sr(r.shape,e))return e;if(r.shape.length===e.length){let t=[];for(let o=0;o<r.shape.length;o++)e[o]==null&&r.shape[o]!=null?t.push(r.shape[o]):t.push(e[o]);return t}return e}function fX(r,e,t,o){let n=v(r,"x","dropout");if($(n.dtype==="float32",()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${n.dtype} tensor instead.`),$(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),e===0)return r instanceof dt?n.clone():n;let s=VN(n,t),a=1-e,i=Xe(Rd(Ce(dl(s,0,1,"float32",o),a)),a);return se(n,i)}var hX=N({dropout_:fX});function cS(r){return Math.floor(Math.pow(2,Math.ceil(Math.log(r)/Math.log(2))))}function Mc(r,e,t){let o=1-r%2,n=new Float32Array(r);for(let s=0;s<r;++s){let a=2*Math.PI*s/(r+o-1);n[s]=e-t*Math.cos(a)}return rr(n,"float32")}async function gX(r,e,t=1){let o=v(r,"predictions","inTopK"),n=v(e,"targets","inTopK");$(o.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${o.rank}`),$(o.rank-1===n.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${o.rank} and targets rank ${n.rank}`),yt(o.shape.slice(0,o.shape.length-1),n.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");let s=o.shape[o.shape.length-1];$(t>0&&t<=s,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${t}`);let a=await o.data(),i=await n.data(),[p,u]=[a.length/s,s],l=dw("bool",p);for(let c=0;c<p;c++){let m=c*u,d=a.subarray(m,m+u),f=[];for(let h=0;h<d.length;h++)f.push({value:d[h],index:h});f.sort((h,g)=>g.value-h.value),l[c]=0;for(let h=0;h<t;h++)if(f[h].index===i[c]){l[c]=1;break}}return r!==o&&o.dispose(),e!==n&&n.dispose(),pr(l,n.shape,"bool")}var xX=gX;var mS={};qe(mS,{conv2d:()=>UN,depthwiseConv2d:()=>KN,matMul:()=>qN});function yX(r,e,t,o,n,s="NHWC",a){let i=r;r.rank===3&&(i=W(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let p=e;p.rank===3&&(p=W(e,[1,e.shape[0],e.shape[1],e.shape[2]])),$(i.rank===4,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`),$(p.rank===4,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${p.shape}.`),$(t.length===4,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${t}.`);let u=s==="NHWC"?i.shape[3]:i.shape[1],l=s==="NHWC"?p.shape[3]:p.shape[1];$(u===t[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${t[2]}.`),$(l===t[3],()=>`Error in conv2dDerFilter: depth of dy (${l}) must match output depth for filter (${t[3]}).`),zt("conv2dDerFilter",n,a);let c={x:i,dy:p},m={strides:o,pad:n,dataFormat:s,dimRoundingMode:a,filterShape:t};return _.runKernel(Ui,c,m)}var WN=N({conv2DBackpropFilter_:yX});function tp(r,e,t){if(t==null||t==="linear")return r;if(t==="relu")return se(r,of(e));throw new Error(`Cannot compute gradient for fused activation ${t}.`)}function rp(r,e){let t=e,o=Td(r.shape,e.shape);return o.length>0&&(t=ot(t,o)),W(t,r.shape)}function op(r,e,t,o){if(e==="linear")return r;if(e==="relu")return yu(r);if(e==="elu")return Ed(r);if(e==="relu6")return Jd(r);if(e==="prelu")return Kd(r,t);if(e==="leakyrelu")return Fd(r,o);if(e==="sigmoid")return Pa(r);throw new Error(`Unknown fused activation ${e}.`)}var np=(r,e)=>!(r>0)||e==="linear";function bX({x:r,filter:e,strides:t,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:a,bias:i,activation:p="linear",preluActivationWeights:u,leakyreluAlpha:l}){if(p=p||"linear",np(_.state.gradientDepth,p)===!1){$(n==="NHWC",()=>`Error in fused conv2d: got dataFormat of ${n} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let T=du(r,e,t,o,n,s,a);return i!=null&&(T=Ce(T,i)),op(T,p,u,l)}let c=v(r,"x","conv2d","float32"),m=v(e,"filter","conv2d","float32"),d=c,f=!1;c.rank===3&&(f=!0,d=W(c,[1,c.shape[0],c.shape[1],c.shape[2]])),$(d.rank===4,()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`),$(m.rank===4,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${m.rank}.`),zt("fused conv2d",o,a);let h=n==="NHWC"?d.shape[3]:d.shape[1];$(m.shape[2]===h,()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${m.shape[2]}.`),$(br(t,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${s}'`);let g=Ku(d.shape,m.shape,t,s,o,a),x;i!=null&&(x=v(i,"bias","fused conv2d"),[x]=Oe(x,c),n==="NHWC"?rt(g.outShape,x.shape):($(x.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`),$(x.shape.length===0||x.shape[0]===g.outChannels||x.shape[0]===1,()=>`Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${g.outChannels})`)));let b;if(u!=null){let T=u.shape;if($(T.length<=1||T.length===3,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${T.length}.`),T.length===1)$(T[0]===1||T[0]===g.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${T}) is not compatible with the number of output channels (${g.outChannels}).`);else if(T.length===3)try{rt(T,g.outShape)}catch(E){let R=`Error in fused conv2d: PReLU activation weights (${T}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(R)}b=v(u,"prelu weights","fused conv2d")}let w=(T,E)=>{$(n==="NHWC",()=>`Error in gradient of fused conv2D: got dataFormat of ${n} but only NHWC is currently supported.`);let[R,D,F,O]=E,M=tp(T,F,p);$(Hu(s),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);let L=Nd(D.shape,M,R,t,o),B=WN(D,M,R.shape,t,o),z=[L,B];if(O!=null){let U=rp(O,M);z.push(U)}return z},S={x:d,filter:m,bias:x,preluActivationWeights:b},k={strides:t,pad:o,dataFormat:n,dilations:s,dimRoundingMode:a,activation:p,leakyreluAlpha:l};return i==null?Nr((E,R,D)=>{let F=_.runKernel(jo,S,k);return D([R,E,F]),f&&(F=W(F,[F.shape[1],F.shape[2],F.shape[3]])),{value:F,gradFunc:w}})(d,m):Nr((E,R,D,F)=>{let O=_.runKernel(jo,S,k);return F([R,E,O,D]),f&&(O=W(O,[O.shape[1],O.shape[2],O.shape[3]])),{value:O,gradFunc:w}})(d,m,x)}var UN=N({fusedConv2d_:bX});function CX(r,e,t,o,n,s=[1,1],a){let i=r;r.rank===3&&(i=W(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let p=e;p.rank===3&&(p=W(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u={x:i,dy:p},l={strides:o,pad:n,dimRoundingMode:a,dilations:s,filterShape:t};return _.runKernel(Gi,u,l)}var GN=N({depthwiseConv2dNativeBackpropFilter_:CX});function wX(r,e,t,o,n,s=[1,1],a){let i=e,p=!1;e.rank===3&&(p=!0,i=W(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u={dy:i,filter:t},l={strides:o,pad:n,dimRoundingMode:a,dilations:s,inputShape:r},c=_.runKernel(Hi,u,l);return p?W(c,[c.shape[1],c.shape[2],c.shape[3]]):c}var HN=N({depthwiseConv2dNativeBackpropInput_:wX});function SX({x:r,filter:e,strides:t,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:a,bias:i,activation:p="linear",preluActivationWeights:u,leakyreluAlpha:l}){if(np(_.state.gradientDepth,p)===!1){let k=cl(r,e,t,o,n,s,a);return i!=null&&(k=Ce(k,i)),op(k,p,u,l)}let c=v(r,"x","depthwiseConv2d","float32"),m=v(e,"filter","depthwiseConv2d","float32"),d=c,f=!1;c.rank===3&&(f=!0,d=W(c,[1,c.shape[0],c.shape[1],c.shape[2]])),$(d.rank===4,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),$(m.rank===4,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`),$(d.shape[3]===m.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${m.shape[2]}.`),s==null&&(s=[1,1]),$(br(t,s),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${t} and dilations '${s}'`),zt("fused depthwiseConv2d",o,a);let h=Ku(d.shape,m.shape,t,s,o,a,!0),g;i!=null&&(g=v(i,"bias","fused conv2d"),[g]=Oe(g,c),rt(h.outShape,g.shape));let x;u!=null&&(x=v(u,"prelu weights","fused depthwiseConv2d"));let b=(k,T)=>{$(Hu(s),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);let[E,R,D,F]=T,O=tp(k,D,p),M=HN(R.shape,O,E,t,o,s,a),L=GN(R,O,E.shape,t,o,s,a);if(F!=null){let B=rp(g,O);return[M,L,B]}return[M,L]},w={x:d,filter:m,bias:g,preluActivationWeights:x},S={strides:t,pad:o,dataFormat:n,dilations:s,dimRoundingMode:a,activation:p,leakyreluAlpha:l};return i==null?Nr((T,E,R)=>{let D=_.runKernel(Xo,w,S);return R([E,T,D]),f&&(D=W(D,[D.shape[1],D.shape[2],D.shape[3]])),{value:D,gradFunc:b}})(d,m):Nr((T,E,R,D)=>{let F=_.runKernel(Xo,w,S);return D([E,T,F,R]),f&&(F=W(F,[F.shape[1],F.shape[2],F.shape[3]])),{value:F,gradFunc:b}})(d,m,g)}var KN=N({fusedDepthwiseConv2d_:SX});function IX({a:r,b:e,transposeA:t=!1,transposeB:o=!1,bias:n,activation:s="linear",preluActivationWeights:a,leakyreluAlpha:i=.2}){if(np(_.state.gradientDepth,s)===!1){let O=Je(r,e,t,o);return n!=null&&(O=Ce(O,n)),op(O,s,a,i)}let p=v(r,"a","fused matMul"),u=v(e,"b","fused matMul");[p,u]=Oe(p,u);let l=t?p.shape[p.rank-2]:p.shape[p.rank-1],c=o?u.shape[u.rank-1]:u.shape[u.rank-2],m=t?p.shape[p.rank-1]:p.shape[p.rank-2],d=o?u.shape[u.rank-2]:u.shape[u.rank-1],f=p.shape.slice(0,-2),h=u.shape.slice(0,-2),g=ze(f),x=ze(h);$(l===c,()=>`Error in fused matMul: inner shapes (${l}) and (${c}) of Tensors with shapes ${p.shape} and ${u.shape} and transposeA=${t} and transposeB=${o} must match.`);let w=rt(p.shape.slice(0,-2),u.shape.slice(0,-2)).concat([m,d]),S=t?W(p,[g,l,m]):W(p,[g,m,l]),k=o?W(u,[x,d,c]):W(u,[x,c,d]),T;n!=null&&(T=v(n,"bias","fused matMul"),[T]=Oe(T,p),rt(w,T.shape));let E;a!=null&&(E=v(a,"prelu weights","fused matMul"));let R=(O,M)=>{let[L,B,z,U]=M,j=tp(W(O,z.shape),z,s),q,Y;if(!t&&!o?(q=Je(j,B,!1,!0),Y=Je(L,j,!0,!1)):!t&&o?(q=Je(j,B,!1,!1),Y=Je(j,L,!0,!1)):t&&!o?(q=Je(B,j,!1,!0),Y=Je(L,j,!1,!1)):(q=Je(B,j,!0,!0),Y=Je(j,L,!0,!0)),n!=null){let J=rp(U,j);return[q,Y,J]}else return[q,Y]},D={a:S,b:k,bias:T,preluActivationWeights:E},F={transposeA:t,transposeB:o,activation:s,leakyreluAlpha:i};return n==null?Nr((M,L,B)=>{let z=_.runKernel(qo,D,F);return B([M,L,z]),{value:W(z,w),gradFunc:R}})(S,k):Nr((M,L,B,z)=>{let U=_.runKernel(qo,D,F);return z([M,L,U,B]),{value:W(U,w),gradFunc:R}})(S,k,T)}var qN=N({fusedMatMul_:IX});function vX(r){return Mc(r,.54,.46)}var jN=N({hammingWindow_:vX});function kX(r){return Mc(r,.5,.5)}var uf=N({hannWindow_:kX});function NX(r,e,t,o=!1,n=0){let s=0,a=[];for(;s+e<=r.size;)a.push(Ye(r,s,e)),s+=t;if(o)for(;s<r.size;){let i=s+e-r.size,p=bt([Ye(r,s,e-i),Ma([i],n)]);a.push(p),s+=t}return a.length===0?bu([],[0,e]):W(bt(a),[a.length,e])}var pf=N({frame_:NX});function TX(r,e,t,o,n=uf){o==null&&(o=cS(e));let s=pf(r,e,t),a=se(s,n(e));return hl(a,o)}var XN=N({stft_:TX});function _X(r,e,t,o,n="bilinear",s=0){let a=v(r,"image","cropAndResize"),i=v(e,"boxes","cropAndResize","float32"),p=v(t,"boxInd","cropAndResize","int32"),u=i.shape[0];$(a.rank===4,()=>`Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`),$(i.rank===2&&i.shape[1]===4,()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`),$(p.rank===1&&p.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`),$(o.length===2,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${o.length}.`),$(o[0]>=1&&o[1]>=1,()=>`cropSize must be atleast [1,1], but was ${o}`),$(n==="bilinear"||n==="nearest",()=>`method must be bilinear or nearest, but was ${n}`);let l={image:a,boxes:i,boxInd:p},c={method:n,extrapolationValue:s,cropSize:o};return _.runKernel(Mn,l,c)}var YN=N({cropAndResize_:_X});function EX(r){let e=v(r,"image","flipLeftRight","float32");$(e.rank===4,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);let t={image:e};return _.runKernel(Gn,t,{})}var QN=N({flipLeftRight_:EX});function $X(r){let e=v(r,"image","grayscaleToRGB"),t=e.rank-1,o=e.shape[t];$(e.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`),$(o===1,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${o}.`);let n=new Array(e.rank);return n.fill(1,0,t),n[t]=3,hu(e,n)}var ZN=N({grayscaleToRGB_:$X});function RX(r){let e=v(r,"image","RGBToGrayscale"),t=e.rank-1,o=e.shape[t];$(e.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${e.rank}.`),$(o===3,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${o}.`);let n=e.dtype,s=Ue(e,"float32"),a=rr([.2989,.587,.114]),i;switch(e.rank){case 2:i=fu("ij,j->i",s,a);break;case 3:i=fu("ijk,k->ij",s,a);break;case 4:i=fu("ijkl,l->ijk",s,a);break;case 5:i=fu("ijklm,m->ijkl",s,a);break;case 6:i=fu("ijklmn,n->ijklm",s,a);break;default:throw new Error("Not a valid tensor rank.")}return i=Ks(i,-1),Ue(i,n)}var JN=N({rgbToGrayscale_:RX});function DX(r,e,t=0,o=.5){let n=v(r,"image","rotateWithOffset","float32");$(n.rank===4,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${n.rank}.`);let s={image:n},a={radians:e,fillValue:t,center:o};return _.runKernel(Vs,s,a)}var eT=N({rotateWithOffset_:DX});function en(r,e,t,o,n,s){o==null&&(o=.5),n==null&&(n=Number.NEGATIVE_INFINITY),s==null&&(s=0);let a=r.shape[0];return t=Math.min(t,a),$(0<=o&&o<=1,()=>`iouThreshold must be in [0, 1], but was '${o}'`),$(r.rank===2,()=>`boxes must be a 2D tensor, but was of rank '${r.rank}'`),$(r.shape[1]===4,()=>`boxes must have 4 columns, but 2nd dimension was ${r.shape[1]}`),$(e.rank===1,()=>"scores must be a 1D tensor"),$(e.shape[0]===a,()=>`scores has incompatible shape with boxes. Expected ${a}, but was ${e.shape[0]}`),$(0<=s&&s<=1,()=>`softNmsSigma must be in [0, 1], but was '${s}'`),{maxOutputSize:t,iouThreshold:o,scoreThreshold:n,softNmsSigma:s}}function AX(r,e,t,o=.5,n=Number.NEGATIVE_INFINITY){let s=v(r,"boxes","nonMaxSuppression","float32"),a=v(e,"scores","nonMaxSuppression","float32"),i=en(s,a,t,o,n);t=i.maxOutputSize,o=i.iouThreshold,n=i.scoreThreshold;let p={maxOutputSize:t,iouThreshold:o,scoreThreshold:n};return _.runKernel(cs,{boxes:s,scores:a},p)}var tT=N({nonMaxSuppression_:AX});function rT(r,e,t){let o=FX(r,e,t),n=o<0?-(o+1):o;r.splice(n,0,e)}function FX(r,e,t){return OX(r,e,t||PX)}function PX(r,e){return r>e?1:r<e?-1:0}function OX(r,e,t){let o=0,n=r.length,s=0,a=!1;for(;o<n;){s=o+(n-o>>>1);let i=t(e,r[s]);i>0?o=s+1:(n=s,a=!i)}return a?o:-o-1}function lf(r,e,t,o,n){return dS(r,e,t,o,n,0)}function cf(r,e,t,o,n,s){return dS(r,e,t,o,n,0,!1,s,!0)}function mf(r,e,t,o,n,s){return dS(r,e,t,o,n,s,!0)}function dS(r,e,t,o,n,s,a=!1,i=!1,p=!1){let u=[];for(let g=0;g<e.length;g++)e[g]>n&&u.push({score:e[g],boxIndex:g,suppressBeginIndex:0});u.sort(oT);let l=s>0?-.5/s:0,c=[],m=[];for(;c.length<t&&u.length>0;){let g=u.pop(),{score:x,boxIndex:b,suppressBeginIndex:w}=g;if(x<n)break;let S=!1;for(let k=c.length-1;k>=w;--k){let T=MX(r,b,c[k]);if(T>=o){S=!0;break}if(g.score=g.score*LX(o,l,T),g.score<=n)break}g.suppressBeginIndex=c.length,S||(g.score===x?(c.push(b),m.push(g.score)):g.score>n&&rT(u,g,oT))}let d=c.length,f=t-d;i&&f>0&&(c.push(...new Array(f).fill(0)),m.push(...new Array(f).fill(0)));let h={selectedIndices:c};return a&&(h.selectedScores=m),p&&(h.validOutputs=d),h}function MX(r,e,t){let o=r.subarray(e*4,e*4+4),n=r.subarray(t*4,t*4+4),s=Math.min(o[0],o[2]),a=Math.min(o[1],o[3]),i=Math.max(o[0],o[2]),p=Math.max(o[1],o[3]),u=Math.min(n[0],n[2]),l=Math.min(n[1],n[3]),c=Math.max(n[0],n[2]),m=Math.max(n[1],n[3]),d=(i-s)*(p-a),f=(c-u)*(m-l);if(d<=0||f<=0)return 0;let h=Math.max(s,u),g=Math.max(a,l),x=Math.min(i,c),b=Math.min(p,m),w=Math.max(x-h,0)*Math.max(b-g,0);return w/(d+f-w)}function LX(r,e,t){let o=Math.exp(e*t*t);return t<=r?o:0}function oT(r,e){return r.score-e.score||r.score===e.score&&e.boxIndex-r.boxIndex}async function BX(r,e,t,o=.5,n=Number.NEGATIVE_INFINITY){let s=v(r,"boxes","nonMaxSuppressionAsync"),a=v(e,"scores","nonMaxSuppressionAsync"),i=en(s,a,t,o,n);t=i.maxOutputSize,o=i.iouThreshold,n=i.scoreThreshold;let p=await Promise.all([s.data(),a.data()]),u=p[0],l=p[1],{selectedIndices:c}=lf(u,l,t,o,n);return s!==r&&s.dispose(),a!==e&&a.dispose(),rr(c,"int32")}var nT=BX;function zX(r,e,t,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let a=v(r,"boxes","nonMaxSuppression"),i=v(e,"scores","nonMaxSuppression"),p=en(a,i,t,o,n,s);t=p.maxOutputSize,o=p.iouThreshold,n=p.scoreThreshold,s=p.softNmsSigma;let u={boxes:a,scores:i},l={maxOutputSize:t,iouThreshold:o,scoreThreshold:n,softNmsSigma:s},c=_.runKernel(ms,u,l);return{selectedIndices:c[0],selectedScores:c[1]}}var sT=N({nonMaxSuppressionWithScore_:zX});async function VX(r,e,t,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let a=v(r,"boxes","nonMaxSuppressionAsync"),i=v(e,"scores","nonMaxSuppressionAsync"),p=en(a,i,t,o,n,s);t=p.maxOutputSize,o=p.iouThreshold,n=p.scoreThreshold,s=p.softNmsSigma;let u=await Promise.all([a.data(),i.data()]),l=u[0],c=u[1],{selectedIndices:m,selectedScores:d}=mf(l,c,t,o,n,s);return a!==r&&a.dispose(),i!==e&&i.dispose(),{selectedIndices:rr(m,"int32"),selectedScores:rr(d)}}var aT=VX;function WX(r,e,t,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let a=v(r,"boxes","nonMaxSuppression"),i=v(e,"scores","nonMaxSuppression"),p=en(a,i,t,o,n,null),u=p.maxOutputSize,l=p.iouThreshold,c=p.scoreThreshold,m={boxes:a,scores:i},d={maxOutputSize:u,iouThreshold:l,scoreThreshold:c,padToMaxOutputSize:s},f=_.runKernel(ni,m,d);return{selectedIndices:f[0],validOutputs:f[1]}}var iT=N({nonMaxSuppressionPadded_:WX});async function UX(r,e,t,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let a=v(r,"boxes","nonMaxSuppressionAsync"),i=v(e,"scores","nonMaxSuppressionAsync"),p=en(a,i,t,o,n,null),u=p.maxOutputSize,l=p.iouThreshold,c=p.scoreThreshold,[m,d]=await Promise.all([a.data(),i.data()]),{selectedIndices:f,validOutputs:h}=cf(m,d,u,l,c,s);return a!==r&&a.dispose(),i!==e&&i.dispose(),{selectedIndices:rr(f,"int32"),validOutputs:ke(h,"int32")}}var uT=UX;function GX(r,e,t=!1,o=!1){let n=v(r,"images","resizeBilinear");$(n.rank===3||n.rank===4,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${n.rank}.`),$(e.length===2,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${e}.`),$(o===!1||t===!1,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let s=n,a=!1;n.rank===3&&(a=!0,s=W(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=e,i={images:s},p={alignCorners:t,halfPixelCenters:o,size:e},u=_.runKernel(Cs,i,p);return a?W(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var pT=N({resizeBilinear_:GX});function HX(r,e,t=!1,o=!1){let n=v(r,"images","resizeNearestNeighbor");$(n.rank===3||n.rank===4,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${n.rank}.`),$(e.length===2,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`),$(n.dtype==="float32"||n.dtype==="int32",()=>"`images` must have `int32` or `float32` as dtype"),$(o===!1||t===!1,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let s=n,a=!1;n.rank===3&&(a=!0,s=W(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=e,i={images:s},p={alignCorners:t,halfPixelCenters:o,size:e},u=_.runKernel(bs,i,p);return a?W(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var lT=N({resizeNearestNeighbor_:HX});function KX(r,e="binary",t=!1,o=.5){let n=v(r,"image","threshold"),s=.2989,a=.587,i=.114,p=n.shape[0]*n.shape[1],u=se(rr([o]),255),l,c,m,d;if($(n.rank===3,()=>`Error in threshold: image must be rank 3,but got rank ${n.rank}.`),$(n.shape[2]===3||n.shape[2]===1,()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${n.shape[2]}.`),$(n.dtype==="int32"||n.dtype==="float32",()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${n.dtype}.`),$(e==="otsu"||e==="binary",()=>`Method must be binary or otsu, but was ${e}`),n.shape[2]===3){[l,c,m]=Ci(n,[1,1,1],-1);let g=se(l,s),x=se(c,a),b=se(m,i);d=Ce(Ce(g,x),b)}else d=r;if(e==="otsu"){let g=kd(Ue(ef(d),"int32"),pr([]),256);u=qX(g,p)}let f=t?ml(d,u):ju(d,u);return Ue(se(f,255),"int32")}function qX(r,e){let t=rr([-1]),o=rr([0]),n=rr([0]),s,a,i,p,u,l;for(let c=0;c<r.size-1;c++){s=Ye(r,0,c+1),a=Ye(r,c+1),u=Xe(ot(s),e),l=Xe(ot(a),e);let m=ot(se(s,xu(0,s.size)));i=Xe(m,ot(s));let d=Ma(a.shape,s.size),f=Ce(xu(0,a.size),d),h=se(a,f);p=Xe(ot(h),ot(a));let g=Te(i,p),x=Te(i,p),b=se(u,l);n=se(se(b,g),x);let w=ju(n,o);o=Lo(w,n,o),t=Lo(w,rr([c]),t)}return t}var cT=N({threshold_:KX});function jX(r,e,t="nearest",o="constant",n=0,s){let a=v(r,"image","transform","float32"),i=v(e,"transforms","transform","float32");$(a.rank===4,()=>`Error in transform: image must be rank 4,but got rank ${a.rank}.`),$(i.rank===2&&(i.shape[0]===a.shape[0]||i.shape[0]===1)&&i.shape[1]===8,()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),$(s==null||s.length===2,()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`);let p={image:a,transforms:i},u={interpolation:t,fillMode:o,fillValue:n,outputShape:s};return _.runKernel(zs,p,u)}var mT=N({transform_:jX});function XX(r,e,t){let o=v(r,"a","bandPart");$(o.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${o.rank}.`);let n=o.shape,[s,a]=o.shape.slice(-2),i,p;typeof e=="number"?($(e%1===0,()=>`bandPart(): numLower must be an integer, got ${e}.`),$(e<=s,()=>`bandPart(): numLower (${e}) must not be greater than the number of rows (${s}).`),i=v(e<0?s:e,"numLower","bandPart")):($(e.dtype==="int32",()=>"bandPart(): numLower's dtype must be an int32."),i=Lo(Fc(e,0),s,Qu(e,s))),typeof t=="number"?($(t%1===0,()=>`bandPart(): numUpper must be an integer, got ${t}.`),$(t<=a,()=>`bandPart(): numUpper (${t}) must not be greater than the number of columns (${a}).`),p=v(t<0?a:t,"numUpper","bandPart")):($(t.dtype==="int32",()=>"bandPart(): numUpper's dtype must be an int32."),p=Lo(Fc(t,0),a,Qu(t,a)));let u=W(xu(0,s,1,"int32"),[-1,1]),l=xu(0,a,1,"int32"),c=Te(u,l),m=Xu(ml(c,i),Ad(c,mr(p))),d=Yr([s,a],o.dtype);return W(Tr(zo(W(o,[-1,s,a])).map(f=>Lo(m,f,d))),n)}var dT=N({bandPart_:XX});function YX(r){let e;if(Array.isArray(r)){e=!1,$(r!=null&&r.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");let n=r[0].shape[0];for(let s=1;s<r.length;++s)$(r[s].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${r[s].shape[0]} vs. ${n})`)}else e=!0,r=Ci(r,r.shape[0],0).map(n=>gl(n,[0]));$(r.length<=r[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${r.length}) exceeds number of dimensions (${r[0].shape[0]}).`);let t=[],o=r;for(let n=0;n<r.length;++n)t.push(_.tidy(()=>{let s=o[n];if(n>0)for(let a=0;a<n;++a){let i=se(ot(se(t[a],s)),t[a]);s=Te(s,i)}return Xe(s,qu(s,"euclidean"))}));return e?Tr(t,0):t}var fT=N({gramSchmidt_:YX});function QX(r,e=!1){if($(r.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${r.rank}`),r.rank===2)return hT(r,e);{let t=r.shape.slice(0,r.shape.length-2).reduce((p,u)=>p*u),o=zo(W(r,[t,r.shape[r.shape.length-2],r.shape[r.shape.length-1]]),0),n=[],s=[];o.forEach(p=>{let[u,l]=hT(p,e);n.push(u),s.push(l)});let a=W(Tr(n,0),r.shape),i=W(Tr(s,0),r.shape);return[a,i]}}function hT(r,e=!1){return _.tidy(()=>{$(r.shape.length===2,()=>`qr2d() requires a 2D Tensor, but got a ${r.shape.length}D Tensor.`);let t=r.shape[0],o=r.shape[1],n=$d(t),s=Xr(r),a=bu([[1]],[1,1]),i=Xr(a),p=t>=o?o:t;for(let u=0;u<p;++u){let l=s,c=i,m=n;[i,s,n]=_.tidy(()=>{let d=Ye(s,[u,u],[t-u,1]),f=qu(d),h=Ye(s,[u,u],[1,1]),g=Lo(ju(h,0),bu([[-1]]),bu([[1]])),x=Te(h,se(g,f)),b=Xe(d,x);b.shape[0]===1?i=Xr(a):i=bt([a,Ye(b,[1,0],[b.shape[0]-1,b.shape[1]])],0);let w=mr(Xe(Je(g,x),f)),S=Ye(s,[u,0],[t-u,o]),k=se(w,i),T=yl(i);if(u===0)s=Te(S,Je(k,Je(T,S)));else{let D=Te(S,Je(k,Je(T,S)));s=bt([Ye(s,[0,0],[u,o]),D],0)}let E=yl(k),R=Ye(n,[0,u],[t,n.shape[1]-u]);if(u===0)n=Te(R,Je(Je(R,i),E));else{let D=Te(R,Je(Je(R,i),E));n=bt([Ye(n,[0,0],[t,u]),D],1)}return[i,s,n]}),Lt([l,c,m])}return!e&&t>o&&(n=Ye(n,[0,0],[t,o]),s=Ye(s,[0,0],[o,o])),[n,s]})}var gT=N({qr_:QX});var Dt;(function(r){r[r.NONE=0]="NONE",r[r.MEAN=1]="MEAN",r[r.SUM=2]="SUM",r[r.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"})(Dt||(Dt={}));function ZX(r,e,t=Dt.SUM_BY_NONZERO_WEIGHTS){let o=v(r,"losses","computeWeightedLoss"),n=null;e!=null&&(n=v(e,"weights","computeWeightedLoss"));let s=n==null?o:se(o,n);if(t===Dt.NONE)return s;if(t===Dt.SUM)return ot(s);if(t===Dt.MEAN){if(n==null)return Yu(s);{let a=o.size/n.size,i=Xe(ot(s),ot(n));return a>1?Xe(i,ke(a)):i}}if(t===Dt.SUM_BY_NONZERO_WEIGHTS){if(n==null)return Xe(ot(s),ke(o.size));{let a=se(n,Ba(o.shape)),i=Ue(ot(Gd(a,ke(0))),"float32");return Xe(ot(s),i)}}throw Error(`Unknown reduction: ${t}`)}var dr=N({computeWeightedLoss_:ZX});function JX(r,e,t,o=Dt.SUM_BY_NONZERO_WEIGHTS){let n=v(r,"labels","absoluteDifference"),s=v(e,"predictions","absoluteDifference"),a=null;t!=null&&(a=v(t,"weights","absoluteDifference")),yt(n.shape,s.shape,"Error in absoluteDifference: ");let i=er(Te(n,s));return dr(i,a,o)}var xT=N({absoluteDifference_:JX});function e5(r,e,t,o,n=Dt.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"labels","cosineDistance"),a=v(e,"predictions","cosineDistance"),i=null;o!=null&&(i=v(o,"weights","cosineDistance")),yt(s.shape,a.shape,"Error in cosineDistance: ");let p=ke(1),u=Te(p,ot(se(s,a),t,!0));return dr(u,i,n)}var yT=N({cosineDistance_:e5});function t5(r,e,t,o=Dt.SUM_BY_NONZERO_WEIGHTS){let n=v(r,"labels","hingeLoss"),s=v(e,"predictions","hingeLoss"),a=null;t!=null&&(a=v(t,"weights","hingeLoss")),yt(n.shape,s.shape,"Error in hingeLoss: ");let i=ke(1);n=Te(se(ke(2),n),i);let p=yu(Te(i,se(n,s)));return dr(p,a,o)}var bT=N({hingeLoss_:t5});function r5(r,e,t,o=1,n=Dt.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"labels","huberLoss"),a=v(e,"predictions","huberLoss"),i=null;t!=null&&(i=v(t,"weights","huberLoss")),yt(s.shape,a.shape,"Error in huberLoss: ");let p=ke(o),u=er(Te(a,s)),l=Qu(u,p),c=Te(u,l),m=Ce(se(ke(.5),tr(l)),se(p,c));return dr(m,i,n)}var CT=N({huberLoss_:r5});function o5(r,e,t,o=1e-7,n=Dt.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"labels","logLoss"),a=v(e,"predictions","logLoss"),i=null;t!=null&&(i=v(t,"weights","logLoss")),yt(s.shape,a.shape,"Error in logLoss: ");let p=ke(1),u=ke(o),l=mr(se(s,yi(Ce(a,u)))),c=se(Te(p,s),yi(Ce(Te(p,a),u))),m=Te(l,c);return dr(m,i,n)}var wT=N({logLoss_:o5});function n5(r,e,t,o=Dt.SUM_BY_NONZERO_WEIGHTS){let n=v(r,"labels","meanSquaredError"),s=v(e,"predictions","meanSquaredError"),a=null;t!=null&&(a=v(t,"weights","meanSquaredError")),yt(n.shape,s.shape,"Error in meanSquaredError: ");let i=rf(n,s);return dr(i,a,o)}var ST=N({meanSquaredError_:n5});function s5(r,e){let t=v(r,"labels","sigmoidCrossEntropyWithLogits"),o=v(e,"logits","sigmoidCrossEntropyWithLogits");yt(t.shape,o.shape,"Error in sigmoidCrossEntropyWithLogits: ");let n=yu(o),s=se(o,t),a=Pd(Jo(mr(er(o))));return Ce(Te(n,s),a)}function a5(r,e,t,o=0,n=Dt.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"multiClassLabels","sigmoidCrossEntropy"),a=v(e,"logits","sigmoidCrossEntropy"),i=null;if(t!=null&&(i=v(t,"weights","sigmoidCrossEntropy")),yt(s.shape,a.shape,"Error in sigmoidCrossEntropy: "),o>0){let u=ke(o),l=ke(1),c=ke(.5);s=Ce(se(s,Te(l,u)),se(c,u))}let p=s5(s,a);return dr(p,i,n)}var IT=N({sigmoidCrossEntropy_:a5});function i5(r,e,t=-1){if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${t}`);return Nr((n,s,a)=>{let p=Ld(s,[t],!0),u=Te(Ue(s,"float32"),p);a([n,u]);let l=mr(se(u,n));return{value:ot(l,[t]),gradFunc:(d,f)=>{let[h,g]=f,x=gi(d.shape,[t]);return[se(W(d,x),Te(Ue(h,"float32"),Jo(g))),se(W(d,x),Te(Jo(g),Ue(h,"float32")))]}}})(r,e)}function u5(r,e,t,o=0,n=Dt.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"onehotLabels","softmaxCrossEntropy"),a=v(e,"logits","softmaxCrossEntropy"),i=null;if(t!=null&&(i=v(t,"weights","softmaxCrossEntropy")),yt(s.shape,a.shape,"Error in softmaxCrossEntropy: "),o>0){let u=ke(o),l=ke(1),c=ke(s.shape[1]);s=Ce(se(s,Te(l,u)),Xe(u,c))}let p=i5(s,a);return dr(p,i,n)}var vT=N({softmaxCrossEntropy_:u5});function p5(r,e,t,o){let n=v(r,"indices","sparseFillEmptyRows","int32"),s=v(e,"values","sparseFillEmptyRows"),a=v(t,"denseShape","sparseFillEmptyRows","int32"),i=v(o,"defaultValue","sparseFillEmptyRows",s.dtype);if(n.rank!==2)throw new Error(`Indices should be Tensor2D but received shape
        ${n.shape}`);if(s.rank!==1)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(a.rank!==1)throw new Error(`Dense shape should be Tensor1D but received shape ${a.shape}`);if(i.rank!==0)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);let p={indices:n,values:s,denseShape:a,defaultValue:i},u=_.runKernel(eu,p);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}var kT=N({sparseFillEmptyRows_:p5});function l5(r,e,t){let o=v(r,"inputIndices","sparseReshape","int32"),n=v(e,"inputShape","sparseReshape","int32"),s=v(t,"newShape","sparseReshape","int32");if(o.rank!==2)throw new Error(`Input indices should be Tensor2D but received shape
        ${o.shape}`);if(n.rank!==1)throw new Error(`Input shape should be Tensor1D but received shape ${n.shape}`);if(s.rank!==1)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);let a={inputIndices:o,inputShape:n,newShape:s},i=_.runKernel(ui,a);return{outputIndices:i[0],outputShape:i[1]}}var NT=N({sparseReshape_:l5});function c5(r,e,t){let o=v(r,"data","sparseSegmentMean"),n=v(e,"indices","sparseSegmentMean","int32"),s=v(t,"segmentIds","sparseSegmentMean","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
          ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);let a={data:o,indices:n,segmentIds:s};return _.runKernel(va,a)}var TT=N({sparseSegmentMean_:c5});function m5(r,e,t){let o=v(r,"data","sparseSegmentSum"),n=v(e,"indices","sparseSegmentSum","int32"),s=v(t,"segmentIds","sparseSegmentSum","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
         ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);let a={data:o,indices:n,segmentIds:s};return _.runKernel(ka,a)}var _T=N({sparseSegmentSum_:m5});function d5(r,e,t,o,n,s,a,i){let p=v(r,"data","stringNGrams","string");if(p.dtype!=="string")throw new Error("Data must be of datatype string");if(p.shape.length!==1)throw new Error(`Data must be a vector, saw: ${p.shape}`);let u=v(e,"dataSplits","stringNGrams");if(u.dtype!=="int32")throw new Error("Data splits must be of datatype int32");let l={separator:t,nGramWidths:o,leftPad:n,rightPad:s,padWidth:a,preserveShortSequences:i},c={data:p,dataSplits:u},m=_.runKernel(Na,c,l);return{nGrams:m[0],nGramsSplits:m[1]}}var ET=N({stringNGrams_:d5});function f5(r,e,t=!0){let o=v(r,"input","stringSplit","string"),n=v(e,"delimiter","stringSplit","string");if(o.rank!==1)throw new Error(`Input should be Tensor1D but received shape ${o.shape}`);if(n.rank!==0)throw new Error(`Delimiter should be a scalar but received shape ${n.shape}`);let s={skipEmpty:t},a={input:o,delimiter:n},i=_.runKernel(ru,a,s);return{indices:i[0],values:i[1],shape:i[2]}}var $T=N({stringSplit_:f5});function h5(r,e){let t=v(r,"input","stringToHashBucketFast","string"),o={numBuckets:e};if(e<=0)throw new Error("Number of buckets must be at least 1");let n={input:t};return _.runKernel(ou,n,o)}var RT=N({stringToHashBucketFast_:h5});function g5(r,e,t,o=!0){let n=v(r,"input","staticRegexReplace","string"),s={pattern:e,rewrite:t,replaceGlobal:o};return _.runKernel(pi,{x:n},s)}var DT=N({staticRegexReplace_:g5});var x5={fft:fl,ifft:ep,rfft:hl,irfft:tf},y5={hammingWindow:jN,hannWindow:uf,frame:pf,stft:XN},b5={flipLeftRight:QN,grayscaleToRGB:ZN,resizeNearestNeighbor:lT,resizeBilinear:pT,rgbToGrayscale:JN,rotateWithOffset:eT,cropAndResize:YN,nonMaxSuppression:tT,nonMaxSuppressionAsync:nT,nonMaxSuppressionWithScore:sT,nonMaxSuppressionWithScoreAsync:aT,nonMaxSuppressionPadded:iT,nonMaxSuppressionPaddedAsync:uT,threshold:cT,transform:mT},C5={bandPart:dT,gramSchmidt:fT,qr:gT},w5={absoluteDifference:xT,computeWeightedLoss:dr,cosineDistance:yT,hingeLoss:bT,huberLoss:CT,logLoss:wT,meanSquaredError:ST,sigmoidCrossEntropy:IT,softmaxCrossEntropy:vT},S5={sparseFillEmptyRows:kT,sparseReshape:NT,sparseSegmentMean:TT,sparseSegmentSum:_T},I5={stringNGrams:ET,stringSplit:$T,stringToHashBucketFast:RT,staticRegexReplace:DT};var AT={};qe(AT,{Serializable:()=>Lc,SerializationMap:()=>df,getRegisteredName:()=>k5,registerClass:()=>hS});var v5=new Map,fS=new Map,Lc=class{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}},df=class r{constructor(){this.classNameMap={}}static getMap(){return r.instance==null&&(r.instance=new r),r.instance}static register(e){r.getMap().classNameMap[e.className]=[e,e.fromConfig]}};function hS(r,e,t){$(r.className!=null,()=>"Class being registered does not have the static className property defined."),$(typeof r.className=="string",()=>"className is required to be a string, but got type "+typeof r.className),$(r.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),typeof e=="undefined"&&(e="Custom"),typeof t=="undefined"&&(t=r.className);let o=t,n=e+">"+o;return df.register(r),v5.set(n,r),fS.set(r,n),r}function k5(r){return fS.has(r)?fS.get(r):r.className}var _r=class extends Lc{minimize(e,t=!1,o){let{value:n,grads:s}=this.computeGradients(e,o);if(o!=null){let a=o.map(i=>({name:i.name,tensor:s[i.name]}));this.applyGradients(a)}else this.applyGradients(s);return Lt(s),t?n:(n.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return eS(e,t)}dispose(){this.iterations_!=null&&Lt(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:ke(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}};Object.defineProperty(_r,Symbol.hasInstance,{value:r=>r.minimize!=null&&r.computeGradients!=null&&r.applyGradients!=null});var sp=class extends _r{static get className(){return"Adadelta"}constructor(e,t,o=null){super(),this.learningRate=e,this.rho=t,this.epsilon=o,this.accumulatedGrads=[],this.accumulatedUpdates=[],o==null&&(this.epsilon=_.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(o=>o.name):Object.keys(e)).forEach((o,n)=>{let s=_.registeredVariables[o],a=!1;this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accum_grad`,variable:De(()=>Kt(s).variable(a))}),this.accumulatedUpdates[n]==null&&(this.accumulatedUpdates[n]={originalName:`${o}/accum_var`,variable:De(()=>Kt(s).variable(a))});let i=Array.isArray(e)?e[n].tensor:e[o];if(i==null)return;let p=this.accumulatedGrads[n].variable,u=this.accumulatedUpdates[n].variable;De(()=>{let l=Ce(se(p,this.rho),se(tr(i),1-this.rho)),c=se(Xe(Pr(Ce(u,this.epsilon)),Pr(Ce(p,this.epsilon))),i),m=Ce(se(u,this.rho),se(tr(c),1-this.rho));p.assign(l),u.assign(m);let d=Ce(se(c,-this.learningRate),s);s.assign(d)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(Lt(this.accumulatedGrads.map(e=>e.variable)),Lt(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){let e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=e.length/2,o=!1;this.accumulatedGrads=e.slice(0,t).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedUpdates=e.slice(t,t*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}};var ap=class extends _r{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(o=>o.name):Object.keys(e)).forEach((o,n)=>{let s=_.registeredVariables[o];this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accumulator`,variable:De(()=>Ma(s.shape,this.initialAccumulatorValue).variable(!1))});let a=Array.isArray(e)?e[n].tensor:e[o];if(a==null)return;let i=this.accumulatedGrads[n].variable;De(()=>{let p=Ce(i,tr(a));i.assign(p);let u=Ce(se(Xe(a,Pr(Ce(p,_.backend.epsilon()))),-this.learningRate),s);s.assign(u)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&Lt(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=!1;this.accumulatedGrads=e.map(o=>({originalName:o.name,variable:o.tensor.variable(t)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}};var ip=class extends _r{static get className(){return"Adam"}constructor(e,t,o,n=null){super(),this.learningRate=e,this.beta1=t,this.beta2=o,this.epsilon=n,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],De(()=>{this.accBeta1=ke(t).variable(),this.accBeta2=ke(o).variable()}),n==null&&(this.epsilon=_.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(o=>o.name):Object.keys(e);De(()=>{let o=Te(1,this.accBeta1),n=Te(1,this.accBeta2);t.forEach((s,a)=>{let i=_.registeredVariables[s],p=!1;this.accumulatedFirstMoment[a]==null&&(this.accumulatedFirstMoment[a]={originalName:`${s}/m`,variable:De(()=>Kt(i).variable(p))}),this.accumulatedSecondMoment[a]==null&&(this.accumulatedSecondMoment[a]={originalName:`${s}/v`,variable:De(()=>Kt(i).variable(p))});let u=Array.isArray(e)?e[a].tensor:e[s];if(u==null)return;let l=this.accumulatedFirstMoment[a].variable,c=this.accumulatedSecondMoment[a].variable,m=Ce(se(l,this.beta1),se(u,1-this.beta1)),d=Ce(se(c,this.beta2),se(tr(u),1-this.beta2)),f=Xe(m,o),h=Xe(d,n);l.assign(m),c.assign(d);let g=Ce(se(Xe(f,Ce(Pr(h),this.epsilon)),-this.learningRate),i);i.assign(g)}),this.accBeta1.assign(se(this.accBeta1,this.beta1)),this.accBeta2.assign(se(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&Lt(this.accumulatedFirstMoment.map(e=>e.variable)),this.accumulatedSecondMoment!=null&&Lt(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){let e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e),De(()=>{this.accBeta1.assign(xi(this.beta1,this.iterations_+1)),this.accBeta2.assign(xi(this.beta2,this.iterations_+1))});let t=e.length/2,o=!1;this.accumulatedFirstMoment=e.slice(0,t).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedSecondMoment=e.slice(t,t*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}};var up=class extends _r{static get className(){return"Adamax"}constructor(e,t,o,n=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=o,this.epsilon=n,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],De(()=>{this.iteration=ke(0).variable(),this.accBeta1=ke(t).variable()}),n==null&&(this.epsilon=_.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(o=>o.name):Object.keys(e);De(()=>{let o=Te(1,this.accBeta1),n=Xe(-this.learningRate,Ce(se(this.iteration,this.decay),1));t.forEach((s,a)=>{let i=_.registeredVariables[s],p=!1;this.accumulatedFirstMoment[a]==null&&(this.accumulatedFirstMoment[a]={originalName:`${s}/m`,variable:Kt(i).variable(p)}),this.accumulatedWeightedInfNorm[a]==null&&(this.accumulatedWeightedInfNorm[a]={originalName:`${s}/v`,variable:Kt(i).variable(p)});let u=Array.isArray(e)?e[a].tensor:e[s];if(u==null)return;let l=this.accumulatedFirstMoment[a].variable,c=this.accumulatedWeightedInfNorm[a].variable,m=Ce(se(l,this.beta1),se(u,1-this.beta1)),d=se(c,this.beta2),f=er(u),h=Ud(d,f);l.assign(m),c.assign(h);let g=Ce(se(Xe(n,o),Xe(m,Ce(h,this.epsilon))),i);i.assign(g)}),this.iteration.assign(Ce(this.iteration,1)),this.accBeta1.assign(se(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&Lt(this.accumulatedFirstMoment.map(e=>e.variable)),this.accumulatedWeightedInfNorm!=null&&Lt(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}};var wi=class extends _r{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(o=>o.name):Object.keys(e)).forEach((o,n)=>{let s=Array.isArray(e)?e[n].tensor:e[o];if(s==null)return;let a=_.registeredVariables[o];De(()=>{let i=Ce(se(this.c,s),a);a.assign(i)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,this.c!=null&&this.c.dispose(),this.c=Fr(ke(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(e=await this.extractIterations(e),e.length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}};var pp=class extends wi{static get className(){return"Momentum"}constructor(e,t,o=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=o,this.accumulations=[],this.m=ke(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(o=>o.name):Object.keys(e)).forEach((o,n)=>{let s=_.registeredVariables[o];this.accumulations[n]==null&&(this.accumulations[n]={originalName:`${o}/momentum`,variable:De(()=>Kt(s).variable(!1))});let a=this.accumulations[n].variable,i=Array.isArray(e)?e[n].tensor:e[o];i!=null&&De(()=>{let p,u=Ce(se(this.m,a),i);this.useNesterov?p=Ce(se(this.c,Ce(i,se(u,this.m))),s):p=Ce(se(this.c,u),s),a.assign(u),s.assign(p)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&Lt(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=!1;this.accumulations=e.map(o=>({originalName:o.name,variable:o.tensor.variable(t)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}};var lp=class extends _r{static get className(){return"RMSProp"}constructor(e,t=.9,o=0,n=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=o,this.epsilon=n,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,n==null&&(this.epsilon=_.backend.epsilon()),e==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(o=>o.name):Object.keys(e)).forEach((o,n)=>{let s=_.registeredVariables[o],a=!1;this.accumulatedMeanSquares[n]==null&&(this.accumulatedMeanSquares[n]={originalName:`${o}/rms`,variable:De(()=>Kt(s).variable(a))}),this.accumulatedMoments[n]==null&&(this.accumulatedMoments[n]={originalName:`${o}/momentum`,variable:De(()=>Kt(s).variable(a))}),this.accumulatedMeanGrads[n]==null&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${o}/mg`,variable:De(()=>Kt(s).variable(a))});let i=Array.isArray(e)?e[n].tensor:e[o];if(i==null)return;let p=this.accumulatedMeanSquares[n].variable,u=this.accumulatedMoments[n].variable;De(()=>{let l=Ce(se(p,this.decay),se(tr(i),1-this.decay));if(this.centered){let c=this.accumulatedMeanGrads[n].variable,m=Ce(se(c,this.decay),se(i,1-this.decay)),d=Xe(se(i,this.learningRate),Pr(Te(l,Ce(tr(m),this.epsilon)))),f=Ce(se(u,this.momentum),d);p.assign(l),c.assign(m),u.assign(f);let h=Te(s,f);s.assign(h)}else{let c=Ce(se(p,this.decay),se(tr(i),1-this.decay)),m=Ce(se(u,this.momentum),Xe(se(i,this.learningRate),Pr(Ce(c,this.epsilon))));p.assign(c),u.assign(m);let d=Te(s,m);s.assign(d)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&Lt(this.accumulatedMeanSquares.map(e=>e.variable)),this.accumulatedMeanGrads!=null&&this.centered&&Lt(this.accumulatedMeanGrads.map(e=>e.variable)),this.accumulatedMoments!=null&&Lt(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){let e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=this.centered?e.length/3:e.length/2,o=!1;this.accumulatedMeanSquares=e.slice(0,t).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedMoments=e.slice(t,t*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.centered&&(this.accumulatedMeanGrads=e.slice(t*2,t*3).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}};var N5=[sp,ap,ip,up,pp,lp,wi];function FT(){for(let r of N5)hS(r)}var Si={};qe(Si,{CompositeArrayBuffer:()=>lr,browserFiles:()=>OT,browserHTTPRequest:()=>zT,concatenateArrayBuffers:()=>Zk,copyModel:()=>m1,decodeWeights:()=>hd,decodeWeightsStream:()=>gd,encodeWeights:()=>jk,fromMemory:()=>VT,fromMemorySync:()=>wS,getLoadHandlers:()=>r1,getModelArtifactsForJSON:()=>il,getModelArtifactsForJSONSync:()=>Uw,getModelArtifactsInfoForJSON:()=>$a,getSaveHandlers:()=>t1,getWeightSpecs:()=>Ec,http:()=>hf,isHTTPScheme:()=>ff,listModels:()=>l1,loadWeights:()=>LT,moveModel:()=>d1,registerLoadRouter:()=>e1,registerSaveRouter:()=>Jk,removeModel:()=>c1,weightsLoaderFactory:()=>bS,withSaveHandler:()=>WT,withSaveHandlerSync:()=>UT});var T5="model",_5=".json",E5=".weights.bin";function PT(r){return new Promise(e=>setTimeout(e)).then(r)}var bl=class r{constructor(e){if(!A().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(r.URL_SCHEME)&&(e=e.slice(r.URL_SCHEME.length)),(e==null||e.length===0)&&(e=T5),this.modelJsonFileName=e+_5,this.weightDataFileName=e+E5}async save(e){if(typeof document=="undefined")throw new Error("Browser downloads are not supported in this environment since `document` is not present");let t=lr.join(e.weightData),o=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],s=xd(e,n),a=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),i=this.modelJsonAnchor==null?document.createElement("a"):this.modelJsonAnchor;if(i.download=this.modelJsonFileName,i.href=a,await PT(()=>i.dispatchEvent(new MouseEvent("click"))),e.weightData!=null){let p=this.weightDataAnchor==null?document.createElement("a"):this.weightDataAnchor;p.download=this.weightDataFileName,p.href=o,await PT(()=>p.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:$a(e)}}}};bl.URL_SCHEME="downloads://";var gS=class{constructor(e){if(e==null||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{let o=new FileReader;o.onload=n=>{let s=JSON.parse(n.target.result),a=s.modelTopology;if(a==null){t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));return}if(s.weightsManifest==null){t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));return}if(this.weightsFiles.length===0){e({modelTopology:a});return}let p=il(s,u=>this.loadWeights(u));e(p)},o.onerror=n=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),o.readAsText(this.jsonFile)})}loadWeights(e){let t=[],o=[];for(let a of e)t.push(...a.weights),o.push(...a.paths);let n=this.checkManifestAndWeightFiles(e),s=o.map(a=>this.loadWeightsFile(a,n[a]));return Promise.all(s).then(a=>[t,a])}loadWeightsFile(e,t){return new Promise((o,n)=>{let s=new FileReader;s.onload=a=>{let i=a.target.result;o(i)},s.onerror=a=>n(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){let t=[],o=this.weightsFiles.map(s=>Ww(s.name)),n={};for(let s of e)s.paths.forEach(a=>{let i=Ww(a);if(t.indexOf(i)!==-1)throw new Error(`Duplicate file basename found in weights manifest: '${i}'`);if(t.push(i),o.indexOf(i)===-1)throw new Error(`Weight file with basename '${i}' is not provided.`);n[a]=this.weightsFiles[o.indexOf(i)]});if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return n}},$5=r=>A().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(bl.URL_SCHEME)?R5(r.slice(bl.URL_SCHEME.length)):null;Xt.registerSaveRouter($5);function R5(r="model"){return new bl(r)}function OT(r){return new gS(r)}function xS(r,e,t,o){a(r),t=t==null?0:t,o=o==null?1:o,i(t,o);let n=0,s=p=>(p.then(u=>{let l=t+ ++n/r.length*(o-t);return e(l),u}),p);function a(p){$(p!=null&&Array.isArray(p)&&p.length>0,()=>"promises must be a none empty array")}function i(p,u){$(p>=0&&p<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${p}`),$(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),$(u>=p,()=>`startFraction must be no more than endFraction, but got startFraction ${p} and endFraction ${u}`)}return Promise.all(r.map(s))}async function yS(r,e){e==null&&(e={});let t=e.fetchFunc==null?A().platform.fetch:e.fetchFunc,o=r.map(c=>t(c,e.requestInit,{isBinary:!0})),i=(e.onProgress==null?await Promise.all(o):await xS(o,e.onProgress,0,.5)).map(c=>c.arrayBuffer());return e.onProgress==null?await Promise.all(i):await xS(i,e.onProgress,.5,1)}function MT(r,e){var t;let o=e.fetchFunc==null?A().platform.fetch:e.fetchFunc,n=0,s;return(t=e.onProgress)===null||t===void 0||t.call(e,0),new ReadableStream({pull:async a=>{for(var i;n<r.length;){s||(s=(await o(r[n],e.requestInit,{isBinary:!0})).body.getReader());let{done:p,value:u}=await s.read();if(p){n++,s=void 0,(i=e.onProgress)===null||i===void 0||i.call(e,n/r.length);continue}a.enqueue(u);return}a.close()}})}async function LT(r,e="",t,o){return bS(a=>yS(a,{requestInit:o}))(r,e,t)}function bS(r){return async(e,t="",o)=>{let n=e.map(()=>!1),s={},a=o!=null?o.map(()=>!1):[],i=[];if(e.forEach((d,f)=>{let h=0;d.weights.forEach(g=>{let x="quantization"in g?g.quantization.dtype:g.dtype,b=fi[x]*ze(g.shape),w=()=>{n[f]=!0,s[f]==null&&(s[f]=[]),s[f].push({manifestEntry:g,groupOffset:h,sizeBytes:b})};o!=null?o.forEach((S,k)=>{S===g.name&&(w(),a[k]=!0)}):w(),i.push(g.name),h+=b})}),!a.every(d=>d)){let d=o.filter((f,h)=>!a[h]);throw new Error(`Could not find weights in manifest with names: ${d.join(", ")}. 
Manifest JSON has weights with names: ${i.join(", ")}.`)}let p=n.reduce((d,f,h)=>(f&&d.push(h),d),[]),u=[];p.forEach(d=>{e[d].paths.forEach(f=>{let h=t+(t.endsWith("/")?"":"/")+f;u.push(h)})});let l=await r(u),c={},m=0;return p.forEach(d=>{let f=e[d].paths.length,h=new lr(l.slice(m,m+f));s[d].forEach(x=>{let b=h.slice(x.groupOffset,x.groupOffset+x.sizeBytes),w=hd(b,[x.manifestEntry]);for(let S in w)c[S]=w[S]}),m+=f}),c}}var D5="application/octet-stream",A5="application/json",Bc=class{constructor(e,t){if(this.DEFAULT_METHOD="POST",t==null&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.weightUrlConverter=t.weightUrlConverter,t.fetchFunc!=null?($(typeof t.fetchFunc=="function",()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=A().platform.fetch,$(e!=null&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&$(e.length===2,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,t.requestInit!=null&&t.requestInit.body!=null)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{},this.loadOptions=t}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;let o=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],n=xd(e,o);if(t.body.append("model.json",new Blob([JSON.stringify(n)],{type:A5}),"model.json"),e.weightData!=null){let a=lr.join(e.weightData);t.body.append("model.weights.bin",new Blob([a],{type:D5}),"model.weights.bin")}let s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:$a(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async loadModelJSON(){let e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(s){let a=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?a+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":a+=" Please make sure the server is serving valid JSON for this request.",new Error(a)}let o=t.modelTopology,n=t.weightsManifest;if(o==null&&n==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return t}async load(){if(this.loadOptions.streamWeights)return this.loadStream();let e=await this.loadModelJSON();return il(e,t=>this.loadWeights(t))}async loadStream(){let e=await this.loadModelJSON(),t=await this.getWeightUrls(e.weightsManifest),o=Ec(e.weightsManifest),n=()=>MT(t,this.loadOptions);return Object.assign(Object.assign({},e),{weightSpecs:o,getWeightStream:n})}async getWeightUrls(e){let t=Array.isArray(this.path)?this.path[1]:this.path,[o,n]=F5(t),s=this.weightPathPrefix||o,a=[],i=[];for(let p of e)for(let u of p.paths)this.weightUrlConverter!=null?i.push(this.weightUrlConverter(u)):a.push(s+u+n);return this.weightUrlConverter&&a.push(...await Promise.all(i)),a}async loadWeights(e){let t=await this.getWeightUrls(e),o=Ec(e),n=await yS(t,this.loadOptions);return[o,n]}};Bc.URL_SCHEME_REGEX=/^https?:\/\//;function F5(r){let e=r.lastIndexOf("/"),t=r.lastIndexOf("?"),o=r.substring(0,e),n=t>e?r.substring(t):"";return[o+"/",n]}function ff(r){return r.match(Bc.URL_SCHEME_REGEX)!=null}var BT=(r,e)=>{if(typeof fetch=="undefined"&&(e==null||e.fetchFunc==null))return null;{let t=!0;if(Array.isArray(r)?t=r.every(o=>ff(o)):t=ff(r),t)return hf(r,e)}return null};Xt.registerSaveRouter(BT);Xt.registerLoadRouter(BT);function hf(r,e){return new Bc(r,e)}function zT(r,e){return hf(r,e)}var zc=class{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}},gf=class{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}},CS=class{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}};function VT(r,e,t,o){let n=arguments;return new CS(wS(...n))}function wS(r,e,t,o){return arguments.length===1?r.modelTopology!=null||r.weightSpecs!=null?new zc(r):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new zc({modelTopology:r})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new zc({modelTopology:r,weightSpecs:e,weightData:t,trainingConfig:o}))}function WT(r){return new gf(r)}function UT(r){return new gf(r)}var HT={};qe(HT,{confusionMatrix:()=>GT});function P5(r,e,t){let o=v(r,"labels","confusionMatrix"),n=v(e,"predictions","confusionMatrix");$(t==null||t>0&&Number.isInteger(t),()=>`If provided, numClasses must be a positive integer, but got ${t}`),$(o.rank===1,()=>`Expected the rank of labels to be 1, but got ${o.rank}`),$(n.rank===1,()=>`Expected the rank of predictions to be 1, but got ${n.rank}`),$(o.shape[0]===n.shape[0],()=>`Mismatch in the number of examples: ${o.shape[0]} vs. ${n.shape[0]}. Labels and predictions should have the same number of elements.`),$(t>0&&Number.isInteger(t),()=>`numClasses is required to be a positive integer, but got ${t}`);let s=Oc(Ue(o,"int32"),t),a=Oc(Ue(n,"int32"),t),i=yl(s),p=Je(i,a);return Ue(p,"int32")}var GT=N({confusionMatrix_:P5});var XT={};qe(XT,{draw:()=>U5,fromPixels:()=>G5,fromPixelsAsync:()=>z5,toPixels:()=>W5});var cp,KT=!1;function qT(r,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(r==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let t=!1,o=!1,n=!1,s=!1,a=!1,i=!1;if(r.data instanceof Uint8Array)t=!0;else if(typeof ImageData!="undefined"&&r instanceof ImageData)o=!0;else if(typeof HTMLVideoElement!="undefined"&&r instanceof HTMLVideoElement)n=!0;else if(typeof HTMLImageElement!="undefined"&&r instanceof HTMLImageElement)s=!0;else if(r.getContext!=null)a=!0;else if(typeof ImageBitmap!="undefined"&&r instanceof ImageBitmap)i=!0;else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${r.constructor.name}`);if(tl(Lu,_.backendName)!=null){let f={pixels:r},h={numChannels:e};return _.runKernel(Lu,f,h)}let[u,l]=n?[r.videoWidth,r.videoHeight]:[r.width,r.height],c;if(a)c=r.getContext("2d").getImageData(0,0,u,l).data;else if(o||t)c=r.data;else if(s||n||i){if(cp==null)if(typeof document=="undefined")if(typeof OffscreenCanvas!="undefined"&&typeof OffscreenCanvasRenderingContext2D!="undefined")cp=new OffscreenCanvas(1,1).getContext("2d");else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");else cp=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});cp.canvas.width=u,cp.canvas.height=l,cp.drawImage(r,0,0,u,l),c=cp.getImageData(0,0,u,l).data}let m;if(e===4)m=new Int32Array(c);else{let f=u*l;m=new Int32Array(f*e);for(let h=0;h<f;h++)for(let g=0;g<e;++g)m[h*e+g]=c[h*4+g]}return nf(m,[l,u,e],"int32")}function O5(r){return r!=null&&r.data instanceof Uint8Array}function M5(){return typeof window!="undefined"&&typeof ImageBitmap!="undefined"&&window.hasOwnProperty("createImageBitmap")}function L5(r){return r!=null&&r.width!==0&&r.height!==0}function B5(r){return M5()&&!(r instanceof ImageBitmap)&&L5(r)&&!O5(r)}async function z5(r,e=3){let t=null;if(A().getBool("WRAP_TO_IMAGEBITMAP")&&B5(r)){let o;try{o=await createImageBitmap(r,{premultiplyAlpha:"none"})}catch(n){o=null}o!=null&&o.width===r.width&&o.height===r.height?t=o:t=r}else t=r;return qT(t,e)}function jT(r){if(r.rank!==2&&r.rank!==3)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${r.rank}.`);let e=r.rank===2?1:r.shape[2];if(e>4||e===2)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${e}`);if(r.dtype!=="float32"&&r.dtype!=="int32")throw new Error(`Unsupported type for toPixels: ${r.dtype}. Please use float32 or int32 tensors.`)}function V5(r){let e=(r==null?void 0:r.alpha)||1;if(e>1||e<0)throw new Error(`Alpha value ${e} is suppoed to be in range [0 - 1].`)}async function W5(r,e){let t=v(r,"img","toPixels");if(!(r instanceof dt)){let u=t;t=Ue(u,"int32"),u.dispose()}jT(t);let[o,n]=t.shape.slice(0,2),s=t.rank===2?1:t.shape[2],a=await t.data(),i=t.dtype==="float32"?255:1,p=new Uint8ClampedArray(n*o*4);for(let u=0;u<o*n;++u){let l=[0,0,0,255];for(let m=0;m<s;m++){let d=a[u*s+m];if(t.dtype==="float32"){if(d<0||d>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${d}.`)}else if(t.dtype==="int32"&&(d<0||d>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${d}.`);s===1?(l[0]=d*i,l[1]=d*i,l[2]=d*i):l[m]=d*i}let c=u*4;p[c+0]=Math.round(l[0]),p[c+1]=Math.round(l[1]),p[c+2]=Math.round(l[2]),p[c+3]=Math.round(l[3])}if(e!=null){KT||tl(Mu,_.backendName)!=null&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),KT=!0),e.width=n,e.height=o;let u=e.getContext("2d"),l=new ImageData(p,n,o);u.putImageData(l,0,0)}return t!==r&&t.dispose(),p}function U5(r,e,t){let o=v(r,"img","draw");if(!(r instanceof dt)){let a=o;o=Ue(a,"int32"),a.dispose()}jT(o),V5(t==null?void 0:t.imageOptions);let n={image:o},s={canvas:e,options:t};_.runKernel(Mu,n,s)}var G5=N({fromPixels_:qT});var xf={};qe(xf,{prepareAndValidate:()=>YT});function YT(r,e){let t=r.shape.length,o=e.shape.length;if(t<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t}.`);if(o<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${o}.`);if(e.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[o-1]>t)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[o-1]} vs. ${t}`);if(ze(r.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${r.shape}.`);let n=e.shape,s=n[n.length-1],a=1;for(let c=0;c<n.length-1;++c)a*=n[c];let i=r.shape,p=n.slice();p.pop();let u=1;for(let c=s;c<t;++c)u*=i[c],p.push(i[c]);let l=[...oa(r.shape).map(c=>c/u),1].slice(0,s);return[p,a,u,l]}var nt={};qe(nt,{assertParamsValid:()=>K5,computeFlatOffset:()=>Q5,computeOutShape:()=>j5,getNormalizedAxes:()=>X5,isSliceContinous:()=>Y5,maskToAxes:()=>q5,parseSliceParams:()=>Z5,sliceInfo:()=>J5,startForAxis:()=>n_,startIndicesWithElidedDims:()=>t_,stopForAxis:()=>s_,stopIndicesWithElidedDims:()=>r_,stridesForAxis:()=>o_,stridesWithElidedDims:()=>ZT});var SS=-2,H5=-1;function K5(r,e,t){let o=r.shape.length;$(o===e.length,()=>`Error in slice${o}D: Length of begin ${e} must match the rank of the array (${o}).`),$(o===t.length,()=>`Error in slice${o}D: Length of size ${t} must match the rank of the array (${o}).`);for(let n=0;n<o;++n)$(e[n]+t[n]<=r.shape[n],()=>`Error in slice${o}D: begin[${n}] + size[${n}] (${e[n]+t[n]}) would overflow input.shape[${n}] (${r.shape[n]})`)}function q5(r){let e=[],t=0;for(;r>0;)r&1&&e.push(t),r/=2,t++;return e}function j5(r,e,t){let o=[];for(let n=0;n<r.length;n++)o[n]=Math.ceil((e[n]-r[n])/t[n]);return o}function ZT(r,e,t,o){let n=[...r];for(let s=n.length;s<o.length;s++)n.push(1);for(let s=0;s<t;s++)s===0?n[e]=1:(n.splice(e,0,1),n.pop());return n}function JT(r,e,t){return t<=r?t:t-(e-1)}function e_(r,e){let t=[];for(let o=0;o<r;o++)t.push(e+o);return t}function X5(r,e,t,o,n,s,a,i,p){let u=r.length,l=new Array(u),c=new Array(u),m=new Array(u);if(e.length&&t>0){let d=e[0],f=t+1;l=t_(a,d,f,o,r),c=r_(i,d,f,n,r),m=ZT(s,d,f,r)}else for(let d=0;d<u;d++)l[d]=n_(a,o,s,r,d,p),c[d]=s_(i,n,s,r,d,p),m[d]=o_(s,d,p);return{begin:l,end:c,strides:m}}function t_(r,e,t,o,n){let s=[...n],a=e_(t,e);for(let i=0;i<s.length;i++)if(a.indexOf(i)>-1)s[i]=0;else{let p=JT(e,t,i),u=o[p];r&1<<p&&(u=0),s[i]=u}return s}function r_(r,e,t,o,n){let s=[...n],a=e_(t,e);for(let i=0;i<s.length;i++)if(a.indexOf(i)>-1)s[i]=Number.MAX_SAFE_INTEGER;else{let p=JT(e,t,i),u=o[p];r&1<<p&&(u=Number.MAX_SAFE_INTEGER),s[i]=u}for(let i=0;i<s.length;i++){let p=n[i];s[i]<0&&(s[i]+=p),s[i]=qp(0,s[i],n[i])}return s}function o_(r,e,t){let o=r[e];return(t&1<<e||o==null)&&(o=1),o}function n_(r,e,t,o,n,s){let a=e[n],i=t[n]||1;(r&1<<n||s&1<<n||a==null)&&(i>0?a=Number.MIN_SAFE_INTEGER:a=Number.MAX_SAFE_INTEGER);let p=o[n];return a<0&&(a+=p),a=qp(0,a,p-1),a}function s_(r,e,t,o,n,s){let a=e[n],i=t[n]||1;(r&1<<n||s&1<<n||a==null)&&(i>0?a=Number.MAX_SAFE_INTEGER:a=Number.MIN_SAFE_INTEGER);let p=o[n];return a<0&&(a+=p),i>0?a=qp(0,a,p):a=qp(-1,a,p-1),a}function Y5(r,e,t){let o=t.length;for(let n=0;n<t.length;n++)if(t[n]>1){o=n;break}for(let n=o+1;n<t.length;n++)if(e[n]>0||t[n]!==r[n])return!1;return!0}function Q5(r,e){let t=r.length>0?r[r.length-1]:1;for(let o=0;o<r.length-1;o++)t+=r[o]*e[o];return t}function Z5(r,e,t){let o,n=r.shape.length;typeof e=="number"?o=[e,...new Array(n-1).fill(0)]:e.length<n?o=e.concat(new Array(n-e.length).fill(0)):o=e.slice(),o.forEach(a=>{$(a!==-1,()=>"slice() does not support negative begin indexing.")});let s;return t==null?s=new Array(n).fill(-1):typeof t=="number"?s=[t,...new Array(n-1).fill(-1)]:t.length<n?s=t.concat(new Array(n-t.length).fill(-1)):s=t,s=s.map((a,i)=>a>=0?a:($(a===-1,()=>`Negative size values should be exactly -1 but got ${a} for the slice() size at index ${i}.`),r.shape[i]-o[i])),[o,s]}function J5(r,e,t,o,n,s,a,i,p){let u;if(o==null?(u=new Array(e.length),u.fill(1)):u=o,a!=null&&a&a-1)throw new Error("Multiple ellipses in slice is not allowed.");let l=!1,c={dims:u.length,numAddAxisAfterEllipsis:0,begin:e.slice(),end:t.slice(),strides:u.slice(),beginMask:n,endMask:s,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:p};for(let w=0;w<c.dims;w++)l&&1<<w&i&&c.numAddAxisAfterEllipsis++,1<<w&a&&(l=!0);l||(c.ellipsisMask|=1<<c.dims,c.dims++);let m={dims:r.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};e8(c,m);let d=!0,f=!0,h=!0,g=[],x=[];for(let w=0;w<r.length;++w){if(m.strides[w]===0)throw Error(`strides[${w}] must be non-zero`);let S=!!(m.shrinkAxisMask&1<<w),k=r[w];if(k===-1){g.push(S?1:-1);continue}let T=[m.beginMask&1<<w,m.endMask&1<<w],E=[m.strides[w]>0?0:-1,m.strides[w]>0?k:k-1];if(S&&m.strides[w]<=0)throw Error("only stride 1 allowed on non-range indexing.");h=h&&m.strides[w]===1;let R=!!(m.beginMask&1<<w&&m.endMask&1<<w);if(m.beginValid&&m.endValid){if(S){let M=m.begin[w]<0?k+m.begin[w]:m.begin[w];if(m.begin[w]=M,m.end[w]=m.begin[w]+1,M<0||M>=k)throw Error(`slice index ${m.begin[w]} of dimension ${w} out of bounds.`)}else m.begin[w]=QT(m.begin[w],0,m.strides[w],k,T,E),m.end[w]=QT(m.end[w],1,m.strides[w],k,T,E);let O=m.strides[w]===1&&m.begin[w]===0&&m.end[w]===k;d=d&&O,f=f&&(w===0&&m.strides[w]===1||O)}else d=d&&m.strides[w]===1&&R,f=f&&(w===0&&m.strides[w]===1||R);let D,F=!1;if(m.beginValid&&m.endValid?(D=m.end[w]-m.begin[w],F=!0):S?(D=1,F=!0):R&&k>=0&&(m.strides[w]<0?D=-k:D=k,F=!0),F){let O;D===0||D<0!=m.strides[w]<0?O=0:O=Math.trunc(D/m.strides[w])+(D%m.strides[w]!==0?1:0),g.push(O)}else g.push(-1)}for(let w=0;w<m.finalShapeGatherIndices.length;++w){let S=m.finalShapeGatherIndices[w];S>=0?x.push(g[S]):S===SS&&x.push(1)}return{finalShapeSparse:x.filter((w,S)=>m.finalShapeGatherIndices[S]!==SS),finalShape:x,isIdentity:d,sliceDim0:f,isSimpleSlice:h,begin:m.begin,end:m.end,strides:m.strides}}function e8(r,e){e.beginMask=0,e.endMask=0,e.shrinkAxisMask=0;let t=0;e.beginValid=r.begin!=null,e.endValid=r.end!=null,e.begin=new Array(e.dims),e.end=new Array(e.dims),e.strides=new Array(e.dims),e.finalShapeGatherIndices=[],e.finalShapeGatherIndicesSparse=[],e.inputShapeGatherIndicesSparse=new Array(e.dims);for(let o=0;o<r.dims;o++)if(1<<o&r.ellipsisMask){let n=Math.min(e.dims-(r.dims-o)+1+r.numAddAxisAfterEllipsis,e.dims);for(;t<n;t++)e.begin[t]=0,e.end[t]=0,e.strides[t]=1,e.beginMask|=1<<t,e.endMask|=1<<t,e.finalShapeGatherIndices.push(t),e.finalShapeGatherIndicesSparse.push(-1),e.inputShapeGatherIndicesSparse[t]=o}else if(1<<o&r.newAxisMask)e.finalShapeGatherIndices.push(SS),e.finalShapeGatherIndicesSparse.push(-1);else{if(t===e.begin.length)throw Error(`Index out of range using input dim ${t}; input has only ${e.dims} dims, ${e.begin.length}.`);r.begin!=null&&(e.begin[t]=r.begin[o]),r.end!=null&&(e.end[t]=r.end[o]),e.strides[t]=r.strides[o],r.beginMask&1<<o&&(e.beginMask|=1<<t),r.endMask&1<<o&&(e.endMask|=1<<t),r.shrinkAxisMask&1<<o?(e.finalShapeGatherIndices.push(H5),e.finalShapeGatherIndicesSparse.push(-1),e.shrinkAxisMask|=1<<t):(e.finalShapeGatherIndices.push(t),e.finalShapeGatherIndicesSparse.push(o)),e.inputShapeGatherIndicesSparse[t]=o,t++}}function QT(r,e,t,o,n,s){if(n[e])return t>0?s[e]:s[e+1&1];{let a=r<0?o+r:r;return a<s[0]?s[0]:a>s[1]?s[1]:a}}var t8="4.17.0";var Vc=class{static sgd(e){return new wi(e)}static momentum(e,t,o=!1){return new pp(e,t,o)}static rmsprop(e,t=.9,o=0,n=null,s=!1){return new lp(e,t,o,n,s)}static adam(e=.001,t=.9,o=.999,n=null){return new ip(e,t,o,n)}static adadelta(e=.001,t=.95,o=null){return new sp(e,t,o)}static adamax(e=.002,t=.9,o=.999,n=null,s=0){return new up(e,t,o,n,s)}static adagrad(e,t=.1){return new ap(e,t)}};var cHe=Vc;var r8=typeof requestAnimationFrame!="undefined"?requestAnimationFrame:typeof setImmediate!="undefined"?setImmediate:r=>r();function IS(){return new Promise(r=>r8(()=>r()))}var C={};qe(C,{ERF_A1:()=>b8,ERF_A2:()=>C8,ERF_A3:()=>w8,ERF_A4:()=>S8,ERF_A5:()=>I8,ERF_P:()=>y8,PARALLELIZE_THRESHOLD:()=>yf,RowPartitionType:()=>Va,SELU_SCALE:()=>x8,SELU_SCALEALPHA:()=>g8,applyActivation:()=>op,assertAndGetBroadcastShape:()=>rt,assertAxesAreInnerMostDims:()=>_q,assertParamsConsistent:()=>o8,assignToTypedArray:()=>E8,axesAreInnerMostDims:()=>Jw,calculateShapes:()=>DN,checkEinsumDimSizes:()=>P8,checkPadOnDimRoundingMode:()=>zt,combineLocations:()=>u2,combineRaggedTensorToTensorShapes:()=>s8,complexWithEvenIndex:()=>N8,complexWithOddIndex:()=>T8,computeConv2DInfo:()=>Ku,computeConv3DInfo:()=>_1,computeDefaultPad:()=>Zw,computeDilation2DInfo:()=>NK,computeOptimalWindowSize:()=>p8,computeOutAndReduceShapes:()=>Tq,computeOutShape:()=>n8,computePool2DInfo:()=>Qw,computePool3DInfo:()=>TK,convertConv2DDataFormat:()=>E1,decodeEinsumEquation:()=>A8,eitherStridesOrDilationsAreOne:()=>br,expandShapeToKeepDim:()=>gi,exponent:()=>R8,exponents:()=>$8,fromStringArrayToUint8:()=>rY,fromUint8ToStringArray:()=>tY,getAxesPermutation:()=>Eq,getBroadcastDims:()=>o2,getComplexWithIndex:()=>_8,getEinsumComputePath:()=>O8,getEinsumPermutation:()=>F8,getFusedBiasGradient:()=>rp,getFusedDyActivation:()=>tp,getImageCenter:()=>l8,getInnerMostAxes:()=>Rq,getPermuted:()=>m8,getRaggedRank:()=>i8,getReductionAxes:()=>Td,getReshaped:()=>c8,getReshapedPermuted:()=>d8,getRowPartitionTypesHelper:()=>a8,getSliceBeginCoords:()=>f8,getSliceSize:()=>h8,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>z8,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>V8,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>W8,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>H8,getSparseReshapeInputOutputMismatchErrorMessage:()=>q8,getSparseReshapeInputOutputMultipleErrorMessage:()=>K8,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>U8,getSparseReshapeNegativeOutputDimErrorMessage:()=>G8,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>Q8,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>j8,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>X8,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>Y8,getUndoAxesPermutation:()=>$q,isIdentityPermutation:()=>M8,log:()=>CH,mergeRealAndImagArrays:()=>v8,prepareAndValidate:()=>YT,prepareSplitSize:()=>B8,segment_util:()=>kS,shouldFuse:()=>np,slice_util:()=>nt,splitRealAndImagArrays:()=>k8,stridesOrDilationsArePositive:()=>Aa,tupleValuesAreOne:()=>Hu,upcastType:()=>pt,validateDefaultValueShape:()=>u8,validateInput:()=>xl,validateUpdateShape:()=>lS,warn:()=>Ea});function o8(r,e){let t=r[0].length;r.forEach((n,s)=>{$(n.length===t,()=>`Error in concat${t}D: rank of tensors[${s}] must be the same as the rank of the rest (${t})`)}),$(e>=0&&e<t,()=>`Error in concat${t}D: axis must be between 0 and ${t-1}.`);let o=r[0];r.forEach((n,s)=>{for(let a=0;a<t;a++)$(a===e||n[a]===o[a],()=>`Error in concat${t}D: Shape of tensors[${s}] (${n}) does not match the shape of the rest (${o}) along the non-concatenated axis ${s}.`)})}function n8(r,e){let t=r[0].slice();for(let o=1;o<r.length;o++)t[e]+=r[o][e];return t}var Va;(function(r){r[r.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",r[r.VALUE_ROWIDS=1]="VALUE_ROWIDS",r[r.ROW_LENGTHS=2]="ROW_LENGTHS",r[r.ROW_SPLITS=3]="ROW_SPLITS",r[r.ROW_LIMITS=4]="ROW_LIMITS",r[r.ROW_STARTS=5]="ROW_STARTS"})(Va||(Va={}));function s8(r,e,t){let o=new Array;if(t==null&&e==null)return o;if(e==null)for(;o.length<r+t.length;)o.push(-1);else o=e.slice();if(t==null)return o;if(r+t.length!==o.length)throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.rank = ${r+t.length}, but shape.rank = ${o.length}`);for(let n=1;n<t.length;++n){let s=t[n],a=o[o.length-t.length+n],i=o[a];if(s>=0)if(i>=0){if(i!==s)throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.shape[${n+r}] = ${s} but shape[${n+r}] = ${i}`)}else o[a]=s}return o}function a8(r){let e={FIRST_DIM_SIZE:Va.FIRST_DIM_SIZE,VALUE_ROWIDS:Va.VALUE_ROWIDS,ROW_LENGTHS:Va.ROW_LENGTHS,ROW_SPLITS:Va.ROW_SPLITS,ROW_LIMITS:Va.ROW_LIMITS,ROW_STARTS:Va.ROW_STARTS},t=[];for(let o of r)if(o in e)t.push(e[o]);else break;return t}function i8(r){return r.length===0?0:r[0]===Va.FIRST_DIM_SIZE?r.length-1:r.length}function u8(r,e){if(r==null||e==null)return;let t=r.length,o=e.length;if(t>=o)throw new Error(`defaultValue.shape=${r} and ragged tensor flatValues.shape=${e}, are incompatible: defaultValue.rank = ${t} must be less than ragged tensor input flatValues.rank = ${o})`);for(let n=0;n<Math.min(t,o-1);++n){let s=r[n],a=e[n+1];if(s>=0&&a>=0&&s!==1&&s!==a)throw new Error(`defaultValue.shape=${r}, and ragged tensor input flatValues.shape=${e} are incompatible: defaultValue.shape[${n-r.length}] = ${s} but ragged tensor input.flatValues.shape[${n-r.length}] = ${a}`)}}var yf=30;function p8(r){return r<=yf?r:Xp(r,Math.floor(Math.sqrt(r)))}function l8(r,e,t){let o=t*(typeof r=="number"?r:r[0]),n=e*(typeof r=="number"?r:r[1]);return[o,n]}function c8(r,e,t,o=!0){let n=[];if(o)n=n.concat(e.slice(0)),n.push(r[0]/t),n=n.concat(r.slice(1));else{n=n.concat(r[0]);let s=e.length;for(let a=0;a<s;++a)n=n.concat([r[a+1]/e[a],e[a]]);n=n.concat(r.slice(s+1))}return n}function m8(r,e,t=!0){let o=[];if(t){o.push(e);for(let n=e+1;n<r;++n)n<=2*e?(o.push(n),o.push(n-(e+1))):o.push(n)}else{let n=[],s=[];for(let a=1;a<r;++a)a>=e*2+1||a%2===1?s.push(a):n.push(a);o.push(...n),o.push(0),o.push(...s)}return o}function d8(r,e,t,o=!0){let n=[];o?n.push(r[0]/t):n.push(r[0]*t);for(let s=1;s<r.length;++s)s<=e.length?o?n.push(e[s-1]*r[s]):n.push(r[s]/e[s-1]):n.push(r[s]);return n}function f8(r,e){let t=[0];for(let o=0;o<e;++o)t.push(r[o][0]);return t}function h8(r,e,t){let o=r.slice(0,1);for(let n=0;n<t;++n)o.push(r[n+1]-e[n][0]-e[n][1]);return o}var g8=1.7580993408473768,x8=1.0507009873554805;var y8=.3275911,b8=.254829592,C8=-.284496736,w8=1.421413741,S8=-1.453152027,I8=1.061405429;function v8(r,e){if(r.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${r.length}, imag: ${e.length}.`);let t=new Float32Array(r.length*2);for(let o=0;o<t.length;o+=2)t[o]=r[o/2],t[o+1]=e[o/2];return t}function k8(r){let e=new Float32Array(r.length/2),t=new Float32Array(r.length/2);for(let o=0;o<r.length;o+=2)e[o/2]=r[o],t[o/2]=r[o+1];return{real:e,imag:t}}function N8(r){let e=Math.ceil(r.length/4),t=new Float32Array(e),o=new Float32Array(e);for(let n=0;n<r.length;n+=4)t[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:t,imag:o}}function T8(r){let e=Math.floor(r.length/4),t=new Float32Array(e),o=new Float32Array(e);for(let n=2;n<r.length;n+=4)t[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:t,imag:o}}function _8(r,e){let t=r[e*2],o=r[e*2+1];return{real:t,imag:o}}function E8(r,e,t,o){r[o*2]=e,r[o*2+1]=t}function $8(r,e){let t=new Float32Array(r/2),o=new Float32Array(r/2);for(let n=0;n<Math.ceil(r/2);n++){let s=(e?2:-2)*Math.PI*(n/r);t[n]=Math.cos(s),o[n]=Math.sin(s)}return{real:t,imag:o}}function R8(r,e,t){let o=(t?2:-2)*Math.PI*(r/e),n=Math.cos(o),s=Math.sin(o);return{real:n,imag:s}}var vS="->",D8=/->/g,a_=",",i_="...";function A8(r,e){r=r.replace(/\s/g,"");let t=(r.length-r.replace(D8,"").length)/vS.length;if(t<1)throw new Error("Equations without an arrow are not supported.");if(t>1)throw new Error(`Equation must contain exactly one arrow ("${vS}").`);let[o,n]=r.split(vS);$(o.indexOf(i_)===-1,()=>`The ellipsis notation ("${i_}") is not supported yet.`);let s=o.split(a_),a=s.length;if(e!==a)throw new Error(`Expected ${a} input tensors, received ${e}`);if(a>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");let i=[];for(let m=0;m<n.length;++m){let d=n[m];if(!s.some(f=>f.indexOf(d)!==-1))throw new Error(`Output subscripts contain the label ${d} not present in the input subscripts.`);i.indexOf(d)===-1&&i.push(d)}for(let m=0;m<o.length;++m){let d=o[m];i.indexOf(d)===-1&&d!==a_&&i.push(d)}let p=new Array(s.length);for(let m=0;m<a;++m){if(new Set(s[m].split("")).size!==s[m].length)throw new Error(`Found duplicate axes in input component ${s[m]}. Support for duplicate axes in input is not implemented yet.`);p[m]=[];for(let d=0;d<s[m].length;++d)p[m].push(i.indexOf(s[m][d]))}let u=i.length,l=n.length,c=[];for(let m=l;m<u;++m)c.push(m);return{allDims:i,summedDims:c,idDims:p}}function F8(r,e){let t=new Array(r);t.fill(-1);for(let n=0;n<e.length;++n)t[e[n]]=n;let o=[];for(let n=0;n<r;++n)t[n]===-1&&o.push(n);return t=t.filter(n=>n!==-1),{permutationIndices:t,expandDims:o}}function P8(r,e,t){let o=new Array(r);for(let n=0;n<t.length;++n){let s=t[n].shape;for(let a=0;a<e[n].length;++a)o[e[n][a]]===void 0?o[e[n][a]]=s[a]:$(o[e[n][a]]===s[a],()=>`Expected dimension ${o[e[n][a]]} at axis ${a} of input shaped ${JSON.stringify(s)}, but got dimension ${s[a]}`)}}function O8(r,e){let t=r,o=[],n=0;r.length===0&&t.push(-1),n=r.length+1;for(let a=0;a<n;++a)o.push([]);let s=[];for(let a=0;a<t.length;++a){let i=t[a],p=L8(e,i);for(let u of p)s.indexOf(u)===-1&&(o[a].push(u),s.push(u))}return{path:t,steps:o}}function M8(r){return r.every((e,t)=>e===t)}function L8(r,e){let t=[];for(let o=0;o<r.length;++o)(r[o].length===0||r[o].indexOf(e)!==-1||e===-1)&&t.push(o);return t}function B8(r,e,t=0){let o=[];if(typeof e=="number")$(r.shape[t]%e===0,()=>"Number of splits must evenly divide the axis."),o=new Array(e).fill(r.shape[t]/e);else{let n=e.reduce((a,i)=>(i===-1&&(a+=1),a),0);$(n<=1,()=>"There should be only one negative value in split array.");let s=e.indexOf(-1);if(s!==-1){let a=e.reduce((i,p)=>p>0?i+p:i);e[s]=r.shape[t]-a}$(r.shape[t]===e.reduce((a,i)=>a+i),()=>"The sum of sizes must match the size of the axis dimension."),o=e}return o}function z8(r){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${r}`}function V8(r,e){return`indices(${r}, 0) is invalid: ${e} < 0`}function W8(r,e,t){return`indices(${r}, 0) is invalid: ${e} >= ${t}`}function U8(r,e){return`only one output dimension may be -1, not both ${r} and ${e}`}function G8(r,e){return`size ${r} must be non-negative, not ${e}`}function H8(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function K8(r,e){let t=ze(r),o=ze(e);return`Input to reshape is a SparseTensor with ${t}
  dense values, but the requested shape requires a multiple of ${o}. inputShape=${r} outputShape= ${e}`}function q8(r,e){let t=ze(r),o=ze(e);return`Input to reshape is a tensor with ${t} dense values, but the requested shape has ${o}. inputShape=${r} outputShape=${e}`}function j8(){return"segment ids must be >= 0"}function X8(){return"segment ids are not increasing"}function Y8(r,e){return`Segment id ${r} out of range [0, ${e}), possibly because segmentIds input is not sorted.`}function Q8(r,e,t){return`Bad: indices[${r}] == ${e} out of range [0, ${t})`}var kS={};qe(kS,{collectGatherOpShapeInfo:()=>eY,computeOutShape:()=>J8,segOpComputeOptimalWindowSize:()=>Z8});function Z8(r,e){let t=!1,o;for(r<=yf?(o=r,t=!0):o=Xp(r,Math.floor(Math.sqrt(r)));!t;)o>e||o===r?t=!0:o=Xp(r,o+1);return o}function J8(r,e,t){let o=[],n=r.length;for(let s=0;s<n;s++)s!==e?o.push(r[s]):o.push(t);return o}function eY(r,e,t,o){let n=e.shape.length,s=r.shape.length;if(o!==0&&(o<-n||o>n))throw new Error(`Expect batchDims in the range of [-${n}, ${n}], but got ${o}`);if(o<0&&(o+=n),o>s)throw new Error(`batchDims (${o}) must be less than rank(x) (
    ${s}).`);if(t<o)throw new Error(`batchDims (${o}) must be less than or equal to axis (${t}).`);for(let c=0;c<o;++c)if(r.shape[c]!==e.shape[c])throw new Error(`x.shape[${c}]: ${r.shape[c]} should be equal to indices.shape[${c}]: ${e.shape[c]}.`);let a=r.shape[t],i=[],p=1,u=1,l=1;for(let c=0;c<o;++c)i.push(r.shape[c]),p*=r.shape[c];for(let c=o;c<t;c++)i.push(r.shape[c]),u*=r.shape[c];for(let c=o;c<n;c++)i.push(e.shape[c]);for(let c=t+1;c<s;c++)i.push(r.shape[c]),l*=r.shape[c];return{batchSize:p,sliceSize:l,outerSize:u,dimSize:a,outputShape:i}}function tY(r){try{return r.map(e=>sl(e))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function rY(r){return r.map(e=>iu(e))}var Ut={};qe(Ut,{nonMaxSuppressionV3Impl:()=>lf,nonMaxSuppressionV4Impl:()=>cf,nonMaxSuppressionV5Impl:()=>mf,whereImpl:()=>sf});FT();var oY=A();oY.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,r=>{r&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var Or;(function(r){r[r.DT_INVALID=0]="DT_INVALID",r[r.DT_FLOAT=1]="DT_FLOAT",r[r.DT_DOUBLE=2]="DT_DOUBLE",r[r.DT_INT32=3]="DT_INT32",r[r.DT_UINT8=4]="DT_UINT8",r[r.DT_INT16=5]="DT_INT16",r[r.DT_INT8=6]="DT_INT8",r[r.DT_STRING=7]="DT_STRING",r[r.DT_COMPLEX64=8]="DT_COMPLEX64",r[r.DT_INT64=9]="DT_INT64",r[r.DT_BOOL=10]="DT_BOOL",r[r.DT_QINT8=11]="DT_QINT8",r[r.DT_QUINT8=12]="DT_QUINT8",r[r.DT_QINT32=13]="DT_QINT32",r[r.DT_BFLOAT16=14]="DT_BFLOAT16",r[r.DT_QINT16=15]="DT_QINT16",r[r.DT_QUINT16=16]="DT_QUINT16",r[r.DT_UINT16=17]="DT_UINT16",r[r.DT_COMPLEX128=18]="DT_COMPLEX128",r[r.DT_HALF=19]="DT_HALF",r[r.DT_RESOURCE=20]="DT_RESOURCE",r[r.DT_VARIANT=21]="DT_VARIANT",r[r.DT_UINT32=22]="DT_UINT32",r[r.DT_UINT64=23]="DT_UINT64",r[r.DT_FLOAT_REF=101]="DT_FLOAT_REF",r[r.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",r[r.DT_INT32_REF=103]="DT_INT32_REF",r[r.DT_UINT8_REF=104]="DT_UINT8_REF",r[r.DT_INT16_REF=105]="DT_INT16_REF",r[r.DT_INT8_REF=106]="DT_INT8_REF",r[r.DT_STRING_REF=107]="DT_STRING_REF",r[r.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",r[r.DT_INT64_REF=109]="DT_INT64_REF",r[r.DT_BOOL_REF=110]="DT_BOOL_REF",r[r.DT_QINT8_REF=111]="DT_QINT8_REF",r[r.DT_QUINT8_REF=112]="DT_QUINT8_REF",r[r.DT_QINT32_REF=113]="DT_QINT32_REF",r[r.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",r[r.DT_QINT16_REF=115]="DT_QINT16_REF",r[r.DT_QUINT16_REF=116]="DT_QUINT16_REF",r[r.DT_UINT16_REF=117]="DT_UINT16_REF",r[r.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",r[r.DT_HALF_REF=119]="DT_HALF_REF",r[r.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",r[r.DT_VARIANT_REF=121]="DT_VARIANT_REF",r[r.DT_UINT32_REF=122]="DT_UINT32_REF",r[r.DT_UINT64_REF=123]="DT_UINT64_REF"})(Or||(Or={}));var u_;(function(r){let e;(function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"})(e=r.CheckpointFormatVersion||(r.CheckpointFormatVersion={}))})(u_||(u_={}));var TS={};function sY(r,e){let t={tfOpName:r,category:"custom",inputs:[],attrs:[],customExecutor:e};TS[r]=t}function bf(r){return TS[r]}function aY(r){delete TS[r]}function I(r,e,t,o,n){let s=e.inputParams[r];if(s&&s.inputIndexStart!==void 0){let i=s.inputIndexStart,p=s.inputIndexEnd===0?void 0:s.inputIndexEnd===void 0?i+1:s.inputIndexEnd,u=i<0?e.inputNames.length+i:i;if(s.type==="tensor")return Vt(e.inputNames[u],t,o,n);if(s.type==="tensors"){let m=e.inputs.slice(i,p);return e.inputNames.slice(i,p).filter((f,h)=>{var g;return((g=m[h])===null||g===void 0?void 0:g.op)!=="NoOp"}).map(f=>Vt(f,t,o,n))}let l=Vt(e.inputNames[u],t,o,n),c=l.dataSync();return s.type==="number"?c[0]:y.toNestedArray(l.shape,c)}let a=e.attrParams[r];return a&&a.value}function Vt(r,e,t,o){let[n,s]=Er(r,t);if(o!=null){let i=o.getHashTableHandleByName(n);if(i!=null)return i}let a=t.currentContextIds.find(i=>!!e[Cf(n,i)]);return a!==void 0?e[Cf(n,a)][s]:void 0}function _S(r,e,t){return e[Cf(r,t.currentContextId)]}function qs(r,e){let[t,o,n]=Er(r,e);return[Cf(t,e&&e.currentContextId),o,n]}function Cf(r,e){return e?`${r}-${e}`:r}function Er(r,e){if(r==="")return["",0,void 0];let t=e!=null&&e.parseNodeNameCache!=null;if(t){let s=e.parseNodeNameCache.get(r);if(s!=null)return s}let o=r.split(":"),n;if(o.length===1)n=[r,0,void 0];else{let s=o[0],a=o.length===3?o[1]:void 0,i=Number(o[o.length-1]);n=[s,i,a]}return t&&e.parseNodeNameCache.set(r,n),n}function Wc(r,e,t){let o=I("pad",r,e,t);if(o==="explicit"){o=I("explicitPaddings",r,e,t);let n=[[0,0],[0,0],[0,0],[0,0]];for(let s=0;s<4;s++)n[s][0]=o[s*2],n[s][1]=o[s*2+1];return n}return o}function js(r){return r.kept?r:Xr(r)}var ES={};qe(ES,{json:()=>iY});var iY=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var $S={};qe($S,{json:()=>uY});var uY=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var RS={};qe(RS,{json:()=>pY});var pY=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var DS={};qe(DS,{json:()=>lY});var lY=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var AS={};qe(AS,{json:()=>cY});var cY=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var FS={};qe(FS,{json:()=>mY});var mY=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var PS={};qe(PS,{json:()=>dY});var dY=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var OS={};qe(OS,{json:()=>fY});var fY=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var MS={};qe(MS,{json:()=>hY});var hY=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var LS={};qe(LS,{json:()=>gY});var gY=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var BS={};qe(BS,{json:()=>xY});var xY=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}];var zS={};qe(zS,{json:()=>yY});var yY=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}];var VS={};qe(VS,{json:()=>bY});var bY=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}];var WS={};qe(WS,{json:()=>CY});var CY=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var US={};qe(US,{json:()=>wY});var wY=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var GS={};qe(GS,{json:()=>SY});var SY=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var HS={};qe(HS,{json:()=>IY});var IY=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var KS={};qe(KS,{json:()=>vY});var vY=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var qS={};qe(qS,{json:()=>kY});var kY=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var Uc=class{static get Instance(){return this._instance||(this._instance=new this)}constructor(){let e=[ES,$S,RS,DS,AS,FS,PS,OS,MS,LS,BS,zS,VS,WS,US,GS,HS,KS,qS],t=[].concat(...e.map(o=>o.json));this.opMappers=t.reduce((o,n)=>(o[n.tfOpName]=n,o),{})}transformGraph(e,t={}){let o=e.node,n=[],s=[],a=[],i=o.reduce((h,g)=>(h[g.name]=this.mapNode(g),g.op.startsWith("Placeholder")?n.push(h[g.name]):g.op==="Const"?s.push(h[g.name]):(g.input==null||g.input.length===0)&&a.push(h[g.name]),h),{}),p=[],u=[],l={},c={};t!=null&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));let m=Object.keys(i);m.forEach(h=>{let g=i[h];g.inputNames.forEach((x,b)=>{let[w,,S]=qs(x),k=i[w];if(k.outputs!=null){let T=k.outputs.indexOf(S);if(T!==-1){let E=`${w}:${T}`;g.inputNames[b]=E}}g.inputs.push(k),k.children.push(g)})}),Object.keys(c).length===0?m.forEach(h=>{let g=i[h];g.children.length===0&&u.push(g)}):Object.keys(c).forEach(h=>{let[g]=qs(h),x=i[g];x!=null&&(x.signatureKey=c[h],u.push(x))}),Object.keys(l).length>0?Object.keys(l).forEach(h=>{let[g]=qs(h),x=i[g];x&&(x.signatureKey=l[h],p.push(x))}):p=n;let d={};e.library!=null&&e.library.function!=null&&(d=e.library.function.reduce((h,g)=>(h[g.signature.name]=this.mapFunction(g),h),{}));let f={nodes:i,inputs:p,outputs:u,weights:s,placeholders:n,signature:t,functions:d};return a.length>0&&(f.initNodes=a),f}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,o)=>(t[e[o].name]=o,t),{})}mapNode(e){let t=bf(e.op)||this.opMappers[e.op]||{};e.attr==null&&(e.attr={});let o={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(n=>n.startsWith("^")?n.slice(1):n),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return t.inputs!=null&&(o.inputParams=t.inputs.reduce((n,s)=>(n[s.name]={type:s.type,inputIndexStart:s.start,inputIndexEnd:s.end},n),{})),t.attrs!=null&&(o.attrParams=t.attrs.reduce((n,s)=>{let a=s.type,i;switch(s.type){case"string":i=wf(e.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=wf(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"string[]":i=_f(e.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=_f(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"number":i=If(e.attr,s.tfName,s.defaultValue||0),i===void 0&&s.tfDeprecatedName&&(i=If(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"number[]":i=Tf(e.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=Tf(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool":i=Sf(e.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=Sf(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool[]":i=$f(e.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=$f(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape":i=Nf(e.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=Nf(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape[]":i=Ef(e.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=Ef(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype":i=vf(e.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=vf(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype[]":i=kf(e.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=kf(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"func":i=p_(e.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=p_(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${s.type} for op: ${e.op}`)}return n[s.name]={value:i,type:a},n},{})),o}mapFunction(e){let t=e.nodeDef,o=[],n=[],s={};t!=null&&(s=t.reduce((c,m)=>(c[m.name]=this.mapNode(m),m.op==="Const"&&n.push(c[m.name]),c),{}));let a=[],i=[];e.signature.inputArg.forEach(c=>{let[m]=qs(c.name),d={name:m,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:jS(c.type),type:"dtype"}},children:[]};d.signatureKey=c.name,a.push(d),s[m]=d}),Object.keys(s).forEach(c=>{let m=s[c];m.inputNames.forEach((d,f)=>{let[h,,g]=qs(d),x=s[h];if(x.outputs!=null){let b=x.outputs.indexOf(g);if(b!==-1){let w=`${h}:${b}`;m.inputNames[f]=w}}m.inputs.push(x),x.children.push(m)})});let u=e.ret;e.signature.outputArg.forEach(c=>{let[m,d]=qs(u[c.name]),f=s[m];f!=null&&(f.defaultOutput=d,i.push(f))});let l=this.mapArgsToSignature(e);return{nodes:s,inputs:a,outputs:i,weights:n,placeholders:o,signature:l}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((t,o)=>(t[o.name]=this.mapArgToTensorInfo(o),t),{}),outputs:e.signature.outputArg.reduce((t,o)=>(t[o.name]=this.mapArgToTensorInfo(o,e.ret),t),{})}}mapArgToTensorInfo(e,t){let o=e.name;return t!=null&&(o=t[o]),{name:o,dtype:e.type}}};function NY(r){let e=A().global;if(typeof e.atob!="undefined")return e.atob(r);if(typeof Buffer!="undefined")return new Buffer(r,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}function l_(r,e){let t=Array.isArray(r)?String.fromCharCode.apply(null,r):NY(r);return e?t:t.toLowerCase()}function wf(r,e,t,o=!1){let n=r[e];return n!=null?l_(n.s,o):t}function Sf(r,e,t){let o=r[e];return o?o.b:t}function If(r,e,t){let o=r[e]||{},n=o.i!=null?o.i:o.f!=null?o.f:t;return typeof n=="number"?n:parseInt(n,10)}function jS(r){switch(typeof r=="string"&&(r=Or[r]),r){case Or.DT_FLOAT:case Or.DT_HALF:return"float32";case Or.DT_INT32:case Or.DT_INT64:case Or.DT_INT8:case Or.DT_UINT8:return"int32";case Or.DT_BOOL:return"bool";case Or.DT_DOUBLE:return"float32";case Or.DT_STRING:return"string";case Or.DT_COMPLEX64:case Or.DT_COMPLEX128:return"complex64";default:return null}}function p_(r,e,t){let o=r[e];return o&&o.func?o.func.name:t}function vf(r,e,t){let o=r[e];return o&&o.type?jS(o.type):t}function kf(r,e,t){let o=r[e];return o&&o.list&&o.list.type?o.list.type.map(n=>jS(n)):t}function c_(r){if(!r.unknownRank)return r.dim!=null?r.dim.map(e=>typeof e.size=="number"?e.size:parseInt(e.size,10)):[]}function Nf(r,e,t){let o=r[e];return o&&o.shape?c_(o.shape):t}function Tf(r,e,t){let o=r[e];return o?((o.list.f&&o.list.f.length?o.list.f:o.list.i)||[]).map(n=>typeof n=="number"?n:parseInt(n,10)):t}function _f(r,e,t,o=!1){let n=r[e];return n&&n.list&&n.list.s?n.list.s.map(s=>l_(s,o)):t}function Ef(r,e,t){let o=r[e];return o&&o.list&&o.list.shape?o.list.shape.map(n=>c_(n)):t}function $f(r,e,t){let o=r[e];return o&&o.list&&o.list.b?o.list.b:t}var Rf=class{constructor(e,t,o){this.node=e,this.tensorMap=t,this.context=o,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(n=>this.getInput(n)),e.rawAttrs!=null&&(this.attrs=Object.keys(e.rawAttrs).reduce((n,s)=>(n[s]=this.getAttr(s),n),{}))}getInput(e){return Vt(e,this.tensorMap,this.context)}getAttr(e,t){let o=this.node.rawAttrs[e];if(o.tensor!=null)return Vt(e,this.tensorMap,this.context);if(o.i!=null||o.f!=null)return If(this.node.rawAttrs,e,t);if(o.s!=null)return wf(this.node.rawAttrs,e,t);if(o.b!=null)return Sf(this.node.rawAttrs,e,t);if(o.shape!=null)return Nf(this.node.rawAttrs,e,t);if(o.type!=null)return vf(this.node.rawAttrs,e,t);if(o.list!=null){if(o.list.i!=null||o.list.f!=null)return Tf(this.node.rawAttrs,e,t);if(o.list.s!=null)return _f(this.node.rawAttrs,e,t);if(o.list.shape!=null)return Ef(this.node.rawAttrs,e,t);if(o.list.b!=null)return $f(this.node.rawAttrs,e,t);if(o.list.type!=null)return kf(this.node.rawAttrs,e,t)}return t}};var et={};qe(et,{OP_SCOPE_SUFFIX:()=>Bw,abs:()=>er,acos:()=>g1,acosh:()=>x1,add:()=>Ce,addN:()=>y1,all:()=>b1,any:()=>C1,argMax:()=>w1,argMin:()=>S1,asin:()=>I1,asinh:()=>v1,atan:()=>k1,atan2:()=>N1,atanh:()=>T1,avgPool:()=>Id,avgPool3d:()=>$1,basicLSTMCell:()=>R1,batchNorm:()=>mu,batchNorm2d:()=>A1,batchNorm3d:()=>F1,batchNorm4d:()=>P1,batchToSpaceND:()=>vd,bincount:()=>kd,bitwiseAnd:()=>O1,booleanMaskAsync:()=>oX,broadcastArgs:()=>M1,broadcastTo:()=>Oa,buffer:()=>ie,cast:()=>Ue,ceil:()=>L1,clipByValue:()=>B1,clone:()=>Xr,complex:()=>Ar,concat:()=>bt,concat1d:()=>z1,concat2d:()=>V1,concat3d:()=>W1,concat4d:()=>U1,conv1d:()=>G1,conv2d:()=>du,conv2dTranspose:()=>H1,conv3d:()=>K1,conv3dTranspose:()=>j1,cos:()=>X1,cosh:()=>Y1,cosineWindow:()=>Mc,cumprod:()=>Q1,cumsum:()=>Z1,denseBincount:()=>J1,depthToSpace:()=>e2,depthwiseConv2d:()=>cl,diag:()=>t2,dilation2d:()=>r2,div:()=>Xe,divNoNan:()=>n2,dot:()=>s2,dropout:()=>hX,einsum:()=>fu,elu:()=>Ed,enclosingPowerOfTwo:()=>cS,ensureShape:()=>a2,equal:()=>_d,erf:()=>i2,euclideanNorm:()=>l2,exp:()=>Jo,expandDims:()=>Ks,expm1:()=>c2,eye:()=>$d,fft:()=>fl,fill:()=>Ma,floor:()=>Rd,floorDiv:()=>Sd,fused:()=>mS,gather:()=>Dd,gatherND:()=>dX,greater:()=>ju,greaterEqual:()=>Ad,ifft:()=>ep,imag:()=>gu,image:()=>b5,inTopKAsync:()=>xX,irfft:()=>tf,isFinite:()=>m2,isInf:()=>d2,isNaN:()=>f2,leakyRelu:()=>Fd,less:()=>Fc,lessEqual:()=>ml,linalg:()=>C5,linspace:()=>h2,localResponseNormalization:()=>g2,log:()=>yi,log1p:()=>Pd,logSigmoid:()=>x2,logSoftmax:()=>y2,logSumExp:()=>Ld,logicalAnd:()=>Xu,logicalNot:()=>Bd,logicalOr:()=>zd,logicalXor:()=>b2,losses:()=>w5,lowerBound:()=>C2,matMul:()=>Je,max:()=>La,maxPool:()=>Wd,maxPool3d:()=>w2,maxPoolWithArgmax:()=>S2,maximum:()=>Ud,mean:()=>Yu,meshgrid:()=>I2,min:()=>Ac,minimum:()=>Qu,mirrorPad:()=>v2,mod:()=>k2,moments:()=>N2,movingAverage:()=>aX,mul:()=>se,multiRNNCell:()=>T2,multinomial:()=>_2,neg:()=>mr,norm:()=>qu,notEqual:()=>Gd,oneHot:()=>Oc,ones:()=>Ba,onesLike:()=>E2,op:()=>N,outerProduct:()=>$2,pad:()=>za,pad1d:()=>R2,pad2d:()=>D2,pad3d:()=>A2,pad4d:()=>F2,pool:()=>P2,pow:()=>xi,prelu:()=>Kd,print:()=>wd,prod:()=>O2,raggedGather:()=>M2,raggedRange:()=>L2,raggedTensorToTensor:()=>B2,rand:()=>z2,randomGamma:()=>iN,randomNormal:()=>Zd,randomStandardNormal:()=>uN,randomUniform:()=>dl,randomUniformInt:()=>pN,range:()=>xu,real:()=>bi,reciprocal:()=>lN,relu:()=>yu,relu6:()=>Jd,reshape:()=>W,reverse:()=>Bo,reverse1d:()=>cN,reverse2d:()=>mN,reverse3d:()=>dN,reverse4d:()=>fN,rfft:()=>hl,round:()=>ef,rsqrt:()=>hN,scalar:()=>ke,scatterND:()=>uX,searchSorted:()=>Pc,selu:()=>gN,separableConv2d:()=>xN,setdiff1dAsync:()=>yN,sigmoid:()=>Pa,sign:()=>bN,signal:()=>y5,sin:()=>CN,sinh:()=>wN,slice:()=>Ye,slice1d:()=>SN,slice2d:()=>IN,slice3d:()=>vN,slice4d:()=>kN,softmax:()=>NN,softplus:()=>Md,spaceToBatchND:()=>Hd,sparse:()=>S5,sparseToDense:()=>cX,spectral:()=>x5,split:()=>Ci,sqrt:()=>Pr,square:()=>tr,squaredDifference:()=>rf,squeeze:()=>gl,stack:()=>Tr,step:()=>of,stridedSlice:()=>TN,string:()=>I5,sub:()=>Te,sum:()=>ot,tan:()=>_N,tanh:()=>Dc,tensor:()=>pr,tensor1d:()=>rr,tensor2d:()=>bu,tensor3d:()=>nf,tensor4d:()=>EN,tensor5d:()=>$N,tensor6d:()=>RN,tensorScatterUpdate:()=>AN,tile:()=>hu,topk:()=>FN,transpose:()=>yl,truncatedNormal:()=>PN,unique:()=>ON,unsortedSegmentSum:()=>MN,unstack:()=>zo,upperBound:()=>LN,variable:()=>BN,where:()=>Lo,whereAsync:()=>af,zeros:()=>Yr,zerosLike:()=>Kt});var m_=(r,e,t,o=et)=>{switch(r.op){case"BiasAdd":case"AddV2":case"Add":return[o.add(I("a",r,e,t),I("b",r,e,t))];case"AddN":return[o.addN(I("tensors",r,e,t))];case"FloorMod":case"Mod":return[o.mod(I("a",r,e,t),I("b",r,e,t))];case"Mul":return[o.mul(I("a",r,e,t),I("b",r,e,t))];case"RealDiv":case"Div":return[o.div(I("a",r,e,t),I("b",r,e,t))];case"DivNoNan":return[o.divNoNan(I("a",r,e,t),I("b",r,e,t))];case"FloorDiv":return[o.floorDiv(I("a",r,e,t),I("b",r,e,t))];case"Sub":return[o.sub(I("a",r,e,t),I("b",r,e,t))];case"Minimum":return[o.minimum(I("a",r,e,t),I("b",r,e,t))];case"Maximum":return[o.maximum(I("a",r,e,t),I("b",r,e,t))];case"Pow":return[o.pow(I("a",r,e,t),I("b",r,e,t))];case"SquaredDifference":return[o.squaredDifference(I("a",r,e,t),I("b",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var d_=(r,e,t,o=et)=>{switch(r.op){case"Abs":case"ComplexAbs":return[o.abs(I("x",r,e,t))];case"Acos":return[o.acos(I("x",r,e,t))];case"Acosh":return[o.acosh(I("x",r,e,t))];case"Asin":return[o.asin(I("x",r,e,t))];case"Asinh":return[o.asinh(I("x",r,e,t))];case"Atan":return[o.atan(I("x",r,e,t))];case"Atan2":return[o.atan2(I("x",r,e,t),I("y",r,e,t))];case"Atanh":return[o.atanh(I("x",r,e,t))];case"Ceil":return[o.ceil(I("x",r,e,t))];case"Complex":return[o.complex(I("real",r,e,t),I("imag",r,e,t))];case"Cos":return[o.cos(I("x",r,e,t))];case"Cosh":return[o.cosh(I("x",r,e,t))];case"Elu":return[o.elu(I("x",r,e,t))];case"Erf":return[o.erf(I("x",r,e,t))];case"Exp":return[o.exp(I("x",r,e,t))];case"Expm1":return[o.expm1(I("x",r,e,t))];case"Floor":return[o.floor(I("x",r,e,t))];case"Log":return[o.log(I("x",r,e,t))];case"Log1p":return[o.log1p(I("x",r,e,t))];case"Imag":return[o.imag(I("x",r,e,t))];case"Neg":return[o.neg(I("x",r,e,t))];case"Reciprocal":return[o.reciprocal(I("x",r,e,t))];case"Real":return[o.real(I("x",r,e,t))];case"Relu":return[o.relu(I("x",r,e,t))];case"Round":return[o.round(I("x",r,e,t))];case"Selu":return[o.selu(I("x",r,e,t))];case"Sigmoid":return[o.sigmoid(I("x",r,e,t))];case"Sin":return[o.sin(I("x",r,e,t))];case"Sign":return[o.sign(I("x",r,e,t))];case"Sinh":return[o.sinh(I("x",r,e,t))];case"Softplus":return[o.softplus(I("x",r,e,t))];case"Sqrt":return[o.sqrt(I("x",r,e,t))];case"Square":return[o.square(I("x",r,e,t))];case"Tanh":return[o.tanh(I("x",r,e,t))];case"Tan":return[o.tan(I("x",r,e,t))];case"ClipByValue":return[o.clipByValue(I("x",r,e,t),I("clipValueMin",r,e,t),I("clipValueMax",r,e,t))];case"Relu6":return[o.relu6(I("x",r,e,t))];case"Rsqrt":return[o.rsqrt(Vt(r.inputNames[0],e,t))];case"LeakyRelu":return[o.leakyRelu(I("x",r,e,t),I("alpha",r,e,t))];case"Prelu":return[o.prelu(I("x",r,e,t),I("alpha",r,e,t))];case"IsNan":return[o.isNaN(Vt(r.inputNames[0],e,t))];case"IsInf":return[o.isInf(Vt(r.inputNames[0],e,t))];case"IsFinite":return[o.isFinite(Vt(r.inputNames[0],e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function Qr(r,e,t=""){if(!(typeof r=="number"||typeof e=="number")){y.assert(r.length===e.length,()=>t+` Shapes ${r} and ${e} must match`);for(let o=0;o<r.length;o++){let n=r[o],s=e[o];y.assert(n<0||s<0||n===s,()=>t+` Shapes ${r} and ${e} must match`)}}}function f_(r){return!(typeof r=="number"||r.some(e=>e<0))}function Cl(r,e,t){let o=Df(r,t),n=!f_(o);if(n&&e.length===0)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${o}`);if(n&&e.forEach(s=>{o=Df(s.shape,o)}),!f_(o))throw new Error(`Non-fully-defined elementShape: ${o}`);return o}function Df(r,e){if(typeof r=="number")return e;if(typeof e=="number")return r;if(r.length!==e.length)throw new Error(`Incompatible ranks during merge: ${r} vs. ${e}`);let t=[];for(let o=0;o<r.length;++o){let n=r[o],s=e[o];if(n>=0&&s>=0&&n!==s)throw new Error(`Incompatible shape during merge: ${r} vs. ${e}`);t[o]=n>=0?n:s}return t}var Af=class{constructor(e,t,o,n,s,a,i){this.name=e,this.dtype=t,this.maxSize=o,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=ke(0),Fr(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{(e==null||!e.has(t.tensor.id))&&t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);let t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(t=>this.read(t))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);let o=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(this.size()===0&&(this.elementShape==null||this.elementShape.length===0)&&(this.elementShape=t.shape),Qr(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),o.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(o.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);o.tensor=t,Fr(t),o.written=!0,this.tensors[e]=o}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((o,n)=>this.write(o,t[n]))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let n=0;n<this.size();n++)e.push(n)}if(e.length===0)return pr([],[0].concat(this.elementShape));let o=this.readMany(e);return Qr(this.elementShape,o[0].shape,"TensorArray shape mismatch: "),Tr(o,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(this.size()===0)return pr([],[0].concat(this.elementShape));let t=[];for(let n=0;n<this.size();n++)t.push(n);let o=this.readMany(t);return Qr(this.elementShape,o[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${o[0].shape})`),bt(o,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);let o=Math.max(...e);if(!this.dynamicSize&&o>=this.maxSize)throw new Error(`Max index must be < array size (${o}  vs. ${this.maxSize})`);this.writeMany(e,zo(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let o=0,n=e.map(p=>(o+=p,o));if(o!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);let s=o===0?0:t.size/o,a=[];De(()=>{t=W(t,[1,o,s]);for(let p=0;p<e.length;++p){let l=[0,p===0?0:n[p-1],0],c=[1,e[p],s];a[p]=W(Ye(t,l,c),this.elementShape)}return a});let i=[];for(let p=0;p<e.length;p++)i[p]=p;this.writeMany(i,a)}};var wl=class r{get id(){return this.idTensor.id}constructor(e,t,o,n=-1){this.tensors=e,this.elementShape=t,this.elementDtype=o,e!=null&&e.forEach(s=>{if(o!==s.dtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${s.dtype}`);Qr(t,s.shape,"TensorList shape mismatch: "),Fr(s)}),this.idTensor=ke(0),this.maxNumElements=n,Fr(this.idTensor)}copy(){return new r([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{(e==null||!e.has(t.id))&&t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,o=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(o!==-1&&this.tensors.length!==o)throw new Error(`Operation expected a list with ${o} elements but got a list with ${this.tensors.length} elements.`);Qr(e,this.elementShape,"TensorList shape mismatch: ");let n=Cl(this.elementShape,this.tensors,e);return De(()=>{let s=this.tensors.map(a=>W(a,n));return Tr(s,0)})}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(this.size()===0)throw new Error("Trying to pop from an empty list.");let o=Cl(this.elementShape,this.tensors,e),n=this.tensors.pop();return n.kept=!1,Qr(n.shape,e,"TensorList shape mismatch: "),W(n,o)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Qr(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Fr(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(this.maxNumElements!==-1&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);let t=new r([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let o=0;o<Math.min(this.tensors.length,e);++o)t.tensors[o]=this.tensors[o];return t}getItem(e,t,o){if(o!==this.elementDtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(this.tensors[e]==null)throw new Error(`element at index ${e} is null.`);Qr(this.tensors[e].shape,t,"TensorList shape mismatch: ");let n=Cl(this.elementShape,this.tensors,t);return W(this.tensors[e],n)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||this.maxNumElements!==-1&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Qr(this.elementShape,t.shape,"TensorList shape mismatch: "),Fr(t),this.tensors[e]!=null&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,o){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);Qr(this.elementShape,o,"TensorList shape mismatch: "),e=e.slice(0,this.size());let n=Cl(this.elementShape,this.tensors,o);return e.length===0?pr([],[0].concat(n)):De(()=>{let s=e.map(a=>W(this.tensors[a],n));return Tr(s,0)})}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);Qr(this.elementShape,t,"TensorList shape mismatch: ");let o=Cl(this.elementShape,this.tensors,t);return this.size()===0?pr([],[0].concat(o)):De(()=>{let n=this.tensors.map(s=>W(s,o));return bt(n,0)})}};function h_(r,e,t){let o=r.dtype;if(r.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${r.shape}`);if(r.dtype!==t)throw new Error(`Invalid data types; op elements ${r.dtype}, but list elements ${t}`);let n=r.shape.slice(1);Qr(n,e,"TensorList shape mismatch: ");let s=zo(r);return new wl(s,e,o)}function g_(r,e,t,o){return new wl([],r,e,o)}function x_(r,e,t,o){if(e.length!==r.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${r.shape[0]}`);let n=Math.max(...e);if(o!=null&&o!==-1&&n>=o)throw new Error(`Max index must be < array size (${n}  vs. ${o})`);let s=new wl([],t,r.dtype,o),a=zo(r,0);return e.forEach((i,p)=>{s.setItem(i,a[p])}),s}function y_(r,e,t){let o=0,n=e.map(l=>(o+=l,o));if(o!==r.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${r.shape}`);let s=r.shape.slice(1),a=Df(s,t),i=o===0?0:r.size/o,p=De(()=>{let l=[];r=W(r,[1,o,i]);for(let c=0;c<e.length;++c){let d=[0,c===0?0:n[c-1],0],f=[1,e[c],i];l[c]=W(Ye(r,d,f),a)}return r.dispose(),l}),u=new wl([],t,r.dtype,e.length);for(let l=0;l<p.length;l++)u.setItem(l,p[l]);return u}var b_=async(r,e,t)=>{switch(r.op){case"If":case"StatelessIf":{let o=I("thenBranch",r,e,t),n=I("elseBranch",r,e,t),s=I("cond",r,e,t),a=I("args",r,e,t);return(await s.data())[0]?t.functionMap[o].executeFunctionAsync(a,t.tensorArrayMap,t.tensorListMap):t.functionMap[n].executeFunctionAsync(a,t.tensorArrayMap,t.tensorListMap)}case"While":case"StatelessWhile":{let o=I("body",r,e,t),n=I("cond",r,e,t),s=I("args",r,e,t),a=await t.functionMap[n].executeFunctionAsync(s,t.tensorArrayMap,t.tensorListMap),i=s.map(l=>l.id),p=await a[0].data();a.forEach(l=>{!l.kept&&i.indexOf(l.id)===-1&&l.dispose()});let u=s;for(;p[0];){let l=u;u=await t.functionMap[o].executeFunctionAsync(u,t.tensorArrayMap,t.tensorListMap);let c=u.map(d=>d.id);l.forEach(d=>{!d.kept&&i.indexOf(d.id)===-1&&c.indexOf(d.id)===-1&&d.dispose()});let m=await t.functionMap[n].executeFunctionAsync(u,t.tensorArrayMap,t.tensorListMap);p=await m[0].data(),m.forEach(d=>{!d.kept&&i.indexOf(d.id)===-1&&c.indexOf(d.id)===-1&&d.dispose()})}return u}case"LoopCond":{let o=I("pred",r,e,t);return[js(o)]}case"Switch":{let o=I("pred",r,e,t),n=I("data",r,e,t);return n.kept||(n=js(n)),(await o.data())[0]?[void 0,n]:[n,void 0]}case"Merge":{let o=r.inputNames.find(n=>Vt(n,e,t)!==void 0);if(o){let n=Vt(o,e,t);return[js(n)]}return}case"Enter":{let o=I("frameName",r,e,t),n=I("tensor",r,e,t);return t.enterFrame(o),[js(n)]}case"Exit":{let o=I("tensor",r,e,t);return t.exitFrame(),[js(o)]}case"NextIteration":{let o=I("tensor",r,e,t);return t.nextIteration(),[js(o)]}case"TensorArrayV3":{let o=I("size",r,e,t),n=I("dtype",r,e,t),s=I("elementShape",r,e,t),a=I("dynamicSize",r,e,t),i=I("clearAfterRead",r,e,t),p=I("identicalElementShapes",r,e,t),u=I("name",r,e,t),l=new Af(u,n,o,s,p,a,i);return t.addTensorArray(l),[l.idTensor,ke(1)]}case"TensorArrayWriteV3":{let o=I("tensorArrayId",r,e,t),n=I("index",r,e,t),s=I("tensor",r,e,t),a=t.getTensorArray(o.id);return a.write(n,s),[a.idTensor]}case"TensorArrayReadV3":{let o=I("tensorArrayId",r,e,t),n=I("index",r,e,t);return[t.getTensorArray(o.id).read(n)]}case"TensorArrayGatherV3":{let o=I("tensorArrayId",r,e,t),n=I("indices",r,e,t),s=I("dtype",r,e,t);return[t.getTensorArray(o.id).gather(n,s)]}case"TensorArrayScatterV3":{let o=I("tensorArrayId",r,e,t),n=I("indices",r,e,t),s=I("tensor",r,e,t),a=t.getTensorArray(o.id);return a.scatter(n,s),[a.idTensor]}case"TensorArrayConcatV3":{let o=I("tensorArrayId",r,e,t),n=t.getTensorArray(o.id),s=I("dtype",r,e,t);return[n.concat(s)]}case"TensorArraySplitV3":{let o=I("tensorArrayId",r,e,t),n=I("tensor",r,e,t),s=I("lengths",r,e,t),a=t.getTensorArray(o.id);return a.split(s,n),[a.idTensor]}case"TensorArraySizeV3":{let o=I("tensorArrayId",r,e,t),n=t.getTensorArray(o.id);return[ke(n.size(),"int32")]}case"TensorArrayCloseV3":{let o=I("tensorArrayId",r,e,t),n=t.getTensorArray(o.id);return n.clearAndClose(),[n.idTensor]}case"TensorListSetItem":{let o=I("tensorListId",r,e,t),n=I("index",r,e,t),s=I("tensor",r,e,t),a=t.getTensorList(o.id);return a.setItem(n,s),[a.idTensor]}case"TensorListGetItem":{let o=I("tensorListId",r,e,t),n=I("index",r,e,t),s=I("elementShape",r,e,t),a=I("elementDType",r,e,t);return[t.getTensorList(o.id).getItem(n,s,a)]}case"TensorListScatterV2":case"TensorListScatter":{let o=I("indices",r,e,t),n=I("tensor",r,e,t),s=I("elementShape",r,e,t),a=I("numElements",r,e,t),i=x_(n,o,s,a);return t.addTensorList(i),[i.idTensor]}case"TensorListReserve":case"EmptyTensorList":{let o=I("elementShape",r,e,t),n=I("elementDType",r,e,t),s;r.op==="TensorListReserve"?s="numElements":s="maxNumElements";let a=I(s,r,e,t),i=r.op==="TensorListReserve"?-1:a,p=g_(o,n,a,i);return t.addTensorList(p),[p.idTensor]}case"TensorListGather":{let o=I("tensorListId",r,e,t),n=I("indices",r,e,t),s=I("elementShape",r,e,t),a=I("elementDType",r,e,t);return[t.getTensorList(o.id).gather(n,a,s)]}case"TensorListStack":{let o=I("tensorListId",r,e,t),n=I("elementShape",r,e,t),s=I("elementDType",r,e,t),a=I("numElements",r,e,t);return[t.getTensorList(o.id).stack(n,s,a)]}case"TensorListFromTensor":{let o=I("tensor",r,e,t),n=I("elementShape",r,e,t),s=I("elementDType",r,e,t),a=h_(o,n,s);return t.addTensorList(a),[a.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{let o=I("tensorListId",r,e,t),n=t.getTensorList(o.id),s=I("dtype",r,e,t),a=I("elementShape",r,e,t);return[n.concat(s,a)]}case"TensorListPushBack":{let o=I("tensorListId",r,e,t),n=I("tensor",r,e,t),s=t.getTensorList(o.id);return s.pushBack(n),[s.idTensor]}case"TensorListPopBack":{let o=I("tensorListId",r,e,t),n=I("elementShape",r,e,t),s=I("elementDType",r,e,t);return[t.getTensorList(o.id).popBack(n,s)]}case"TensorListSplit":{let o=I("tensor",r,e,t),n=I("elementShape",r,e,t),s=I("lengths",r,e,t),a=y_(o,s,n);return t.addTensorList(a),[a.idTensor]}case"TensorListLength":{let o=I("tensorListId",r,e,t),n=t.getTensorList(o.id);return[ke(n.size(),"int32")]}case"TensorListResize":{let o=I("tensorListId",r,e,t),n=I("size",r,e,t),a=t.getTensorList(o.id).resize(n);return t.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};function C_(r,e,t){let[o,n]=I("fusedOps",r,e,t),s=o==="biasadd",a=!s,i=n==="prelu",p=o==="fusedbatchnorm",u=I("numArgs",r,e,t);if(s){if(i&&u!==2)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&s&&u!==1)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(p)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");let l=I("strides",r,e,t),c=Wc(r,e,t),m=I("dataFormat",r,e,t).toUpperCase(),d=I("dilations",r,e,t),[f,h]=I("args",r,e,t);a&&(h=f,f=void 0);let g=I("leakyreluAlpha",r,e,t);return{stride:l,pad:c,dataFormat:m,dilations:d,biasArg:f,preluArg:h,activationFunc:n,leakyreluAlpha:g}}var w_=(r,e,t,o=et)=>{switch(r.op){case"Conv1D":{let n=I("stride",r,e,t),s=I("pad",r,e,t),a=I("dataFormat",r,e,t).toUpperCase(),i=I("dilation",r,e,t);return[o.conv1d(I("x",r,e,t),I("filter",r,e,t),n,s,a,i)]}case"Conv2D":{let n=I("strides",r,e,t),s=Wc(r,e,t),a=I("dataFormat",r,e,t).toUpperCase(),i=I("dilations",r,e,t);return[o.conv2d(I("x",r,e,t),I("filter",r,e,t),[n[1],n[2]],s,a,[i[1],i[2]])]}case"_FusedConv2D":{let{stride:n,pad:s,dataFormat:a,dilations:i,biasArg:p,preluArg:u,activationFunc:l,leakyreluAlpha:c}=C_(r,e,t);return[o.fused.conv2d({x:I("x",r,e,t),filter:I("filter",r,e,t),strides:[n[1],n[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:p,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{let{stride:n,pad:s,dataFormat:a,dilations:i,biasArg:p,preluArg:u,activationFunc:l,leakyreluAlpha:c}=C_(r,e,t);return[o.fused.depthwiseConv2d({x:I("x",r,e,t),filter:I("filter",r,e,t),strides:[n[1],n[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:p,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{let n=I("outputShape",r,e,t),s=I("strides",r,e,t),a=Wc(r,e,t);return[o.conv2dTranspose(I("x",r,e,t),I("filter",r,e,t),n,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{let n=I("strides",r,e,t),s=Wc(r,e,t),a=I("dilations",r,e,t),i=I("dataFormat",r,e,t).toUpperCase();return[o.depthwiseConv2d(I("input",r,e,t),I("filter",r,e,t),[n[1],n[2]],s,i,[a[1],a[2]])]}case"Conv3D":{let n=I("strides",r,e,t),s=I("pad",r,e,t),a=I("dataFormat",r,e,t).toUpperCase(),i=I("dilations",r,e,t);return[o.conv3d(I("x",r,e,t),I("filter",r,e,t),[n[1],n[2],n[3]],s,a,[i[1],i[2],i[3]])]}case"AvgPool":{let n=I("strides",r,e,t),s=I("pad",r,e,t),a=I("kernelSize",r,e,t);return[o.avgPool(I("x",r,e,t),[a[1],a[2]],[n[1],n[2]],s)]}case"MaxPool":{let n=I("strides",r,e,t),s=I("pad",r,e,t),a=I("kernelSize",r,e,t);return[o.maxPool(I("x",r,e,t),[a[1],a[2]],[n[1],n[2]],s)]}case"MaxPoolWithArgmax":{let n=I("strides",r,e,t),s=I("pad",r,e,t),a=I("kernelSize",r,e,t),i=I("includeBatchInIndex",r,e,t),{result:p,indexes:u}=o.maxPoolWithArgmax(I("x",r,e,t),[a[1],a[2]],[n[1],n[2]],s,i);return[p,u]}case"AvgPool3D":{let n=I("strides",r,e,t),s=I("pad",r,e,t),a=I("kernelSize",r,e,t);return[o.avgPool3d(I("x",r,e,t),[a[1],a[2],a[3]],[n[1],n[2],n[3]],s)]}case"MaxPool3D":{let n=I("strides",r,e,t),s=I("pad",r,e,t),a=I("kernelSize",r,e,t);return[o.maxPool3d(I("x",r,e,t),[a[1],a[2],a[3]],[n[1],n[2],n[3]],s)]}case"Dilation2D":{let n=I("strides",r,e,t),s=I("pad",r,e,t),a=I("dilations",r,e,t),i=n[1],p=n[2],u=a[1],l=a[2];return[o.dilation2d(I("x",r,e,t),I("filter",r,e,t),[i,p],s,[u,l],"NHWC")]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var S_=(r,e,t,o=et)=>{switch(r.op){case"Fill":{let n=I("shape",r,e,t),s=I("dtype",r,e,t),a=I("value",r,e,t);return[o.fill(n,a,s)]}case"LinSpace":{let n=I("start",r,e,t),s=I("stop",r,e,t),a=I("num",r,e,t);return[o.linspace(n,s,a)]}case"Multinomial":{let n=I("logits",r,e,t),s=I("numSamples",r,e,t),a=I("seed",r,e,t);return[o.multinomial(n,s,a)]}case"OneHot":{let n=I("indices",r,e,t),s=I("depth",r,e,t),a=I("onValue",r,e,t),i=I("offValue",r,e,t),p=I("dtype",r,e,t);return[o.oneHot(n,s,a,i,p)]}case"Ones":return[o.ones(I("shape",r,e,t),I("dtype",r,e,t))];case"OnesLike":return[o.onesLike(I("x",r,e,t))];case"RandomStandardNormal":return[o.randomStandardNormal(I("shape",r,e,t),I("dtype",r,e,t),I("seed",r,e,t))];case"RandomUniform":return[o.randomUniform(I("shape",r,e,t),I("minval",r,e,t),I("maxval",r,e,t),I("dtype",r,e,t))];case"RandomUniformInt":return[o.randomUniformInt(I("shape",r,e,t),I("minval",r,e,t),I("maxval",r,e,t),I("seed",r,e,t))];case"Range":{let n=I("start",r,e,t),s=I("stop",r,e,t),a=I("step",r,e,t);return[o.range(n,s,a,I("dtype",r,e,t))]}case"TruncatedNormal":{let n=I("shape",r,e,t),s=I("mean",r,e,t),a=I("stdDev",r,e,t),i=I("seed",r,e,t);return[o.truncatedNormal(n,s,a,I("dtype",r,e,t),i)]}case"Zeros":return[o.zeros(I("shape",r,e,t),I("dtype",r,e,t))];case"ZerosLike":return[o.zerosLike(I("x",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function XS(r,e,t){let o=I("boxes",r,e,t),n=I("scores",r,e,t),s=I("maxOutputSize",r,e,t),a=I("iouThreshold",r,e,t),i=I("scoreThreshold",r,e,t),p=I("softNmsSigma",r,e,t);return{boxes:o,scores:n,maxOutputSize:s,iouThreshold:a,scoreThreshold:i,softNmsSigma:p}}var I_=async(r,e,t,o,n=et)=>{switch(r.op){case"NonMaxSuppressionV5":{let{boxes:s,scores:a,maxOutputSize:i,iouThreshold:p,scoreThreshold:u,softNmsSigma:l}=XS(r,e,t),c=await n.image.nonMaxSuppressionWithScoreAsync(s,a,i,p,u,l);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{let{boxes:s,scores:a,maxOutputSize:i,iouThreshold:p,scoreThreshold:u}=XS(r,e,t),l=I("padToMaxOutputSize",r,e,t),c=await n.image.nonMaxSuppressionPaddedAsync(s,a,i,p,u,l);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{let{boxes:s,scores:a,maxOutputSize:i,iouThreshold:p,scoreThreshold:u}=XS(r,e,t);return[await n.image.nonMaxSuppressionAsync(s,a,i,p,u)]}case"Where":{let s=n.cast(I("condition",r,e,t),"bool"),a=[await n.whereAsync(s)];return s.dispose(),a}case"ListDiff":return n.setdiff1dAsync(I("x",r,e,t),I("y",r,e,t));default:throw TypeError(`Node type ${r.op} is not implemented`)}};var v_=(r,e,t,o=et)=>{switch(r.op){case"LowerBound":{let n=I("sortedSequence",r,e,t),s=I("values",r,e,t);return[o.lowerBound(n,s)]}case"TopKV2":{let n=I("x",r,e,t),s=I("k",r,e,t),a=I("sorted",r,e,t),i=o.topk(n,s,a);return[i.values,i.indices]}case"UpperBound":{let n=I("sortedSequence",r,e,t),s=I("values",r,e,t);return[o.upperBound(n,s)]}case"Unique":{let n=I("x",r,e,t),s=o.unique(n);return[s.values,s.indices]}case"UniqueV2":{let n=I("x",r,e,t),s=I("axis",r,e,t),a=o.unique(n,s);return[a.values,a.indices]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var k_=(r,e,t,o=et)=>{switch(r.op){case"Const":return e[r.name];case"PlaceholderWithDefault":let n=I("default",r,e,t);return[Vt(r.name,e,t)||n];case"Placeholder":return[Vt(r.name,e,t)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{let l=I("x",r,e,t);return[js(l)]}case"IdentityN":return I("x",r,e,t).map(l=>js(l));case"Snapshot":let s=I("x",r,e,t);return[js(s)];case"Shape":return[o.tensor1d(I("x",r,e,t).shape,"int32")];case"ShapeN":return I("x",r,e,t).map(l=>o.tensor1d(l.shape));case"Size":return[o.scalar(I("x",r,e,t).size,"int32")];case"Rank":return[o.scalar(I("x",r,e,t).rank,"int32")];case"NoOp":return[o.scalar(1)];case"Print":let a=I("x",r,e,t),i=I("data",r,e,t),p=I("message",r,e,t),u=I("summarize",r,e,t);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(p);for(let l=0;l<i.length;l++)console.log(Array.prototype.slice.call(i[l].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var Ff=class{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=ke(0),this.tensorMap=new Map,Fr(this.handle)}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return ke(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);let o=await e.data();return this.tensorMap.forEach(n=>n.dispose()),this.tensorMap.clear(),De(()=>{let n=zo(t),s=o.length,a=n.length;y.assert(s===a,()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${a} elements.`);for(let i=0;i<s;i++){let p=o[i],u=n[i];Fr(u),this.tensorMap.set(p,u)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);let o=await e.data();return De(()=>{let n=[];for(let s=0;s<o.length;s++){let a=o[s],i=this.findWithDefault(a,t);n.push(i)}return Tr(n)})}findWithDefault(e,t){let o=this.tensorMap.get(e);return o!=null?o:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}};var N_=async(r,e,t,o)=>{switch(r.op){case"HashTable":case"HashTableV2":{let n=o.getHashTableHandleByName(r.name);if(n!=null)return[n];{let s=I("keyDType",r,e,t),a=I("valueDType",r,e,t),i=new Ff(s,a);return o.addHashTable(r.name,i),[i.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{let n=I("tableHandle",r,e,t,o),s=I("keys",r,e,t),a=I("values",r,e,t);return[await o.getHashTableById(n.id).import(s,a)]}case"LookupTableFind":case"LookupTableFindV2":{let n=I("tableHandle",r,e,t,o),s=I("keys",r,e,t),a=I("defaultValue",r,e,t);return[await o.getHashTableById(n.id).find(s,a)]}case"LookupTableSize":case"LookupTableSizeV2":{let n=I("tableHandle",r,e,t,o);return[o.getHashTableById(n.id).tensorSize()]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var T_=(r,e,t,o=et)=>{switch(r.op){case"ResizeBilinear":{let n=I("images",r,e,t),s=I("size",r,e,t),a=I("alignCorners",r,e,t),i=I("halfPixelCenters",r,e,t);return[o.image.resizeBilinear(n,[s[0],s[1]],a,i)]}case"ResizeNearestNeighbor":{let n=I("images",r,e,t),s=I("size",r,e,t),a=I("alignCorners",r,e,t),i=I("halfPixelCenters",r,e,t);return[o.image.resizeNearestNeighbor(n,[s[0],s[1]],a,i)]}case"CropAndResize":{let n=I("image",r,e,t),s=I("boxes",r,e,t),a=I("boxInd",r,e,t),i=I("cropSize",r,e,t),p=I("method",r,e,t),u=I("extrapolationValue",r,e,t);return[o.image.cropAndResize(n,s,a,i,p,u)]}case"ImageProjectiveTransformV3":{let n=I("images",r,e,t),s=I("transforms",r,e,t),a=I("outputShape",r,e,t),i=I("fillValue",r,e,t),p=I("interpolation",r,e,t),u=I("fillMode",r,e,t);return[o.image.transform(n,s,p.toLowerCase(),u.toLowerCase(),i,a)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var __=(r,e,t,o=et)=>{switch(r.op){case"Equal":return[o.equal(I("a",r,e,t),I("b",r,e,t))];case"NotEqual":return[o.notEqual(I("a",r,e,t),I("b",r,e,t))];case"Greater":return[o.greater(I("a",r,e,t),I("b",r,e,t))];case"GreaterEqual":return[o.greaterEqual(I("a",r,e,t),I("b",r,e,t))];case"Less":return[o.less(I("a",r,e,t),I("b",r,e,t))];case"LessEqual":return[o.lessEqual(I("a",r,e,t),I("b",r,e,t))];case"LogicalAnd":return[o.logicalAnd(I("a",r,e,t),I("b",r,e,t))];case"LogicalNot":return[o.logicalNot(I("a",r,e,t))];case"LogicalOr":return[o.logicalOr(I("a",r,e,t),I("b",r,e,t))];case"Select":case"SelectV2":return[o.where(I("condition",r,e,t),I("a",r,e,t),I("b",r,e,t))];case"BitwiseAnd":return[o.bitwiseAnd(I("a",r,e,t),I("b",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var E_=(r,e,t,o=et)=>{switch(r.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[o.matMul(I("a",r,e,t),I("b",r,e,t),I("transposeA",r,e,t),I("transposeB",r,e,t))];case"Einsum":return[o.einsum(I("equation",r,e,t),...I("tensors",r,e,t))];case"Transpose":return[o.transpose(I("x",r,e,t),I("perm",r,e,t))];case"_FusedMatMul":let[n,s]=I("fusedOps",r,e,t),a=n==="biasadd",i=s==="prelu",p=I("numArgs",r,e,t),u=I("leakyreluAlpha",r,e,t);if(a){if(i&&p!==2)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&p!==1)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}let[l,c]=I("args",r,e,t);return[o.fused.matMul({a:I("a",r,e,t),b:I("b",r,e,t),transposeA:I("transposeA",r,e,t),transposeB:I("transposeB",r,e,t),bias:l,activation:s,preluActivationWeights:c,leakyreluAlpha:u})];case"MatrixBandPart":return[o.linalg.bandPart(I("a",r,e,t),I("numLower",r,e,t),I("numUpper",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var $_=(r,e,t,o=et)=>{switch(r.op){case"EuclideanNorm":return[o.euclideanNorm(I("x",r,e,t),I("axis",r,e,t),I("keepDims",r,e,t))];case"FusedBatchNorm":case"FusedBatchNormV2":return[o.batchNorm(I("x",r,e,t),I("mean",r,e,t),I("variance",r,e,t),I("offset",r,e,t),I("scale",r,e,t),I("epsilon",r,e,t))];case"FusedBatchNormV3":return[o.batchNorm(I("x",r,e,t),I("mean",r,e,t),I("variance",r,e,t),I("offset",r,e,t),I("scale",r,e,t),I("epsilon",r,e,t))];case"LRN":return[o.localResponseNormalization(I("x",r,e,t),I("radius",r,e,t),I("bias",r,e,t),I("alpha",r,e,t),I("beta",r,e,t))];case"Softmax":return[o.softmax(I("x",r,e,t))];case"LogSoftmax":return[o.logSoftmax(I("x",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var R_=(r,e,t,o=et)=>{switch(r.op){case"RaggedGather":{let{outputNestedSplits:n,outputDenseValues:s}=o.raggedGather(I("paramsNestedSplits",r,e,t),I("paramsDenseValues",r,e,t),I("indices",r,e,t),I("outputRaggedRank",r,e,t));return n.concat(s)}case"RaggedRange":{let{rtNestedSplits:n,rtDenseValues:s}=o.raggedRange(I("starts",r,e,t),I("limits",r,e,t),I("splits",r,e,t));return[n,s]}case"RaggedTensorToTensor":return[o.raggedTensorToTensor(I("shape",r,e,t),I("values",r,e,t),I("defaultValue",r,e,t),I("rowPartitionTensors",r,e,t),I("rowPartitionTypes",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var D_=(r,e,t,o=et)=>{switch(r.op){case"Max":{let i=I("axis",r,e,t),p=I("keepDims",r,e,t);return[o.max(I("x",r,e,t),i,p)]}case"Mean":{let i=I("axis",r,e,t),p=I("keepDims",r,e,t);return[o.mean(I("x",r,e,t),i,p)]}case"Min":{let i=I("axis",r,e,t),p=I("keepDims",r,e,t);return[o.min(I("x",r,e,t),i,p)]}case"Sum":{let i=I("axis",r,e,t),p=I("keepDims",r,e,t);return[o.sum(I("x",r,e,t),i,p)]}case"All":{let i=I("axis",r,e,t),p=I("keepDims",r,e,t);return[o.all(I("x",r,e,t),i,p)]}case"Any":{let i=I("axis",r,e,t),p=I("keepDims",r,e,t);return[o.any(I("x",r,e,t),i,p)]}case"ArgMax":{let i=I("axis",r,e,t);return[o.argMax(I("x",r,e,t),i)]}case"ArgMin":{let i=I("axis",r,e,t);return[o.argMin(I("x",r,e,t),i)]}case"Prod":{let i=I("axis",r,e,t),p=I("keepDims",r,e,t);return[o.prod(I("x",r,e,t),i,p)]}case"Cumprod":{let i=I("axis",r,e,t),p=I("exclusive",r,e,t),u=I("reverse",r,e,t);return[o.cumprod(I("x",r,e,t),i,p,u)]}case"Cumsum":{let i=I("axis",r,e,t),p=I("exclusive",r,e,t),u=I("reverse",r,e,t);return[o.cumsum(I("x",r,e,t),i,p,u)]}case"Bincount":let n=I("x",r,e,t),s=I("weights",r,e,t),a=I("size",r,e,t);return[o.bincount(n,s,a)];case"DenseBincount":{let i=I("x",r,e,t),p=I("weights",r,e,t),u=I("size",r,e,t),l=I("binaryOutput",r,e,t);return[o.denseBincount(i,p,u,l)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var A_=(r,e,t,o=et)=>{switch(r.op){case"ConcatV2":case"Concat":{let n=I("n",r,e,t),s=I("axis",r,e,t),a=I("tensors",r,e,t);return a=a.slice(0,n),[o.concat(a,s)]}case"Gather":{let n=I("x",r,e,t),s=I("indices",r,e,t);return[o.gather(n,o.cast(s,"int32"),0)]}case"GatherV2":{let n=I("axis",r,e,t),s=I("batchDims",r,e,t),a=I("x",r,e,t),i=I("indices",r,e,t);return[o.gather(a,o.cast(i,"int32"),n,s)]}case"Reverse":{let n=I("dims",r,e,t),s=[];for(let i=0;i<n.length;i++)n[i]&&s.push(i);let a=I("x",r,e,t);return[o.reverse(a,s)]}case"ReverseV2":{let n=I("axis",r,e,t),s=I("x",r,e,t);return[o.reverse(s,n)]}case"Slice":{let n=I("begin",r,e,t),s=I("size",r,e,t);return[o.slice(I("x",r,e,t),n,s)]}case"StridedSlice":{let n=I("begin",r,e,t),s=I("end",r,e,t),a=I("strides",r,e,t),i=I("beginMask",r,e,t),p=I("endMask",r,e,t),u=I("ellipsisMask",r,e,t),l=I("newAxisMask",r,e,t),c=I("shrinkAxisMask",r,e,t),m=I("x",r,e,t);return[o.stridedSlice(m,n,s,a,i,p,u,l,c)]}case"Pack":return De(()=>{let n=I("axis",r,e,t),s=I("tensors",r,e,t),a=s[0].shape,i=o.squeeze(s[0]).shape,p=s.map(u=>{let l=y.arraysEqual(u.shape,a);if(!l&&!y.arraysEqual(o.squeeze(u).shape,i))throw new Error("the input tensors shape does not match");return l?u:o.reshape(u,a)});return[o.stack(p,n)]});case"Unpack":{let n=I("axis",r,e,t),s=I("tensor",r,e,t);return o.unstack(s,n)}case"Tile":{let n=I("reps",r,e,t);return[o.tile(I("x",r,e,t),n)]}case"Split":case"SplitV":{let n=I("axis",r,e,t),s=I("numOrSizeSplits",r,e,t),a=I("x",r,e,t);return o.split(a,s,n)}case"ScatterNd":{let n=I("indices",r,e,t),s=I("values",r,e,t),a=I("shape",r,e,t);return[o.scatterND(n,s,a)]}case"GatherNd":{let n=I("x",r,e,t),s=I("indices",r,e,t);return[o.gatherND(n,s)]}case"SparseToDense":{let n=I("sparseIndices",r,e,t),s=I("outputShape",r,e,t),a=I("sparseValues",r,e,t),i=I("defaultValue",r,e,t);return[o.sparseToDense(n,a,s,a.dtype===i.dtype?i:o.cast(i,a.dtype))]}case"TensorScatterUpdate":{let n=I("indices",r,e,t),s=I("values",r,e,t),a=I("tensor",r,e,t);return[o.tensorScatterUpdate(a,n,s)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var F_=(r,e,t,o=et)=>{switch(r.op){case"SparseFillEmptyRows":{let{outputIndices:n,outputValues:s,emptyRowIndicator:a,reverseIndexMap:i}=o.sparse.sparseFillEmptyRows(I("indices",r,e,t),I("values",r,e,t),I("denseShape",r,e,t),I("defaultValue",r,e,t));return[n,s,a,i]}case"SparseReshape":{let{outputIndices:n,outputShape:s}=o.sparse.sparseReshape(I("inputIndices",r,e,t),I("inputShape",r,e,t),I("newShape",r,e,t));return[n,s]}case"SparseSegmentMean":return[o.sparse.sparseSegmentMean(I("data",r,e,t),I("indices",r,e,t),I("segmentIds",r,e,t))];case"SparseSegmentSum":return[o.sparse.sparseSegmentSum(I("data",r,e,t),I("indices",r,e,t),I("segmentIds",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var P_=(r,e,t,o=et)=>{switch(r.op){case"FFT":return[o.fft(I("x",r,e,t))];case"IFFT":return[o.ifft(I("x",r,e,t))];case"RFFT":return[o.rfft(I("x",r,e,t))];case"IRFFT":return[o.irfft(I("x",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var O_=(r,e,t,o=et)=>{switch(r.op){case"StaticRegexReplace":return[o.string.staticRegexReplace(I("input",r,e,t),I("pattern",r,e,t),I("rewrite",r,e,t),I("replaceGlobal",r,e,t))];case"StringNGrams":{let{nGrams:n,nGramsSplits:s}=o.string.stringNGrams(I("data",r,e,t),I("dataSplits",r,e,t),I("separator",r,e,t),I("nGramWidths",r,e,t),I("leftPad",r,e,t),I("rightPad",r,e,t),I("padWidth",r,e,t),I("preserveShortSequences",r,e,t));return[n,s]}case"StringSplit":{let{indices:n,values:s,shape:a}=o.string.stringSplit(I("input",r,e,t),I("delimiter",r,e,t),I("skipEmpty",r,e,t));return[n,s,a]}case"StringToHashBucketFast":return[o.string.stringToHashBucketFast(I("input",r,e,t),I("numBuckets",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var M_=(r,e,t,o=et)=>{switch(r.op){case"Cast":return[o.cast(I("x",r,e,t),I("dtype",r,e,t))];case"ExpandDims":{let n=I("axis",r,e,t);return[o.expandDims(I("x",r,e,t),n)]}case"Squeeze":{let n=I("axis",r,e,t);return[o.squeeze(I("x",r,e,t),n)]}case"Reshape":return[o.reshape(I("x",r,e,t),I("shape",r,e,t))];case"EnsureShape":return[o.ensureShape(I("x",r,e,t),I("shape",r,e,t))];case"MirrorPad":return[o.mirrorPad(I("x",r,e,t),I("padding",r,e,t),I("mode",r,e,t))];case"PadV2":case"Pad":return[o.pad(I("x",r,e,t),I("padding",r,e,t),I("constantValue",r,e,t))];case"SpaceToBatchND":{let n=I("blockShape",r,e,t),s=I("paddings",r,e,t);return[o.spaceToBatchND(I("x",r,e,t),n,s)]}case"BatchToSpaceND":{let n=I("blockShape",r,e,t),s=I("crops",r,e,t);return[o.batchToSpaceND(I("x",r,e,t),n,s)]}case"DepthToSpace":{let n=I("blockSize",r,e,t),s=I("dataFormat",r,e,t).toUpperCase();return[o.depthToSpace(I("x",r,e,t),n,s)]}case"BroadcastTo":return[o.broadcastTo(I("x",r,e,t),I("shape",r,e,t))];case"BroadcastArgs":return[o.broadcastArgs(I("s0",r,e,t),I("s1",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function YS(r,e,t,o,n=De){let s=((a,i,p)=>{switch(a.category){case"arithmetic":return n(()=>m_(a,i,p));case"basic_math":return n(()=>d_(a,i,p));case"control":return b_(a,i,p);case"convolution":return n(()=>w_(a,i,p));case"creation":return n(()=>S_(a,i,p));case"dynamic":return I_(a,i,p);case"evaluation":return n(()=>v_(a,i,p));case"image":return n(()=>T_(a,i,p));case"graph":return n(()=>k_(a,i,p));case"logical":return n(()=>__(a,i,p));case"matrices":return n(()=>E_(a,i,p));case"normalization":return n(()=>$_(a,i,p));case"ragged":return n(()=>R_(a,i,p));case"reduction":return n(()=>D_(a,i,p));case"slice_join":return n(()=>A_(a,i,p));case"sparse":return n(()=>F_(a,i,p));case"spectral":return n(()=>P_(a,i,p));case"string":return n(()=>O_(a,i,p));case"transformation":return n(()=>M_(a,i,p));case"hash_table":return N_(a,i,p,o);case"custom":let u=bf(a.op);if(u&&u.customExecutor)return u.customExecutor(new Rf(a,i,p));throw TypeError(`Custom op ${a.op} is not registered.`);default:throw TypeError(`Unknown op '${a.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(r,e,t);return y.isPromise(s)?s.then(a=>[].concat(a)):[].concat(s)}var Gc=class{constructor(e={},t={},o={},n={},s){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=o,this.functionMap=n,this.parseNodeNameCache=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){let e=[];for(let t=0;t<this.contexts.length-1;t++){let o=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(o))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(t=>t.id===0&&t.iterationId===0?"":`${t.frameName}-${t.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(this.contexts&&this.contexts.length>1)this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();else throw new Error("Cannot exit frame, the context is empty")}nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice(),this.lastId++;let e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}else throw new Error("Cannot increase frame iteration, the context is empty")}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(let t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(let t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}};function QS(r,e,t,o){let n=new Set,s=[],a=null,i=null,p=new Set,u=new Set(Object.keys(r).map(m=>Er(m)[0]));o=o||[];let l=new Set(o.map(m=>Er(m.name)[0])),c=[...e];for(;c.length>0;){let m=c.pop();if((wu(m)||ZY(m)||JY(m))&&a==null&&(a=m,i=a.children.map(d=>d.name).filter(d=>n.has(d))),n.add(m.name),t[m.name]==null&&!u.has(m.name)&&!l.has(m.name)){if(m.inputs.length===0){s.push(m.name);continue}m.inputs.forEach(d=>{p.has(d.name)||(p.add(d.name),c.push(d))})}}return{inputs:r,outputs:e,usedNodes:n,missingInputs:s,dynamicNode:a,syncInputs:i}}function L_(r,e){let{usedNodes:t,inputs:o}=e,n=Object.keys(o).map(g=>Er(g)[0]).map(g=>r.nodes[g]),s=r.initNodes||[],a=g=>t.has(typeof g=="string"?g:g.name);function i(g){return[...new Map(g.map(x=>[x.name,x])).values()]}let p=i([...n,...r.weights,...s]).filter(a),u=i([...p,...Object.values(r.nodes)]).filter(a),l=new Map(u.map(g=>[g.name,g])),c={};for(let g of u){c[g.name]=c[g.name]||0;for(let x of g.children)a(x)||(c[x.name]=Number.POSITIVE_INFINITY),c[x.name]=(c[x.name]||0)+1}let m=Object.entries(c).filter(([,g])=>g===0).map(([g])=>g),d=[...m];for(;m.length>0;){let g=m.pop(),x=l.get(g);for(let b of x.children.filter(a))--c[b.name]===0&&(d.push(b.name),m.push(b.name))}let f=d.map(g=>l.get(g)),h=qY(f,p);return jY(h,p),h}function qY(r,e){let t=new Map(r.map(a=>[a.name,a])),o=e.map(a=>a.name),n=new Set(o);for(;o.length>0;){let a=o.pop(),i=t.get(a);for(let p of i.children)!t.has(p.name)||n.has(p.name)||(n.add(p.name),o.push(p.name))}return r.filter(a=>n.has(a.name))}var Sl=class extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}};function jY(r,e){let t=new Map(r.map((i,p)=>[i.name,p])),o=new Set(e.map(i=>i.name)),n=i=>o.has(typeof i=="string"?i:i.name),s=new Set(r.map(i=>i.name)),a=i=>s.has(typeof i=="string"?i:i.name);for(let i of r){for(let p of i.children.filter(a)){if(!t.has(p.name))throw new Sl(`Child ${p.name} of node ${i.name} is unreachable.`);if(t.get(i.name)>t.get(p.name))throw new Sl(`Node ${i.name} is scheduled to run after its child ${p.name}.`)}if(!n(i))for(let p of i.inputs){if(!t.has(p.name))throw new Sl(`Input ${p.name} of node ${i.name} is unreachable.`);if(t.get(p.name)>t.get(i.name))throw new Sl(`Node ${i.name} is scheduled to run before its input ${p.name}.`)}}}function B_(r){let e=new Map(r.map((i,p)=>[i.name,p])),t=Number.MAX_SAFE_INTEGER,o=r.map((i,p)=>wu(i)?t:p),n=i=>{let p=o[e.get(i.name)];return p==null?-1:p},s=r.map((i,p)=>i.children.map(n).reduce((u,l)=>Math.max(u,l),o[p])),a=new Map;for(let i=0;i<r.length;++i){let p=s[i];if(p===t)continue;let u=r[i],l=r[p];a.has(l.name)||a.set(l.name,[]),a.get(l.name).push(u)}return a}var XY=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),YY=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),QY=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function wu(r){return XY.has(r.op)}function ZY(r){return YY.has(r.op)}function JY(r){return QY.has(r.op)}var Hc=class r{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){let t=Object.keys(e).map(o=>e[o].map(n=>n.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{let t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,e.functions!=null&&Object.keys(e.functions).forEach(o=>{this._functionExecutorMap[o]=new r(e.functions[o],this)})}getCompilationKey(e,t){let o=e.map(s=>s.name).sort(),n=t.map(s=>s.name).sort();return o.join(this.SEPARATOR)+"--"+n.join(this.SEPARATOR)}compile(e,t){let o=QS(e,t,this.weightMap,this._initNodes),{missingInputs:n,dynamicNode:s,syncInputs:a}=o;if(s!=null)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(n.length>0){let u=t.map(c=>c.name),l=Object.keys(e);throw new Error(`Cannot compute the outputs [${u}] from the provided inputs [${l}]. Missing the following inputs: [${n}]`)}let i=L_(this.graph,o),p=B_(i);return{orderedNodes:i,nodeLiveUntilMap:p}}cloneAndKeepTensor(e){if(e==null)return null;let t=e.clone();return Fr(t),t}cloneTensorList(e){return e?e.map(o=>this.cloneAndKeepTensor(o)):null}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map(([t,o])=>[t,this.cloneTensorList(o)]))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);let o=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);let n=o.map(m=>this.graph.nodes[Er(m)[0]]),s=t.map(m=>Er(m)[0]),a=new Set(s),i=s.map(m=>this.graph.nodes[m]);i.length===0&&(i=this._outputs);let p=this.getCompilationKey(n,i),u=this.compiledMap.get(p);u==null&&(u=this.compile(e,i),this.compiledMap.set(p,u));try{this.keepIntermediateTensors=A().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(m){this.keepIntermediateTensors=!1,console.warn(m.message)}let l={},c={};return De(()=>{let m=new Gc(this.weightMap,l,c,this.functionExecutorMap,this.parseNodeNameCache),d=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach(x=>{let[b,w]=Er(x,m),S=[];S[w]=e[x],d[b]=S,this.keepIntermediateTensors&&(this.clonedTensorsMap[b]=this.cloneTensorList(S))});let f=this.getFrozenTensorIds(d),{orderedNodes:h,nodeLiveUntilMap:g}=u;for(let x of h){if(d[x.name])continue;let b=YS(x,d,m,this._resourceManager);if(y.isPromise(b))throw new Error(`The execution of the op '${x.op}' returned a promise. Please use model.executeAsync() instead.`);d[x.name]=b,this.keepIntermediateTensors&&(this.clonedTensorsMap[x.name]=this.cloneTensorList(b)),this.checkTensorForDisposalWithNodeLiveUntilInfo(x,d,m,f,a,g.get(x.name))}return this.parent==null&&m.dispose(f),t.map(x=>Vt(x,d,m))})}getFrozenTensorIds(e){let t=[].concat.apply([],Object.keys(e).map(o=>e[o]).map(o=>o.map(n=>n.id)));return new Set(t)}checkTensorForDisposal(e,t,o,n,s,a,i){if(!(wu(t)||a.has(e))){for(let p of o[e])p!=null&&(i[p.id]=(i[p.id]||0)+t.children.length);for(let p of t.inputs){if(wu(p))continue;let u=_S(p.name,o,n);if(u!=null)for(let l of u){if(!l||l.kept||s.has(l.id))continue;let c=i[l.id];c===1?(l.dispose(),delete i[l.id]):c!=null&&i[l.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,o,n,s,a){function i(p){return wu(p)||s.has(p.name)}if(!(wu(e)||a==null))for(let p of a){if(i(p))continue;let u=_S(p.name,t,o);for(let l of u)!l||l.kept||n.has(l.id)||l.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(e=>{for(let t of e)t&&!t.isDisposed&&t.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,o=!1,n={},s={}){this.disposeIntermediateTensors(),o||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=A().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(m){this.keepIntermediateTensors=!1,console.warn(m.message)}let a=new Gc(this.weightMap,n,s,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));let i=await this.executeWithControlFlow(e,a,t,o),p=t.map(m=>Vt(m,i,a)),u=p.map(m=>m.id),l=Object.keys(e).map(m=>e[m].id),c=new Set([...u,...l,...this.weightIds]);return Object.values(i).forEach(m=>{m.forEach(d=>{d&&!d.isDisposed&&!c.has(d.id)&&d.dispose()})}),this.parent==null&&a.dispose(c),p}async executeFunctionAsync(e,t,o){let n=e.reduce((s,a,i)=>(s[this.inputs[i].name]=a,s),{});return this._executeAsync(n,this.outputNodes,!0,t,o)}async executeWithControlFlow(e,t,o,n){let s=Object.keys(e),a=s.map(S=>this.graph.nodes[Er(S)[0]]),i=o.map(S=>Er(S)[0]),p=new Set(i),u=i.map(S=>this.graph.nodes[S]);u.length===0&&(u=this._outputs);let{usedNodes:l,missingInputs:c,dynamicNode:m,syncInputs:d}=QS(e,u,this.weightMap,this._initNodes),f=[...a,...this.graph.weights,...this._initNodes||[]].map(S=>({node:S,contexts:t.currentContext})),h=Object.assign({},this.weightMap);Object.keys(e).forEach(S=>{let[k,T]=Er(S),E=[];E[T]=e[S],h[k]=E});let g={},x=this.getFrozenTensorIds(h),b={};for(;f.length>0;){let S=this.processStack(a,f,t,h,b,x,p,g,l);await Promise.all(S)}m==null&&!n&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");let w=u.filter(S=>!wu(S)&&!Vt(S.name,h,t)).map(S=>S.name);if(w.length>0){let S="";throw m!=null&&(S=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),new Error(`Cannot compute the outputs [${w}] from the provided inputs [${s}]. Consider providing the following inputs: [${c}]. ${S}`)}return h}processStack(e,t,o,n,s,a,i,p,u){let l=[];for(;t.length>0;){let c=t.pop();o.currentContext=c.contexts;let m="";if(c.node.op==="Enter"&&I("isConstant",c.node,n,o)&&([m]=qs(c.node.name,o)),n[c.node.name]==null){let d=YS(c.node,n,o,this._resourceManager);m||([m]=qs(c.node.name,o));let f=o.currentContext;y.isPromise(d)?l.push(d.then(h=>(n[m]=h,this.keepIntermediateTensors&&(this.clonedTensorsMap[m]=this.cloneTensorList(h)),o.currentContext=f,this.checkTensorForDisposal(m,c.node,n,o,a,i,p),this.processChildNodes(c.node,t,o,n,s,u),h))):(n[m]=d,this.keepIntermediateTensors&&(this.clonedTensorsMap[m]=this.cloneTensorList(d)),this.checkTensorForDisposal(m,c.node,n,o,a,i,p),this.processChildNodes(c.node,t,o,n,s,u))}else this.processChildNodes(c.node,t,o,n,s,u)}return l}processChildNodes(e,t,o,n,s,a){e.children.forEach(i=>{let[p]=qs(i.name,o);s[p]||!a.has(i.name)||(i.op==="Merge"?i.inputNames.some(u=>!!Vt(u,n,o))&&(s[p]=!0,t.push({contexts:o.currentContext,node:i})):i.inputNames.every(u=>!!Vt(u,n,o))&&(s[p]=!0,t.push({contexts:o.currentContext,node:i})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(t=>t.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{let o=e[t],[n]=Er(t),s=this.graph.nodes[n];if(s.attrParams.shape&&s.attrParams.shape.value){let a=s.attrParams.shape.value,i=a.length===o.shape.length&&o.shape.every((p,u)=>a[u]===-1||a[u]===p);y.assert(i,()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${a}], but was [${o.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&y.assert(o.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${o.dtype}`)})}mapInputs(e){var t,o;let n={};for(let s in e){let a=(o=(t=this._signature)===null||t===void 0?void 0:t.inputs)===null||o===void 0?void 0:o[s];a!=null?n[a.name]=e[s]:n[s]=e[s]}return n}checkInputs(e){let t=Object.keys(e).filter(o=>{let[n]=Er(o);return this.graph.nodes[n]==null});if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(t=>{var o,n;let s=(n=(o=this._signature)===null||o===void 0?void 0:o.outputs)===null||n===void 0?void 0:n[t];return s!=null?s.name:t},{})}checkOutputs(e){e.forEach(t=>{let[o]=Er(t);if(!this.graph.nodes[o])throw new Error(`The output '${t}' is not found in the graph`)})}};var Pf=class{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(let e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(let e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}};var e7="?tfjs-format=file",t7="model.json",Kc=class{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},o=Si){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=o,t==null&&(this.loadOptions={}),this.resourceManager=new Pf}findIOHandler(){let e=this.modelUrl;if(e.load!=null)this.handler=e;else if(this.loadOptions.requestInit!=null)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{let t=this.io.getLoadHandlers(e,this.loadOptions);if(t.length===0)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),this.handler.load==null)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let e=this.handler.load();return y.isPromise(e)?e.then(t=>t.getWeightStream==null?this.loadSync(t):this.loadStreaming(t)):this.loadSync(e)}loadSync(e){let t=this.io.decodeWeights(e.weightData,e.weightSpecs);return this.loadWithWeightMap(e,t)}async loadStreaming(e){if(e.getWeightStream==null)throw new Error("Model artifacts missing streamWeights function");let t=await gd(e.getWeightStream(),e.weightSpecs);return this.loadWithWeightMap(e,t)}loadWithWeightMap(e,t){this.artifacts=e;let o=this.artifacts.modelTopology,n=this.artifacts.signature;if(this.artifacts.userDefinedMetadata!=null){let s=this.artifacts.userDefinedMetadata;s.signature!=null&&(n=s.signature),s.structuredOutputKeys!=null&&(this.structuredOutputKeys=s.structuredOutputKeys)}if(this.signature=n,this.version=`${o.versions.producer}.${o.versions.minConsumer}`,this.executor=new Hc(Uc.Instance.transformGraph(o,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(t),this.executor.resourceManager=this.resourceManager,e.modelInitializer!=null&&e.modelInitializer.node!=null){let s=Uc.Instance.transformGraph(e.modelInitializer);this.initializer=new Hc(s),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if(typeof e=="string"){let o=this.io.getSaveHandlers(e);if(o.length===0)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(o.length>1)throw new Error(`Found more than one (${o.length}) save handlers for URL '${e}'`);e=o[0]}if(e.save==null)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){let t=e instanceof dt?[e]:e,o={};return t.forEach((n,s)=>o[this.structuredOutputKeys[s]]=n),o}return e}predict(e,t){let o=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(o)}async predictAsync(e,t){let o=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(o)}normalizeInputs(e){var t;if(!(e instanceof dt)&&!Array.isArray(e)){let s=(t=this.signature)===null||t===void 0?void 0:t.inputs;if(s!=null)for(let a in s){let i=s[a];i.resourceId!=null&&(e[a]=this.resourceIdToCapturedInput[i.resourceId])}return e}e=Array.isArray(e)?e:[e];let o=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+o!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-o} non-resource placeholders, while there are ${e.length} input tensors provided.`);let n=0;return this.inputNodes.reduce((s,a)=>{var i,p,u;let l=(u=(p=(i=this.signature)===null||i===void 0?void 0:i.inputs)===null||p===void 0?void 0:p[a])===null||u===void 0?void 0:u.resourceId;return l!=null?s[a]=this.resourceIdToCapturedInput[l]:s[a]=e[n++],s},{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return this.initializer==null?[]:this.initializerSignature==null?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return this.initializer==null?[]:this.initializerSignature==null?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){let t=this.initializerSignature.outputs,o=Object.keys(t);for(let n=0;n<o.length;n++){let s=o[n],a=t[s];this.resourceIdToCapturedInput[a.resourceId]=e[n]}}}execute(e,t){this.resourceIdToCapturedInput==null&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);let o=this.executor.execute(e,t);return o.length>1?o:o[0]}async executeAsync(e,t){this.resourceIdToCapturedInput==null&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);let o=await this.executor.executeAsync(e,t);return o.length>1?o:o[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,o)=>(t[o]=[e[o]],t),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&Lt(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}};async function r7(r,e={},t=Si){if(r==null)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");e==null&&(e={}),e.fromTFHub&&typeof r=="string"&&(r=n7(r));let o=new Kc(r,e,t);return await o.load(),o}function o7(r){if(r==null)throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");let e;if(r instanceof Array){let[o,n]=r;if(!o)throw new Error("modelJSON must be the first element of the array");if(!n||!(n instanceof ArrayBuffer))throw new Error("An ArrayBuffer of weights must be the second element of the array");if(!("modelTopology"in o))throw new Error("Model JSON is missing 'modelTopology'");if(!("weightsManifest"in o))throw new Error("Model JSON is missing 'weightsManifest'");let s=Si.getWeightSpecs(o.weightsManifest),a=Si.getModelArtifactsForJSONSync(o,s,n);e=Si.fromMemorySync(a)}else if("load"in r)e=r;else if("modelTopology"in r&&"weightSpecs"in r&&"weightData"in r)e=Si.fromMemorySync(r);else throw new Error("Unknown model format");let t=new Kc(e);return t.load(),t}function n7(r){return r.endsWith("/")||(r=r+"/"),`${r}${t7}${e7}`}var s7="4.17.0";function Q(r,e){Array.isArray(r)||(r=[r]),r.forEach(t=>{t!=null&&y.assert(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the CPU backend.`)})}var a7=Ut.whereImpl,Il=class r extends mo{nextDataId(){return r.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new mn(this,cr())}write(e,t,o){this.firstUse&&(this.firstUse=!1,A().get("IS_NODE")&&C.warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));let n={id:this.nextDataId()};return this.data.set(n,{values:e,dtype:o,refCount:1}),n}makeTensorInfo(e,t,o){let n;if(t==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(a=>y.encodeString(a));n=this.write(s,e,t)}else n=this.write(o,e,t);return{dataId:n,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){let t=this.data.get(e);t.refCount++}decRef(e){if(this.data.has(e)){let t=this.data.get(e);t.refCount--}}move(e,t,o,n,s){this.data.set(e,{values:t,dtype:n,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){let{dtype:t,complexTensorInfos:o}=this.data.get(e);if(t==="complex64"){let n=this.readSync(o.real.dataId),s=this.readSync(o.imag.dataId);return C.mergeRealAndImagArrays(n,s)}return y.convertBackendValuesAndArrayBuffer(this.data.get(e).values,t)}bufferSync(e){let t=this.readSync(e.dataId);if(e.dtype==="string")try{let o=t.map(n=>y.decodeString(n));return ie(e.shape,e.dtype,o)}catch(o){throw new Error("Failed to decode encoded string bytes into utf-8")}return ie(e.shape,e.dtype,t)}makeOutput(e,t,o){return cr().makeTensorFromTensorInfo(this.makeTensorInfo(t,o,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;let{complexTensorInfos:o}=this.data.get(e);o!=null&&(this.disposeData(o.real.dataId,!0),this.disposeData(o.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){let t=y.now();return e(),{kernelMs:y.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Q([e],"where");let t=this.readSync(e.dataId);return a7(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}};Il.nextDataId=0;var Xf={};qe(Xf,{addImpl:()=>eI,bincountImpl:()=>Nl,bincountReduceImpl:()=>Of,bitwiseAndImpl:()=>tI,castImpl:()=>JS,ceilImpl:()=>rI,concatImpl:()=>mp,equalImpl:()=>oI,expImpl:()=>sI,expm1Impl:()=>iI,floorDivImpl:()=>pI,floorImpl:()=>uI,gatherNdImpl:()=>Mf,gatherV2Impl:()=>Lf,greaterEqualImpl:()=>cI,greaterImpl:()=>lI,lessEqualImpl:()=>dI,lessImpl:()=>mI,linSpaceImpl:()=>Bf,logImpl:()=>fI,maxImpl:()=>zf,maximumImpl:()=>hI,minimumImpl:()=>gI,multiplyImpl:()=>qc,negImpl:()=>xI,notEqualImpl:()=>yI,prodImpl:()=>bI,raggedGatherImpl:()=>Vf,raggedRangeImpl:()=>Wf,raggedTensorToTensorImpl:()=>Uf,rangeImpl:()=>fp,rsqrtImpl:()=>wI,scatterImpl:()=>Xs,sigmoidImpl:()=>gE,simpleAbsImpl:()=>ZS,sliceImpl:()=>hp,sparseFillEmptyRowsImpl:()=>Gf,sparseReshapeImpl:()=>Hf,sparseSegmentReductionImpl:()=>_l,sqrtImpl:()=>bE,squaredDifferenceImpl:()=>II,staticRegexReplaceImpl:()=>vI,stridedSliceImpl:()=>Kf,stringNGramsImpl:()=>gp,stringSplitImpl:()=>xp,stringToHashBucketFastImpl:()=>yp,subImpl:()=>NI,tileImpl:()=>qf,topKImpl:()=>jf,transposeImpl:()=>Tl,uniqueImpl:()=>bp});function ZS(r){let e=new Float32Array(r.length);for(let t=0;t<r.length;++t)e[t]=Math.abs(r[t]);return e}var i7=r=>{let{x:e}=r.inputs,t=r.backend;Q(e,"abs");let o=new Float32Array(y.sizeFromShape(e.shape)),n=t.data.get(e.dataId).values;return o=ZS(n),t.makeOutput(o,e.shape,e.dtype)},z_={kernelName:fn,backendName:"cpu",kernelFunc:i7};function Ve(r){return(e,t,o,n,s)=>{let a=C.assertAndGetBroadcastShape(e,t),i=a.length,p=y.computeStrides(a),u=y.sizeFromShape(a),l=y.getTypedArrayFromDType(s,u),c=e.length,m=t.length,d=y.computeStrides(e),f=y.computeStrides(t),h=C.getBroadcastDims(e,a),g=C.getBroadcastDims(t,a);if(h.length+g.length===0)for(let x=0;x<l.length;++x)l[x]=r(o[x%o.length],n[x%n.length]);else for(let x=0;x<l.length;++x){let b=y.indexToLoc(x,i,p),w=b.slice(-c);h.forEach(E=>w[E]=0);let S=y.locToIndex(w,c,d),k=b.slice(-m);g.forEach(E=>k[E]=0);let T=y.locToIndex(k,m,f);l[x]=r(o[S],n[T])}return[l,a]}}function qt(r){let{inputs:e,backend:t}=r,{real:o,imag:n}=e,s=t.data.get(o.dataId).values,a=t.data.get(n.dataId).values,i=t.makeTensorInfo(o.shape,"complex64"),p=t.data.get(i.dataId);return p.complexTensorInfos={real:t.makeTensorInfo(o.shape,"float32",s),imag:t.makeTensorInfo(n.shape,"float32",a)},i}var V_={kernelName:ei,backendName:"cpu",kernelFunc:qt};function vl(r,e,t="float32"){if(t==="complex64"){let n=vl(r,e,"float32"),s=vl(r,e,"float32");return qt({inputs:{real:n,imag:s},backend:r})}let o=y.makeZerosTypedArray(y.sizeFromShape(e),t);return r.makeTensorInfo(e,t,o)}function fr(r){let{inputs:e,backend:t}=r,{x:o}=e;return t.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var W_={kernelName:vo,backendName:"cpu",kernelFunc:fr};function tn(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.data.get(o.dataId).complexTensorInfos.real,s=t.data.get(n.dataId).values;return t.makeTensorInfo(n.shape,n.dtype,s)}var U_={kernelName:si,backendName:"cpu",kernelFunc:tn};function JS(r,e,t,o){if(o==="int32"){let n=Int32Array.from(r);return[e,"int32",n]}if(o==="bool"){let n=y.toTypedArray([0],t),[s,a]=Ve((i,p)=>i!==p?1:0)(e,[],r,n,"bool");return[a,"bool",s]}throw new Error(`Error in Cast: failed to cast ${t} to ${o}`)}function rn(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return fr({inputs:{x:n},backend:t});let l=vl(t,n.shape,n.dtype),c=rn({inputs:{x:n},backend:t,attrs:{dtype:"float32"}}),m=qt({inputs:{real:c,imag:l},backend:t});return t.disposeIntermediateTensorInfo(l),t.disposeIntermediateTensorInfo(c),m}if(n.dtype==="complex64"){let l=tn({inputs:{input:n},backend:t}),c=rn({inputs:{x:l},backend:t,attrs:{dtype:s}});return t.disposeIntermediateTensorInfo(l),c}if(!y.hasEncodingLoss(n.dtype,s)){let l=fr({inputs:{x:n},backend:t});return{dataId:l.dataId,shape:l.shape,dtype:s}}let a=t.data.get(n.dataId).values,[i,p,u]=JS(a,n.shape,n.dtype,s);return t.makeTensorInfo(i,p,u)}var G_={kernelName:ho,backendName:"cpu",kernelFunc:rn};function Qe(r,e,t,o){return t==null?({inputs:n,backend:s})=>{let{a,b:i}=n,p=s;Q([a,i],r);let u=p.data.get(a.dataId).values,l=p.data.get(i.dataId).values,c=a.dtype==="string"?C.fromUint8ToStringArray(u):u,m=a.dtype==="string"?C.fromUint8ToStringArray(l):l,d=o||a.dtype,[f,h]=e(a.shape,i.shape,c,m,d);return p.makeTensorInfo(h,d,f)}:({inputs:n,backend:s})=>{let{a,b:i}=n,p=s;if(a.dtype==="complex64"||i.dtype==="complex64"){let u=rn({inputs:{x:a},backend:p,attrs:{dtype:"complex64"}}),l=p.data.get(u.dataId),c=l.complexTensorInfos.real,m=l.complexTensorInfos.imag,d=p.data.get(c.dataId).values,f=p.data.get(m.dataId).values,h=rn({inputs:{x:i},backend:p,attrs:{dtype:"complex64"}}),g=p.data.get(h.dataId),x=g.complexTensorInfos.real,b=g.complexTensorInfos.imag,w=p.data.get(x.dataId).values,S=p.data.get(b.dataId).values,[k,T,E]=t(a.shape,i.shape,d,f,w,S),R=p.makeTensorInfo(E,"float32",k),D=p.makeTensorInfo(E,"float32",T),F=qt({inputs:{real:R,imag:D},backend:p});return p.disposeIntermediateTensorInfo(u),p.disposeIntermediateTensorInfo(h),p.disposeIntermediateTensorInfo(R),p.disposeIntermediateTensorInfo(D),F}else{let u=p.data.get(a.dataId).values,l=p.data.get(i.dataId).values,c=o||a.dtype,[m,d]=e(a.shape,i.shape,u,l,c);return p.makeTensorInfo(d,c,m)}}}function kl(r){return(e,t,o,n,s,a)=>{let i=C.assertAndGetBroadcastShape(e,t),p=y.sizeFromShape(i),u=i.length,l=y.computeStrides(i),c=y.getTypedArrayFromDType("float32",p),m=y.getTypedArrayFromDType("float32",p),d=C.getBroadcastDims(e,i),f=C.getBroadcastDims(t,i),h=C.mergeRealAndImagArrays(o,n),g=C.mergeRealAndImagArrays(s,a),x=e.length,b=y.computeStrides(e),w=t.length,S=y.computeStrides(t);if(d.length+f.length===0)for(let k=0;k<c.length;k++){let T=k%h.length,E=k%g.length,R=r(h[T*2],h[T*2+1],g[E*2],g[E*2+1]);c[k]=R.real,m[k]=R.imag}else for(let k=0;k<c.length;k++){let T=y.indexToLoc(k,u,l),E=T.slice(-x);d.forEach(M=>E[M]=0);let R=y.locToIndex(E,x,b),D=T.slice(-w);f.forEach(M=>D[M]=0);let F=y.locToIndex(D,w,S),O=r(h[R*2],h[R*2+1],g[F*2],g[F*2+1]);c[k]=O.real,m[k]=O.imag}return[c,m,i]}}var eI=Ve((r,e)=>r+e),u7=kl((r,e,t,o)=>({real:r+t,imag:e+o})),Wa=Qe(Rr,eI,u7),H_={kernelName:Rr,backendName:"cpu",kernelFunc:Wa};function Nl(r,e,t,o,n){let s=y.sizeFromShape(o),a=y.makeZerosTypedArray(n,t);for(let i=0;i<r.length;i++){let p=r[i];if(p<0)throw new Error("Input x must be non-negative!");p>=n||(s>0?a[p]+=e[i]:a[p]+=1)}return a}function Of(r,e,t,o=!1){let n=r.shape[0],s=r.shape[1],a=ie([n,t],e.dtype);for(let i=0;i<n;i++)for(let p=0;p<s;p++){let u=r.get(i,p);if(u<0)throw new Error("Input x must be non-negative!");u>=t||(o?a.set(1,i,u):e.size>0?a.set(a.get(i,u)+e.get(i,p),i,u):a.set(a.get(i,u)+1,i,u))}return a}var tI=Ve((r,e)=>r&e),p7=Qe(_n,tI),K_={kernelName:_n,backendName:"cpu",kernelFunc:p7};function Yt(r){return(e,t,o)=>{let n=y.getArrayFromDType(t,e.length);for(let s=0;s<e.length;++s)n[s]=r(e[s],o);return n}}function Ie(r,e,t){let o=Yt(e);return Mr(r,o,t)}function Mr(r,e,t){return({inputs:o,attrs:n,backend:s})=>{let{x:a}=o;Q(a,r);let i=s,p=i.data.get(a.dataId).values,u;if(a.dtype==="string"){if(!Array.isArray(p))throw new Error("String tensor's value was not an instance of Array");u=C.fromUint8ToStringArray(p)}else u=p;let l=t||a.dtype,c=e(u,l,n);return i.makeTensorInfo(a.shape,l,c)}}var rI=Yt(r=>Math.ceil(r)),l7=Mr(go,rI),q_={kernelName:go,backendName:"cpu",kernelFunc:l7};function mp(r,e,t,o){let n=y.getArrayFromDType(t,y.sizeFromShape(e));if(o&&t!=="string"){let s=0;r.forEach(a=>{let i=y.sizeFromShape(a.shape);n.set(a.vals,s),s+=i})}else{let s=0;r.forEach(a=>{let i=t==="string"?C.fromUint8ToStringArray(a.vals):a.vals,p=0;for(let u=0;u<a.shape[0];++u){let l=u*e[1]+s;for(let c=0;c<a.shape[1];++c)n[l+c]=i[p++]}s+=a.shape[1]})}return n}var oI=Ve((r,e)=>r===e?1:0),nI=Qe(xo,oI,null,"bool"),j_={kernelName:xo,backendName:"cpu",kernelFunc:nI};var sI=Yt(r=>Math.exp(r)),aI=Mr(yo,sI,"float32"),X_={kernelName:yo,backendName:"cpu",kernelFunc:aI};var iI=Yt(r=>Math.expm1(r)),c7=Mr(bo,iI),Y_={kernelName:bo,backendName:"cpu",kernelFunc:c7};var uI=Yt(r=>Math.floor(r)),m7=Mr(Co,uI),Q_={kernelName:Co,backendName:"cpu",kernelFunc:m7};var pI=Ve((r,e)=>Math.floor(r/e)),d7=Qe(wo,pI,null,"int32"),Z_={kernelName:wo,backendName:"cpu",kernelFunc:d7};function Mf(r,e,t,o,n,s,a,i,p){let u=ie([o,s],t);for(let l=0;l<o;l++){let c=[],m=0;for(let d=0;d<n;d++){let f=r[l*n+d];m+=f*a[d],c.push(f)}if(m<0||m>=p/s)throw new Error(`Invalid indices: ${c} does not index into ${i}`);for(let d=0;d<s;d++)u.values[l*s+d]=e.get(...e.indexToLoc(m*s+d))}return u}function Lf(r,e,t){let o=ie(t,r.dtype);for(let n=0;n<o.size;++n){let a=o.indexToLoc(n).slice(),i=a[0],p=a[2],u=e.locToIndex([i,p]);a[2]=e.values[u];let l=r.locToIndex(a);0<=l&&l<r.values.length&&(o.values[n]=r.values[l])}return o}var lI=Ve((r,e)=>r>e?1:0),f7=Qe(So,lI,null,"bool"),J_={kernelName:So,backendName:"cpu",kernelFunc:f7};var cI=Ve((r,e)=>r>=e?1:0),h7=Qe(Io,cI,null,"bool"),eE={kernelName:Io,backendName:"cpu",kernelFunc:h7};var mI=Ve((r,e)=>r<e?1:0),g7=Qe(ko,mI,null,"bool"),tE={kernelName:ko,backendName:"cpu",kernelFunc:g7};var dI=Ve((r,e)=>r<=e?1:0),x7=Qe(No,dI,null,"bool"),rE={kernelName:No,backendName:"cpu",kernelFunc:x7};function Bf(r,e,t){let o=(e-r)/(t-1),n=y.makeZerosTypedArray(t,"float32");n[0]=r;for(let s=1;s<n.length;s++)n[s]=n[s-1]+o;return n}var fI=Yt(r=>Math.log(r)),y7=Mr(To,fI),oE={kernelName:To,backendName:"cpu",kernelFunc:y7};function zf(r,e,t,o){let n=y.getTypedArrayFromDType(o,y.sizeFromShape(t));for(let s=0;s<n.length;++s){let a=s*e,i=r[a];for(let p=0;p<e;++p){let u=r[a+p];(Number.isNaN(u)||u>i)&&(i=u)}n[s]=i}return n}var hI=Ve((r,e)=>Math.max(r,e)),b7=Qe(_o,hI),nE={kernelName:_o,backendName:"cpu",kernelFunc:b7};var gI=Ve((r,e)=>Math.min(r,e)),C7=Qe(Eo,gI),sE={kernelName:Eo,backendName:"cpu",kernelFunc:C7};var qc=Ve((r,e)=>r*e),w7=kl((r,e,t,o)=>({real:r*t-e*o,imag:r*o+e*t})),dp=Qe($o,qc,w7),aE={kernelName:$o,backendName:"cpu",kernelFunc:dp};function xI(r,e,t){let o=y.createScalarValue(-1,t);return qc([],e,o,r,t)}function S7(r){let{inputs:e,backend:t}=r,{x:o}=e;Q(o,"neg");let n=t.data.get(o.dataId).values,[s,a]=xI(n,o.shape,o.dtype);return t.makeTensorInfo(a,o.dtype,s)}var iE={kernelName:ls,backendName:"cpu",kernelFunc:S7};var yI=Ve((r,e)=>r!==e?1:0),I7=Qe(Ro,yI,null,"bool"),uE={kernelName:Ro,backendName:"cpu",kernelFunc:I7};function Tl(r,e,t,o,n){let s=e.length,a=y.sizeFromShape(e),i=y.computeStrides(e),p=y.computeStrides(n),u=y.getTypedArrayFromDType(t,y.sizeFromShape(n));for(let l=0;l<a;++l){let c=y.indexToLoc(l,s,i),m=new Array(c.length);for(let f=0;f<m.length;f++)m[f]=c[o[f]];let d=y.locToIndex(m,s,p);u[d]=r[l]}return u}function vt(r){let{inputs:e,attrs:t,backend:o}=r,{x:n}=e,{perm:s}=t;Q(n,"transpose");let a=n.shape.length,i=new Array(a);for(let c=0;c<i.length;c++)i[c]=n.shape[s[c]];let p=o.data.get(n.dataId).values,u=Tl(p,n.shape,n.dtype,s,i);return{dataId:o.write(u,i,n.dtype),shape:i,dtype:n.dtype}}var pE={kernelName:Kr,backendName:"cpu",kernelFunc:vt};function bI(r,e,t,o){let[n,s]=C.computeOutAndReduceShapes(r,o),a=pt(e,"int32"),i=y.makeZerosTypedArray(y.sizeFromShape(n),a),p=y.sizeFromShape(s);for(let u=0;u<i.length;++u){let l=u*p,c=1;for(let m=0;m<p;++m)c*=t[l+m];i[u]=c}return{outVals:i,outShape:n,outDtype:a}}function v7(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o;Q(n,"prod");let i=n.shape.length,p=y.parseAxisParam(s,n.shape),u=C.getAxesPermutation(p,i),l=p,c=n,m=[];u!=null&&(c=vt({inputs:{x:n},backend:t,attrs:{perm:u}}),m.push(c),l=C.getInnerMostAxes(l.length,i));let d=t.data.get(c.dataId).values,{outVals:f,outShape:h,outDtype:g}=bI(c.shape,c.dtype,d,l),x=h;return a&&(x=C.expandShapeToKeepDim(h,p)),m.forEach(b=>t.disposeIntermediateTensorInfo(b)),t.makeTensorInfo(x,g,f)}var lE={kernelName:Ho,backendName:"cpu",kernelFunc:v7};function k7(r,e,t){r.forEach((o,n)=>{if(o<0||o>=t){let s=y.indexToLoc(n,e.length,y.computeStrides(e)).join(",");throw new Error(`indices[${s}] = ${o} is not in [0, ${t})`)}})}function N7(r,e){for(let t=0;t<r.length;++t){let o=r[t],n=t===r.length-1?e:r[t+1].length;if(o.length===0)throw new Error("Ragged splits may not be empty");if(o[0]<0)throw new Error("Ragged splits must be non-negative");if(o[o.length-1]>n)throw new Error("Ragged splits must not point past values");for(let s=1;s<o.length;++s)if(o[s-1]>o[s])throw new Error("Ragged splits must be sorted in ascending order")}}function T7(r,e,t,o){let n=[],s=0,a=e.length-1+t.length,i=new Array(a).fill(null).map(()=>[0]);N7(t,o);let p=1;for(let u=0;u<e.length-1;++u){p*=e[u];let l=e[u+1];for(let c=1;c<p+1;++c)i[u].push(c*l)}for(let u=0;u<r.length;++u){let l=r[u],c=r[u]+1;for(let m=0;m<t.length;++m){let d=t[m],f=m+e.length-1;if(f>=0){let h=i[f],g=h[h.length-1]-d[l];for(let x=l;x<c;++x)i[f].push(d[x+1]+g)}l=d[l],c=d[c]}c!==l&&(n.push([l,c]),s+=c-l)}return{outSplits:i,valueSlices:n,numValues:s}}function _7(r){let e=[];for(let t=0;t<r.length;++t){let o=r[t].length,n=y.getArrayFromDType("int32",o);e.push(n),r[t].forEach((s,a)=>n[a]=s)}return e}function cE(r,e){let t=r.slice(0,e);for(;t.length<e;)t.push(1);for(let o=e;o<r.length;o++)t[e-1]*=r[o];return t}function E7(r,e,t,o,n,s){let a=cE(e,2)[1],i=cE(s,2)[1],p=0;for(let u of t)for(let l=u[0];l<u[1];++l){for(let c=0;c<o;++c)n[p*i+c]=r[l*a+c];++p}}function $7(r,e,t,o,n){let s=e.slice();s[0]=n;let a=y.getArrayFromDType(t,y.sizeFromShape(s)),i=r.length,p=i===0?0:i/e[0];return E7(r,e,o,p,a,s),[a,s]}function Vf(r,e,t,o,n,s,a,i){if(r.length===0)throw new Error("paramsNestedSplits must be non empty");if(e[0].length===0)throw new Error("Split tensors must not be scalars");let p=e[0][0]-1;if(k7(s,a,p),o.length===0)throw new Error("params.rank must be nonzero");let u=o[0],{outSplits:l,valueSlices:c,numValues:m}=T7(s,a,r,u),d=_7(l),f=$7(t,o,n,c,m);return[d,f[0],f[1]]}var mE=2147483647;function Wf(r,e,t,o,n,s,a){if(e.length>1)throw new Error("starts must be a scalar or vector");if(n.length>1)throw new Error("limits must be a scalar or vector");if(a.length>1)throw new Error("deltas must be a scalar or vector");let i=e.length===0,p=n.length===0,u=a.length===0,l=[];i||l.push(e[0]),p||l.push(n[0]),u||l.push(a[0]);for(let g=1;g<l.length;++g)if(l[g]!==l[g-1])throw new Error("starts, limits, and deltas must have the same shape");let c=l.length===0?1:l[0],m=y.getArrayFromDType("int32",c+1);m[0]=0;for(let g=0;g<c;++g){let x=i?r[0]:r[g],b=p?o[0]:o[g],w=u?s[0]:s[g];if(w===0)throw new Error("Requires delta != 0");let S;if(w>0&&b<x||w<0&&b>x)S=0;else if(S=Math.ceil(Math.abs((b-x)/w)),S>mE)throw new Error(`Requires ((limit - start) / delta) <= ${mE}`);m[g+1]=m[g]+S}let d=m[c],f=y.getArrayFromDType(t,d),h=0;for(let g=0;g<c;++g){let x=m[g+1]-m[g],b=i?r[0]:r[g],w=u?s[0]:s[g];for(let S=0;S<x;++S)f[h++]=b,b+=w}return[m,f]}var on=C.RowPartitionType,CI=class r{constructor(e,t,o,n,s,a,i,p,u,l){this.shape=e,this.shapeShape=t,this.values=o,this.valuesShape=n,this.valuesDType=s,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=p,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=C.getRowPartitionTypesHelper(l),this.raggedRank=C.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===on.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===on.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){let t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case on.VALUE_ROWIDS:return r.getMaxWidthValueRowID(t);case on.ROW_SPLITS:return r.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${on[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){let t=e.length;if(t===0||t===1)return 0;let o=0;for(let n=0;n<t-1;++n){let s=e[n+1]-e[n];s>o&&(o=s)}return o}static getMaxWidthValueRowID(e){let t=e.length;if(t===0)return 0;let o=0,n=e[0],s=0;for(let a=1;a<t;++a){let i=e[a];i!==n&&(n=i,s=Math.max(a-o,s),o=a)}return Math.max(t-o,s)}tensorShapeFromTensor(e,t,o=!0){if(t.length===0){if(e[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return fE(e,o)}calculateOutputSize(e){let t=this.valuesShape,o=this.defaultValueShape;C.validateDefaultValueShape(o,t);let n=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=C.combineRaggedTensorToTensorShapes(this.raggedRank,n,t);a[0]<0&&(a[0]=e);for(let i=1;i<=this.raggedRank;++i)a[i]<0&&(a[i]=this.getMaxWidth(i));return a}calculateFirstParentOutputIndex(e,t,o){let n=Math.min(e,o),s=[],a=0;for(let i=0;i<n;++i,a+=t)s.push(a);for(let i=n;i<e;++i)s.push(-1);return y.assert(s.length===e,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(e,t,o,n){let s=e.length,a=[];for(let i=0;i<s-1;++i){let p=e[i+1]-e[i],u=Math.min(n,p),l=t[i];l===-1&&(u=0);for(let c=0;c<u;++c)a.push(l),l+=o;for(let c=0;c<p-u;++c)a.push(-1)}if(s>0&&a.length!==e[s-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,o,n){let s=e.length,a=[];if(s===0)return[];let i=0,p=e[0];if(p>=t.length)throw new Error(`Got currentValueRowId=${p}, which is not less than ${t.length}`);let u=t[p];a.push(u);for(let l=1;l<s;++l){let c=e[l];if(c===p)u>=0&&(++i,i<n?u+=o:u=-1);else{if(i=0,p=c,c>=t.length)throw new Error(`Got nextValueRowId=${c} which is not less than ${t.length}`);u=t[c]}a.push(u)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,o,n){let s=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case on.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,o,n);case on.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,o,n);default:throw new Error(`Unsupported partition type: ${on[a]}`)}}getFirstDimensionSize(){let e=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");let t=this.rowPartitionTypes[0];switch(t){case on.FIRST_DIM_SIZE:return e[0];case on.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case on.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${on[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");let t=this.getFirstDimensionSize(),o=this.calculateOutputSize(t),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let p=n.length-2;p>=0;--p)n[p]=n[p+1]*o[p+1];let s=fE(o,!1),a=y.getArrayFromDType(this.valuesDType,y.sizeFromShape(s));if(n[0]*o[0]>0){let p=this.calculateFirstParentOutputIndex(t,n[0],o[0]);for(let u=1;u<=this.raggedRank;++u)p=this.calculateOutputIndex(u-1,p,n[u],o[u]);this.setOutput(this.raggedRank,p,a,s)}return[s,a]}setOutput(e,t,o,n){if(o.length===0)return;let s=this.values,a=o,i=n.slice();i=i.slice(e+1);let p=y.sizeFromShape(i),u=t.length,l=this.defaultValue;if(l.length!==p&&l.length!==1){let f=this.defaultValueShape;De(()=>{let h=W(l,f);l=Oa(h,i).dataSync()})}let c=0,m=0,d=0;for(let f=0;f<=u;++f){let h=f<u?t[f]:-1;if(h===d){++d;continue}if(m<d){let g=s.subarray(c*p),x=a.subarray(m*p),b=(d-m)*p;dE(x,g,b)}if(f>=u){let g=o.length;h=Math.floor(g/p)}if(h>d)if(this.defaultValue.length===1)a.subarray(d*p,h*p).fill(this.defaultValue[0]),d=h;else for(;h>d;){let g=a.slice(d*p);dE(g,l,p),++d}h<0?(c=f+1,m=d):(c=f,m=d,d=m+1)}}};function dE(r,e,t){for(let o=0;o<t;o++)r[o]=e[o]}function fE(r,e){let t=[];for(let o of r){if(o<0){if(!e)throw new Error(`Dimension ${o} must be >= 0`);if(o<-1)throw new Error(`Dimension ${o} must be >= -1`);o=-1}t.push(o)}return t}function Uf(r,e,t,o,n,s,a,i,p,u){return new CI(r,e,t,o,n,s,a,i,p,u).compute()}function fp(r,e,t,o){let n=r===e,s=r<e&&t<0,a=e<r&&t>1;if(n||s||a)return y.makeZerosTypedArray(0,o);let i=Math.abs(Math.ceil((e-r)/t)),p=y.makeZerosTypedArray(i,o);e<r&&t===1&&(t=-1),p[0]=r;for(let u=1;u<p.length;u++)p[u]=p[u-1]+t;return p}var wI=Yt(r=>1/Math.sqrt(r)),R7=Mr(Do,wI),hE={kernelName:Do,backendName:"cpu",kernelFunc:R7};function Xs(r,e,t,o,n,s,a,i,p,u){let l=[o/n,n],c=r.values,m=e.values;if(o===0)return ie(t,e.dtype);let d=p instanceof Ge?p:ie(l,e.dtype);typeof p=="string"||typeof p=="number"?d.values.fill(p):typeof p=="boolean"&&d.values.fill(+p);for(let f=0;f<s;f++){let h=[],g=0;for(let x=0;x<a;x++){let b=c[f*a+x];h.push(b),g+=b*i[x]}if(g<0||g>=o/n)throw new Error(`Invalid indices: ${h} does not index into ${t}`);for(let x=0;x<n;x++)u?d.values[g*n+x]+=m[f*n+x]:d.values[g*n+x]=e.rank===0?m[0]:m[f*n+x]}return d}var gE=Yt(r=>1/(1+Math.exp(-r))),SI=Ie(Ao,r=>1/(1+Math.exp(-r))),xE={kernelName:Ao,backendName:"cpu",kernelFunc:SI};function hp(r,e,t,o,n){let s=nt.isSliceContinous(o,e,t),a=y.sizeFromShape(t),i=y.computeStrides(o);if(s){let c=nt.computeFlatOffset(e,i);return n==="string"?r.slice(c,c+a):r.subarray(c,c+a)}let p=n==="string"?C.fromUint8ToStringArray(r):r,u=ie(o,n,p),l=ie(t,n);for(let c=0;c<l.size;++c){let m=l.indexToLoc(c),d=m.map((f,h)=>f+e[h]);l.set(u.get(...d),...m)}return n==="string"?C.fromStringArrayToUint8(l.values):l.values}function nn(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,size:a}=o;Q(n,"slice");let[i,p]=nt.parseSliceParams(n,s,a);nt.assertParamsValid(n,i,p);let u=t.data.get(n.dataId).values,l=hp(u,i,p,n.shape,n.dtype);return t.makeTensorInfo(p,n.dtype,l)}var yE={kernelName:_s,backendName:"cpu",kernelFunc:nn};function Gf(r,e,t,o,n,s,a){let i=e[0],p=s[0],u=new Array(p),l=new Array(i),c=e[1];if(p===0){if(i!==0)throw new Error(C.getSparseFillEmptyRowsIndicesDenseShapeMismatch(i));let g=y.getArrayFromDType(t,0),x=y.getArrayFromDType(n,0);return[g,[0,c],x,u,l]}let m=!0,d=0,f=new Array(p).fill(0);for(let g=0;g<i;++g){let x=r[g*c];if(x<0)throw new Error(C.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,x));if(x>=p)throw new Error(C.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,x,p));++f[x],m=m&&x>=d,d=x}let h=!0;for(let g=0;g<p;++g){let x=f[g]===0;u[g]=x,h=h&&!x,f[g]=Math.max(f[g],1),g>0&&(f[g]+=f[g-1])}if(h&&m){let g=r,x=o;for(let b=0;b<i;++b)l[b]=b;return[g,[i,c],x,u,l]}else{let g=f[p-1],x=y.getArrayFromDType(t,g*c),b=y.getArrayFromDType(n,g),w=new Array(p).fill(0);for(let S=0;S<i;++S){let k=r[S*c],T=w[k],E=(k===0?0:f[k-1])+T;w[k]++;for(let R=0;R<c;++R)x[E*c+R]=r[S*c+R];b[E]=o[S],l[S]=E}for(let S=0;S<p;++S)if(w[S]===0){let T=S===0?0:f[S-1];x[T*c+0]=S;for(let E=1;E<c;++E)x[T*c+E]=0;b[T]=a}return[x,[g,c],b,u,l]}}function Hf(r,e,t,o,n){let s=y.sizeFromShape(o),a=e[0],i=n.length,p=[],u=1,l=-1;for(let g=0;g<i;++g){let x=n[g];if(x===-1){if(l!==-1)throw new Error(C.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(l,g));l=g,p.push(1)}else{if(x<0)throw new Error(C.getSparseReshapeNegativeOutputDimErrorMessage(g,x));u*=x,p.push(x)}}if(l!==-1){if(u<=0)throw new Error(C.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let g=Math.trunc(s/u);if(u*g!==s)throw new Error(C.getSparseReshapeInputOutputMultipleErrorMessage(o,p));p[l]=g}if(y.sizeFromShape(p)!==s)throw new Error(C.getSparseReshapeInputOutputMismatchErrorMessage(o,p));let m=o.length,d=[];if(m>0){d[m-1]=1;for(let g=m-2;g>=0;--g)d[g]=d[g+1]*o[g+1]}let f=[];if(i>0){f[i-1]=1;for(let g=i-2;g>=0;--g)f[g]=f[g+1]*p[g+1]}let h=y.getArrayFromDType(t,a*i);for(let g=0;g<a;++g){let x=0;for(let b=0;b<m;++b)x+=r[g*m+b]*d[b];for(let b=0;b<i;++b)h[g*i+b]=Math.trunc(x/f[b]),x%=f[b]}return[h,[a,i],p]}function _l(r,e,t,o,n,s=!1,a=0){let i=o.length,p=[e[0],r.length/e[0]],u=p[1],c=i>0?n[i-1]+1:0;if(c<0)throw new Error(C.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=e.slice();m[0]=c;let d=m.reduce((w,S)=>w*S,1),f=y.getArrayFromDType(t,d);if(i===0)return c>0&&f.fill(a),[f,m];if(c<=0)throw new Error(C.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let h=0,g=1,x=0,b=n[h];for(;;){let w=0;if(g<i){if(w=n[g],b===w){++g;continue}if(b>=w)throw new Error(C.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=c)throw new Error(C.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,c));b>x&&f.fill(a,x*u,b*u);for(let S=h;S<g;++S){let k=o[S];if(k<0||k>=p[0])throw new Error(C.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(S,o[S],p[0]));for(let T=0;T<u;T++)f[b*u+T]+=r[k*u+T]}if(s)for(let S=0;S<u;S++)f[b*u+S]/=g-h;if(h=g,++g,x=b+1,b=w,g>i)break}return x<c&&f.fill(a,x*u,c*u),[f,m]}var bE=Yt(r=>Math.sqrt(r)),D7=Ie(Fo,r=>Math.sqrt(r)),CE={kernelName:Fo,backendName:"cpu",kernelFunc:D7};var II=Ve((r,e)=>{let t=r-e;return t*t}),A7=Qe(Po,II),wE={kernelName:Po,backendName:"cpu",kernelFunc:A7};var vI=Yt((r,e)=>{let{pattern:t,replaceGlobal:o,rewrite:n}=e;return r.replace(new RegExp(t,o?"g":""),n)}),F7=Mr(pi,vI),SE={kernelName:pi,backendName:"cpu",kernelFunc:F7};function Kf(r,e,t,o){let n=ie(r,e.dtype);for(let s=0;s<n.size;s++){let a=n.indexToLoc(s),i=new Array(a.length);for(let p=0;p<i.length;p++)i[p]=a[p]*t[p]+o[p];n.set(e.get(...i),...a)}return n}var kI=class{constructor(e,t,o,n,s,a){this.separator=y.encodeString(e),this.nGramWidths=t,this.leftPad=y.encodeString(o),this.rightPad=y.encodeString(n),this.padWidth=s,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){let o=this.getPadWidth(t);return Math.max(0,e+2*o-t+1)}createNGrams(e,t,o,n,s,a){for(let i=0;i<s;++i){let p=this.getPadWidth(a),u=Math.max(0,p-i),l=Math.max(0,p-(s-(i+1))),c=a-(u+l),m=t+(u>0?0:i-p),d=0;d+=u*this.leftPad.length;for(let b=0;b<c;++b)d+=e[m+b].length;d+=l*this.rightPad.length;let f=u+l+c-1;d+=f*this.separator.length,o[n+i]=new Uint8Array(d);let h=o[n+i],g=0,x=b=>b.forEach(w=>h[g++]=w);for(let b=0;b<u;++b)x(this.leftPad),x(this.separator);for(let b=0;b<c-1;++b)x(e[m+b]),x(this.separator);if(c>0){x(e[m+c-1]);for(let b=0;b<l;++b)x(this.separator),x(this.rightPad)}else{for(let b=0;b<l-1;++b)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(e,t){let o=e.length,n=t.length;if(n>0){let p=t[0];if(p!==0)throw new Error(`First split value must be 0, got ${p}`);for(let u=1;u<n;++u){let l=t[u]>=p;if(l=l&&t[u]<=o,!l)throw new Error(`Invalid split value ${t[u]}, must be in [${p}, ${o}]`);p=t[u]}if(p!==o)throw new Error(`Last split value must be data size. Expected ${o}, got ${p}`)}let s=n-1,a=y.getArrayFromDType("int32",n);if(o===0||n===0){let p=new Array(o);for(let u=0;u<=s;++u)a[u]=0;return[p,a]}a[0]=0;for(let p=1;p<=s;++p){let u=t[p]-t[p-1],l=0;this.nGramWidths.forEach(c=>{l+=this.getNumNGrams(u,c)}),this.preserveShort&&u>0&&l===0&&(l=1),a[p]=a[p-1]+l}let i=new Array(a[s]);for(let p=0;p<s;++p){let u=t[p],l=a[p];if(this.nGramWidths.forEach(c=>{let m=t[p+1]-t[p],d=this.getNumNGrams(m,c);this.createNGrams(e,u,i,l,d,c),l+=d}),this.preserveShort&&l===a[p]){let c=t[p+1]-t[p];if(c===0)continue;let m=c+2*this.padWidth;this.createNGrams(e,u,i,l,1,m)}}return[i,a]}};function gp(r,e,t,o,n,s,a,i){return new kI(t,o,n,s,a,i).compute(r,e)}function P7(r,e,t,o){if(!r.length)return;if(e.length===0){for(let s=0;s<r.length;++s)o.push(r.subarray(s,s+1));return}if(e.length===1){let s=e[0],a=r.indexOf(s);for(;a!==-1;){let i=r.subarray(0,a);(!t||i.length!==0)&&o.push(i),r=r.subarray(a+1),a=r.indexOf(s)}(!t||r.length!==0)&&o.push(r);return}let n=0;for(let s=0;s<r.length+1;s++)if(s===r.length||e.indexOf(r[s])!==-1){let a=r.subarray(n,s);(!t||a.length!==0)&&o.push(a),n=s+1}}function xp(r,e,t){let o=r.length,n=[],s=0,a=0,i=new Array(o);for(let m=0;m<o;++m){let d=n.length;P7(r[m],e,t,n);let f=n.length-d;i[m]=f,s+=f,a=Math.max(a,f)}let p=y.getArrayFromDType("int32",s*2),u=new Array(s),l=[o,a],c=0;for(let m=0;m<o;++m)for(let d=0;d<i[m];++d)p[c*2]=m,p[c*2+1]=d,u[c]=n[c],++c;return[p,u,l]}function yp(r,e){let t=y.getArrayFromDType("int32",r.length);for(let o=0;o<r.length;++o)t[o]=y.fingerPrint64(r[o]).modulo(e).getLowBitsUnsigned();return t}var NI=Ve((r,e)=>r-e),O7=kl((r,e,t,o)=>({real:r-t,imag:e-o})),jc=Qe(Oo,NI,O7),IE={kernelName:Oo,backendName:"cpu",kernelFunc:jc};function qf(r,e){let t=new Array(r.rank);for(let n=0;n<t.length;n++)t[n]=r.shape[n]*e[n];let o=ie(t,r.dtype);for(let n=0;n<o.values.length;++n){let s=o.indexToLoc(n),a=new Array(r.rank);for(let p=0;p<a.length;p++)a[p]=s[p]%r.shape[p];let i=r.locToIndex(a);o.values[n]=r.values[i]}return o}var Xc=(r,e)=>{let t=e.value-r.value;return t===0?r.index-e.index:t};function vE(r,e,t=0,o=r.length-1){for(;o>t;){if(o-t>600){let i=o-t+1,p=e-t+1,u=Math.log(i),l=.5*Math.exp(2*u/3),c=.5*Math.sqrt(u*l*(i-l)/i)*Math.sign(p-i/2),m=Math.max(t,Math.floor(e-p*l/i+c)),d=Math.min(o,Math.floor(e+(i-p)*l/i+c));vE(r,e,m,d)}let n=r[e],s=t,a=o;for(y.swap(r,t,e),Xc(r[o],n)>0&&y.swap(r,t,o);s<a;){for(y.swap(r,s,a),s++,a--;Xc(r[s],n)<0;)s=s+1;for(;Xc(r[a],n)>0;)a=a-1}Xc(r[t],n)===0?y.swap(r,t,a):(a=a+1,y.swap(r,a,o)),a<=e&&(t=a+1),e<=a&&(o=a-1)}}function jf(r,e,t,o,n){let s=e[e.length-1],[a,i]=[r.length/s,s],p=y.getTypedArrayFromDType(t,a*o),u=y.getTypedArrayFromDType("int32",a*o);for(let c=0;c<a;c++){let m=c*i,d=r.subarray(m,m+i),f=new Array(d.length);d.forEach((b,w)=>f[w]={value:b,index:w}),o<f.length&&(vE(f,o),f=f.slice(0,o)),n&&f.sort(Xc);let h=c*o,g=p.subarray(h,h+o),x=u.subarray(h,h+o);for(let b=0;b<o;b++)g[b]=f[b].value,x[b]=f[b].index}let l=e.slice();return l[l.length-1]=o,[ie(l,t,p),ie(l,"int32",u)]}function bp(r,e,t,o){let n=y.parseAxisParam(e,t)[0],s=[1,t[0],1];for(let f=0;f<n;f++)s[0]*=t[f];s[1]=t[n];for(let f=n+1;f<t.length;f++)s[2]*=t[f];let a=new Map,i=new Int32Array(t[n]),p=new Ge(s,o,r),u=[],l=s[0]===1&&s[2]===1;for(let f=0;f<t[n];f++){let h;if(l)h=r[f].toString();else{let x=[];for(let b=0;b<s[0];b++)for(let w=0;w<s[2];w++)x.push(p.get(b,f,w));h=x.join(",")}let g=a.get(h);if(g!=null)i[f]=g;else{let x=a.size;a.set(h,x),i[f]=x,u.push(f)}}let c=s.slice();c[1]=a.size;let m=new Ge(c,o);u.forEach((f,h)=>{for(let g=0;g<s[0];g++)for(let x=0;x<s[2];x++)m.set(p.get(g,f,x),g,h,x)});let d=t.slice();return d[n]=c[1],{outputValues:m.values,outputShape:d,indices:i}}var M7="4.17.0";pu("cpu",()=>new Il,1);var TI=Ie(Wn,r=>r>=0?r:Math.exp(r)-1),kE={kernelName:Wn,backendName:"cpu",kernelFunc:TI};function _I(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{alpha:s}=o;Q([n],"leakyRelu");let a=y.sizeFromShape(n.shape),i=t.data.get(n.dataId).values,p=y.getTypedArrayFromDType("float32",a);for(let u=0;u<i.length;u++)p[u]=i[u]<0?s*i[u]:i[u];return t.makeTensorInfo(n.shape,"float32",p)}var NE={kernelName:Yn,backendName:"cpu",kernelFunc:_I};var L7=Ve((r,e)=>r<0?e*r:r);function EI(r){let{inputs:e,backend:t}=r,{x:o,alpha:n}=e;Q([o,n],"prelu");let s=t.data.get(o.dataId).values,a=t.data.get(n.dataId).values,[i,p]=L7(o.shape,n.shape,s,a,"float32");return t.makeTensorInfo(p,"float32",i)}var TE={kernelName:gs,backendName:"cpu",kernelFunc:EI};var $I=Ie(ys,r=>Math.max(0,r)),_E={kernelName:ys,backendName:"cpu",kernelFunc:$I};var RI=Ie(ws,r=>Math.min(Math.max(0,r),6)),EE={kernelName:ws,backendName:"cpu",kernelFunc:RI};function Cp(r,e,t,o,n){if(t==="linear")return fr({inputs:{x:e},backend:r});if(t==="relu")return $I({inputs:{x:e},backend:r});if(t==="elu")return TI({inputs:{x:e},backend:r});if(t==="relu6")return RI({inputs:{x:e},backend:r});if(t==="prelu")return EI({inputs:{x:e,alpha:o},backend:r});if(t==="leakyrelu")return _I({inputs:{x:e},backend:r,attrs:{alpha:n}});if(t==="sigmoid")return SI({inputs:{x:e},backend:r});throw new Error(`Activation ${t} has not been implemented for the CPU backend.`)}function We(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{shape:s}=o,a=y.sizeFromShape(n.shape),i=y.inferFromImplicitShape(s,a),p=y.sizeFromShape(i);y.assert(a===p,()=>`The new shape (${i}) has ${p} elements and the old shape (${n.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`),t.incRef(n.dataId);let u=t.data.get(n.dataId);if(u.complexTensorInfos!=null){let l=u.complexTensorInfos.real,c=u.complexTensorInfos.imag;l.shape=i,c.shape=i}return{dataId:n.dataId,shape:i,dtype:n.dtype}}var $E={kernelName:Ca,backendName:"cpu",kernelFunc:We};function DI(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s}=e,{transposeA:a,transposeB:i}=o;Q([n,s],"matMul");let p=n.shape.length,u=s.shape.length,l=a?n.shape[p-2]:n.shape[p-1],c=i?s.shape[u-1]:s.shape[u-2],m=a?n.shape[p-1]:n.shape[p-2],d=i?s.shape[u-2]:s.shape[u-1],f=n.shape.slice(0,-2),h=s.shape.slice(0,-2),g=y.sizeFromShape(f),x=y.sizeFromShape(h),w=kr.assertAndGetBroadcastShape(n.shape.slice(0,-2),s.shape.slice(0,-2)).concat([m,d]);y.assert(l===c,()=>`Error in matMul: inner shapes (${l}) and (${c}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${a} and transposeB=${i} must match.`);let S=a?[g,l,m]:[g,m,l],k=i?[x,d,c]:[x,c,d],T=We({inputs:{x:n},backend:t,attrs:{shape:S}}),E=We({inputs:{x:s},backend:t,attrs:{shape:k}}),R=a?T.shape[1]:T.shape[2],D=a?T.shape[2]:T.shape[1],F=i?E.shape[1]:E.shape[2],O=Math.max(g,x),M=t.data.get(T.dataId).values,L=t.data.get(E.dataId).values,B=y.computeStrides(T.shape),z=y.computeStrides(E.shape),[U,j,q]=a?[B[0],1,B[1]]:[B[0],B[1],1],[Y,J,re]=i?[1,z[1],z[0]]:[z[1],1,z[0]],ne=D*F,ee=ie([O,D,F],T.dtype),oe=ee.values,ue=t.blockSize;for(let me=0;me<O;me++){let be=me%g,_e=me%x;for(let ve=0;ve<D;ve+=ue){let Fe=Math.min(ve+ue,D);for(let Pe=0;Pe<F;Pe+=ue){let at=Math.min(Pe+ue,F);for(let ct=0;ct<R;ct+=ue){let Ke=Math.min(ct+ue,R);for(let mt=ve;mt<Fe;mt++)for(let ut=Pe;ut<at;ut++){let gt=0;for(let xt=ct;xt<Ke;xt++){let Ur=M[be*U+mt*j+xt*q],Bt=L[xt*Y+ut*J+_e*re];gt+=Ur*Bt}oe[me*ne+(mt*F+ut)]+=gt}}}}}return t.disposeIntermediateTensorInfo(T),t.disposeIntermediateTensorInfo(E),t.makeTensorInfo(w,ee.dtype,ee.values)}var RE={kernelName:Nn,backendName:"cpu",kernelFunc:DI};function B7(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s,bias:a,preluActivationWeights:i}=e,{transposeA:p,transposeB:u,activation:l,leakyreluAlpha:c}=o,m,d,f,h=[];m=DI({inputs:{a:n,b:s},attrs:{transposeA:p,transposeB:u},backend:t}),a&&(d=Wa({inputs:{a:m,b:a},backend:t}),h.push(m),m=d),l&&(f=Cp(t,m,l,i,c),h.push(m),m=f);for(let x of h)t.disposeIntermediateTensorInfo(x);return m}var DE={kernelName:qo,backendName:"cpu",kernelFunc:B7};var z7=Ie(hn,r=>Math.acos(r)),AE={kernelName:hn,backendName:"cpu",kernelFunc:z7};var V7=Ie(gn,r=>Math.acosh(r)),FE={kernelName:gn,backendName:"cpu",kernelFunc:V7};function W7(r){let{inputs:e,backend:t}=r,o=e;Q(e,"addN");let n=o.map(i=>t.data.get(i.dataId).values),s=ie(o[0].shape,o[0].dtype),a=s.values;for(let i=0;i<o.length;i++){let p=n[i];for(let u=0;u<a.length;u++)a[u]+=p[u]}return t.makeTensorInfo(s.shape,s.dtype,s.values)}var PE={kernelName:xn,backendName:"cpu",kernelFunc:W7};function U7(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o;Q(n,"all");let i=y.parseAxisParam(s,n.shape),p=i,u=C.getAxesPermutation(p,n.shape.length),l=n;u!=null&&(l=vt({inputs:{x:n},backend:t,attrs:{perm:u}}),p=C.getInnerMostAxes(p.length,n.shape.length)),C.assertAxesAreInnerMostDims("all",p,l.shape.length);let[c,m]=C.computeOutAndReduceShapes(l.shape,p),d=y.sizeFromShape(m),f=y.makeZerosTypedArray(y.sizeFromShape(c),l.dtype),h=t.data.get(l.dataId).values;for(let x=0;x<f.length;++x){let b=x*d,w=h[b];for(let S=0;S<d;++S){let k=h[b+S];w=w&&k}f[x]=w}u!=null&&t.disposeIntermediateTensorInfo(l);let g=t.makeTensorInfo(c,l.dtype,f);if(a){let x=C.expandShapeToKeepDim(c,i),b=We({inputs:{x:g},backend:t,attrs:{shape:x}});return t.disposeIntermediateTensorInfo(g),b}return g}var OE={kernelName:yn,backendName:"cpu",kernelFunc:U7};function G7(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o;Q(n,"any");let i=y.parseAxisParam(s,n.shape),p=i,u=C.getAxesPermutation(p,n.shape.length),l=n;u!=null&&(l=vt({inputs:{x:n},backend:t,attrs:{perm:u}}),p=C.getInnerMostAxes(p.length,n.shape.length)),C.assertAxesAreInnerMostDims("any",p,l.shape.length);let[c,m]=C.computeOutAndReduceShapes(l.shape,p),d=y.sizeFromShape(m),f=y.makeZerosTypedArray(y.sizeFromShape(c),l.dtype),h=t.data.get(l.dataId).values;for(let x=0;x<f.length;++x){let b=x*d,w=h[b];for(let S=0;S<d;++S){let k=h[b+S];w=w||k}f[x]=w}u!=null&&t.disposeIntermediateTensorInfo(l);let g=t.makeTensorInfo(c,l.dtype,f);if(a){let x=C.expandShapeToKeepDim(c,i),b=We({inputs:{x:g},backend:t,attrs:{shape:x}});return t.disposeIntermediateTensorInfo(g),b}return g}var ME={kernelName:bn,backendName:"cpu",kernelFunc:G7};function H7(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o;Q(n,"argMax");let a=y.parseAxisParam(s,n.shape),i=C.getAxesPermutation(a,n.shape.length),p=n,u=[];i!=null&&(p=vt({inputs:{x:n},backend:t,attrs:{perm:i}}),u.push(p),a=C.getInnerMostAxes(a.length,p.shape.length)),a=[a[0]],C.assertAxesAreInnerMostDims("argMax",a,p.shape.length);let[l,c]=C.computeOutAndReduceShapes(p.shape,a),m=y.sizeFromShape(l),d=y.makeZerosTypedArray(m,"int32"),f=y.sizeFromShape(c),h=t.data.get(p.dataId).values;for(let g=0;g<d.length;++g){let x=g*f,b=h[x],w=0;for(let S=0;S<f;++S){let k=h[x+S];k>b&&(b=k,w=S)}d[g]=w}return u.forEach(g=>t.disposeIntermediateTensorInfo(g)),t.makeTensorInfo(l,"int32",d)}var LE={kernelName:na,backendName:"cpu",kernelFunc:H7};function K7(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o;Q(n,"argMin");let a=y.parseAxisParam(s,n.shape),i=C.getAxesPermutation(a,n.shape.length),p=n,u=[];i!=null&&(p=vt({inputs:{x:n},backend:t,attrs:{perm:i}}),u.push(p),a=C.getInnerMostAxes(a.length,p.shape.length)),a=[a[0]],C.assertAxesAreInnerMostDims("argMin",a,p.shape.length);let[l,c]=C.computeOutAndReduceShapes(p.shape,a),m=y.sizeFromShape(l),d=y.makeZerosTypedArray(m,"int32"),f=y.sizeFromShape(c),h=t.data.get(p.dataId).values;for(let g=0;g<d.length;++g){let x=g*f,b=h[x],w=0;for(let S=0;S<f;++S){let k=h[x+S];k<b&&(b=k,w=S)}d[g]=w}return u.forEach(g=>t.disposeIntermediateTensorInfo(g)),t.makeTensorInfo(l,"int32",d)}var BE={kernelName:sa,backendName:"cpu",kernelFunc:K7};var q7=Ie(Cn,r=>Math.asin(r)),zE={kernelName:Cn,backendName:"cpu",kernelFunc:q7};var j7=Ie(wn,r=>Math.asinh(r)),VE={kernelName:wn,backendName:"cpu",kernelFunc:j7};var X7=Ie(Sn,r=>Math.atan(r)),WE={kernelName:Sn,backendName:"cpu",kernelFunc:X7};var Y7=Ve((r,e)=>Math.atan2(r,e)),Q7=Qe(vn,Y7),UE={kernelName:vn,backendName:"cpu",kernelFunc:Q7};var Z7=Ie(In,r=>Math.atanh(r)),GE={kernelName:In,backendName:"cpu",kernelFunc:Z7};function El(r,e,t,o,n,s){let a=n.strideHeight,i=n.strideWidth,p=n.dilationHeight,u=n.dilationWidth,l=n.effectiveFilterHeight,c=n.effectiveFilterWidth,m=n.padInfo.top,d=n.padInfo.left,f=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,h=ie(n.outShape,t),g=h.values,x=n.outShape[1]*n.outShape[2]*n.outShape[3],b=n.outShape[2]*n.outShape[3],w=n.outShape[3];for(let S=0;S<n.batchSize;++S){let k=S*x,T=S*o[0];for(let E=0;E<n.inChannels;++E)for(let R=0;R<n.outHeight;++R){let D=R*a-m,F=Math.max(0,D),O=Math.min(n.inHeight,l+D),M=k+R*b;for(let L=0;L<n.outWidth;++L){let B=L*i-d,z=Math.max(0,B),U=Math.min(n.inWidth,c+B),j=f,q=0,Y=0;for(let re=F;re<O;re+=p){let ne=T+re*o[1];for(let ee=z;ee<U;ee+=u){let oe=ne+ee*o[2],ue=r[oe+E];s==="max"&&ue>j?j=ue:s==="avg"&&(q+=ue,Y++)}if(isNaN(j))break}let J=M+L*w+E;g[J]=s==="avg"?q/Y:j}}}return h}function Yf(r,e,t,o,n=!1,s=!1){let a=ie(o.outShape,"int32"),i=o.strideHeight,p=o.strideWidth,u=o.dilationHeight,l=o.dilationWidth,c=o.effectiveFilterHeight,m=o.effectiveFilterWidth,d=o.padInfo.top,f=o.padInfo.left,h=ie(e,t,r);for(let g=0;g<o.batchSize;++g)for(let x=0;x<o.inChannels;++x)for(let b=0;b<o.outHeight;++b){let w=b*i-d,S=w;for(;S<0;)S+=u;let k=Math.min(o.inHeight,c+w);for(let T=0;T<o.outWidth;++T){let E=T*p-f,R=E;for(;R<0;)R+=l;let D=Math.min(o.inWidth,m+E),F=Number.NEGATIVE_INFINITY,O=-1;for(let M=S;M<k;M+=u){let L=M-w;for(let B=R;B<D;B+=l){let z=B-E,U=h.get(g,M,B,x);U>F&&(F=U,n?O=s?((g*o.inHeight+M)*o.inWidth+B)*o.inChannels+x:(M*o.inWidth+B)*o.inChannels+x:O=L*m+z)}}a.set(O,g,b,T,x)}}return a}function Qf(r,e,t,o,n,s){let a=n.strideDepth,i=n.strideHeight,p=n.strideWidth,u=n.dilationDepth,l=n.dilationHeight,c=n.dilationWidth,m=n.effectiveFilterDepth,d=n.effectiveFilterHeight,f=n.effectiveFilterWidth,h=n.padInfo.front,g=n.padInfo.top,x=n.padInfo.left,b=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,w=ie(n.outShape,t),S=w.values,k=n.outShape[1]*n.outShape[2]*n.outShape[3]*n.outShape[4],T=n.outShape[2]*n.outShape[3]*n.outShape[4],E=n.outShape[3]*n.outShape[4],R=n.outShape[4];for(let D=0;D<n.batchSize;++D){let F=D*k,O=D*o[0];for(let M=0;M<n.inChannels;++M)for(let L=0;L<n.outDepth;++L){let B=L*a-h,z=B;for(;z<0;)z+=u;let U=Math.min(n.inDepth,m+B),j=F+L*T;for(let q=0;q<n.outHeight;++q){let Y=q*i-g,J=Y;for(;J<0;)J+=l;let re=Math.min(n.inHeight,d+Y),ne=j+q*E;for(let ee=0;ee<n.outWidth;++ee){let oe=ee*p-x,ue=oe;for(;ue<0;)ue+=c;let me=Math.min(n.inWidth,f+oe),be=ne+ee*R,_e=b,ve=0,Fe=0;for(let at=z;at<U;at+=u){let ct=O+at*o[1];for(let Ke=J;Ke<re;Ke+=l){let mt=ct+Ke*o[2];for(let ut=ue;ut<me;ut+=c){let gt=mt+ut*o[3],xt=r[gt+M];if(s==="max"&&xt>_e?_e=xt:s==="avg"&&(ve+=xt,Fe++),isNaN(_e))break}if(isNaN(_e))break}if(isNaN(_e))break}let Pe=be+M;S[Pe]=s==="avg"?ve/Math.max(Fe,1):_e}}}}return w}function HE(r,e){let t=ie(e.outShape,"int32"),o=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.dilationDepth,i=e.dilationHeight,p=e.dilationWidth,u=e.effectiveFilterDepth,l=e.effectiveFilterHeight,c=e.effectiveFilterWidth,m=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left;for(let h=0;h<e.batchSize;++h)for(let g=0;g<e.inChannels;++g)for(let x=0;x<e.outDepth;++x){let b=x*o-m,w=b;for(;w<0;)w+=a;let S=Math.min(e.inDepth,u+b);for(let k=0;k<e.outHeight;++k){let T=k*n-d,E=T;for(;E<0;)E+=i;let R=Math.min(e.inHeight,l+T);for(let D=0;D<e.outWidth;++D){let F=D*s-f,O=F;for(;O<0;)O+=p;let M=Math.min(e.inWidth,c+F),L=Number.NEGATIVE_INFINITY,B=-1;for(let z=w;z<S;z+=a){let U=z-b;for(let j=E;j<R;j+=i){let q=j-T;for(let Y=O;Y<M;Y+=p){let J=Y-F,re=r.get(h,z,j,Y,g);re>=L&&(L=re,B=U*l*c+q*l+J)}}}t.set(B,h,x,k,D,g)}}}return t}function J7(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e;Q(n,"avgPool");let{filterSize:s,strides:a,pad:i,dimRoundingMode:p}=o,u=1;y.assert(C.eitherStridesOrDilationsAreOne(a,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);let l=C.computePool2DInfo(n.shape,s,a,u,i,p),c;if(l.filterWidth===1&&l.filterHeight===1&&y.arraysEqual(l.inShape,l.outShape))c=fr({inputs:{x:n},backend:t});else{let m=t.data.get(n.dataId).values,d=y.computeStrides(n.shape),f=El(m,n.shape,n.dtype,d,l,"avg");c=t.makeTensorInfo(l.outShape,n.dtype,f.values)}return c}var KE={kernelName:kn,backendName:"cpu",kernelFunc:J7};function eQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:a,pad:i,dimRoundingMode:p,dataFormat:u}=o;Q(n,"avgPool3d");let l=C.computePool3DInfo(n.shape,s,a,1,i,p,u),c=t.data.get(n.dataId).values,m=Qf(c,n.shape,n.dtype,y.computeStrides(n.shape),l,"avg");return t.makeTensorInfo(m.shape,"float32",m.values)}var qE={kernelName:aa,backendName:"cpu",kernelFunc:eQ};function tQ(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=o;Q([n,s],"avgPool3DGrad");let l=C.computePool3DInfo(s.shape,a,i,1,p,u),c=l.strideDepth,m=l.strideHeight,d=l.strideWidth,f=l.filterDepth,h=l.filterHeight,g=l.filterWidth,x=l.dilationDepth,b=l.dilationHeight,w=l.dilationWidth,S=l.effectiveFilterDepth,k=l.effectiveFilterHeight,T=l.effectiveFilterWidth,E=S-1-l.padInfo.front,R=T-1-l.padInfo.left,D=k-1-l.padInfo.top,F=ie(s.shape,"float32"),O=1/(f*h*g),M=t.bufferSync(n);for(let L=0;L<l.batchSize;++L)for(let B=0;B<l.inChannels;++B)for(let z=0;z<l.inDepth;++z)for(let U=0;U<l.inHeight;++U)for(let j=0;j<l.inWidth;++j){let q=z-E,Y=U-D,J=j-R,re=0;for(let ne=0;ne<S;ne+=x){let ee=(q+ne)/c;if(!(ee<0||ee>=l.outDepth||Math.floor(ee)!==ee))for(let oe=0;oe<k;oe+=b){let ue=(Y+oe)/m;if(!(ue<0||ue>=l.outHeight||Math.floor(ue)!==ue))for(let me=0;me<T;me+=w){let be=(J+me)/d;if(be<0||be>=l.outWidth||Math.floor(be)!==be)continue;let _e=M.get(L,ee,ue,be,B);re+=_e}}}F.set(re*O,L,z,U,j,B)}return t.makeTensorInfo(F.shape,F.dtype,F.values)}var jE={kernelName:Vi,backendName:"cpu",kernelFunc:tQ};function rQ(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,a=s;Q([n,s],"avgPoolGrad");let{filterSize:i,strides:p,pad:u}=o,l=C.computePool2DInfo(a.shape,i,p,1,u),c=l.strideHeight,m=l.strideWidth,d=l.filterHeight,f=l.filterWidth,h=l.dilationHeight,g=l.dilationWidth,x=l.effectiveFilterHeight,b=l.effectiveFilterWidth,w=b-1-l.padInfo.left,S=x-1-l.padInfo.top,k=ie(a.shape,"float32"),T=1/(d*f),E=t.data.get(n.dataId).values,R=ie(n.shape,"float32",E);for(let D=0;D<l.batchSize;++D)for(let F=0;F<l.inChannels;++F)for(let O=0;O<l.inHeight;++O)for(let M=0;M<l.inWidth;++M){let L=O-S,B=M-w,z=0;for(let U=0;U<x;U+=h){let j=(L+U)/c;if(!(j<0||j>=l.outHeight||Math.floor(j)!==j))for(let q=0;q<b;q+=g){let Y=(B+q)/m;if(Y<0||Y>=l.outWidth||Math.floor(Y)!==Y)continue;let J=R.get(D,j,Y,F);z+=J}}k.set(z*T,D,O,M,F)}return t.makeTensorInfo(k.shape,k.dtype,k.values)}var XE={kernelName:zi,backendName:"cpu",kernelFunc:rQ};function oQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,scale:s,offset:a,mean:i,variance:p}=e;y.assert(i.shape.length===p.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(a==null||i.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(s==null||i.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Q([n,i,p,s,a],"batchNorm");let{varianceEpsilon:u}=o;u==null&&(u=.001);let l=t.data.get(n.dataId).values,c=t.data.get(i.dataId).values,m=t.data.get(p.dataId).values,d=s?t.data.get(s.dataId).values:new Float32Array([1]),f=a?t.data.get(a.dataId).values:new Float32Array([0]),h=new Float32Array(l.length),g=f.length,x=d.length,b=m.length,w=c.length,S=0,k=0,T=0,E=0;for(let R=0;R<l.length;++R)h[R]=f[S++]+(l[R]-c[k++])*d[T++]/Math.sqrt(m[E++]+u),S>=g&&(S=0),k>=w&&(k=0),T>=x&&(T=0),E>=b&&(E=0);return t.makeTensorInfo(n.shape,n.dtype,h)}var YE={kernelName:Hn,backendName:"cpu",kernelFunc:oQ};function nQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,crops:a}=o;Q([n],"batchToSpaceND");let i=s.reduce((x,b)=>x*b),p=C.getReshaped(n.shape,s,i),u=C.getPermuted(p.length,s.length),l=C.getReshapedPermuted(n.shape,s,i),c=C.getSliceBeginCoords(a,s.length),m=C.getSliceSize(l,a,s.length),d=We({inputs:{x:n},backend:t,attrs:{shape:p}}),f=vt({inputs:{x:d},backend:t,attrs:{perm:u}}),h=We({inputs:{x:f},backend:t,attrs:{shape:l}}),g=nn({inputs:{x:h},backend:t,attrs:{begin:c,size:m}});return t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(h),g}var QE={kernelName:ia,backendName:"cpu",kernelFunc:nQ};function sQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,weights:s}=e,{size:a}=o,i=t.data.get(n.dataId).values,p=t.data.get(s.dataId).values,u=Nl(i,p,s.dtype,s.shape,a);return t.makeTensorInfo([a],s.dtype,u)}var ZE={kernelName:Tn,backendName:"cpu",kernelFunc:sQ};function aQ(r){let{inputs:e,backend:t}=r,{s0:o,s1:n}=e,s=t.data.get(o.dataId).values,a=t.data.get(n.dataId).values,i=C.assertAndGetBroadcastShape(Array.from(s),Array.from(a));return t.makeTensorInfo([i.length],"int32",Int32Array.from(i))}var JE={kernelName:ua,backendName:"cpu",kernelFunc:aQ};var iQ=Ie(Go,(r,e)=>{let t=e;return r>t.clipValueMax?t.clipValueMax:r<t.clipValueMin?t.clipValueMin:r}),e$={kernelName:Go,backendName:"cpu",kernelFunc:iQ};var uQ=r=>{let{x:e}=r.inputs,t=r.backend,o=new Float32Array(y.sizeFromShape(e.shape)),n=t.data.get(e.dataId),s=n.complexTensorInfos.real,a=n.complexTensorInfos.imag,i=t.data.get(s.dataId).values,p=t.data.get(a.dataId).values;for(let u=0;u<i.length;u++){let l=i[u],c=p[u];o[u]=Math.hypot(l,c)}return t.makeOutput(o,e.shape,"float32")},t$={kernelName:Wi,backendName:"cpu",kernelFunc:uQ};function Ua(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.data.get(o.dataId).complexTensorInfos.imag,s=t.data.get(n.dataId).values;return t.makeTensorInfo(n.shape,n.dtype,s)}var r$={kernelName:Qi,backendName:"cpu",kernelFunc:Ua};function Su(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,e[0].shape)[0],a=e.map(h=>h.shape);C.assertParamsConsistent(a,s);let i=C.computeOutShape(e.map(h=>h.shape),s);if(y.sizeFromShape(i)===0)return t.makeTensorInfo(i,e[0].dtype,[]);let p=e.filter(h=>y.sizeFromShape(h.shape)>0);if(p.length===1)return fr({inputs:{x:p[0]},backend:t});if(p[0].dtype==="complex64"){let h=p.map(S=>tn({inputs:{input:S},backend:t})),g=p.map(S=>Ua({inputs:{input:S},backend:t})),x=Su({inputs:h,backend:t,attrs:{axis:s}}),b=Su({inputs:g,backend:t,attrs:{axis:s}}),w=qt({inputs:{real:x,imag:b},backend:t});return h.forEach(S=>t.disposeIntermediateTensorInfo(S)),g.forEach(S=>t.disposeIntermediateTensorInfo(S)),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(b),w}let u=p.map(h=>{let x=[-1,y.sizeFromShape(h.shape.slice(s))];return We({inputs:{x:h},backend:t,attrs:{shape:x}})}),l=u.map(h=>({vals:t.data.get(h.dataId).values,shape:h.shape}));i=C.computeOutShape(u.map(h=>h.shape),1);let c=u[0].shape[0]===1,m=mp(l,i,e[0].dtype,c),d=C.computeOutShape(p.map(h=>h.shape),s),f=t.makeTensorInfo(d,e[0].dtype,m);return u.forEach(h=>t.disposeIntermediateTensorInfo(h)),f}var o$={kernelName:pa,backendName:"cpu",kernelFunc:Su};function AI(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:a,pad:i,dataFormat:p,dilations:u,dimRoundingMode:l}=o;Q([n,s],"conv2d");let c=C.convertConv2DDataFormat(p),m=C.computeConv2DInfo(n.shape,s.shape,a,u,i,l,!1,c),d=m.filterHeight,f=m.filterWidth,h=m.dilationHeight,g=m.dilationWidth,x=m.padInfo.left,b=m.padInfo.top,w=m.dataFormat==="channelsLast",S=new Ge(m.outShape,n.dtype),k=y.computeStrides(n.shape),T=y.computeStrides(s.shape),E=k[0],R=w?k[1]:k[2],D=w?k[2]:1,F=w?1:k[1],O=S.strides[0],M=w?S.strides[1]:S.strides[2],L=w?S.strides[2]:1,B=w?1:S.strides[1],z=t.data.get(n.dataId).values,U=t.data.get(s.dataId).values,j=S.values;for(let q=0;q<m.batchSize;++q){let Y=q*E,J=q*O;for(let re=0;re<m.outHeight;++re){let ne=J+re*M,ee=re*m.strideHeight-b;for(let oe=0;oe<d;++oe){let ue=ee+oe*h;if(ue<0||ue>=m.inHeight)continue;let me=oe*T[0],be=Y+ue*R;for(let _e=0;_e<m.outWidth;++_e){let ve=ne+_e*L,Fe=_e*m.strideWidth-x;for(let Pe=0;Pe<f;++Pe){let at=Fe+Pe*g;if(at<0||at>=m.inWidth)continue;let ct=me+Pe*T[1],Ke=be+at*D,mt=ct;for(let ut=0;ut<m.inChannels;++ut){let gt=z[Ke+ut*F];for(let xt=0;xt<m.outChannels;++xt)j[ve+xt*B]+=gt*U[mt+xt];mt+=m.outChannels}}}}}}return t.makeTensorInfo(S.shape,S.dtype,j)}var n$={kernelName:En,backendName:"cpu",kernelFunc:AI};function pQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:a,pad:i,dataFormat:p,dimRoundingMode:u,filterShape:l}=o;Q([n,s],"conv2dBackpropFilter");let c=C.convertConv2DDataFormat(p),m=C.computeConv2DInfo(n.shape,l,a,1,i,u,!1,c),{strideHeight:d,strideWidth:f,filterHeight:h,filterWidth:g}=m,x=m.dataFormat==="channelsLast",b=new Ge(m.filterShape,"float32"),w=m.padInfo.left,S=m.padInfo.top,k=t.data.get(n.dataId).values,T=t.data.get(s.dataId).values,E=new Ge(n.shape,n.dtype,k),R=new Ge(s.shape,s.dtype,T);for(let D=0;D<h;++D){let F=Math.max(0,Math.ceil((S-D)/d)),O=Math.min(m.outHeight,(m.inHeight+S-D)/d);for(let M=0;M<g;++M){let L=Math.max(0,Math.ceil((w-M)/f)),B=Math.min(m.outWidth,(m.inWidth+w-M)/f);for(let z=0;z<m.inChannels;++z)for(let U=0;U<m.outChannels;++U){let j=0;for(let q=0;q<m.batchSize;++q)for(let Y=F;Y<O;++Y){let J=D+Y*d-S;for(let re=L;re<B;++re){let ne=M+re*f-w;x?j+=E.get(q,J,ne,z)*R.get(q,Y,re,U):j+=E.get(q,z,J,ne)*R.get(q,U,Y,re)}}b.set(j,D,M,z,U)}}}return t.makeTensorInfo(b.shape,b.dtype,b.values)}var s$={kernelName:Ui,backendName:"cpu",kernelFunc:pQ};function lQ(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{inputShape:a,strides:i,pad:p,dataFormat:u,dimRoundingMode:l}=o;Q([n,s],"conv2dBackpropInput");let c=y.computeStrides(s.shape),m=y.computeStrides(n.shape),d=C.convertConv2DDataFormat(u),f=C.computeConv2DInfo(a,s.shape,i,1,p,l,!1,d),h=new Ge(f.inShape,"float32"),g=h.values,x=t.data.get(n.dataId).values,b=t.data.get(s.dataId).values,[w,S,k]=c,{batchSize:T,filterHeight:E,filterWidth:R,inChannels:D,inHeight:F,inWidth:O,outChannels:M,outHeight:L,outWidth:B,strideHeight:z,strideWidth:U}=f;d=f.dataFormat;let j=E-1-f.padInfo.top,q=R-1-f.padInfo.left,Y=d==="channelsLast",J=h.strides[0],re=Y?h.strides[1]:h.strides[2],ne=Y?h.strides[2]:1,ee=Y?1:h.strides[1],oe=m[0],ue=Y?m[1]:m[2],me=Y?m[2]:1,be=Y?1:m[1];for(let _e=0;_e<T;++_e)for(let ve=0;ve<D;++ve)for(let Fe=0;Fe<F;++Fe){let Pe=Fe-j,at=Math.max(0,Math.ceil(Pe/z)),ct=Math.min(L,(E+Pe)/z);for(let Ke=0;Ke<O;++Ke){let mt=Ke-q,ut=Math.max(0,Math.ceil(mt/U)),gt=Math.min(B,(R+mt)/U),xt=0;for(let Bt=at;Bt<ct;++Bt){let io=Bt*z-Pe;for(let sr=ut;sr<gt;++sr){let Et=sr*U-mt,ar=oe*_e+ue*Bt+me*sr,ir=w*(E-1-io)+S*(R-1-Et)+k*ve;for(let uo=0;uo<M;++uo){let po=x[ar+be*uo],xr=b[ir+uo];xt+=po*xr}}}let Ur=J*_e+re*Fe+ne*Ke+ee*ve;g[Ur]=xt}}return t.makeTensorInfo(h.shape,h.dtype,h.values)}var a$={kernelName:$n,backendName:"cpu",kernelFunc:lQ};function cQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:a,pad:i,dilations:p}=o;Q([n,s],"conv3d");let u=C.computeConv3DInfo(n.shape,s.shape,a,p,i),{filterDepth:l,filterHeight:c,filterWidth:m,dilationDepth:d,dilationHeight:f,dilationWidth:h,padInfo:g}=u,x=g.front,b=g.left,w=g.top,S=new Ge(u.outShape,n.dtype),k=t.data.get(n.dataId).values,T=t.data.get(s.dataId).values,E=S.values,R=y.computeStrides(n.shape),D=y.computeStrides(s.shape);for(let F=0;F<u.batchSize;++F){let O=F*R[0],M=F*S.strides[0];for(let L=0;L<u.outDepth;++L){let B=M+L*S.strides[1],z=L*u.strideDepth-x;for(let U=0;U<l;++U){let j=z+U*d;if(j<0||j>=u.inDepth)continue;let q=U*D[0],Y=O+j*R[1];for(let J=0;J<u.outHeight;++J){let re=B+J*S.strides[2],ne=J*u.strideHeight-w;for(let ee=0;ee<c;++ee){let oe=ne+ee*f;if(oe<0||oe>=u.inHeight)continue;let ue=q+ee*D[1],me=Y+oe*R[2];for(let be=0;be<u.outWidth;++be){let _e=re+be*u.outChannels,ve=be*u.strideWidth-b;for(let Fe=0;Fe<m;++Fe){let Pe=ve+Fe*h;if(Pe<0||Pe>=u.inWidth)continue;let at=ue+Fe*D[2],ct=me+Pe*u.inChannels,Ke=at;for(let mt=0;mt<u.inChannels;++mt){let ut=k[ct+mt];for(let gt=0;gt<u.outChannels;++gt)E[_e+gt]+=ut*T[Ke+gt];Ke+=u.outChannels}}}}}}}}return t.makeTensorInfo(S.shape,S.dtype,S.values)}var i$={kernelName:Rn,backendName:"cpu",kernelFunc:cQ};function mQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:a,pad:i,filterShape:p}=o;Q([n,s],"conv3dBackpropFilterV2");let u=y.computeStrides(n.shape),l=y.computeStrides(s.shape),c=C.computeConv3DInfo(n.shape,p,a,1,i),m=c.strideDepth,d=c.strideHeight,f=c.strideWidth,h=c.filterDepth,g=c.filterHeight,x=c.filterWidth,b=new Ge(c.filterShape,"float32"),w=b.values,[S,k,T,E]=b.strides,R=t.data.get(s.dataId).values,[D,F,O,M]=l,L=t.data.get(n.dataId).values,[B,z,U,j]=u,q=c.padInfo.front,Y=c.padInfo.left,J=c.padInfo.top;for(let re=0;re<h;++re){let ne=Math.max(0,Math.ceil((q-re)/m)),ee=Math.min(c.outDepth,(c.inDepth+q-re)/m),oe=re*S;for(let ue=0;ue<g;++ue){let me=Math.max(0,Math.ceil((J-ue)/d)),be=Math.min(c.outHeight,(c.inHeight+J-ue)/d),_e=ue*k+oe;for(let ve=0;ve<x;++ve){let Fe=Math.max(0,Math.ceil((Y-ve)/f)),Pe=Math.min(c.outWidth,(c.inWidth+Y-ve)/f),at=ve*T+_e;for(let ct=0;ct<c.inChannels;++ct){let Ke=ct*E+at;for(let mt=0;mt<c.outChannels;++mt){let ut=0;for(let gt=0;gt<c.batchSize;++gt){let xt=gt*B,Ur=gt*D;for(let Bt=ne;Bt<ee;++Bt){let sr=(re+Bt*m-q)*z+xt,Et=Bt*F+Ur;for(let ar=me;ar<be;++ar){let uo=(ue+ar*d-J)*U+sr,po=ar*O+Et;for(let xr=Fe;xr<Pe;++xr){let cn=(ve+xr*f-Y)*j+uo,ta=xr*M+po;ut+=L[cn+ct]*R[ta+mt]}}}}w[Ke+mt]=ut}}}}}return t.makeTensorInfo(b.shape,b.dtype,b.values)}var u$={kernelName:ti,backendName:"cpu",kernelFunc:mQ};function dQ(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{pad:a,strides:i,inputShape:p}=o;Q([n],"conv3dBackpropInputV2");let u=y.computeStrides(n.shape),l=y.computeStrides(s.shape),c=C.computeConv3DInfo(p,s.shape,i,1,a),m=new Ge(c.inShape,"float32"),d=m.values,[f,h,g,x]=m.strides,b=t.data.get(n.dataId).values,[w,S,k,T]=u,E=t.data.get(s.dataId).values,[R,D,F,O]=l,{batchSize:M,filterDepth:L,filterHeight:B,filterWidth:z,inChannels:U,inDepth:j,inHeight:q,inWidth:Y,outChannels:J,outDepth:re,outHeight:ne,outWidth:ee,strideDepth:oe,strideHeight:ue,strideWidth:me}=c,be=L-1-c.padInfo.front,_e=B-1-c.padInfo.top,ve=z-1-c.padInfo.left;for(let Fe=0;Fe<M;++Fe)for(let Pe=0;Pe<U;++Pe)for(let at=0;at<j;++at){let ct=at-be,Ke=Math.max(0,Math.ceil(ct/oe)),mt=Math.min(re,(L+ct)/oe);for(let ut=0;ut<q;++ut){let gt=ut-_e,xt=Math.max(0,Math.ceil(gt/ue)),Ur=Math.min(ne,(B+gt)/ue);for(let Bt=0;Bt<Y;++Bt){let io=Bt-ve,sr=Math.max(0,Math.ceil(io/me)),Et=Math.min(ee,(z+io)/me),ar=0;for(let ir=Ke;ir<mt;++ir){let uo=ir*oe-ct;for(let po=xt;po<Ur;++po){let xr=po*ue-gt;for(let ja=sr;ja<Et;++ja){let cn=ja*me-io,ta=w*Fe+S*ir+k*po+T*ja,Zt=R*(L-1-uo)+D*(B-1-xr)+F*(z-1-cn)+O*Pe;for(let Xa=0;Xa<J;++Xa){let lc=b[ta+Xa],cc=E[Zt+Xa];ar+=lc*cc}}}}d[f*Fe+h*at+g*ut+x*Bt+Pe]=ar}}}return t.makeTensorInfo(m.shape,m.dtype,m.values)}var p$={kernelName:Dn,backendName:"cpu",kernelFunc:dQ};var fQ=Ie(An,r=>Math.cos(r)),l$={kernelName:An,backendName:"cpu",kernelFunc:fQ};var hQ=Ie(Fn,r=>Math.cosh(r)),c$={kernelName:Fn,backendName:"cpu",kernelFunc:hQ};function gQ(r){let{inputs:e,backend:t,attrs:o}=r,{image:n,boxes:s,boxInd:a}=e,{cropSize:i,method:p,extrapolationValue:u}=o,[l,c,m,d]=n.shape,f=s.shape[0],[h,g]=i,x=ie([f,h,g,d],"float32"),b=t.data.get(s.dataId).values,w=t.data.get(a.dataId).values,S=t.data.get(n.dataId).values,k=y.computeStrides(n.shape),T=y.computeStrides(x.shape);for(let E=0;E<f;E++){let R=E*4,D=b[R],F=b[R+1],O=b[R+2],M=b[R+3],L=w[E];if(L>=l)continue;let B=h>1?(O-D)*(c-1)/(h-1):0,z=g>1?(M-F)*(m-1)/(g-1):0;for(let U=0;U<h;U++){let j=h>1?D*(c-1)+U*B:.5*(D+O)*(c-1);if(j<0||j>c-1){for(let q=0;q<g;q++)for(let Y=0;Y<d;Y++){let J=Y+q*T[2]+U*T[1]+E*T[0];x.values[J]=u}continue}if(p==="bilinear"){let q=Math.floor(j),Y=Math.ceil(j),J=j-q;for(let re=0;re<g;re++){let ne=g>1?F*(m-1)+re*z:.5*(F+M)*(m-1);if(ne<0||ne>m-1){for(let me=0;me<d;me++){let be=me+re*T[2]+U*T[1]+E*T[0];x.values[be]=u}continue}let ee=Math.floor(ne),oe=Math.ceil(ne),ue=ne-ee;for(let me=0;me<d;me++){let be=me+ee*k[2]+q*k[1]+L*k[0],_e=S[be];be=me+oe*k[2]+q*k[1]+L*k[0];let ve=S[be];be=me+ee*k[2]+Y*k[1]+L*k[0];let Fe=S[be];be=me+oe*k[2]+Y*k[1]+L*k[0];let Pe=S[be],at=_e+(ve-_e)*ue,ct=Fe+(Pe-Fe)*ue;be=me+re*T[2]+U*T[1]+E*T[0],x.values[be]=at+(ct-at)*J}}}else for(let q=0;q<g;++q){let Y=g>1?F*(m-1)+q*z:.5*(F+M)*(m-1);if(Y<0||Y>m-1){for(let ne=0;ne<d;ne++){let ee=ne+q*T[2]+U*T[1]+E*T[0];x.values[ee]=u}continue}let J=Math.round(Y),re=Math.round(j);for(let ne=0;ne<d;ne++){let ee=ne+J*k[2]+re*k[1]+L*k[0],oe=ne+q*T[2]+U*T[1]+E*T[0];x.values[oe]=S[ee]}}}}return t.makeTensorInfo(x.shape,x.dtype,x.values)}var m$={kernelName:Mn,backendName:"cpu",kernelFunc:gQ};function xQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:a,reverse:i}=o;Q(n,"cumprod");let p=C.getAxesPermutation([s],n.shape.length),u=n;p!=null&&(u=vt({inputs:{x:n},backend:t,attrs:{perm:p}}));let l=C.getInnerMostAxes(1,n.shape.length)[0];if(l!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${l}`);let c=pt(u.dtype,"int32"),m=y.makeOnesTypedArray(y.sizeFromShape(u.shape),c),d=t.data.get(u.dataId).values,f=u.shape[u.shape.length-1],h=i?(x,b)=>x+f-b-1:(x,b)=>x+b;for(let x=0;x<d.length;x+=f)for(let b=0;b<f;b++){let w=h(x,b);if(b===0)m[w]=a?1:d[w];else{let S=h(x,b-1);m[w]=a?d[S]*m[S]:d[w]*m[S]}}let g=t.makeTensorInfo(u.shape,c,m);if(p!=null){let x=C.getUndoAxesPermutation(p),b=vt({inputs:{x:g},backend:t,attrs:{perm:x}});return t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(u),b}return g}var d$={kernelName:Pn,backendName:"cpu",kernelFunc:xQ};function yQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:a,reverse:i}=o;Q(n,"cumsum");let p=C.getAxesPermutation([s],n.shape.length),u=n;p!=null&&(u=vt({inputs:{x:n},backend:t,attrs:{perm:p}}));let l=C.getInnerMostAxes(1,n.shape.length)[0];if(l!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${l}`);let c=pt(u.dtype,"int32"),m=y.makeZerosTypedArray(y.sizeFromShape(u.shape),c),d=t.data.get(u.dataId).values,f=u.shape[u.shape.length-1],h=i?(x,b)=>x+f-b-1:(x,b)=>x+b;for(let x=0;x<d.length;x+=f)for(let b=0;b<f;b++){let w=h(x,b);if(b===0)m[w]=a?0:d[w];else{let S=h(x,b-1);m[w]=a?d[S]+m[S]:d[w]+m[S]}}let g=t.makeTensorInfo(u.shape,c,m);if(p!=null){let x=C.getUndoAxesPermutation(p),b=vt({inputs:{x:g},backend:t,attrs:{perm:x}});return t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(u),b}return g}var f$={kernelName:On,backendName:"cpu",kernelFunc:yQ};function bQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,weights:s}=e,{size:a,binaryOutput:i}=o;if(n.shape.length===1){let p=t.data.get(n.dataId).values,u=t.data.get(s.dataId).values,l=Nl(p,u,s.dtype,s.shape,a);return t.makeTensorInfo([a],s.dtype,l)}else if(n.shape.length===2){let p=t.bufferSync(n),u=t.bufferSync(s),l=Of(p,u,a,i);return t.makeTensorInfo(l.shape,s.dtype,l.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var h$={kernelName:la,backendName:"cpu",kernelFunc:bQ};function CQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockSize:s,dataFormat:a}=o;y.assert(a==="NHWC",()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${a}`);let i=n.shape[0],p=n.shape[1],u=n.shape[2],l=n.shape[3],c=p*s,m=u*s,d=l/(s*s),f=t.data.get(n.dataId).values,h=new Float32Array(i*c*m*d),g=0;for(let x=0;x<i;++x)for(let b=0;b<c;++b){let w=Math.floor(b/s),S=b%s;for(let k=0;k<m;++k){let T=Math.floor(k/s),E=k%s,R=(S*s+E)*d;for(let D=0;D<d;++D){let O=D+R+l*(T+u*(w+p*x));h[g++]=f[O]}}}return t.makeTensorInfo([i,c,m,d],n.dtype,h)}var g$={kernelName:Ln,backendName:"cpu",kernelFunc:CQ};function FI(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:a,pad:i,dilations:p,dimRoundingMode:u}=o;Q([n,s],"depthwiseConv2DNative");let l=y.computeStrides(n.shape),c=y.computeStrides(s.shape),m=p;m==null&&(m=[1,1]),y.assert(C.eitherStridesOrDilationsAreOne(a,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${m}'`);let d=C.computeConv2DInfo(n.shape,s.shape,a,m,i,u,!0),{filterHeight:f,filterWidth:h,dilationHeight:g,dilationWidth:x,padInfo:b}=d,w=b.left,S=b.top,k=d.outChannels/d.inChannels,T=new Ge(d.outShape,n.dtype),E=t.data.get(n.dataId).values,R=t.data.get(s.dataId).values,D=T.values;for(let F=0;F<d.batchSize;++F){let O=F*l[0],M=F*T.strides[0];for(let L=0;L<d.outHeight;++L){let B=M+L*T.strides[1],z=L*d.strideHeight-S;for(let U=0;U<f;++U){let j=z+U*g;if(j<0||j>=d.inHeight)continue;let q=U*c[0],Y=O+j*l[1];for(let J=0;J<d.outWidth;++J){let re=B+J*T.strides[2],ne=J*d.strideWidth-w;for(let ee=0;ee<h;++ee){let oe=ne+ee*x;if(oe<0||oe>=d.inWidth)continue;let ue=q+ee*c[1],me=Y+oe*d.inChannels,be=re,_e=ue;for(let ve=0;ve<d.inChannels;++ve){let Fe=E[me+ve];for(let Pe=0;Pe<k;++Pe)D[be+Pe]+=Fe*R[_e+Pe];be+=k,_e+=k}}}}}}return t.makeTensorInfo(T.shape,T.dtype,T.values)}var x$={kernelName:Bn,backendName:"cpu",kernelFunc:FI};function wQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:a,dilations:i,pad:p,dimRoundingMode:u,filterShape:l}=o;Q([n,s],"depthwiseConv2dNativeBackpropFilter");let c=C.computeConv2DInfo(n.shape,l,a,i,p,u,!0),{strideHeight:m,strideWidth:d,filterHeight:f,filterWidth:h}=c,g=new Ge(c.filterShape,"float32"),x=c.padInfo.left,b=c.padInfo.top,w=c.outChannels/c.inChannels,S=t.data.get(n.dataId).values,k=new Ge(n.shape,n.dtype,S),T=t.data.get(s.dataId).values,E=new Ge(s.shape,s.dtype,T);for(let R=0;R<f;++R){let D=Math.max(0,Math.ceil((b-R)/m)),F=Math.min(c.outHeight,(c.inHeight+b-R)/m);for(let O=0;O<h;++O){let M=Math.max(0,Math.ceil((x-O)/d)),L=Math.min(c.outWidth,(c.inWidth+x-O)/d);for(let B=0;B<c.outChannels;++B){let z=Math.trunc(B/w),U=B%w,j=0;for(let q=0;q<c.batchSize;++q)for(let Y=D;Y<F;++Y){let J=R+Y*m-b;for(let re=M;re<L;++re){let ne=O+re*d-x;j+=k.get(q,J,ne,z)*E.get(q,Y,re,B)}}g.set(j,R,O,z,U)}}}return t.makeTensorInfo(g.shape,g.dtype,g.values)}var y$={kernelName:Gi,backendName:"cpu",kernelFunc:wQ};function SQ(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{strides:a,dilations:i,pad:p,dimRoundingMode:u,inputShape:l}=o;Q([n,s],"depthwiseConv2DNativeBackpropInput");let c=y.computeStrides(n.shape),m=y.computeStrides(s.shape),d=C.computeConv2DInfo(l,s.shape,a,i,p,u,!0),f=new Ge(d.inShape,"float32"),h=f.values,[g,x,b]=f.strides,w=t.data.get(n.dataId).values,[S,k,T]=c,E=t.data.get(s.dataId).values,[R,D,F]=m,{batchSize:O,filterHeight:M,filterWidth:L,inChannels:B,inHeight:z,inWidth:U,outChannels:j,outHeight:q,outWidth:Y,strideHeight:J,strideWidth:re}=d,ne=M-1-d.padInfo.top,ee=L-1-d.padInfo.left,oe=j/B;for(let ue=0;ue<O;++ue)for(let me=0;me<B;++me)for(let be=0;be<z;++be){let _e=be-ne,ve=Math.max(0,Math.ceil(_e/J)),Fe=Math.min(q,(M+_e)/J);for(let Pe=0;Pe<U;++Pe){let at=Pe-ee,ct=Math.max(0,Math.ceil(at/re)),Ke=Math.min(Y,(L+at)/re),mt=0;for(let ut=ve;ut<Fe;++ut){let gt=ut*J-_e;for(let xt=ct;xt<Ke;++xt){let Ur=xt*re-at,Bt=S*ue+k*ut+T*xt,io=R*(M-1-gt)+D*(L-1-Ur)+F*me;for(let sr=0;sr<oe;++sr){let Et=me*oe+sr,ar=w[Bt+Et],ir=E[io+sr];mt+=ar*ir}}}h[g*ue+x*be+b*Pe+me]=mt}}return t.makeTensorInfo(f.shape,f.dtype,f.values)}var b$={kernelName:Hi,backendName:"cpu",kernelFunc:SQ};function IQ(r){let{inputs:e,backend:t}=r,{x:o}=e,n=y.sizeFromShape(o.shape),s=t.data.get(o.dataId).values,a=ie([n,n],o.dtype),i=a.values;for(let u=0;u<s.length;u++)i[u*n+u]=s[u];let p=[...o.shape,...o.shape];return t.makeTensorInfo(p,a.dtype,a.values)}var C$={kernelName:ca,backendName:"cpu",kernelFunc:IQ};var w$={kernelName:zn,backendName:"cpu",kernelFunc:({inputs:r,backend:e,attrs:t})=>{let{x:o,filter:n}=r,{strides:s,pad:a,dilations:i}=t,p=e,u=p.data.get(o.dataId).values,l=o.shape.length,c=p.data.get(n.dataId).values,m=n.shape.length,{batchSize:d,inHeight:f,inWidth:h,inChannels:g,outHeight:x,outWidth:b,padInfo:w,strideHeight:S,strideWidth:k,filterHeight:T,filterWidth:E,dilationHeight:R,dilationWidth:D,outShape:F}=C.computeDilation2DInfo(o.shape,n.shape,s,a,"NHWC",i),O=y.sizeFromShape(F),M=F.length,L=y.getArrayFromDType(o.dtype,O);for(let z=0;z<d;++z)for(let U=0;U<x;++U){let j=U*S-w.top;for(let q=0;q<b;++q){let Y=q*k-w.left;for(let J=0;J<g;++J){let re=Number.MIN_SAFE_INTEGER;for(let ee=0;ee<T;++ee){let oe=j+ee*R;if(oe>=0&&oe<f)for(let ue=0;ue<E;++ue){let me=Y+ue*D;if(me>=0&&me<h){let be=y.locToIndex([z,oe,me,J],l,y.computeStrides(o.shape)),_e=y.locToIndex([ee,ue,J],m,y.computeStrides(n.shape)),ve=u[be]+c[_e];ve>re&&(re=ve)}}}let ne=y.locToIndex([z,U,q,J],M,y.computeStrides(F));L[ne]=re}}}return{dataId:p.write(y.toTypedArray(L,o.dtype),F,o.dtype),shape:F,dtype:o.dtype}}};var S$={kernelName:qi,backendName:"cpu",kernelFunc:({inputs:r,backend:e,attrs:t})=>{let{x:o,filter:n,dy:s}=r,{strides:a,pad:i,dilations:p}=t,u=e,l=y.toNestedArray(o.shape,u.data.get(o.dataId).values),c=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:d,inWidth:f,inChannels:h,outHeight:g,outWidth:x,padInfo:b,strideHeight:w,strideWidth:S,filterHeight:k,filterWidth:T,dilationHeight:E,dilationWidth:R,outShape:D}=C.computeDilation2DInfo(o.shape,n.shape,a,i,"NHWC",p);y.assert(s.rank===D.length,()=>`Error in ${qi}, dy must have the same rank as output ${D.length}, but got ${s.rank}`);let F=y.toNestedArray(D,u.data.get(s.dataId).values),O=y.makeZerosNestedTypedArray(n.shape,n.dtype);for(let L=0;L<m;++L)for(let B=0;B<g;++B){let z=B*w-b.top;for(let U=0;U<x;++U){let j=U*S-b.left;for(let q=0;q<h;++q){let Y=Number.MIN_SAFE_INTEGER,J=0,re=0;for(let ne=0;ne<k;++ne){let ee=z+ne*E;if(ee>=0&&ee<d)for(let oe=0;oe<T;++oe){let ue=j+oe*R;if(ue>=0&&ue<f){let me=l[L][ee][ue][q]+c[ne][oe][q];me>Y&&(Y=me,J=ne,re=oe)}}}O[J][re][q]+=F[L][B][U][q]}}}return{dataId:u.write(y.toTypedArray(O,o.dtype),n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var I$={kernelName:Ki,backendName:"cpu",kernelFunc:({inputs:r,backend:e,attrs:t})=>{let{x:o,filter:n,dy:s}=r,{strides:a,pad:i,dilations:p}=t,u=e,l=y.toNestedArray(o.shape,u.data.get(o.dataId).values),c=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:d,inWidth:f,inChannels:h,outHeight:g,outWidth:x,padInfo:b,strideHeight:w,strideWidth:S,filterHeight:k,filterWidth:T,dilationHeight:E,dilationWidth:R,outShape:D}=C.computeDilation2DInfo(o.shape,n.shape,a,i,"NHWC",p);y.assert(s.rank===D.length,()=>`Error in ${Ki}, dy must have the same rank as output ${D.length}, but got ${s.rank}`);let F=y.toNestedArray(D,u.data.get(s.dataId).values),O=y.makeZerosNestedTypedArray(o.shape,o.dtype);for(let L=0;L<m;++L)for(let B=0;B<g;++B){let z=B*w-b.top;for(let U=0;U<x;++U){let j=U*S-b.left;for(let q=0;q<h;++q){let Y=Number.MIN_SAFE_INTEGER,J=z<0?0:z,re=j<0?0:j;for(let ne=0;ne<k;++ne){let ee=z+ne*E;if(ee>=0&&ee<d)for(let oe=0;oe<T;++oe){let ue=j+oe*R;if(ue>=0&&ue<f){let me=l[L][ee][ue][q]+c[ne][oe][q];me>Y&&(Y=me,J=ee,re=ue)}}}O[L][J][re][q]+=F[L][B][U][q]}}}return{dataId:u.write(y.toTypedArray(O,o.dtype),o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};function vQ(r){let{inputs:e,backend:t,attrs:o}=r,{image:n}=e,{canvas:s,options:a}=o,{contextOptions:i,imageOptions:p}=a||{},u=(p==null?void 0:p.alpha)||1,l=(i==null?void 0:i.contextType)||"2d";if(l!=="2d")throw new Error(`Context type ${i.contextType} is not supported by the CPU backend.`);let c=s.getContext(l,(i==null?void 0:i.contextAttributes)||{});if(c==null)throw new Error(`Could not get the context with ${l} type.`);let[m,d]=n.shape.slice(0,2),f=n.shape.length===2?1:n.shape[2],h=t.data.get(n.dataId).values,g=n.dtype==="float32"?255:1,x=new Uint8ClampedArray(d*m*4);for(let w=0;w<m*d;++w){let S=[0,0,0,255*u];for(let T=0;T<f;T++){let E=h[w*f+T];if(n.dtype==="float32"){if(E<0||E>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${E}.`)}else if(n.dtype==="int32"&&(E<0||E>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${E}.`);f===1?(S[0]=E*g,S[1]=E*g,S[2]=E*g):S[T]=E*g}let k=w*4;x[k+0]=Math.round(S[0]),x[k+1]=Math.round(S[1]),x[k+2]=Math.round(S[2]),x[k+3]=Math.round(S[3])}s.width=d,s.height=m;let b=new ImageData(x,d,m);return c.putImageData(b,0,0),n}var v$={kernelName:Mu,backendName:"cpu",kernelFunc:vQ};function Ii(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o;Q(n,"sum");let i;n.dtype==="bool"?i=rn({inputs:{x:n},backend:t,attrs:{dtype:"int32"}}):i=fr({inputs:{x:n},backend:t});let p=i.shape.length,u=y.parseAxisParam(s,i.shape),l=C.getAxesPermutation(u,p),c=u,m=i;l!=null&&(m=vt({inputs:{x:i},backend:t,attrs:{perm:l}}),c=C.getInnerMostAxes(c.length,p)),C.assertAxesAreInnerMostDims("sum",c,m.shape.length);let[d,f]=C.computeOutAndReduceShapes(m.shape,c),h=C.upcastType(m.dtype,"int32"),g=vl(t,d,h),x=y.sizeFromShape(f),b=t.data.get(g.dataId).values,w=t.data.get(m.dataId).values;for(let S=0;S<b.length;++S){let k=S*x,T=0;for(let E=0;E<x;++E)T+=w[k+E];b[S]=T}if(a){let S=C.expandShapeToKeepDim(g.shape,u),k=g;g=We({inputs:{x:g},backend:t,attrs:{shape:S}}),t.disposeIntermediateTensorInfo(k)}return t.disposeIntermediateTensorInfo(i),l!=null&&t.disposeIntermediateTensorInfo(m),g}var k$={kernelName:As,backendName:"cpu",kernelFunc:Ii};function kQ(r){let{inputs:e,backend:t,attrs:o}=r,{equation:n}=o,s=e,{allDims:a,summedDims:i,idDims:p}=C.decodeEinsumEquation(n,s.length);C.checkEinsumDimSizes(a.length,p,s);let{path:u,steps:l}=C.getEinsumComputePath(i,p),c=l.length,m=null,d=a.length,f=[];for(let h=0;h<c;++h){for(let g of l[h]){let{permutationIndices:x,expandDims:b}=C.getEinsumPermutation(d,p[g]),w;C.isIdentityPermutation(x)?w=s[g]:(w=vt({inputs:{x:s[g]},backend:t,attrs:{perm:x}}),f.push(w));let S=w.shape.slice();for(let k=0;k<b.length;++k)S.splice(b[k],0,1);y.arraysEqual(w.shape,S)||(w=We({inputs:{x:w},backend:t,attrs:{shape:S}}),f.push(w)),m===null?m=w:(m=dp({inputs:{a:w,b:m},backend:t}),f.push(m))}h<c-1&&(u[h]>=0&&(m=Ii({inputs:{x:m},backend:t,attrs:{axis:u[h]-(a.length-d),keepDims:!1}}),f.push(m)),d--)}for(let h of f)h!==m&&t.disposeIntermediateTensorInfo(h);return m}var N$={kernelName:ji,backendName:"cpu",kernelFunc:kQ};function NQ(r){let{inputs:e,backend:t}=r,{dy:o,y:n}=e;Q([o,n],"eluGrad");let s=new Float32Array(y.sizeFromShape(n.shape)),a=t.data.get(n.dataId).values,i=t.data.get(o.dataId).values;for(let p=0;p<a.length;++p){let u=a[p];u>=0?s[p]=i[p]:s[p]=i[p]*(u+1)}return t.makeTensorInfo(n.shape,"float32",s)}var T$={kernelName:ri,backendName:"cpu",kernelFunc:NQ};var TQ=C.ERF_P,_Q=C.ERF_A1,EQ=C.ERF_A2,$Q=C.ERF_A3,RQ=C.ERF_A4,DQ=C.ERF_A5,AQ=Ie(Un,r=>{let e=Math.sign(r),t=Math.abs(r),o=1/(1+TQ*t);return e*(1-((((DQ*o+RQ)*o+$Q)*o+EQ)*o+_Q)*o*Math.exp(-t*t))}),_$={kernelName:Un,backendName:"cpu",kernelFunc:AQ};function $l(r){let{inputs:e,backend:t,attrs:o}=r,{input:n}=e,{dim:s}=o,a=n.shape.length,i=n.shape.slice(),p=s;return s<0&&(y.assert(-(a+1)<=s,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),p=a+s+1),i.splice(p,0,1),We({inputs:{x:n},backend:t,attrs:{shape:i}})}var E$={kernelName:ma,backendName:"cpu",kernelFunc:$l};var FQ=Ve((r,e)=>r/e),Yc=Qe(Vn,FQ),Qc={kernelName:Vn,backendName:"cpu",kernelFunc:Yc};function Zf(r,e,t){let o=r.shape,n=o[0],s=o[1],a=t.data.get(r.dataId),i=a.complexTensorInfos.real,p=a.complexTensorInfos.imag,u=[n,s],l=y.sizeFromShape(u),c=y.getTypedArrayFromDType("float32",l),m=y.getTypedArrayFromDType("float32",l);for(let g=0;g<n;g++){let x=nn({inputs:{x:i},backend:t,attrs:{begin:[g,0],size:[1,s]}}),b=nn({inputs:{x:p},backend:t,attrs:{begin:[g,0],size:[1,s]}}),w=qt({inputs:{real:x,imag:b},backend:t}),{real:S,imag:k}=PQ(w,e,t),T=C.mergeRealAndImagArrays(S,k);for(let E=0;E<s;E++){let R=C.getComplexWithIndex(T,E);c[g*s+E]=R.real,m[g*s+E]=R.imag}t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(b),t.disposeIntermediateTensorInfo(w)}let d=t.makeTensorInfo(u,"float32",c),f=t.makeTensorInfo(u,"float32",m),h=qt({inputs:{real:d,imag:f},backend:t});return t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(f),h}function PQ(r,e,t){let o=y.sizeFromShape(r.shape),n=t.data.get(r.dataId),s=t.data.get(n.complexTensorInfos.real.dataId).values,a=t.data.get(n.complexTensorInfos.imag.dataId).values;if(OQ(o)){let i=PI(s,a,o,e,t),p=[r.shape[0],r.shape[1]];if(e){let u=t.makeTensorInfo(p,"float32",i.real),l=t.makeTensorInfo(p,"float32",i.imag),c=t.makeTensorInfo([],"float32",y.createScalarValue(o,"float32")),m=fr({inputs:{x:c},backend:t}),d=Qc.kernelFunc({inputs:{a:u,b:c},backend:t}),f=Qc.kernelFunc({inputs:{a:l,b:m},backend:t}),h=t.data.get(d.dataId).values,g=t.data.get(f.dataId).values;return t.disposeIntermediateTensorInfo(u),t.disposeIntermediateTensorInfo(l),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(f),{real:h,imag:g}}return i}else{let i=C.mergeRealAndImagArrays(s,a),p=MQ(i,o,e);return C.splitRealAndImagArrays(p)}}function OQ(r){return(r&r-1)===0}function PI(r,e,t,o,n){if(t===1)return{real:r,imag:e};let s=C.mergeRealAndImagArrays(r,e),a=t/2,i=C.complexWithEvenIndex(s),p=i.real,u=i.imag,l=[p.length],c=n.makeTensorInfo(l,"float32",p),m=n.makeTensorInfo(l,"float32",u),d=qt({inputs:{real:c,imag:m},backend:n}),f=C.complexWithOddIndex(s),h=f.real,g=f.imag,x=[h.length],b=n.makeTensorInfo(x,"float32",h),w=n.makeTensorInfo(x,"float32",g),S=qt({inputs:{real:b,imag:w},backend:n}),k=PI(p,u,a,o,n),T=k.real,E=k.imag,R=[T.length],D=n.makeTensorInfo(R,"float32",T),F=n.makeTensorInfo(R,"float32",E),O=qt({inputs:{real:D,imag:F},backend:n}),M=PI(h,g,a,o,n),L=M.real,B=M.imag,z=[L.length],U=n.makeTensorInfo(z,"float32",L),j=n.makeTensorInfo(z,"float32",B),q=qt({inputs:{real:U,imag:j},backend:n}),Y=C.exponents(t,o),J=[Y.real.length],re=n.makeTensorInfo(J,"float32",Y.real),ne=n.makeTensorInfo(J,"float32",Y.imag),ee=qt({inputs:{real:re,imag:ne},backend:n}),oe=dp({inputs:{a:ee,b:q},backend:n}),ue=Wa({inputs:{a:O,b:oe},backend:n}),me=jc({inputs:{a:O,b:oe},backend:n}),be=tn({inputs:{input:ue},backend:n}),_e=tn({inputs:{input:me},backend:n}),ve=Ua({inputs:{input:ue},backend:n}),Fe=Ua({inputs:{input:me},backend:n}),Pe=Su({inputs:[be,_e],backend:n,attrs:{axis:0}}),at=Su({inputs:[ve,Fe],backend:n,attrs:{axis:0}}),ct=n.data.get(Pe.dataId).values,Ke=n.data.get(at.dataId).values;return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(S),n.disposeIntermediateTensorInfo(D),n.disposeIntermediateTensorInfo(F),n.disposeIntermediateTensorInfo(O),n.disposeIntermediateTensorInfo(U),n.disposeIntermediateTensorInfo(j),n.disposeIntermediateTensorInfo(q),n.disposeIntermediateTensorInfo(re),n.disposeIntermediateTensorInfo(ne),n.disposeIntermediateTensorInfo(ee),n.disposeIntermediateTensorInfo(oe),n.disposeIntermediateTensorInfo(ue),n.disposeIntermediateTensorInfo(me),n.disposeIntermediateTensorInfo(be),n.disposeIntermediateTensorInfo(ve),n.disposeIntermediateTensorInfo(_e),n.disposeIntermediateTensorInfo(Fe),n.disposeIntermediateTensorInfo(Pe),n.disposeIntermediateTensorInfo(at),{real:ct,imag:Ke}}function MQ(r,e,t){let o=new Float32Array(e*2);for(let n=0;n<e;n++){let s=0,a=0;for(let i=0;i<e;i++){let p=C.exponent(n*i,e,t),u=C.getComplexWithIndex(r,i);s+=u.real*p.real-u.imag*p.imag,a+=u.real*p.imag+u.imag*p.real}t&&(s/=e,a/=e),C.assignToTypedArray(o,s,a,n)}return o}function LQ(r){let{inputs:e,backend:t}=r,{input:o}=e,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],a=n/s,i=We({inputs:{x:o},backend:t,attrs:{shape:[a,s]}}),p=Zf(i,!1,t),u=We({inputs:{x:p},backend:t,attrs:{shape:o.shape}});return t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(p),u}var $$={kernelName:Xi,backendName:"cpu",kernelFunc:LQ};function Zc(r){let{backend:e,attrs:t}=r,{shape:o,value:n,dtype:s}=t,a=s||y.inferDtype(n),i=y.getArrayFromDType(a,y.sizeFromShape(o));return BQ(i,n,a),e.makeTensorInfo(o,a,i)}var R$={kernelName:da,backendName:"cpu",kernelFunc:Zc};function BQ(r,e,t){r.fill(e)}var D$={kernelName:Gn,backendName:"cpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{image:o}=r,n=t,s=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[a,i,p,u]=o.shape,l=n.data.get(o.dataId).values;for(let m=0;m<a;m++){let d=m*p*i*u;for(let f=0;f<i;f++){let h=f*(p*u);for(let g=0;g<p;g++){let x=g*u;for(let b=0;b<u;b++){let w=Math.round(p-g-1),S=d+h+x+b,k=l[S];if(w>=0&&w<p){let T=w*u,E=d+h+T+b;k=l[E]}s[S]=k}}}}return{dataId:n.write(s,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};function zQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=e,{strides:p,pad:u,dataFormat:l,dilations:c,dimRoundingMode:m,activation:d,leakyreluAlpha:f}=o,h=AI({inputs:{x:n,filter:s},backend:t,attrs:{strides:p,pad:u,dataFormat:l,dilations:c,dimRoundingMode:m}});if(a){let g=h;if(l==="NCHW"&&a.shape.length===1&&a.shape[0]!==1){let x=We({inputs:{x:a},backend:t,attrs:{shape:[a.shape[0],1,1]}});h=Wa({inputs:{a:h,b:x},backend:t}),t.disposeIntermediateTensorInfo(x)}else h=Wa({inputs:{a:h,b:a},backend:t});t.disposeIntermediateTensorInfo(g)}if(d){let g=h;if(l==="NCHW"&&d==="prelu"&&i.shape.length===1&&i.shape[0]!==1){let x=We({inputs:{x:i},backend:t,attrs:{shape:[i.shape[0],1,1]}});h=Cp(t,h,d,x,f),t.disposeIntermediateTensorInfo(x)}else h=Cp(t,h,d,i,f);t.disposeIntermediateTensorInfo(g)}return h}var A$={kernelName:jo,backendName:"cpu",kernelFunc:zQ};function VQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=e,{strides:p,pad:u,dataFormat:l,dilations:c,dimRoundingMode:m,activation:d,leakyreluAlpha:f}=o,h=FI({inputs:{x:n,filter:s},backend:t,attrs:{strides:p,pad:u,dataFormat:l,dilations:c,dimRoundingMode:m}});if(a){let g=h;h=Wa({inputs:{a:h,b:a},backend:t}),t.disposeIntermediateTensorInfo(g)}if(d){let g=h;h=Cp(t,h,d,i,f),t.disposeIntermediateTensorInfo(g)}return h}var F$={kernelName:Xo,backendName:"cpu",kernelFunc:VQ};function WQ(r){let{inputs:e,backend:t}=r,{params:o,indices:n}=e,s=y.sizeFromShape(o.shape),a=n.shape,i=a[a.length-1],[p,u,l,c]=C.prepareAndValidate(o,n);if(u===0)return t.makeTensorInfo(p,o.dtype,[]);let m=t.data.get(n.dataId).values,d=t.bufferSync(o),f=Mf(m,d,o.dtype,u,i,l,c,o.shape,s);return t.makeTensorInfo(p,o.dtype,f.values)}var P$={kernelName:Kn,backendName:"cpu",kernelFunc:WQ};function UQ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,indices:s}=e,{axis:a,batchDims:i}=o;Q([n,s],"gatherV2");let p=y.parseAxisParam(a,n.shape)[0],u=t.data.get(s.dataId).values,l=n.shape[p];for(let S=0;S<u.length;++S){let k=u[S];y.assert(k<=l-1&&k>=0,()=>`GatherV2: the index value ${k} is not in [0, ${l-1}]`)}let c=i;i==null&&(c=0);let m=y.sizeFromShape(s.shape),d=C.segment_util.collectGatherOpShapeInfo(n,s,p,c),f=We({inputs:{x:n},backend:t,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),h=We({inputs:{x:s},backend:t,attrs:{shape:[d.batchSize,m/d.batchSize]}}),g=[d.batchSize,d.outerSize,m/d.batchSize,d.sliceSize],x=t.bufferSync(h),b=t.bufferSync(f),w=Lf(b,x,g);return t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(h),t.makeTensorInfo(d.outputShape,w.dtype,w.values)}var O$={kernelName:fa,backendName:"cpu",kernelFunc:UQ};function GQ(r){let{inputs:e,backend:t}=r,{input:o}=e,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],a=n/s,i=We({inputs:{x:o},backend:t,attrs:{shape:[a,s]}}),p=Zf(i,!0,t),u=We({inputs:{x:p},backend:t,attrs:{shape:o.shape}});return t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(p),u}var M$={kernelName:Yi,backendName:"cpu",kernelFunc:GQ};var HQ=Ie(qn,r=>Number.isFinite(r)?1:0,"bool"),L$={kernelName:qn,backendName:"cpu",kernelFunc:HQ};var KQ=Ie(jn,r=>Math.abs(r)===1/0?1:0,"bool"),B$={kernelName:jn,backendName:"cpu",kernelFunc:KQ};var qQ=Ie(Xn,r=>Number.isNaN(r)?1:0,"bool"),z$={kernelName:Xn,backendName:"cpu",kernelFunc:qQ};function jQ(r){let{backend:e,attrs:t}=r,{start:o,stop:n,num:s}=t,a=Bf(o,n,s);return e.makeTensorInfo([a.length],"float32",a)}var V$={kernelName:Qn,backendName:"cpu",kernelFunc:jQ};var XQ=Ie(Zn,r=>Math.log1p(r)),W$={kernelName:Zn,backendName:"cpu",kernelFunc:XQ};var YQ=Ve((r,e)=>r&&e),QQ=Qe(Jn,YQ,null,"bool"),U$={kernelName:Jn,backendName:"cpu",kernelFunc:QQ};var ZQ=Ie(es,r=>r?0:1,"bool"),G$={kernelName:es,backendName:"cpu",kernelFunc:ZQ};var JQ=Ve((r,e)=>r||e),eZ=Qe(ts,JQ,null,"bool"),H$={kernelName:ts,backendName:"cpu",kernelFunc:eZ};function tZ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{depthRadius:s,bias:a,alpha:i,beta:p}=o;Q(n,"LRN");let u=n.shape[3],l=u-1,c=t.data.get(n.dataId).values,m=y.sizeFromShape(n.shape),d=new Float32Array(m);function f(h){let g=h%u,x=h-g+Math.max(0,g-s),b=h-g+Math.min(g+s,l),w=0;for(;x<=b;x++){let S=c[x];w+=S*S}return w}for(let h=0;h<m;h++){let g=f(h),x=c[h]*Math.pow(a+i*g,-p);d[h]=x}return t.makeTensorInfo(n.shape,n.dtype,d)}var K$={kernelName:rs,backendName:"cpu",kernelFunc:tZ};function rZ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,y:s,dy:a}=e,{depthRadius:i,bias:p,alpha:u,beta:l}=o;Q(a,"LRNGrad");let c=y.sizeFromShape(a.shape),m=a.shape[3],d=t.data.get(a.dataId).values,f=t.data.get(n.dataId).values,h=t.data.get(s.dataId).values,g=new Float32Array(c),x=c;for(let b=0;b<x;b++){let w=b%m,S=b-w+Math.max(0,w-i),k=b-w+Math.min(m,w+i+1),T=0;for(let E=S;E<k;E++)T+=Math.pow(f[E],2);T=u*T+p;for(let E=S;E<k;E++){let R=-2*u*l*f[E]*h[b]/T;b===E&&(R+=Math.pow(T,-l)),R*=d[b],g[E]+=R}}return t.makeTensorInfo(a.shape,n.dtype,g)}var q$={kernelName:oi,backendName:"cpu",kernelFunc:rZ};function OI(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reductionIndices:s,keepDims:a}=o,i=t,p=n.shape,u=p.length,l=y.parseAxisParam(s,p),c=l,m=C.getAxesPermutation(c,u),d=i.data.get(n.dataId).values;if(m!=null){let S=new Array(u);for(let k=0;k<S.length;k++)S[k]=p[m[k]];d=Tl(d,p,n.dtype,m,S),c=C.getInnerMostAxes(c.length,u),p=S}Q(n,"max"),C.assertAxesAreInnerMostDims("max",c,u);let[f,h]=C.computeOutAndReduceShapes(p,c),g=y.sizeFromShape(h),x=zf(d,g,f,n.dtype),b=i.write(x,f,n.dtype),w=f;return a&&(w=C.expandShapeToKeepDim(f,l)),{dataId:b,shape:w,dtype:n.dtype}}var j$={kernelName:os,backendName:"cpu",kernelFunc:OI};function oZ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e;Q(n,"maxPool");let{filterSize:s,strides:a,pad:i,dimRoundingMode:p}=o,u=1;y.assert(C.eitherStridesOrDilationsAreOne(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);let l=C.computePool2DInfo(n.shape,s,a,u,i,p),c;if(l.filterWidth===1&&l.filterHeight===1&&y.arraysEqual(l.inShape,l.outShape))c=fr({inputs:{x:n},backend:t});else{let m=t.data.get(n.dataId).values,d=y.computeStrides(n.shape),f=El(m,n.shape,n.dtype,d,l,"max");c=t.makeTensorInfo(l.outShape,n.dtype,f.values)}return c}var X$={kernelName:ns,backendName:"cpu",kernelFunc:oZ};function nZ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:a,pad:i,dimRoundingMode:p,dataFormat:u}=o;Q(n,"maxPool3d");let l=C.computePool3DInfo(n.shape,s,a,1,i,p,u),c=t.data.get(n.dataId).values,m=Qf(c,n.shape,n.dtype,y.computeStrides(n.shape),l,"max");return t.makeTensorInfo(m.shape,"float32",m.values)}var Y$={kernelName:ha,backendName:"cpu",kernelFunc:nZ};function sZ(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=o;Q([n,s],"maxPool3DGrad");let l=C.computePool3DInfo(s.shape,a,i,1,p,u),c=t.bufferSync(s),m=HE(c,l),d=l.strideDepth,f=l.strideHeight,h=l.strideWidth,g=l.dilationDepth,x=l.dilationHeight,b=l.dilationWidth,w=l.effectiveFilterDepth,S=l.effectiveFilterHeight,k=l.effectiveFilterWidth,T=w-1-l.padInfo.front,E=k-1-l.padInfo.left,R=S-1-l.padInfo.top,D=ie(s.shape,"float32"),F=t.bufferSync(n);for(let O=0;O<l.batchSize;++O)for(let M=0;M<l.inChannels;++M)for(let L=0;L<l.inDepth;++L)for(let B=0;B<l.inHeight;++B)for(let z=0;z<l.inWidth;++z){let U=L-T,j=B-R,q=z-E,Y=0;for(let J=0;J<w;J+=g){let re=(U+J)/d;if(!(re<0||re>=l.outDepth||Math.floor(re)!==re))for(let ne=0;ne<S;ne+=x){let ee=(j+ne)/f;if(!(ee<0||ee>=l.outHeight||Math.floor(ee)!==ee))for(let oe=0;oe<k;oe+=b){let ue=(q+oe)/h;if(ue<0||ue>=l.outWidth||Math.floor(ue)!==ue)continue;let me=w*S*k-1-m.get(O,re,ee,ue,M),be=J*S*k+ne*k+oe,_e=me===be?1:0;if(_e===0)continue;let ve=F.get(O,re,ee,ue,M);Y+=ve*_e}}}D.set(Y,O,L,B,z,M)}return t.makeTensorInfo(D.shape,D.dtype,D.values)}var Q$={kernelName:Ji,backendName:"cpu",kernelFunc:sZ};function aZ(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s,output:a}=e,i=s;Q([s,a],"maxPoolGrad");let{filterSize:p,strides:u,pad:l,dimRoundingMode:c}=o,m=C.computePool2DInfo(i.shape,p,u,1,l,c),d=t.data.get(i.dataId).values,f=ie(m.outShape,i.dtype,Yf(d,i.shape,i.dtype,m).values),h=m.strideHeight,g=m.strideWidth,x=m.dilationHeight,b=m.dilationWidth,w=m.effectiveFilterHeight,S=m.effectiveFilterWidth,k=S-1-m.padInfo.left,T=w-1-m.padInfo.top,E=ie(i.shape,"float32"),R=t.data.get(n.dataId).values,D=ie(n.shape,"float32",R);for(let F=0;F<m.batchSize;++F)for(let O=0;O<m.inChannels;++O)for(let M=0;M<m.inHeight;++M)for(let L=0;L<m.inWidth;++L){let B=M-T,z=L-k,U=0;for(let j=0;j<w;j+=x){let q=(B+j)/h;if(!(q<0||q>=m.outHeight||Math.floor(q)!==q))for(let Y=0;Y<S;Y+=b){let J=(z+Y)/g;if(J<0||J>=m.outWidth||Math.floor(J)!==J)continue;let re=w*S-1-f.get(F,q,J,O),ne=j*S+Y,ee=re===ne?1:0;if(ee===0)continue;let oe=D.get(F,q,J,O);U+=oe*ee}}E.set(U,F,M,L,O)}return t.makeTensorInfo(E.shape,E.dtype,E.values)}var Z$={kernelName:Zi,backendName:"cpu",kernelFunc:aZ};function J$(r,e,t,o,n){let s=y.computeStrides(e),a=El(r,e,t,s,n,"max"),i=Yf(r,e,t,n,!0,o);return[a.values,i.values]}var eR={kernelName:ga,backendName:"cpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{x:o}=r,{filterSize:n,strides:s,pad:a,includeBatchInIndex:i}=e,p=t;Q(o,"MaxPoolWithArgmax");let u=p.data.get(o.dataId).values,l=C.computePool2DInfo(o.shape,n,s,[1,1],a),[c,m]=J$(u,o.shape,o.dtype,i,l),d=p.write(c,l.outShape,o.dtype),f=p.write(m,l.outShape,o.dtype);return[{dataId:d,shape:l.outShape,dtype:o.dtype},{dataId:f,shape:l.outShape,dtype:"int32"}]}};function iZ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o,i=y.parseAxisParam(s,n.shape),u=C.computeOutAndReduceShapes(n.shape,i)[1],l=y.sizeFromShape(u),c=[],m=t.makeTensorInfo([],"float32",new Float32Array([l]));c.push(m);let d=rn({inputs:{x:n},backend:t,attrs:{dtype:"float32"}});c.push(d);let f=Yc({inputs:{a:d,b:m},backend:t});c.push(f);let h=Ii({inputs:{x:f},backend:t,attrs:{axis:s,keepDims:a}});return c.forEach(g=>t.disposeIntermediateTensorInfo(g)),h}var tR={kernelName:ss,backendName:"cpu",kernelFunc:iZ};function uZ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o;Q(n,"min");let i=y.parseAxisParam(s,n.shape),p=i,u=C.getAxesPermutation(p,n.shape.length),l=n;u!=null&&(l=vt({inputs:{x:n},backend:t,attrs:{perm:u}}),p=C.getInnerMostAxes(p.length,n.shape.length)),C.assertAxesAreInnerMostDims("min",p,l.shape.length);let[c,m]=C.computeOutAndReduceShapes(l.shape,p),d=y.sizeFromShape(m),f=y.makeZerosTypedArray(y.sizeFromShape(c),l.dtype),h=t.data.get(l.dataId).values;for(let x=0;x<f.length;++x){let b=x*d,w=h[b];for(let S=0;S<d;++S){let k=h[b+S];(Number.isNaN(k)||k<w)&&(w=k)}f[x]=w}u!=null&&t.disposeIntermediateTensorInfo(l);let g=t.makeTensorInfo(c,l.dtype,f);if(a){let x=C.expandShapeToKeepDim(c,i),b=We({inputs:{x:g},backend:t,attrs:{shape:x}});return t.disposeIntermediateTensorInfo(g),b}return g}var rR={kernelName:as,backendName:"cpu",kernelFunc:uZ};function pZ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{paddings:s,mode:a}=o;Q(n,"mirrorPad");let i=s.map((w,S)=>w[0]+n.shape[S]+w[1]),p=s.map(w=>w[0]),u=s.map((w,S)=>w[0]+n.shape[S]),l=a==="reflect"?0:1,c=t.data.get(n.dataId).values,m=n.shape.length,d=y.computeStrides(n.shape),f=y.sizeFromShape(i),h=i.length,g=y.computeStrides(i),x=y.getTypedArrayFromDType(n.dtype,f);for(let w=0;w<f;w++){let S=y.indexToLoc(w,h,g);for(let T=0;T<h;T++)S[T]<p[T]?S[T]=p[T]*2-S[T]-l:S[T]>=u[T]&&(S[T]=(u[T]-1)*2-S[T]+l);S=S.map((T,E)=>T-p[E]);let k=y.locToIndex(S,m,d);x[w]=c[k]}return{dataId:t.write(x,i,n.dtype),shape:i,dtype:n.dtype}}var oR={kernelName:is,backendName:"cpu",kernelFunc:pZ};var lZ=Ve((r,e)=>{let t=r%e;return r<0&&e<0||r>=0&&e>=0?t:(t+e)%e}),cZ=Qe(us,lZ),nR={kernelName:us,backendName:"cpu",kernelFunc:cZ};var aR=Kp(iS());function MI(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{dim:s}=o,a=n.shape.length,i=s;if(i===-1&&(i=a-1),i!==a-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${a} and dim was ${i}`);let p=y.parseAxisParam([i],n.shape),u=OI({inputs:{x:n},backend:t,attrs:{reductionIndices:p,keepDims:!1}}),l=C.expandShapeToKeepDim(u.shape,p),c=We({inputs:{x:u},backend:t,attrs:{shape:l}}),m=jc({inputs:{a:n,b:c},backend:t}),d=aI({inputs:{x:m},backend:t}),f=Ii({inputs:{x:d},backend:t,attrs:{axis:p,keepDims:!1}}),h=We({inputs:{x:f},backend:t,attrs:{shape:l}}),g=Yc({inputs:{a:d,b:h},backend:t});return t.disposeIntermediateTensorInfo(u),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(h),g}var sR={kernelName:Fs,backendName:"cpu",kernelFunc:MI};function mZ(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{numSamples:s,seed:a,normalized:i}=o;Q(n,"multinomial");let p=i?n:MI({inputs:{logits:n},backend:t,attrs:{dim:-1}}),u=p.shape[0],l=p.shape[1],c=t.data.get(p.dataId).values,m=[u,s],d=y.makeZerosTypedArray(y.sizeFromShape(m),"int32");for(let f=0;f<u;++f){let h=f*l,g=new Float32Array(l-1);g[0]=c[h];for(let w=1;w<g.length;++w)g[w]=g[w-1]+c[h+w];let x=aR.alea(a.toString()),b=f*s;for(let w=0;w<s;++w){let S=x();d[b+w]=g.length;for(let k=0;k<g.length;k++)if(S<g[k]){d[b+w]=k;break}}}return i||t.disposeIntermediateTensorInfo(p),t.makeTensorInfo(m,"int32",d)}var iR={kernelName:ps,backendName:"cpu",kernelFunc:mZ};var dZ=Ut.nonMaxSuppressionV3Impl;function fZ(r){let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p}=o;Q(n,"NonMaxSuppression");let u=t.data.get(n.dataId).values,l=t.data.get(s.dataId).values,{selectedIndices:c}=dZ(u,l,a,i,p);return t.makeTensorInfo([c.length],"int32",new Int32Array(c))}var uR={kernelName:cs,backendName:"cpu",kernelFunc:fZ};var hZ=Ut.nonMaxSuppressionV4Impl;function gZ(r){let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p,padToMaxOutputSize:u}=o;Q(n,"NonMaxSuppressionPadded");let l=t.data.get(n.dataId).values,c=t.data.get(s.dataId).values,{selectedIndices:m,validOutputs:d}=hZ(l,c,a,i,p,u);return[t.makeTensorInfo([m.length],"int32",new Int32Array(m)),t.makeTensorInfo([],"int32",new Int32Array([d]))]}var pR={kernelName:ni,backendName:"cpu",kernelFunc:gZ};var xZ=Ut.nonMaxSuppressionV5Impl;function yZ(r){let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p,softNmsSigma:u}=o;Q(n,"NonMaxSuppressionWithScore");let l=t.data.get(n.dataId).values,c=t.data.get(s.dataId).values,m=a,d=i,f=p,h=u,{selectedIndices:g,selectedScores:x}=xZ(l,c,m,d,f,h);return[t.makeTensorInfo([g.length],"int32",new Int32Array(g)),t.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var lR={kernelName:ms,backendName:"cpu",kernelFunc:yZ};function bZ(r){let{inputs:e,backend:t,attrs:o}=r,{indices:n}=e,{dtype:s,depth:a,onValue:i,offValue:p}=o;Q(n,"oneHot");let u=y.sizeFromShape(n.shape),l=new Float32Array(u*a);l.fill(p);let c=t.data.get(n.dataId).values;for(let m=0;m<u;++m)c[m]>=0&&c[m]<a&&(l[m*a+c[m]]=i);return t.makeTensorInfo([...n.shape,a],s,l)}var cR={kernelName:ds,backendName:"cpu",kernelFunc:bZ};function Jc(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="string")throw new Error("zerosLike is not supported for string tensors");if(o.dtype==="complex64"){let n=tn({inputs:{input:o},backend:t}),s=Jc({inputs:{x:n},backend:t}),a=Ua({inputs:{input:o},backend:t}),i=Jc({inputs:{x:a},backend:t}),p=qt({inputs:{real:s,imag:i},backend:t});return t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(i),p}else return Zc({backend:t,attrs:{shape:o.shape,value:0,dtype:o.dtype}})}var mR={kernelName:_a,backendName:"cpu",kernelFunc:Jc};function dR(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="string")throw new Error("onesLike is not supported for string tensors");if(o.dtype==="complex64"){let n=tn({inputs:{input:o},backend:t}),s=dR({inputs:{x:n},backend:t}),a=Ua({inputs:{input:o},backend:t}),i=Jc({inputs:{x:a},backend:t}),p=qt({inputs:{real:s,imag:i},backend:t});return t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(i),p}else return Zc({backend:t,attrs:{shape:o.shape,value:1,dtype:o.dtype}})}var fR={kernelName:xa,backendName:"cpu",kernelFunc:dR};function LI(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o;if(e.length===1)return $l({inputs:{input:e[0]},backend:t,attrs:{dim:n}});let s=e[0].shape,a=e[0].dtype;e.forEach(l=>{y.assertShapesMatch(s,l.shape,"All tensors passed to stack must have matching shapes"),y.assert(a===l.dtype,()=>"All tensors passed to stack must have matching dtypes")});let i=[],p=e.map(l=>{let c=$l({inputs:{input:l},backend:t,attrs:{dim:n}});return i.push(c),c}),u=Su({inputs:p,backend:t,attrs:{axis:n}});return i.forEach(l=>t.disposeIntermediateTensorInfo(l)),u}var hR={kernelName:ya,backendName:"cpu",kernelFunc:LI};function CZ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{paddings:s,constantValue:a}=o;Q(n,"pad");let i=s.map((b,w)=>b[0]+n.shape[w]+b[1]),p=s.map(b=>b[0]),u=t.data.get(n.dataId).values,l=y.sizeFromShape(n.shape),c=n.shape.length,m=y.computeStrides(n.shape),d=y.sizeFromShape(i),f=i.length,h=y.computeStrides(i),g=y.getTypedArrayFromDType(n.dtype,d);a!==0&&g.fill(a);for(let b=0;b<l;b++){let S=y.indexToLoc(b,c,m).map((T,E)=>T+p[E]),k=y.locToIndex(S,f,h);g[k]=u[b]}return{dataId:t.write(g,i,n.dtype),shape:i,dtype:n.dtype}}var Jf={kernelName:fs,backendName:"cpu",kernelFunc:CZ};var wZ=Ve((r,e)=>Math.pow(r,e)),SZ=Qe(hs,wZ),gR={kernelName:hs,backendName:"cpu",kernelFunc:SZ};function IZ(r){let{inputs:e,backend:t,attrs:o}=r,{paramsNestedSplits:n,paramsDenseValues:s,indices:a}=e,{outputRaggedRank:i}=o,p=n.map(x=>t.data.get(x.dataId).values),u=n.map(x=>x.shape),l=t.data.get(s.dataId).values,c=t.data.get(a.dataId).values,[m,d,f]=Vf(p,u,l,s.shape,s.dtype,c,a.shape,i),h=m.map(x=>t.makeTensorInfo([x.length],"int32",x)),g=t.makeTensorInfo(f,s.dtype,d);return h.concat([g])}var xR={kernelName:Qp,backendName:"cpu",kernelFunc:IZ};function vZ(r){let{inputs:e,backend:t}=r,{starts:o,limits:n,deltas:s}=e,a=t.data.get(o.dataId).values,i=t.data.get(n.dataId).values,p=t.data.get(s.dataId).values,[u,l]=Wf(a,o.shape,o.dtype,i,n.shape,p,s.shape),c=t.makeTensorInfo([u.length],"int32",u),m=t.makeTensorInfo([l.length],o.dtype,l);return[c,m]}var yR={kernelName:Zp,backendName:"cpu",kernelFunc:vZ};function kZ(r){let{inputs:e,backend:t,attrs:o}=r,{shape:n,values:s,defaultValue:a,rowPartitionTensors:i}=e,{rowPartitionTypes:p}=o,u=t.data.get(n.dataId).values,l=t.data.get(s.dataId).values,c=t.data.get(a.dataId).values,m=i.map(g=>t.data.get(g.dataId).values),d=i.map(g=>g.shape),[f,h]=Uf(u,n.shape,l,s.shape,s.dtype,c,a.shape,m,d,p);return t.makeTensorInfo(f,s.dtype,h)}var bR={kernelName:Jp,backendName:"cpu",kernelFunc:kZ};function NZ(r){let{backend:e,attrs:t}=r,{start:o,stop:n,dtype:s,step:a}=t,i=fp(o,n,a,s);return e.makeTensorInfo([i.length],s,i)}var CR={kernelName:ba,backendName:"cpu",kernelFunc:NZ};var TZ=Ie(xs,r=>1/r),wR={kernelName:xs,backendName:"cpu",kernelFunc:TZ};function _Z(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:a,size:i}=o;Q(n,"resizeBilinear");let p=y.computeStrides(n.shape),[u,l]=i,[c,m,d,f]=n.shape,h=t.data.get(n.dataId).values,g=new Float32Array(y.sizeFromShape([c,u,l,f])),x=[s&&u>1?m-1:m,s&&l>1?d-1:d],b=[s&&u>1?u-1:u,s&&l>1?l-1:l],w=0,S=x[0]/b[0],k=x[1]/b[1];for(let T=0;T<c;T++)for(let E=0;E<u;E++){let R;a?R=S*(E+.5)-.5:R=S*E;let D=Math.max(0,Math.floor(R)),F=R-D,O=Math.min(m-1,Math.ceil(R)),M=T*p[0]+D*p[1],L=T*p[0]+O*p[1];for(let B=0;B<l;B++){let z;a?z=k*(B+.5)-.5:z=k*B;let U=Math.max(0,Math.floor(z)),j=z-U,q=Math.min(d-1,Math.ceil(z)),Y=M+U*p[2],J=L+U*p[2],re=M+q*p[2],ne=L+q*p[2];for(let ee=0;ee<f;ee++){let oe=h[Y+ee],ue=h[J+ee],me=h[re+ee],be=h[ne+ee],_e=oe+(me-oe)*j,ve=ue+(be-ue)*j,Fe=_e+(ve-_e)*F;g[w++]=Fe}}}return t.makeTensorInfo([c,u,l,f],"float32",g)}var SR={kernelName:Cs,backendName:"cpu",kernelFunc:_Z};function EZ(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:a}=o;Q([s,n],"resizeBilinearGrad");let i=y.computeStrides(n.shape),[p,u,l,c]=n.shape,[,m,d]=s.shape,f=new Float32Array(p*u*l*c),h=[a&&m>1?u-1:u,a&&d>1?l-1:l],g=[a&&m>1?m-1:m,a&&d>1?d-1:d],x=h[0]/g[0],b=h[1]/g[1],w=t.data.get(s.dataId).values,S=0;for(let k=0;k<p;k++){let T=k*i[0];for(let E=0;E<m;E++){let R=E*x,D=Math.floor(R),F=Math.min(Math.ceil(R),u-1),O=T+D*i[1],M=T+F*i[1],L=R-D,B=1-L;for(let z=0;z<d;z++){let U=z*b,j=Math.floor(U),q=Math.min(Math.ceil(U),l-1),Y=U-j,J=1-Y,re=O+j*i[2],ne=O+q*i[2],ee=M+j*i[2],oe=M+q*i[2],ue=B*J,me=B*Y,be=L*J,_e=L*Y;for(let ve=0;ve<c;ve++){let Fe=w[S++];f[re+ve]+=Fe*ue,f[ne+ve]+=Fe*me,f[ee+ve]+=Fe*be,f[oe+ve]+=Fe*_e}}}}return t.makeTensorInfo([p,l,u,c],"float32",f)}var IR={kernelName:ii,backendName:"cpu",kernelFunc:EZ};function $Z(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:a,size:i}=o;Q(n,"resizeNearestNeighbor");let p=y.computeStrides(n.shape),[u,l]=i,[c,m,d,f]=n.shape,h=t.data.get(n.dataId).values,g=new Float32Array(c*u*l*f),x=[s&&u>1?m-1:m,s&&l>1?d-1:d],b=[s&&u>1?u-1:u,s&&l>1?l-1:l],w=x[0]/b[0],S=x[1]/b[1],k=0;for(let T=0;T<c;T++){let E=T*p[0];for(let R=0;R<u;R++){let D=a?w*(R+.5):w*R,F=Math.min(m-1,s?Math.round(D):Math.floor(D));a&&(F=Math.max(0,F));let O=E+F*p[1];for(let M=0;M<l;M++){let L=a?S*(M+.5):S*M,B=Math.min(d-1,s?Math.round(L):Math.floor(L));a&&(B=Math.max(0,B));let z=O+B*p[2];for(let U=0;U<f;U++){let j=h[z+U];g[k++]=j}}}}return t.makeTensorInfo([c,u,l,f],n.dtype,g)}var vR={kernelName:bs,backendName:"cpu",kernelFunc:$Z};function RZ(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:a}=o;Q([s,n],"resizeNearestNeighborGrad");let i=y.computeStrides(n.shape),p=y.computeStrides(s.shape),[u,l,c,m]=n.shape,[,d,f]=s.shape,h=new Float32Array(u*l*c*m),g=t.data.get(s.dataId).values,x=[a&&d>1?l-1:l,a&&f>1?c-1:c],b=[a&&d>1?d-1:d,a&&f>1?f-1:f],w=x[0]/b[0],S=x[1]/b[1],k=1/w,T=1/S,E=Math.ceil(k)*2+2,R=Math.ceil(T)*2+2;for(let D=0;D<u;D++){let F=D*i[0];for(let O=0;O<l;O++){let M=F+O*i[1],L=Math.floor(O*k),B=Math.floor(L-E/2);for(let z=0;z<c;z++){let U=M+z*i[2],j=Math.floor(z*T),q=Math.floor(j-R/2);for(let Y=0;Y<m;Y++){let J=0;for(let re=0;re<E;re++){let ne=re+B;if(ne<0||ne>=d)continue;let ee=F+ne*p[1],oe=ne*w,ue=Math.min(l-1,a?Math.round(oe):Math.floor(oe));if(O===ue)for(let me=0;me<R;me++){let be=me+q;if(be<0||be>=f)continue;let _e=ee+be*p[2],ve=be*S,Fe=Math.min(c-1,a?Math.round(ve):Math.floor(ve));z===Fe&&(J+=g[_e+Y])}}h[U+Y]=J}}}}return t.makeTensorInfo(n.shape,n.dtype,h)}var kR={kernelName:ai,backendName:"cpu",kernelFunc:RZ};function DZ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dims:s}=o;Q(n,"reverse");let a=n.shape.length,i=y.parseAxisParam(s,n.shape);if(a===0)return fr({inputs:{x:n},backend:t});let p=new Ge(n.shape,n.dtype),u=t.bufferSync(n);for(let l=0;l<p.size;l++){let c=p.indexToLoc(l),m=c.slice();i.forEach(d=>m[d]=n.shape[d]-1-m[d]),p.set(u.get(...m),...c)}return t.makeTensorInfo(p.shape,p.dtype,p.values)}var NR={kernelName:Ss,backendName:"cpu",kernelFunc:DZ};var TR={kernelName:Vs,backendName:"cpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{image:o}=r,{radians:n,fillValue:s,center:a}=e,i=t,p=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[u,l,c,m]=o.shape,[d,f]=C.getImageCenter(a,l,c),h=255,g=Math.sin(n),x=Math.cos(n),b=i.data.get(o.dataId).values;for(let S=0;S<u;S++){let k=S*c*l*m;for(let T=0;T<l;T++){let E=T*(c*m);for(let R=0;R<c;R++){let D=R*m;for(let F=0;F<m;F++){let O=[u,T,R,F],M=O[2],L=O[1],B=(M-d)*x-(L-f)*g,z=(M-d)*g+(L-f)*x;B=Math.round(B+d),z=Math.round(z+f);let U=s;if(typeof s!="number"&&(F===3?U=h:U=s[F]),B>=0&&B<c&&z>=0&&z<l){let q=z*(c*m),Y=B*m,J=k+q+Y+F;U=b[J]}let j=k+E+D+F;p[j]=U}}}}return{dataId:i.write(p,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var AZ=Ie(Is,r=>{let e=Math.floor(r);return r-e<.5?Math.floor(r):r-e>.5?Math.ceil(r):e%2===0?e:e+1}),_R={kernelName:Is,backendName:"cpu",kernelFunc:AZ};function FZ(r){let{inputs:e,backend:t,attrs:o}=r,{indices:n,updates:s}=e,{shape:a}=o,{sliceRank:i,numUpdates:p,sliceSize:u,strides:l,outputSize:c}=C.calculateShapes(s,n,a),m=!0,d=t.bufferSync(n),f=t.bufferSync(s),h=Xs(d,f,a,c,u,p,i,l,0,m);return t.makeTensorInfo(a,h.dtype,h.values)}var ER={kernelName:vs,backendName:"cpu",kernelFunc:FZ};function PZ(r,e){let t=0,o=r.length,n=0;for(;t<o;)n=Math.floor((t+o)/2),r[n]<e?t=n+1:o=n;return o}function OZ(r,e){let t=0,o=r.length,n=0;for(;t<o;)n=Math.floor((t+o)/2),r[n]<=e?t=n+1:o=n;return o}function $R(r,e,t,o,n,s){let a=y.getArrayFromDType("int32",t*n);for(let i=0;i<t;++i){let p=r.slice(i*o,(i+1)*o),u=i*n;for(let l=0;l<n;++l)a[u+l]=s==="left"?PZ(p,e[l+u]):OZ(p,e[l+u])}return a}function MZ(r){let{inputs:e,backend:t,attrs:o}=r,{sortedSequence:n,values:s}=e,{side:a}=o,i=t.data.get(n.dataId).values,p=t.data.get(s.dataId).values,u=$R(i,p,n.shape[0],n.shape[1],s.shape[1],a);return t.makeTensorInfo(s.shape,"int32",u)}var RR={kernelName:Ns,backendName:"cpu",kernelFunc:MZ};function LZ(r){let{inputs:e,backend:t}=r,{condition:o,t:n,e:s}=e;Q([o,n,s],"select");let a=o.shape.length,i=t.data.get(o.dataId).values,p=t.data.get(n.dataId).values,u=t.data.get(s.dataId).values,l=pt(n.dtype,s.dtype),c=y.makeZerosTypedArray(y.sizeFromShape(n.shape),l),m=0,d=a===0||a>1||n.shape.length===1?1:y.sizeFromShape(n.shape.slice(1));for(let f=0;f<i.length;f++)for(let h=0;h<d;h++)i[f]===1?c[m++]=p[f]:c[m++]=u[f];return t.makeTensorInfo(n.shape,l,c)}var DR={kernelName:wa,backendName:"cpu",kernelFunc:LZ};var BZ=C.SELU_SCALEALPHA,zZ=C.SELU_SCALE,VZ=Ie(Ts,r=>r>=0?zZ*r:BZ*(Math.exp(r)-1)),AR={kernelName:Ts,backendName:"cpu",kernelFunc:VZ};var WZ=Ie(Rs,r=>r<0?-1:r>0?1:0),FR={kernelName:Rs,backendName:"cpu",kernelFunc:WZ};var UZ=Ie(Es,r=>Math.sin(r)),PR={kernelName:Es,backendName:"cpu",kernelFunc:UZ};var GZ=Ie($s,r=>Math.sinh(r)),OR={kernelName:$s,backendName:"cpu",kernelFunc:GZ};var HZ=11920928955078125e-23,MR=Math.log(HZ)+2,KZ=Ie(Ds,r=>{let e=r>-MR,t=r<MR,o=Math.exp(r),n;return t?n=o:e?n=r:n=Math.log(1+o),n}),LR={kernelName:Ds,backendName:"cpu",kernelFunc:KZ};function qZ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,paddings:a}=o;Q([n],"spaceToBatchND");let i=y.sizeFromShape(s),p=[[0,0]];p.push(...a);for(let T=1+s.length;T<n.shape.length;++T)p.push([0,0]);let u=Jf.kernelFunc({inputs:{x:n},backend:t,attrs:{paddings:p,constantValue:0}}),l=C.getReshaped(u.shape,s,i,!1),c=C.getPermuted(l.length,s.length,!1),m=C.getReshapedPermuted(u.shape,s,i,!1),h=We({inputs:{x:u},backend:t,attrs:{shape:l}}),b=vt({inputs:{x:h},backend:t,attrs:{perm:c}}),k=We({inputs:{x:b},backend:t,attrs:{shape:m}});return t.disposeIntermediateTensorInfo(u),t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(b),k}var BR={kernelName:Sa,backendName:"cpu",kernelFunc:qZ};function jZ(r){let{inputs:e,backend:t}=r,{indices:o,values:n,denseShape:s,defaultValue:a}=e;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
        ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
        ${n.shape}`);if(a.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${a.shape}`);let i=t.data.get(o.dataId).values,p=t.data.get(n.dataId).values,u=t.data.get(s.dataId).values,l=t.data.get(a.dataId).values[0],[c,m,d,f,h]=Gf(i,o.shape,o.dtype,p,n.dtype,u,l);return[t.makeTensorInfo(m,o.dtype,c),t.makeTensorInfo([m[0]],n.dtype,d),t.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(g=>Number(g)))),t.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}var zR={kernelName:eu,backendName:"cpu",kernelFunc:jZ};function XZ(r){let{inputs:e,backend:t}=r,{inputIndices:o,inputShape:n,newShape:s}=e;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let a=Array.from(t.data.get(n.dataId).values),i=t.data.get(o.dataId).values,p=Array.from(t.data.get(s.dataId).values),[u,l,c]=Hf(i,o.shape,o.dtype,a,p);return[t.makeTensorInfo(l,o.dtype,u),t.makeTensorInfo([c.length],s.dtype,new Int32Array(c))]}var VR={kernelName:ui,backendName:"cpu",kernelFunc:XZ};function YZ(r){let{inputs:e,backend:t}=r,{data:o,indices:n,segmentIds:s}=e;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
          ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
          ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let a=t.data.get(o.dataId).values,i=t.data.get(n.dataId).values,p=t.data.get(s.dataId).values,[u,l]=_l(a,o.shape,o.dtype,i,p,!0);return t.makeTensorInfo(l,o.dtype,u)}var WR={kernelName:va,backendName:"cpu",kernelFunc:YZ};function QZ(r){let{inputs:e,backend:t}=r,{data:o,indices:n,segmentIds:s}=e;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
         ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
         ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let a=t.data.get(o.dataId).values,i=t.data.get(n.dataId).values,p=t.data.get(s.dataId).values,[u,l]=_l(a,o.shape,o.dtype,i,p);return t.makeTensorInfo(l,o.dtype,u)}var UR={kernelName:ka,backendName:"cpu",kernelFunc:QZ};function ZZ(r){let{inputs:e,backend:t,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:a}=e,{outputShape:i}=o,{sliceRank:p,numUpdates:u,sliceSize:l,strides:c,outputSize:m}=C.calculateShapes(s,n,i),d=!1,f=t.bufferSync(n),h;switch(s.dtype){case"bool":{let g=t.bufferSync(s),x=!!t.data.get(a.dataId).values[0];h=Xs(f,g,i,m,l,u,p,c,x,d);break}case"float32":{let g=t.bufferSync(s),x=t.data.get(a.dataId).values[0];h=Xs(f,g,i,m,l,u,p,c,x,d);break}case"int32":{let g=t.bufferSync(s),x=t.data.get(a.dataId).values[0];h=Xs(f,g,i,m,l,u,p,c,x,d);break}case"string":{let g=t.bufferSync(s),x=y.decodeString(t.data.get(a.dataId).values[0]);h=Xs(f,g,i,m,l,u,p,c,x,d);break}default:throw new Error(`Unsupported type ${s.dtype}`)}return t.makeTensorInfo(i,h.dtype,h.values)}var GR={kernelName:Ps,backendName:"cpu",kernelFunc:ZZ};function JZ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{numOrSizeSplits:s,axis:a}=o,i=y.parseAxisParam(a,n.shape)[0],p=C.prepareSplitSize(n,s,i),u=new Array(n.shape.length).fill(0),l=n.shape.slice();return p.map(c=>{let m=[...l];m[i]=c;let d=nn({inputs:{x:n},backend:t,attrs:{begin:u,size:m}});return u[i]+=c,d})}var HR={kernelName:Ia,backendName:"cpu",kernelFunc:JZ};var KR={kernelName:tu,backendName:"cpu",kernelFunc:({inputs:r,backend:e})=>{let{x:t}=r,o=e;Q(t,"square");let n=o.data.get(t.dataId).values,s=new Float32Array(n.length);for(let i=0;i<n.length;++i){let p=n[i];s[i]=p*p}return{dataId:o.write(s,t.shape,t.dtype),shape:t.shape,dtype:t.dtype}}};var e9=Ie(Ko,(r,e)=>{let t=e;return isNaN(r)?NaN:r>0?1:t.alpha}),qR={kernelName:Ko,backendName:"cpu",kernelFunc:e9};function t9(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,end:a,strides:i,beginMask:p,endMask:u,ellipsisMask:l,newAxisMask:c,shrinkAxisMask:m}=o;Q(n,"stridedSlice");let{finalShapeSparse:d,finalShape:f,isIdentity:h,sliceDim0:g,isSimpleSlice:x,begin:b,end:w,strides:S}=nt.sliceInfo(n.shape,s,a,i,p,u,l,c,m),k;if(h)k=We({inputs:{x:n},backend:t,attrs:{shape:f}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let T=nt.computeOutShape(b,w,S),E=nn({inputs:{x:n},backend:t,attrs:{begin:b,size:T}});k=We({inputs:{x:E},backend:t,attrs:{shape:f}}),t.disposeIntermediateTensorInfo(E)}else{let T=t.bufferSync(n),E=Kf(d,T,S,b);k=t.makeTensorInfo(f,E.dtype,E.values)}return k}var jR={kernelName:Os,backendName:"cpu",kernelFunc:t9};function r9(r){let{inputs:e,backend:t,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:a,rightPad:i,padWidth:p,preserveShortSequences:u}=o,{data:l,dataSplits:c}=e,m=t.data.get(l.dataId).values,d=t.data.get(c.dataId).values,[f,h]=gp(m,d,n,s,a,i,p,u);return[t.makeTensorInfo([f.length],"string",f),t.makeTensorInfo(c.shape,"int32",h)]}var XR={kernelName:Na,backendName:"cpu",kernelFunc:r9};function o9(r){let{inputs:e,backend:t,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:a}=e;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(a.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);let i=t.data.get(s.dataId).values,p=t.data.get(a.dataId).values[0],[u,l,c]=xp(i,p,n),m=l.length;return[t.makeTensorInfo([m,2],"int32",u),t.makeTensorInfo([m],"string",l),t.makeTensorInfo([2],"int32",new Int32Array(c))]}var YR={kernelName:ru,backendName:"cpu",kernelFunc:o9};function n9(r){let{inputs:e,backend:t,attrs:o}=r,{numBuckets:n}=o,{input:s}=e;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let a=t.data.get(s.dataId).values,i=yp(a,n);return t.makeTensorInfo(s.shape,"int32",i)}var QR={kernelName:ou,backendName:"cpu",kernelFunc:n9};var s9=Ie(Ms,r=>Math.tan(r)),ZR={kernelName:Ms,backendName:"cpu",kernelFunc:s9};var a9=Ie(Ls,r=>Math.tanh(r)),JR={kernelName:Ls,backendName:"cpu",kernelFunc:a9};function i9(r){let{inputs:e,backend:t}=r,{tensor:o,indices:n,updates:s}=e,{sliceRank:a,numUpdates:i,sliceSize:p,strides:u,outputSize:l}=C.calculateShapes(s,n,o.shape),c=!1,m=t.bufferSync(n),d=t.bufferSync(s),f=t.bufferSync(o),h=Xs(m,d,o.shape,l,p,i,a,u,f,c);return t.makeTensorInfo(o.shape,h.dtype,h.values)}var eD={kernelName:ks,backendName:"cpu",kernelFunc:i9};function u9(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reps:s}=o;Q(n,"tile");let a=qf(t.bufferSync(n),s);return t.makeTensorInfo(a.shape,a.dtype,a.values)}var tD={kernelName:Mo,backendName:"cpu",kernelFunc:u9};function p9(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{k:s,sorted:a}=o;Q(n,"topk");let i=t.data.get(n.dataId).values,[p,u]=jf(i,n.shape,n.dtype,s,a);return[t.makeTensorInfo(p.shape,p.dtype,p.values),t.makeTensorInfo(u.shape,u.dtype,u.values)]}var rD={kernelName:Bs,backendName:"cpu",kernelFunc:p9};function l9(r){let{inputs:e,attrs:t,backend:o}=r,{image:n,transforms:s}=e,{interpolation:a,fillMode:i,fillValue:p,outputShape:u}=t,[l,c,m,d]=n.shape,[f,h]=u!=null?u:[c,m],g=[l,f,h,d],x=y.computeStrides(n.shape),b=x[0],w=x[1],S=x[2],k=y.computeStrides(g),T=k[0],E=k[1],R=k[2],D=y.getTypedArrayFromDType(n.dtype,y.sizeFromShape(g));D.fill(p);let F=o.data.get(n.dataId).values,O=o.data.get(s.dataId).values;for(let L=0;L<l;++L){let B=s.shape[0]===1?O:O.subarray(L*8,L*8+8);for(let z=0;z<f;++z)for(let U=0;U<h;++U)for(let j=0;j<d;++j){let q,Y=B[6]*U+B[7]*z+1;if(Y===0)continue;let J=(B[0]*U+B[1]*z+B[2])/Y,re=(B[3]*U+B[4]*z+B[5])/Y,ne=oD(J,m,i),ee=oD(re,c,i);switch(a){case"nearest":q=h9(F,c,m,b,w,S,L,ee,ne,j,p);break;case"bilinear":q=g9(F,c,m,b,w,S,L,ee,ne,j,p);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${a}`)}let oe=L*T+z*E+U*R+j;D[oe]=q}return o.makeTensorInfo(g,n.dtype,D)}return{dataId:o.write(D,g,n.dtype),shape:n.shape,dtype:n.dtype}}var nD={kernelName:zs,backendName:"cpu",kernelFunc:l9};function oD(r,e,t){switch(t){case"reflect":return c9(r,e);case"wrap":return m9(r,e);case"nearest":return f9(r,e);case"constant":default:return d9(r,e)}}function c9(r,e){let t=r;if(t<0)if(e<=1)t=0;else{let o=2*e;t<o&&(t=o*Math.trunc(-t/o)+t),t=t<-e?t+o:-t-1}else if(t>e-1)if(e<=1)t=0;else{let o=2*e;t-=o*Math.trunc(t/o),t>=e&&(t=o-t-1)}return y.clamp(0,t,e-1)}function m9(r,e){let t=r;if(t<0)if(e<=1)t=0;else{let o=e-1;t+=e*(Math.trunc(-t/o)+1)}else if(t>e-1)if(e<=1)t=0;else{let o=e-1;t-=e*Math.trunc(t/o)}return y.clamp(0,t,e-1)}function d9(r,e){return r}function f9(r,e){return y.clamp(0,r,e-1)}function em(r,e,t,o,n,s,a,i,p,u,l){let c=a*o+i*n+p*s+u;return 0<=i&&i<e&&0<=p&&p<t?r[c]:l}function h9(r,e,t,o,n,s,a,i,p,u,l){let c=Math.round(i),m=Math.round(p);return em(r,e,t,o,n,s,a,c,m,u,l)}function g9(r,e,t,o,n,s,a,i,p,u,l){let c=Math.floor(i),m=Math.floor(p),d=c+1,f=m+1,h=(f-p)*em(r,e,t,o,n,s,a,c,m,u,l)+(p-m)*em(r,e,t,o,n,s,a,c,f,u,l),g=(f-p)*em(r,e,t,o,n,s,a,d,m,u,l)+(p-m)*em(r,e,t,o,n,s,a,d,f,u,l);return(d-i)*h+(i-c)*g}function x9(r){let{inputs:e,attrs:t,backend:o}=r,{axis:n}=t,{x:s}=e;Q(s,"unique");let a=o.data.get(s.dataId).values,{outputValues:i,outputShape:p,indices:u}=bp(a,n,s.shape,s.dtype);return[o.makeTensorInfo(p,s.dtype,i),o.makeTensorInfo([u.length],"int32",u)]}var sD={kernelName:nu,backendName:"cpu",kernelFunc:x9};function y9(r){let{inputs:e,backend:t,attrs:o}=r,{value:n}=e,{axis:s}=o;s<0&&(s+=n.shape.length);let a=n.shape.length,i=n.shape[s],p=new Array(a-1),u=0;for(let d=0;d<a;d++)d!==s&&(p[u++]=n.shape[d]);let l=new Array(a).fill(0),c=n.shape.slice();c[s]=1;let m=new Array(i);for(let d=0;d<m.length;d++){l[s]=d;let f=nn({inputs:{x:n},backend:t,attrs:{begin:l,size:c}});m[d]=We({inputs:{x:f},backend:t,attrs:{shape:p}}),t.disposeIntermediateTensorInfo(f)}return m}var aD={kernelName:Ta,backendName:"cpu",kernelFunc:y9};function b9(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,segmentIds:s}=e,{numSegments:a}=o;Q(n,"unsortedSegmentSum");let i=n.shape.length,p=s.shape.length,u=[],l=[],c=i-p,m=s;for(let f=0;f<c;++f){let h=$l({inputs:{input:m},backend:t,attrs:{dim:f+1}});m=h,l.push(h)}for(let f=0;f<a;++f){let h=y.createScalarValue(f,"int32"),g=t.makeTensorInfo([],"int32",h),x=nI({inputs:{a:g,b:m},backend:t}),b=rn({inputs:{x},backend:t,attrs:{dtype:"float32"}}),w=dp({inputs:{a:b,b:n},backend:t}),S=Ii({inputs:{x:w},backend:t,attrs:{axis:0,keepDims:!1}});u.push(S),l.push(g),l.push(x),l.push(b),l.push(w),l.push(S)}let d=LI({inputs:u,backend:t,attrs:{axis:0}});return l.forEach(f=>t.disposeIntermediateTensorInfo(f)),d}var iD={kernelName:su,backendName:"cpu",kernelFunc:b9};var C9=[DE,z_,AE,FE,H_,PE,OE,ME,LE,BE,zE,VE,WE,UE,GE,KE,qE,jE,XE,RE,YE,QE,ZE,K_,JE,G_,q_,e$,V_,t$,o$,n$,s$,a$,i$,u$,p$,l$,c$,m$,d$,f$,h$,g$,x$,y$,b$,C$,w$,S$,I$,v$,N$,kE,T$,j_,_$,X_,E$,Y_,$$,R$,D$,Q_,Z_,A$,F$,P$,O$,J_,eE,W_,M$,r$,L$,B$,z$,NE,tE,rE,V$,oE,W$,U$,G$,H$,K$,q$,j$,nE,X$,Y$,Q$,Z$,eR,tR,rR,sE,oR,nR,iR,aE,iE,uR,pR,lR,uE,cR,fR,hR,Jf,gR,TE,lE,xR,yR,bR,CR,U_,Qc,wR,_E,EE,$E,SR,IR,vR,kR,NR,TR,_R,hE,ER,RR,DR,AR,xE,FR,PR,OR,yE,sR,LR,BR,zR,VR,WR,UR,GR,HR,CE,KR,wE,SE,qR,jR,XR,YR,QR,IE,k$,ZR,JR,eD,tD,rD,nD,pE,sD,aD,iD,mR];for(let r of C9)li(r);var Fl={};qe(Fl,{assertNotComplex:()=>Ys,bindCanvasToFramebuffer:()=>E9,bindColorTextureToFramebuffer:()=>nm,bindTextureToProgramUniformSampler:()=>e0,bindTextureUnit:()=>cD,bindVertexBufferToProgramAttribute:()=>sh,callAndCheck:()=>ce,canBeRepresented:()=>WI,createFragmentShader:()=>GI,createFramebuffer:()=>QI,createProgram:()=>HI,createStaticIndexBuffer:()=>jI,createStaticVertexBuffer:()=>qI,createTexture:()=>XI,createVertexShader:()=>UI,getBatchDim:()=>ki,getExtensionOrThrow:()=>Rl,getFramebufferErrorMessage:()=>mD,getMaxTexturesInShader:()=>o0,getNumChannels:()=>T9,getProgramUniformLocation:()=>JI,getProgramUniformLocationOrThrow:()=>ZI,getRowsCols:()=>Ni,getShapeAs3D:()=>Al,getTextureShapeFromLogicalShape:()=>t0,getWebGLDisjointQueryTimerVersion:()=>n0,getWebGLErrorMessage:()=>lD,getWebGLMaxTextureSize:()=>r0,hasExtension:()=>Jr,isCapableOfRenderingToFloatTexture:()=>s0,isDownloadFloatTextureEnabled:()=>a0,isReshapeFree:()=>vu,isWebGLFenceEnabled:()=>i0,isWebGLVersionEnabled:()=>ih,linkProgram:()=>KI,logShaderSourceAndInfoLog:()=>nh,resetMaxTextureSize:()=>$9,resetMaxTexturesInShader:()=>R9,unbindColorTextureFromFramebuffer:()=>ah,unbindTextureUnit:()=>_9,validateFramebuffer:()=>Dl,validateProgram:()=>om,validateTextureSize:()=>YI});var wp={},eh={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function BI(r,e){wp[r]=e}function Zr(r,e){if(!(r in wp)||e!=null){let o=S9(r,e);if(o!==null)wp[r]=o;else return console.log("Could not get context for WebGL version",r),null}let t=wp[r];return t==null||t.isContextLost()?(delete wp[r],Zr(r)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),wp[r])}function w9(r){if(!A().getBool("IS_SAFARI")&&typeof OffscreenCanvas!="undefined"&&r===2)return new OffscreenCanvas(300,150);if(typeof document!="undefined")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function S9(r,e){if(r!==1&&r!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");let t=e==null?w9(r):e;return t.addEventListener("webglcontextlost",o=>{o.preventDefault(),delete wp[r]},!1),A().getBool("SOFTWARE_WEBGL_ENABLED")&&(eh.failIfMajorPerformanceCaveat=!1),r===1?t.getContext("webgl",eh)||t.getContext("experimental-webgl",eh):t.getContext("webgl2",eh)}var Iu;(function(r){r[r.DENSE=0]="DENSE",r[r.SHARED_BATCH=1]="SHARED_BATCH"})(Iu||(Iu={}));var hr;(function(r){r[r.RENDER=0]="RENDER",r[r.UPLOAD=1]="UPLOAD",r[r.PIXELS=2]="PIXELS",r[r.DOWNLOAD=3]="DOWNLOAD"})(hr||(hr={}));var or;(function(r){r[r.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",r[r.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",r[r.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",r[r.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",r[r.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"})(or||(or={}));function Sp(r,e){return[e,r]}function uD(r,e){return r*e}function tm(r){let e=y.sizeFromShape(r),t=Math.ceil(e/4);return y.sizeToSquarishShape(t)}function Ga(r,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(r/2))]}function pD(r,e){let[t,o]=Ga(r,e);return t*o*4}function rm(r,e){let t=r,o,n,s,a,i,p,u,l,c,m;return A().getNumber("WEBGL_VERSION")===2?(o=t.R32F,n=t.R16F,s=t.RGBA16F,a=t.RGBA32F,i=t.RED,u=4,l=1,c=t.HALF_FLOAT,m=t.FLOAT,p=t.RGBA8):(o=r.RGBA,n=r.RGBA,s=r.RGBA,a=t.RGBA,i=r.RGBA,u=4,l=4,c=e!=null?e.HALF_FLOAT_OES:null,m=r.FLOAT,p=r.RGBA),{internalFormatFloat:o,internalFormatHalfFloat:n,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:a,textureFormatFloat:i,downloadTextureFormat:p,downloadUnpackNumChannels:u,defaultNumChannels:l,textureTypeHalfFloat:c,textureTypeFloat:m}}function ce(r,e){let t=e();return A().getBool("DEBUG")&&I9(r),t}function I9(r){let e=r.getError();if(e!==r.NO_ERROR)throw new Error("WebGL Error: "+lD(r,e))}var v9=596e-10,k9=65504;function WI(r){return!!(A().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||r===0||v9<Math.abs(r)&&Math.abs(r)<k9)}function lD(r,e){switch(e){case r.NO_ERROR:return"NO_ERROR";case r.INVALID_ENUM:return"INVALID_ENUM";case r.INVALID_VALUE:return"INVALID_VALUE";case r.INVALID_OPERATION:return"INVALID_OPERATION";case r.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case r.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case r.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${e}`}}function Rl(r,e){return vi(r,()=>r.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function UI(r,e){let t=vi(r,()=>r.createShader(r.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(ce(r,()=>r.shaderSource(t,e)),ce(r,()=>r.compileShader(t)),r.getShaderParameter(t,r.COMPILE_STATUS)===!1)throw console.log(r.getShaderInfoLog(t)),new Error("Failed to compile vertex shader.");return t}function GI(r,e){let t=vi(r,()=>r.createShader(r.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(ce(r,()=>r.shaderSource(t,e)),ce(r,()=>r.compileShader(t)),A().get("ENGINE_COMPILE_ONLY"))return t;if(r.getShaderParameter(t,r.COMPILE_STATUS)===!1)throw nh(e,r.getShaderInfoLog(t)),new Error("Failed to compile fragment shader.");return t}var N9=/ERROR: [0-9]+:([0-9]+):/g;function nh(r,e){let t=N9.exec(e);if(t==null){console.log(`Couldn't parse line number in error: ${e}`),console.log(r);return}let o=+t[1],n=r.split(`
`),s=n.length.toString().length+2,a=n.map((c,m)=>y.rightPad((m+1).toString(),s)+c),i=0;for(let c=0;c<a.length;c++)i=Math.max(a[c].length,i);let p=a.slice(0,o-1),u=a.slice(o-1,o),l=a.slice(o);console.log(p.join(`
`)),console.log(e.split(`
`)[0]),console.log(`%c ${y.rightPad(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(l.join(`
`))}function HI(r){return vi(r,()=>r.createProgram(),"Unable to create WebGLProgram.")}function KI(r,e){if(ce(r,()=>r.linkProgram(e)),!A().get("ENGINE_COMPILE_ONLY")&&r.getProgramParameter(e,r.LINK_STATUS)===!1)throw console.log(r.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}function om(r,e){if(ce(r,()=>r.validateProgram(e)),r.getProgramParameter(e,r.VALIDATE_STATUS)===!1)throw console.log(r.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function qI(r,e){let t=vi(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return ce(r,()=>r.bindBuffer(r.ARRAY_BUFFER,t)),ce(r,()=>r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW)),t}function jI(r,e){let t=vi(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return ce(r,()=>r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t)),ce(r,()=>r.bufferData(r.ELEMENT_ARRAY_BUFFER,e,r.STATIC_DRAW)),t}function T9(){return A().getNumber("WEBGL_VERSION")===2?1:4}function XI(r){return vi(r,()=>r.createTexture(),"Unable to create WebGLTexture.")}function YI(r,e){let t=A().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(r<=0||e<=0){let o=`[${r}x${e}]`;throw new Error("Requested texture size "+o+" is invalid.")}if(r>t||e>t){let o=`[${r}x${e}]`,n=`[${t}x${t}]`;throw new Error("Requested texture size "+o+" greater than WebGL maximum on this browser / GPU "+n+".")}}function QI(r){return vi(r,()=>r.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function sh(r,e,t,o,n,s,a){let i=r.getAttribLocation(e,t);return i===-1?!1:(ce(r,()=>r.bindBuffer(r.ARRAY_BUFFER,o)),ce(r,()=>r.vertexAttribPointer(i,n,r.FLOAT,!1,s,a)),ce(r,()=>r.enableVertexAttribArray(i)),!0)}function cD(r,e,t){dD(r,t),ce(r,()=>r.activeTexture(r.TEXTURE0+t)),ce(r,()=>r.bindTexture(r.TEXTURE_2D,e))}function _9(r,e){dD(r,e),ce(r,()=>r.activeTexture(r.TEXTURE0+e)),ce(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function ZI(r,e,t){return vi(r,()=>r.getUniformLocation(e,t),'uniform "'+t+'" not present in program.')}function JI(r,e,t){return r.getUniformLocation(e,t)}function e0(r,e,t,o){ce(r,()=>cD(r,e,o)),ce(r,()=>r.uniform1i(t,o))}function E9(r){ce(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,null)),ce(r,()=>r.viewport(0,0,r.canvas.width,r.canvas.height)),ce(r,()=>r.scissor(0,0,r.canvas.width,r.canvas.height))}function nm(r,e,t){ce(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,t)),ce(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,e,0))}function ah(r,e){ce(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,e)),ce(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,null,0))}function Dl(r){let e=r.checkFramebufferStatus(r.FRAMEBUFFER);if(e!==r.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+mD(r,e))}function mD(r,e){switch(e){case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case r.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${e}`}}function vi(r,e,t){let o=ce(r,()=>e());if(o==null)throw new Error(t);return o}function dD(r,e){let t=r.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,o=e+r.TEXTURE0;if(o<r.TEXTURE0||o>t){let n=`[gl.TEXTURE0, gl.TEXTURE${t}]`;throw new Error(`textureUnit must be in ${n}.`)}}function ki(r,e=2){return y.sizeFromShape(r.slice(0,r.length-e))}function Ni(r){if(r.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[r.length>1?r[r.length-2]:1,r[r.length-1]]}function Al(r){let e=[1,1,1];return r.length===0||r.length===1&&r[0]===1||(e=[ki(r),...Ni(r)]),e}function t0(r,e=!1){let t=A().getNumber("WEBGL_MAX_TEXTURE_SIZE"),o=A().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");o===1/0&&A().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(o=t/2),e&&(t=t*2,o=o*2,r=r.map((i,p)=>p>=r.length-2?y.nearestLargerEven(r[p]):r[p]),r.length===1&&(r=[2,r[0]])),r.length!==2&&(r=y.squeezeShape(r).newShape);let n=y.sizeFromShape(r),s=null;r.length<=1&&n<=t?s=[1,n]:r.length===2&&r[0]<=t&&r[1]<=t?s=r:r.length===3&&r[0]*r[1]<=t&&r[2]<=t?s=[r[0]*r[1],r[2]]:r.length===3&&r[0]<=t&&r[1]*r[2]<=t?s=[r[0],r[1]*r[2]]:r.length===4&&r[0]*r[1]*r[2]<=t&&r[3]<=t?s=[r[0]*r[1]*r[2],r[3]]:r.length===4&&r[0]<=t&&r[1]*r[2]*r[3]<=t&&(s=[r[0],r[1]*r[2]*r[3]]);let a=s!=null&&Math.max(...s)>o&&Math.min(...s)<=(e?2:1)&&Math.min(...s)>0;if(s==null||a)if(e){let i=ki(r),p=2,u=2;r.length&&([p,u]=Ni(r)),n=i*(p/2)*(u/2),s=y.sizeToSquarishShape(n).map(l=>l*2)}else s=y.sizeToSquarishShape(n);return s}function th(r){return r%2===0}function vu(r,e){if(r=r.slice(-2),e=e.slice(-2),y.arraysEqual(r,e)||!r.length||!e.length||r[0]===0||r[1]===0||e[0]===0||e[1]===0)return!0;if(r.length!==e.length){let t=r[r.length-1],o=e[e.length-1];if(t===o||th(t)&&th(o)&&(r[0]===1||e[0]===1))return!0}return r[1]===e[1]&&th(r[0])&&th(e[0])}var rh,oh;function r0(r){if(rh==null){let e=Zr(r);rh=e.getParameter(e.MAX_TEXTURE_SIZE)}return rh}function $9(){rh=null}function R9(){oh=null}function o0(r){if(oh==null){let e=Zr(r);oh=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,oh)}function n0(r){if(r===0)return 0;let e,t=Zr(r);return Jr(t,"EXT_disjoint_timer_query_webgl2")&&r===2?e=2:Jr(t,"EXT_disjoint_timer_query")?e=1:e=0,e}function Jr(r,e){return r.getExtension(e)!=null}function ih(r){try{if(Zr(r)!=null)return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function s0(r){if(r===0)return!1;let e=Zr(r);if(r===1){if(!Jr(e,"OES_texture_float"))return!1}else if(!Jr(e,"EXT_color_buffer_float"))return!1;return VI(e)}function a0(r){if(r===0)return!1;let e=Zr(r);if(r===1){if(!Jr(e,"OES_texture_float")||!Jr(e,"WEBGL_color_buffer_float"))return!1}else{if(Jr(e,"EXT_color_buffer_float"))return VI(e);let o="EXT_color_buffer_half_float";if(Jr(e,o)){let n=e.getExtension(o);return D9(e,n)}return!1}return VI(e)}function VI(r){let e=rm(r),t=r.createTexture();r.bindTexture(r.TEXTURE_2D,t),r.texImage2D(r.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);let s=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,s),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t,0);let a=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(t),r.deleteFramebuffer(s),a}function D9(r,e){let t=rm(r,e),o=r.createTexture();r.bindTexture(r.TEXTURE_2D,o),r.texImage2D(r.TEXTURE_2D,0,t.internalFormatHalfFloat,1,1,0,t.textureFormatFloat,t.textureTypeHalfFloat,null);let a=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,a),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,o,0);let i=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(o),r.deleteFramebuffer(a),i}function i0(r){return r!==2?!1:Zr(r).fenceSync!=null}function Ys(r,e){Array.isArray(r)||(r=[r]),r.forEach(t=>{t!=null&&y.assert(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the WebGL backend.`)})}var Se=A();Se.registerFlag("HAS_WEBGL",()=>Se.getNumber("WEBGL_VERSION")>0);Se.registerFlag("WEBGL_VERSION",()=>ih(2)?2:ih(1)?1:0);Se.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1);Se.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>Se.get("WEBGL_VERSION")===2);Se.registerFlag("WEBGL_CPU_FORWARD",()=>!0);Se.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1);Se.registerFlag("WEBGL_PACK",()=>Se.getBool("HAS_WEBGL"));Se.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_CLIP",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_REDUCE",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_LAZILY_UNPACK",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_CONV_IM2COL",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>r0(Se.getNumber("WEBGL_VERSION")));Se.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>o0(Se.getNumber("WEBGL_VERSION")));Se.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let r=Se.getNumber("WEBGL_VERSION");return r===0?0:n0(r)});Se.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Se.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!uu.isMobile());Se.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>s0(Se.getNumber("WEBGL_VERSION")));Se.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>Se.getBool("WEBGL_FORCE_F16_TEXTURES")?!1:Se.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));Se.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>a0(Se.getNumber("WEBGL_VERSION")));Se.registerFlag("WEBGL_FENCE_API_ENABLED",()=>i0(Se.getNumber("WEBGL_VERSION")));Se.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Se.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0);Se.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,r=>{if(typeof r!="number")throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${r}.`);if(r<0&&r!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`)});Se.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>uu.isMobile()?1:-1,r=>{if(typeof r!="number")throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${r}.`);if(r<0&&r!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`)});Se.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128);Se.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1);Se.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5);Se.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);Se.registerFlag("WEBGL_EXP_CONV",()=>!1);Se.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>Se.getBool("IS_TEST"));Se.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0);Se.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1);Se.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1);Se.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);function kt(){let r,e,t,o,n,s,a,i,p,u;return A().getNumber("WEBGL_VERSION")===2?(r="#version 300 es",e="in",t="out",o="in",n="texture",s="outputColor",a="out vec4 outputColor;",i=A().getBool("WEBGL2_ISNAN_CUSTOM")?`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `:"",p="",u=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(r="",e="attribute",t="varying",o="varying",n="texture2D",s="gl_FragColor",a="",i=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,p=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,u=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:r,attribute:e,varyingVs:t,varyingFs:o,texture2D:n,output:s,defineOutput:a,defineSpecialNaN:i,defineSpecialInf:p,defineRound:u}}function Qs(r,e,t="index"){let o=y.computeStrides(e);return o.map((n,s)=>{let a=`int ${r[s]} = ${t} / ${n}`,i=s===o.length-1?`int ${r[s+1]} = ${t} - ${r[s]} * ${n}`:`index -= ${r[s]} * ${n}`;return`${a}; ${i};`}).join("")}function Ip(r,e,t="index"){let o=y.computeStrides(e);return o.map((n,s)=>{let a=`int ${r[s]} = ${t} / outShapeStrides[${s}]`,i=s===o.length-1?`int ${r[s+1]} = ${t} - ${r[s]} * outShapeStrides[${s}]`:`index -= ${r[s]} * outShapeStrides[${s}]`;return`${a}; ${i};`}).join("")}function A9(r,e){let t=r.length,o=r.map(s=>`${e}[${s}]`),n=new Array(t-1);n[t-2]=o[t-1];for(let s=t-3;s>=0;--s)n[s]=`(${n[s+1]} * ${o[s+1]})`;return n}function fD(r,e,t="index"){let o=r.map((s,a)=>a),n=A9(o,e);return n.map((s,a)=>{let i=`int ${r[a]} = ${t} / ${n[a]}`,p=a===n.length-1?`int ${r[a+1]} = ${t} - ${r[a]} * ${n[a]}`:`index -= ${r[a]} * ${n[a]}`;return`${i}; ${p};`}).join("")}function Pl(r){let e=y.computeStrides(r).map(t=>t.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;
  }
`}function Ol(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}var uh=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;var{getBroadcastDims:hD}=C;function gD(r,e,t){let o=[];if(r.forEach(d=>{let f=y.sizeFromShape(d.shapeInfo.logicalShape);if(d.shapeInfo.isUniform?o.push(`uniform float ${d.name}${f>1?`[${f}]`:""};`):(o.push(`uniform sampler2D ${d.name};`),o.push(`uniform int offset${d.name};`)),t.enableShapeUniforms){let{uniformShape:h}=ph(t.packedInputs,d.shapeInfo.logicalShape,d.shapeInfo.texShape);switch(h.length){case 1:o.push(`uniform int ${d.name}Shape;`);break;case 2:o.push(`uniform ivec2 ${d.name}Shape;`);break;case 3:o.push(`uniform ivec3 ${d.name}Shape;`);break;case 4:o.push(`uniform ivec4 ${d.name}Shape;`);break;default:break}o.push(`uniform ivec2 ${d.name}TexShape;`)}}),t.enableShapeUniforms){switch(e.logicalShape.length){case 1:o.push("uniform int outShape;");break;case 2:o.push("uniform ivec2 outShape;"),o.push("uniform int outShapeStrides;");break;case 3:o.push("uniform ivec3 outShape;"),o.push("uniform ivec2 outShapeStrides;");break;case 4:o.push("uniform ivec4 outShape;"),o.push("uniform ivec3 outShapeStrides;");break;default:break}o.push("uniform ivec2 outTexShape;")}t.customUniforms&&t.customUniforms.forEach(d=>{o.push(`uniform ${d.type} ${d.name}${d.arrayIndex?`[${d.arrayIndex}]`:""};`)});let n=o.join(`
`),s=r.map(d=>F9(d,e,t.packedInputs,t.enableShapeUniforms)).join(`
`),a=e.texShape,i=kt(),p=M9(i),u,l,c=z9(i);return e.isPacked?(u=P9(e.logicalShape,a,t.enableShapeUniforms),l=B9(i)):(u=O9(e.logicalShape,a,t.enableShapeUniforms),l=L9(i)),t.packedInputs&&(c+=G9),[c,p,l,n,u,s,t.userCode].join(`
`)}function Ll(r,e=!1){let t=r.shapeInfo.logicalShape;switch(t.length){case 0:return rJ(r,e);case 1:return nJ(r,e);case 2:return aJ(r,e);case 3:return uJ(r,e);case 4:return lJ(r,e);case 5:return cJ(r);case 6:return mJ(r);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function xD(r,e){switch(r.shapeInfo.logicalShape.length){case 0:return tJ(r);case 1:return oJ(r,e);case 2:return sJ(r,e);case 3:return iJ(r,e);default:return pJ(r,e)}}function F9(r,e,t=!1,o){let n="";t?n+=xD(r,o):n+=Ll(r,o);let s=r.shapeInfo.logicalShape,a=e.logicalShape;return s.length<=a.length&&(t?n+=dJ(r,e):n+=fJ(r,e)),n}function P9(r,e,t){switch(r.length){case 0:return yD();case 1:return H9(r,e,t);case 2:return J9(r,e,t);case 3:return q9(r,e,t);default:return X9(r,e,t)}}function O9(r,e,t){switch(r.length){case 0:return yD();case 1:return K9(r,e,t);case 2:return eJ(r,e,t);case 3:return j9(r,e,t);case 4:return Y9(r,e,t);case 5:return Q9(r,e);case 6:return Z9(r,e);default:throw new Error(`${r.length}-D output sampling is not yet supported`)}}function M9(r){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `}function L9(r){return`
    void setOutput(float val) {
      ${r.output} = vec4(val, 0, 0, 0);
    }
  `}function B9(r){return`
    void setOutput(vec4 val) {
      ${r.output} = val;
    }
  `}function z9(r){return`${r.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${r.varyingFs} vec2 resultUV;
    ${r.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${r.defineSpecialNaN}
    ${r.defineSpecialInf}
    ${r.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${V9}
    ${W9}
    ${U9}
  `}var V9=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,W9=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,U9=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,G9=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function yD(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function H9(r,e,t){let o=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return o[0]===1?t?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${o[1]}.0);
      }
    `:o[1]===1?t?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${o[0]}.0);
      }
    `:t?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      return 2 * (resTexRC.x * ${o[1]} + resTexRC.y);
    }
  `}function K9(r,e,t){return e[0]===1?t?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${e[1]}.0);
      }
    `:e[1]===1?t?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${e[0]}.0);
      }
    `:t?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      return resTexRC.x * ${e[1]} + resTexRC.y;
    }
  `}function q9(r,e,t){if(t)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let o=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],n=Math.ceil(r[2]/2),s=n*Math.ceil(r[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec3(b, r, c);
    }
  `}function j9(r,e,t){if(t)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Ip(["r","c","d"],r)}
    return ivec3(r, c, d);
  }
`;let o=Qs(["r","c","d"],r);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${o}
      return ivec3(r, c, d);
    }
  `}function X9(r,e,t){if(t)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let o=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],n=Math.ceil(r[r.length-1]/2),s=n*Math.ceil(r[r.length-2]/2),a=s,i="",p="b, r, c";for(let u=2;u<r.length-1;u++)a*=r[r.length-u-1],i=`
      int b${u} = index / ${a};
      index -= b${u} * ${a};
    `+i,p=`b${u}, `+p;return`
    ivec${r.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      ${i}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec${r.length}(${p});
    }
  `}function Y9(r,e,t){if(t)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Ip(["r","c","d","d2"],r)}
      return ivec4(r, c, d, d2);
    }
  `;let o=Qs(["r","c","d","d2"],r);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${o}
      return ivec4(r, c, d, d2);
    }
  `}function Q9(r,e){let t=Qs(["r","c","d","d2","d3"],r);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},
                             ${e[1]}));

      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}function Z9(r,e){let t=Qs(["r","c","d","d2","d3","d4"],r);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}function J9(r,e,t){let o=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(y.arraysEqual(r,e))return t?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));
      }
    `;let n=Math.ceil(r[1]/2);return t?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));

      int index = resTexRC.x * ${o[1]} + resTexRC.y;
      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec2(r, c);
    }
  `}function eJ(r,e,t){return y.arraysEqual(r,e)?t?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));
      }
    `:r[1]===1?t?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:r[0]===1?t?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:t?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      int r = index / ${r[1]};
      int c = index - r * ${r[1]};
      return ivec2(r, c);
    }
  `}function vp(r){return`offset${r}`}function tJ(r){let e=r.name,t="get"+e.charAt(0).toUpperCase()+e.slice(1),o=kt();return`
    vec4 ${t}() {
      return ${o.texture2D}(${e}, halfCR);
    }
  `}function rJ(r,e){let t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1);if(r.shapeInfo.isUniform)return`float ${o}() {return ${t};}`;let[n,s]=r.shapeInfo.texShape;if(n===1&&s===1)return`
      float ${o}() {
        return sampleTexture(${t}, halfCR);
      }
    `;let a=vp(t);if(e)return`
    float ${o}() {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], ${a});
      return sampleTexture(${t}, uv);
    }
  `;let[i,p]=r.shapeInfo.texShape;return`
    float ${o}() {
      vec2 uv = uvFromFlat(${i}, ${p}, ${a});
      return sampleTexture(${t}, uv);
    }
  `}function oJ(r,e){let t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1),n=r.shapeInfo.texShape,s=kt();if(e)return`
    vec4 ${o}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${t}, uv);
    }
  `;let a=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return`
    vec4 ${o}(int index) {
      vec2 uv = packedUVfrom1D(
        ${a[0]}, ${a[1]}, index);
      return ${s.texture2D}(${t}, uv);
    }
  `}function nJ(r,e){let t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1);if(r.shapeInfo.isUniform)return`
      float ${o}(int index) {
        ${Bl(r)}
      }
    `;let n=r.shapeInfo.texShape,s=n[0],a=n[1];if(a===1&&s===1)return`
      float ${o}(int index) {
        return sampleTexture(${t}, halfCR);
      }
    `;let i=vp(t);return a===1?e?`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${t}TexShape[0]));
        return sampleTexture(${t}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);
        return sampleTexture(${t}, uv);
      }
    `:s===1?e?`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${t}TexShape[1]), 0.5);
        return sampleTexture(${t}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);
        return sampleTexture(${t}, uv);
      }
    `:e?`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], index + ${i});
      return sampleTexture(${t}, uv);
    }
  `:`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});
      return sampleTexture(${t}, uv);
    }
  `}function sJ(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,a=s[0],i=s[1],p=kt();if(s!=null&&y.arraysEqual(t,s))return e?`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);

        return ${p.texture2D}(${o}, uv);
      }
    `:`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);

        return ${p.texture2D}(${o}, uv);
      }
    `;if(e)return`
    vec4 ${n}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${p.texture2D}(${o}, uv);
    }
  `;let u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],l=Math.ceil(t[1]/2);return`
    vec4 ${n}(int row, int col) {
      vec2 uv = packedUVfrom2D(${l}, ${u[0]}, ${u[1]}, row, col);
      return ${p.texture2D}(${o}, uv);
    }
  `}function aJ(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape;if(s!=null&&y.arraysEqual(t,s)){if(e)return`
      float ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `;let m=s[0],d=s[1];return`
    float ${n}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${d}.0, ${m}.0);
      return sampleTexture(${o}, uv);
    }
  `}let{newShape:a,keptDims:i}=y.squeezeShape(t),p=a;if(p.length<t.length){let m=zl(r,p),d=["row","col"];return`
      ${Ll(m,e)}
      float ${n}(int row, int col) {
        return ${n}(${Vl(d,i)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));
        ${Bl(r)}
      }
    `;let u=s[0],l=s[1],c=vp(o);return l===1?e?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${c}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${o}TexShape[0]));
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${o}, uv);
    }
  `:u===1?e?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${c}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${o}TexShape[1]), 0.5);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${l}.0, 0.5);
      return sampleTexture(${o}, uv);
    }
  `:e?`
      float ${n}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o}Shape[1] + col + ${c};
        vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
        return sampleTexture(${o}, uv);
      }
    `:`
  float ${n}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${t[1]} + col + ${c};
    vec2 uv = uvFromFlat(${u}, ${l}, index);
    return sampleTexture(${o}, uv);
  }
`}function iJ(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(t[0]===1){let m=t.slice(1),d=[1,2],f=zl(r,m),h=["b","row","col"];return`
        ${xD(f,e)}
        vec4 ${n}(int b, int row, int col) {
          return ${n}(${Vl(h,d)});
        }
      `}let i=kt();if(e)return`
    vec4 ${n}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${i.texture2D}(${o}, uv);
    }
  `;let p=a[0],u=a[1],l=Math.ceil(t[2]/2),c=l*Math.ceil(t[1]/2);return`
    vec4 ${n}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${p}, ${u}, ${c}, ${l}, b, row, col);
      return ${i.texture2D}(${o}, uv);
    }
  `}function uJ(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=t[1]*t[2],a=t[2],{newShape:i,keptDims:p}=y.squeezeShape(t),u=i;if(u.length<t.length){let h=zl(r,u),g=["row","col","depth"];return`
        ${Ll(h,e)}
        float ${n}(int row, int col, int depth) {
          return ${n}(${Vl(g,p)});
        }
      `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${a}, 1)));
        ${Bl(r)}
      }
    `;let l=r.shapeInfo.texShape,c=l[0],m=l[1],d=r.shapeInfo.flatOffset;if(m===s&&d==null)return e?`
      float ${n}(int row, int col, int depth) {
        int stride1 = ${o}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
        float ${n}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${a}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${m}.0, ${c}.0);
          return sampleTexture(${o}, uv);
        }
      `;if(m===a&&d==null)return e?`
      float ${n}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${o}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}.0, ${c}.0);
      return sampleTexture(${o}, uv);
    }
  `;let f=vp(o);return e?`
    float ${n}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${o}Shape[1] * ${o}Shape[2];
      int stride1 = ${o}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
      return sampleTexture(${o}, uv);
    }
    `:`
      float ${n}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${a} + depth + ${f};
        vec2 uv = uvFromFlat(${c}, ${m}, index);
        return sampleTexture(${o}, uv);
      }
  `}function pJ(r,e){let t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1),n=kt();if(e)return`
    vec4 ${o}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${t}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${t}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${t}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${n.texture2D}(${t}, uv);
    }
  `;let s=r.shapeInfo.logicalShape,a=s.length,i=r.shapeInfo.texShape,p=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=p[0],l=p[1],c=Math.ceil(s[a-1]/2),m=c*Math.ceil(s[a-2]/2),d="int b, int row, int col",f=`b * ${m} + (row / 2) * ${c} + (col / 2)`;for(let h=2;h<a-1;h++)d=`int b${h}, `+d,m*=s[a-h-1],f=`b${h} * ${m} + `+f;return`
    vec4 ${o}(${d}) {
      int index = ${f};
      int texR = index / ${l};
      int texC = index - texR * ${l};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${u});
      return ${n.texture2D}(${t}, uv);
    }
  `}function lJ(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=t[3],a=t[2]*s,i=t[1]*a,{newShape:p,keptDims:u}=y.squeezeShape(t);if(p.length<t.length){let b=zl(r,p),w=["row","col","depth","depth2"];return`
      ${Ll(b,e)}
      float ${n}(int row, int col, int depth, int depth2) {
        return ${n}(${Vl(w,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${i}, ${a}, ${s}, 1)));
        ${Bl(r)}
      }
    `;let l=r.shapeInfo.flatOffset,c=r.shapeInfo.texShape,m=c[0],d=c[1],f=`int stride2 = ${o}Shape[3];`,h=`int stride1 = ${o}Shape[2] * stride2;`,g=`int stride0 = ${o}Shape[1] * stride1;`;if(d===i&&l==null)return e?`
      float ${n}(int row, int col, int depth, int depth2) {
        ${f}
        ${h}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${a}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${d}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;if(d===s&&l==null)return e?`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${o}Shape[1] * ${o}Shape[2], ${o}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${t[1]*t[2]}, ${t[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${d}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;let x=vp(o);return e?`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${h}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index + ${x});
      return sampleTexture(${o}, uv);
    }
  `:`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${a} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${m}, ${d}, index + ${x});
      return sampleTexture(${o}, uv);
    }
  `}function cJ(r){let e=r.shapeInfo.logicalShape,t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1),n=e[4],s=e[3]*n,a=e[2]*s,i=e[1]*a,{newShape:p,keptDims:u}=y.squeezeShape(e);if(p.length<e.length){let h=zl(r,p),g=["row","col","depth","depth2","depth3"];return`
      ${Ll(h)}
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        return ${o}(${Vl(g,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${i}, ${a}, ${s}, ${n})) +
          depth3;
        ${Bl(r)}
      }
    `;let l=r.shapeInfo.flatOffset,c=r.shapeInfo.texShape,m=c[0],d=c[1];if(d===i&&l==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${a}, ${s}, ${n}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${d}.0, ${m}.0);
        return sampleTexture(${t}, uv);
      }
    `;if(d===n&&l==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${e[1]*e[2]*e[3]},
               ${e[2]*e[3]}, ${e[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${d}.0, ${m}.0);
        return sampleTexture(${t}, uv);
      }
    `;let f=vp(t);return`
    float ${o}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${a} + depth * ${s} +
          depth2 * ${n} + depth3 + ${f};
      vec2 uv = uvFromFlat(${m}, ${d}, index);
      return sampleTexture(${t}, uv);
    }
  `}function mJ(r){let e=r.shapeInfo.logicalShape,t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1),{newShape:n,keptDims:s}=y.squeezeShape(e);if(n.length<e.length){let g=zl(r,n),x=["row","col","depth","depth2","depth3","depth4"];return`
      ${Ll(g)}
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${o}(${Vl(x,s)});
      }
    `}let a=e[5],i=e[4]*a,p=e[3]*i,u=e[2]*p,l=e[1]*u;if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${l}, ${u}, ${p}, ${i})) +
          dot(
            vec2(depth3, depth4),
            vec2(${a}, 1)));
        ${Bl(r)}
      }
    `;let c=r.shapeInfo.flatOffset,m=r.shapeInfo.texShape,d=m[0],f=m[1];if(f===l&&c==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${p}, ${i}, ${a})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${d}.0);
        return sampleTexture(${t}, uv);
      }
    `;if(f===a&&c==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${e[1]*e[2]*e[3]*e[4]},
               ${e[2]*e[3]*e[4]},
               ${e[3]*e[4]},
               ${e[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${d}.0);
        return sampleTexture(${t}, uv);
      }
    `;let h=vp(t);return`
    float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${l} + col * ${u} + depth * ${p} +
          depth2 * ${i} + depth3 * ${a} + depth4 + ${h};
      vec2 uv = uvFromFlat(${d}, ${f}, index);
      return sampleTexture(${t}, uv);
    }
  `}function Bl(r){let e=r.name,t=y.sizeFromShape(r.shapeInfo.logicalShape);return t<2?`return ${e};`:`
    for (int i = 0; i < ${t}; i++) {
      if (i == index) {
        return ${e}[i];
      }
    }
  `}function dJ(r,e){let t=r.name,o=t.charAt(0).toUpperCase()+t.slice(1),n="get"+o+"AtOutCoords",s=r.shapeInfo.logicalShape.length,a=e.logicalShape.length,i=hD(r.shapeInfo.logicalShape,e.logicalShape),p=Re(a),u=a-s,l,c=["x","y","z","w","u","v"];s===0?l="":a<2&&i.length>=1?l="coords = 0;":l=i.map(b=>`coords.${c[b+u]} = 0;`).join(`
`);let m="";a<2&&s>0?m="coords":m=r.shapeInfo.logicalShape.map((b,w)=>`coords.${c[w+u]}`).join(", ");let d="return outputValue;",h=y.sizeFromShape(r.shapeInfo.logicalShape)===1,x=y.sizeFromShape(e.logicalShape)===1;if(s===1&&!h&&!x)d=`
      return vec4(outputValue.xy, outputValue.xy);
    `;else if(h&&!x)a===1?d=`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:d=`
        return vec4(outputValue.x);
      `;else if(i.length){let b=s-2,w=s-1;i.indexOf(b)>-1&&i.indexOf(w)>-1?d="return vec4(outputValue.x);":i.indexOf(b)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(w)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}return`
    vec4 ${n}() {
      ${p} coords = getOutputCoords();
      ${l}
      vec4 outputValue = get${o}(${m});
      ${d}
    }
  `}function fJ(r,e){let t=r.name,o=t.charAt(0).toUpperCase()+t.slice(1),n="get"+o+"AtOutCoords",s=e.texShape,a=r.shapeInfo.texShape,i=r.shapeInfo.logicalShape.length,p=e.logicalShape.length;if(!r.shapeInfo.isUniform&&i===p&&r.shapeInfo.flatOffset==null&&y.arraysEqual(a,s))return`
      float ${n}() {
        return sampleTexture(${t}, resultUV);
      }
    `;let u=Re(p),l=hD(r.shapeInfo.logicalShape,e.logicalShape),c=p-i,m,d=["x","y","z","w","u","v"];i===0?m="":p<2&&l.length>=1?m="coords = 0;":m=l.map(h=>`coords.${d[h+c]} = 0;`).join(`
`);let f="";return p<2&&i>0?f="coords":f=r.shapeInfo.logicalShape.map((h,g)=>`coords.${d[g+c]}`).join(", "),`
    float ${n}() {
      ${u} coords = getOutputCoords();
      ${m}
      return get${o}(${f});
    }
  `}function Re(r){if(r<=1)return"int";if(r===2)return"ivec2";if(r===3)return"ivec3";if(r===4)return"ivec4";if(r===5)return"ivec5";if(r===6)return"ivec6";throw Error(`GPU for rank ${r} is not yet supported`)}function ph(r,e,t){let{newShape:o,keptDims:n}=y.squeezeShape(e),s=e.length,a=r&&s===3&&e[0]===1,i=a?e.slice(1):o,p=!r&&s>1&&!y.arraysEqual(e,t)&&o.length<s||a;return{useSqueezeShape:p,uniformShape:p?i:e,keptDims:n}}function zl(r,e){let t=JSON.parse(JSON.stringify(r));return t.shapeInfo.logicalShape=e,t}function Vl(r,e){return e.map(t=>r[t]).join(", ")}function CD(r,e,t,o){let n=t.map((l,c)=>{let m={logicalShape:l.shape,texShape:l.isUniform?null:l.texData.texShape,isUniform:l.isUniform,isPacked:l.isUniform?!1:l.texData.isPacked,flatOffset:null};return l.texData!=null&&l.texData.slice!=null&&l.texData.slice.flatOffset>0&&(m.flatOffset=l.texData.slice.flatOffset),{name:e.variableNames[c],shapeInfo:m}}),s=n.map(l=>l.shapeInfo),a={logicalShape:o.shape,texShape:o.texData.texShape,isUniform:!1,isPacked:o.texData.isPacked,flatOffset:null},i=gD(n,a,e),p=GI(r.gl,i),u=r.createProgram(p);return A().get("ENGINE_COMPILE_ONLY")?{program:e,fragmentShader:p,source:i,webGLProgram:u,inShapeInfos:s,outShapeInfo:a,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(r.buildVao(u),Object.assign({program:e,fragmentShader:p,source:i,webGLProgram:u,inShapeInfos:s,outShapeInfo:a},u0(r,e,u)))}function u0(r,e,t){let o=[],n=[],s,a,i,p=null,u=null;u=r.getUniformLocation(t,"NAN",!1),A().getNumber("WEBGL_VERSION")===1&&(p=r.getUniformLocation(t,"INFINITY",!1));let l=!1;for(let c of e.variableNames){let m={name:c,uniform:r.getUniformLocation(t,c,l),offset:r.getUniformLocation(t,`offset${c}`,l)};e.enableShapeUniforms&&(m.shape=r.getUniformLocation(t,`${c}Shape`,l),m.texShape=r.getUniformLocation(t,`${c}TexShape`,l)),o.push(m)}if(e.enableShapeUniforms&&(s=r.getUniformLocation(t,"outShape",l),i=r.getUniformLocation(t,"outShapeStrides",l),a=r.getUniformLocation(t,"outTexShape",l)),e.customUniforms)for(let c of e.customUniforms)n.push(r.getUniformLocation(t,c.name,l));return{variablesLocations:o,customUniformLocations:n,infLoc:p,nanLoc:u,outShapeLocation:s,outShapeStridesLocation:i,outTexShapeLocation:a}}function bD(r,e){if(r.length!==e.length)throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${e.length} inputs`);r.forEach((t,o)=>{let n=t.logicalShape,s=e[o],a=s.shape;if(!y.arraysEqual(n,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${n} and ${a} must match`);if(t.isUniform&&s.isUniform)return;let i=t.texShape,p=s.isUniform?null:s.texData.texShape;if(!y.arraysEqual(i,p))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${p} must match`)})}function wD(r,e,t,o,n){e.program.enableShapeUniforms||(bD(e.inShapeInfos,t),bD([e.outShapeInfo],[o]));let s=o.texData.texture,a=o.texData.texShape;o.texData.isPacked?r.setOutputPackedMatrixTexture(s.texture,a[0],a[1]):r.setOutputMatrixTexture(s.texture,a[0],a[1]),r.setProgram(e.webGLProgram),r.bindVertexArray(e.webGLProgram.vao),A().getNumber("WEBGL_VERSION")===1&&e.infLoc!==null&&r.gl.uniform1f(e.infLoc,1/0),e.nanLoc!==null&&r.gl.uniform1f(e.nanLoc,NaN);for(let p=0;p<t.length;++p){let u=t[p],{uniform:l,offset:c,shape:m,texShape:d}=e.variablesLocations[p];if(m){let{uniformShape:f}=ph(e.program.packedInputs,u.shape,u.texData.texShape);switch(f.length){case 1:r.gl.uniform1iv(m,new Int32Array(f));break;case 2:r.gl.uniform2iv(m,new Int32Array(f));break;case 3:r.gl.uniform3iv(m,new Int32Array(f));break;case 4:r.gl.uniform4iv(m,new Int32Array(f));break;default:break}}if(d&&r.gl.uniform2i(d,u.texData.texShape[0],u.texData.texShape[1]),l!=null){if(u.isUniform){if(y.sizeFromShape(u.shape)<2)r.gl.uniform1f(l,u.uniformValues[0]);else{let f=u.uniformValues;f instanceof Float32Array||(f=new Float32Array(f)),r.gl.uniform1fv(l,f)}continue}u.texData.slice!=null&&c!=null&&r.gl.uniform1i(c,u.texData.slice.flatOffset),r.setInputMatrixTexture(u.texData.texture.texture,l,p)}}let i=e.outShapeLocation;if(i)switch(o.shape.length){case 1:r.gl.uniform1iv(i,new Int32Array(o.shape));break;case 2:r.gl.uniform2iv(i,new Int32Array(o.shape));break;case 3:r.gl.uniform3iv(i,new Int32Array(o.shape));break;case 4:r.gl.uniform4iv(i,new Int32Array(o.shape));break;default:break}if(e.outShapeStridesLocation){let p=y.computeStrides(o.shape);switch(o.shape.length){case 2:r.gl.uniform1iv(e.outShapeStridesLocation,new Int32Array(p));break;case 3:r.gl.uniform2iv(e.outShapeStridesLocation,new Int32Array(p));break;case 4:r.gl.uniform3iv(e.outShapeStridesLocation,new Int32Array(p));break;default:break}}if(e.outTexShapeLocation&&r.gl.uniform2i(e.outTexShapeLocation,o.texData.texShape[0],o.texData.texShape[1]),e.program.customUniforms&&n)for(let p=0;p<e.program.customUniforms.length;++p){let u=e.program.customUniforms[p],l=e.customUniformLocations[p],c=n[p];if(u.type==="float")r.gl.uniform1fv(l,c);else if(u.type==="vec2")r.gl.uniform2fv(l,c);else if(u.type==="vec3")r.gl.uniform3fv(l,c);else if(u.type==="vec4")r.gl.uniform4fv(l,c);else if(u.type==="int")r.gl.uniform1iv(l,c);else if(u.type==="ivec2")r.gl.uniform2iv(l,c);else if(u.type==="ivec3")r.gl.uniform3iv(l,c);else if(u.type==="ivec4")r.gl.uniform4iv(l,c);else throw Error(`uniform type ${u.type} is not supported yet.`)}r.executeProgram()}function SD(r,e,t){let o="";e.concat(t).forEach(a=>{let i=a.texData!=null&&a.texData.slice!=null&&a.texData.slice.flatOffset>0;if(r.enableShapeUniforms&&!a.isUniform){let p=a.texData.texShape,{useSqueezeShape:u,uniformShape:l,keptDims:c}=ph(r.packedInputs,a.shape,p),m="",d="",f="";if(l.length===1&&r.packedInputs){let k=[Math.ceil(p[0]/2),Math.ceil(p[1]/2)];m=`${k[0]>1}_${k[1]>1}`}else if(l.length===2&&!r.packedInputs)d=`${l[0]>1}_${l[1]>1}`;else if(l.length>2&&!r.packedInputs){let k=y.computeStrides(l);f=`${k[0]===p[1]}_${k[k.length-1]===p[1]}`}let h=a.shape.length,g=l.length===2&&y.arraysEqual(a.shape,p),x=y.sizeFromShape(a.shape)===1,b=C.getBroadcastDims(a.shape,t.shape),w=!r.packedInputs&&h===t.shape.length&&y.arraysEqual(p,t.texData.texShape),S=r.packedInputs||l.length>2?"":`${p[0]>1}_${p[1]>1}`;o+=`${h}_${w}_${u?c:""}_${l.length}_${x}_${b}_${g}_${m}_${d}_${f}_${S}_${i}`}else{let p=a.isUniform?"uniform":a.texData.texShape;o+=`${a.shape}_${p}_${i}`}});let n=r.userCode,s=r.constructor.name;return s+="_"+o+"_"+n+`${A().getNumber("WEBGL_VERSION")}`,s}function lt(r){return A().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&r<=4}var lh=class{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Iu.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=kt();this.outputShape=e,this.enableShapeUniforms=lt(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Ip(["r","c","d"],e):Qs(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `}};var ch=class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Iu.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=kt();this.outputShape=e,this.enableShapeUniforms=lt(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Ip(["r","c","d"],e):Qs(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `}};var mh=class{constructor(e){this.variableNames=["A"],this.outTexUsage=hr.DOWNLOAD;let t=kt();this.outputShape=e,this.userCode=`
      ${uh}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `}};var dh=class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=hr.DOWNLOAD;let t=kt();this.outputShape=e,this.userCode=`
      ${uh}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `}};var xJ={R:0,G:1,B:2,A:3},sm=class{constructor(e,t=!1,o="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let n=kt();this.outputShape=e,this.enableShapeUniforms=lt(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)");let a="";for(let i=0;i<o.length;i++){let p=o[i];a+=`
          if(offset == ${i}) {
            result = values[${xJ[p]}];
          }`}this.userCode=`
      ${this.enableShapeUniforms?Ol():Pl(e)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${o.length});

        flatIndex = idiv(flatIndex, ${o.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${n.texture2D}(A, uv);
          ${a}
        }
        ${n.output} = vec4(${s}, 0., 0., 0.);
      }
    `}};var fh=class{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=kt();this.outputShape=e,this.enableShapeUniforms=lt(this.outputShape.length);let n="",s="result";t&&(s="floor(result * 255. + 0.5)");for(let a=0;a<=1;a++)for(let i=0;i<=1;i++){let p=a*2+i;n+=`
          localCoords = coords;
          if(localCoords[2] + ${i} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {
          localCoords[2] += ${i};
          if (localCoords[1] + ${a} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {
            localCoords[1] += ${a};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${o.texture2D}(A, uv);

            if (offset == 0) {
              result[${p}] = values[0];
            } else if (offset == 1) {
              result[${p}] = values[1];
            } else if (offset == 2) {
              result[${p}] = values[2];
            } else {
              result[${p}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?Ol():Pl(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${n}

          ${o.output} = ${s};
        }
    `}};var k0={};qe(k0,{bindVertexProgramAttributeStreams:()=>x0,createBufferFromOutputTexture:()=>C0,createFloat16MatrixTexture:()=>d0,createFloat16PackedMatrixTexture:()=>g0,createFloat32MatrixTexture:()=>m0,createIndexBuffer:()=>c0,createPackedMatrixTexture:()=>h0,createUnsignedBytesMatrixTexture:()=>f0,createVertexBuffer:()=>l0,createVertexShader:()=>p0,downloadByteEncodedFloatMatrixFromOutputTexture:()=>S0,downloadFloat32MatrixFromBuffer:()=>w0,downloadMatrixFromPackedOutputTexture:()=>v0,downloadPackedMatrixFromBuffer:()=>I0,getInternalFormatForFloat16MatrixTexture:()=>gh,getInternalFormatForFloat16PackedMatrixTexture:()=>bh,getInternalFormatForFloat32MatrixTexture:()=>hh,getInternalFormatForPackedMatrixTexture:()=>yh,getInternalFormatForUnsignedBytesMatrixTexture:()=>xh,uploadDenseMatrixToTexture:()=>y0,uploadPixelDataToTexture:()=>b0});function p0(r){let e=kt(),t=`${e.version}
    precision highp float;
    ${e.attribute} vec3 clipSpacePos;
    ${e.attribute} vec2 uv;
    ${e.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return UI(r,t)}function l0(r){let e=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return qI(r,e)}function c0(r){let e=new Uint16Array([0,1,2,2,1,3]);return jI(r,e)}function am(r,e,t,o,n,s){YI(e,t);let a=XI(r),i=r.TEXTURE_2D;return ce(r,()=>r.bindTexture(i,a)),ce(r,()=>r.texParameteri(i,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE)),ce(r,()=>r.texParameteri(i,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE)),ce(r,()=>r.texParameteri(i,r.TEXTURE_MIN_FILTER,r.NEAREST)),ce(r,()=>r.texParameteri(i,r.TEXTURE_MAG_FILTER,r.NEAREST)),A().getNumber("WEBGL_VERSION")===1?ce(r,()=>r.texImage2D(i,0,o,e,t,0,n,s,null)):ce(r,()=>r.texStorage2D(i,1,o,e,t)),ce(r,()=>r.bindTexture(r.TEXTURE_2D,null)),{texture:a,texShape:[t,e]}}function hh(r){return r.internalFormatFloat}function m0(r,e,t,o){let[n,s]=Sp(e,t);return am(r,n,s,hh(o),o.textureFormatFloat,r.FLOAT)}function gh(r){return r.internalFormatHalfFloat}function d0(r,e,t,o){let[n,s]=Sp(e,t);return am(r,n,s,gh(o),o.textureFormatFloat,o.textureTypeHalfFloat)}function xh(r){return r.downloadTextureFormat}function f0(r,e,t,o){let[n,s]=Sp(e,t);return am(r,n,s,xh(o),r.RGBA,r.UNSIGNED_BYTE)}function yh(r){return r.internalFormatPackedFloat}function h0(r,e,t,o){let[n,s]=Ga(e,t);return am(r,n,s,yh(o),r.RGBA,r.FLOAT)}function bh(r){return r.internalFormatPackedHalfFloat}function g0(r,e,t,o){let[n,s]=Ga(e,t);return am(r,n,s,bh(o),r.RGBA,o.textureTypeHalfFloat)}function x0(r,e,t){return ce(r,()=>r.bindBuffer(r.ARRAY_BUFFER,t)),sh(r,e,"clipSpacePos",t,3,20,0)&&sh(r,e,"uv",t,2,20,12)}function y0(r,e,t,o,n,s){ce(r,()=>r.bindTexture(r.TEXTURE_2D,e));let a,i,p;n instanceof Uint8Array?(a=new Uint8Array(t*o*4),i=r.UNSIGNED_BYTE,p=r.RGBA):(a=new Float32Array(t*o*4),i=r.FLOAT,p=s.internalFormatPackedFloat),a.set(n),A().getNumber("WEBGL_VERSION")===2?ce(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,t,o,r.RGBA,i,a)):ce(r,()=>r.texImage2D(r.TEXTURE_2D,0,p,t,o,0,r.RGBA,i,a)),ce(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function b0(r,e,t){ce(r,()=>r.bindTexture(r.TEXTURE_2D,e)),t.data instanceof Uint8Array?A().getNumber("WEBGL_VERSION")===2?ce(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,t.width,t.height,r.RGBA,r.UNSIGNED_BYTE,t.data)):ce(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,t.width,t.height,0,r.RGBA,r.UNSIGNED_BYTE,t.data)):A().getNumber("WEBGL_VERSION")===2?ce(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,r.RGBA,r.UNSIGNED_BYTE,t)):ce(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,t)),ce(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function C0(r,e,t,o){let n=r.createBuffer();ce(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,n));let i=4*4*e*t;return ce(r,()=>r.bufferData(r.PIXEL_PACK_BUFFER,i,r.STREAM_READ)),ce(r,()=>r.readPixels(0,0,t,e,r.RGBA,r.FLOAT,0)),ce(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,null)),n}function w0(r,e,t){let o=r,n=new Float32Array(t);return o.bindBuffer(o.PIXEL_PACK_BUFFER,e),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,n),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),n}function S0(r,e,t,o){let[n,s]=Sp(e,t),a=4,i=new Uint8Array(uD(e*t,a));return ce(r,()=>r.readPixels(0,0,n,s,o.downloadTextureFormat,r.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}function I0(r,e,t,o,n,s,a,i){let p=r,u=new Float32Array(pD(s,a));return p.bindBuffer(p.PIXEL_PACK_BUFFER,e),p.getBufferSubData(p.PIXEL_PACK_BUFFER,0,u),p.bindBuffer(p.PIXEL_PACK_BUFFER,null),u}function v0(r,e,t){let o=new Float32Array(e*t*4);return ce(r,()=>r.readPixels(0,0,t,e,r.RGBA,r.FLOAT,o)),o}var kp=class{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];let t=A().getNumber("WEBGL_VERSION");if(e!=null?(this.gl=e,BI(t,e)):this.gl=Zr(t),e=this.gl,A().getNumber("WEBGL_VERSION")===2){let s=e;this.createVertexArray=()=>ce(s,()=>s.createVertexArray()),this.bindVertexArray=a=>ce(s,()=>s.bindVertexArray(a)),this.deleteVertexArray=a=>ce(s,()=>s.deleteVertexArray(a)),this.getVertexArray=()=>ce(s,()=>s.getParameter(s.VERTEX_ARRAY_BINDING))}else if(e!=null){let s=e.getExtension("OES_vertex_array_object");if(s==null)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>ce(e,()=>s.createVertexArrayOES()),this.bindVertexArray=a=>ce(e,()=>s.bindVertexArrayOES(a)),this.deleteVertexArray=a=>ce(e,()=>s.deleteVertexArrayOES(a)),this.getVertexArray=()=>ce(e,()=>e.getParameter(s.VERTEX_ARRAY_BINDING_OES))}let o="WEBGL_color_buffer_float",n="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),A().getNumber("WEBGL_VERSION")===1){let s="OES_texture_float",a="OES_texture_half_float";if(this.textureFloatExtension=Rl(this.gl,s),Jr(this.gl,a))this.textureHalfFloatExtension=Rl(this.gl,a);else if(A().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(o),Jr(this.gl,n))this.colorBufferHalfFloatExtension=Rl(this.gl,n);else if(A().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(o="EXT_color_buffer_float",Jr(this.gl,o))this.colorBufferFloatExtension=this.gl.getExtension(o);else if(Jr(this.gl,n))this.colorBufferHalfFloatExtension=this.gl.getExtension(n);else throw new Error("GL context does not support color renderable floats");this.vertexBuffer=l0(this.gl),this.indexBuffer=c0(this.gl),this.framebuffer=QI(this.gl),this.textureConfig=rm(this.gl,this.textureHalfFloatExtension)}get debug(){return A().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let e=this.gl;ce(e,()=>e.finish()),ce(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),ce(e,()=>e.deleteFramebuffer(this.framebuffer)),ce(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),ce(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),ce(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),m0(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),d0(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),f0(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),b0(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,o,n){this.throwIfDisposed(),y0(this.gl,e,t,o,n,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),g0(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),h0(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(ah(this.gl,this.framebuffer),this.outputTexture=null),ce(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,o){return this.downloadMatrixDriver(e,()=>S0(this.gl,t,o,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,o,n,s,a){return I0(this.gl,e,t,o,n,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return w0(this.gl,e,t)}createBufferFromTexture(e,t,o){this.bindTextureToFrameBuffer(e);let n=C0(this.gl,t,o,this.textureConfig);return this.unbindTextureToFrameBuffer(),n}createAndWaitForFence(){let e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,o;if(A().getBool("WEBGL_FENCE_API_ENABLED")){let n=e,s=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),o=()=>{let a=n.clientWaitSync(s,0,0);return a===n.ALREADY_SIGNALED||a===n.CONDITION_SATISFIED},t=s}else A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),o=()=>this.isQueryAvailable(t,A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):o=()=>!0;return{query:t,isFencePassed:o}}downloadMatrixFromPackedTexture(e,t,o){return this.downloadMatrixDriver(e,()=>v0(this.gl,t,o))}createProgram(e){this.throwIfDisposed();let t=this.gl;this.vertexShader==null&&(this.vertexShader=p0(t));let o=HI(t);ce(t,()=>t.attachShader(o,this.vertexShader)),ce(t,()=>t.attachShader(o,e)),KI(t,o);let n=Object.assign(o,{vao:this.createVertexArray()});return this.debug&&om(t,n),n}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);let t=this.gl;ce(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),x0(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),e!=null&&(ce(this.gl,()=>this.gl.deleteProgram(e)),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,this.program!=null&&this.debug&&om(this.gl,this.program),ce(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,o=!0){return this.throwIfDisposed(),o?ZI(this.gl,e,t):JI(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),ce(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,o){this.throwIfDisposed(),this.throwIfNoProgram(),e0(this.gl,e,t,o)}setOutputMatrixTexture(e,t,o){this.setOutputMatrixTextureDriver(e,o,t)}setOutputPackedMatrixTexture(e,t,o){this.throwIfDisposed();let[n,s]=Ga(t,o);this.setOutputMatrixTextureDriver(e,n,s)}setOutputMatrixWriteRegion(e,t,o,n){this.setOutputMatrixWriteRegionDriver(o,e,n,t)}setOutputPackedMatrixWriteRegion(e,t,o,n){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&om(this.gl,this.program),Dl(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let e=this.gl;if(this.debug){let t=this.getVertexArray();console.assert(t===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}ce(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),ce(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=Rl(this.gl,A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.createQuery();return o.beginQuery(n.TIME_ELAPSED_EXT,s),s}let e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let t=this.gl,o=this.getQueryTimerExtensionWebGL2();t.endQuery(o.TIME_ELAPSED_EXT);return}let e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await y.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(t===0)return null;if(t===2){let o=this.gl;return o.getQueryParameter(e,o.QUERY_RESULT)/1e6}else{let o=this.getQueryTimerExtensionWebGL1();return o.getQueryObjectEXT(e,o.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(t===0)return!0;if(t===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.getQueryParameter(e,o.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}else{let o=this.getQueryTimerExtensionWebGL1(),n=o.getQueryObjectEXT(e,o.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(o.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){let e=yJ(this.itemsToPoll.map(t=>t.isDoneFn));for(let t=0;t<=e;++t){let{resolveFn:o}=this.itemsToPoll[t];o()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let o;"setTimeoutCustom"in A().platform&&(o=A().platform.setTimeoutCustom.bind(A().platform)),y.repeatedTry(()=>(this.pollItems(),this.itemsToPoll.length===0),()=>0,null,o)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),nm(this.gl,e,this.framebuffer),this.debug&&Dl(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(nm(this.gl,this.outputTexture,this.framebuffer),this.debug&&Dl(this.gl)):ah(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);let o=t();return this.unbindTextureToFrameBuffer(),o}setOutputMatrixTextureDriver(e,t,o){this.throwIfDisposed();let n=this.gl;nm(n,e,this.framebuffer),this.debug&&Dl(n),this.outputTexture=e,ce(n,()=>n.viewport(0,0,t,o)),ce(n,()=>n.scissor(0,0,t,o))}setOutputMatrixWriteRegionDriver(e,t,o,n){this.throwIfDisposed(),ce(this.gl,()=>this.gl.scissor(e,t,o,n))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}};function yJ(r){let e=0;for(;e<r.length&&r[e]();++e);return e-1}var{addImpl:ID,bincountImpl:Ch,bincountReduceImpl:vD,bitwiseAndImpl:kD,castImpl:ND,ceilImpl:TD,concatImpl:_D,equalImpl:ED,expImpl:$D,expm1Impl:RD,floorImpl:DD,gatherNdImpl:AD,gatherV2Impl:FD,greaterImpl:PD,greaterEqualImpl:OD,lessImpl:MD,lessEqualImpl:LD,linSpaceImpl:BD,logImpl:zD,maxImpl:VD,maximumImpl:WD,minimumImpl:UD,multiplyImpl:GD,negImpl:HD,notEqualImpl:KD,prodImpl:qD,raggedGatherImpl:jD,raggedRangeImpl:XD,raggedTensorToTensorImpl:YD,rangeImpl:QD,rsqrtImpl:ZD,scatterImpl:JD,sigmoidImpl:eA,simpleAbsImpl:wh,sliceImpl:tA,sparseFillEmptyRowsImpl:rA,sparseReshapeImpl:oA,sparseSegmentReductionImpl:Sh,sqrtImpl:nA,staticRegexReplaceImpl:sA,stridedSliceImpl:aA,stringNGramsImpl:iA,stringSplitImpl:uA,stringToHashBucketFastImpl:pA,subImpl:lA,tileImpl:cA,topKImpl:mA,transposeImpl:Np,uniqueImpl:dA}=Xf;function N0(r,e){return["x","y","z","w","u","v"].slice(0,e).map(t=>`${r}.${t}`)}function At(r,e){return e===1?[r]:N0(r,e)}function fA(r,e){if(r===1)return"rc";let t="";for(let o=0;o<r;o++)t+=e[o],o<r-1&&(t+=",");return t}var Ih=class{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=lt(this.outputShape.length),this.rank===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let t=At("rc",this.rank),o=Re(this.rank),n=this.getOutOfBoundsCondition(t),s=this.getSetup(t),a=this.getOutput(t);this.userCode=`
        void main() {
          ${o} rc = getOutputCoords();

          if(${n}) {
            setOutput(vec4(0));
          } else {
            ${s}

            setOutput(vec4(${a}));
          }
        }
      `}}getSourceCoordsArr(e){let t=[];for(let o=0;o<=1;o++)for(let n=0;n<=1;n++){let s=`${o===0?"r":"rp1"}, ${n===0?"c":"cp1"}`;for(let a=2;a<this.rank;a++)s=`${e[e.length-1-a]},`+s;t.push(s)}return t}getOutOfBoundsCondition(e){if(this.rank===1)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let o=this.rank-2;o<this.rank;o++)t+=`${e[o]} >= ${this.enableShapeUniforms?`outShape[${o}]`:this.outputShape[o]}`,o<this.rank-1&&(t+="||");return t}getSetup(e){if(this.rank===1)return"";let t=e.slice(-2),o=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],n=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${o};
      bool rEdge = rp1 >= ${n};
    `}getOutput(e){let t=this.getSourceCoordsArr(e);return this.rank===1?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`}};var Wl=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=lt(this.outputShape.length);let o="";for(let n=0;n<4;n++){let s="thisRC = rc;";n%2===1&&(s+="thisRC.z += 1;"),n>1&&(s+="thisRC.y += 1;"),o+=`
        ${s}
        ${n>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${n}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${n>0?"}":""}
      `}this.userCode=`
      ${bJ(t,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?Ol():Pl(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};

        ${o}

        setOutput(result);
      }
    `}};function bJ(r,e){return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e?fD(["r","c","d"],"inputShape"):Qs(["r","c","d"],r)}
      return ivec3(r, c, d);
    }
  `}var vh=class{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,o){let n=gA(t,o),s=xA(e,n,o);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);let a=hA(e,n,this.gpgpu.gl,this.gpgpu.textureConfig,o);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();let p=this.freeTextures[s].pop();return this.usedTextures[s].push(p),p}let i;return n===or.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):n===or.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):n===or.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):n===or.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):n===or.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,o,n){if(this.freeTextures==null)return;let s=gA(o,n),a=xA(t,s,n);a in this.freeTextures||(this.freeTextures[a]=[]);let i=hA(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,n),p=A().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");p!==-1&&this._numBytesAllocated>p?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;let u=this.usedTextures[a],l=u&&u.indexOf(e);if(l==null||l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u[l]=u[u.length-1],u.pop(),this.log()}log(){if(!this.logEnabled)return;let e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);let t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(let e in this.freeTextures)this.freeTextures[e].forEach(t=>{this.gpgpu.deleteMatrixTexture(t.texture)});for(let e in this.usedTextures)this.usedTextures[e].forEach(t=>{this.gpgpu.deleteMatrixTexture(t.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}};function CJ(r,e){let t=r;if(e===t.R32F)return 4;if(e===t.R16F)return 2;if(e===t.RGBA32F)return 16;if(e===r.RGBA)return 16;if(e===t.RGBA16F)return 8;if(e===t.RGBA8)return 4;throw new Error(`Unknown internal format ${e}`)}function hA(r,e,t,o,n){let s=wJ(e,o),a;if(n){let[p,u]=Ga(r[0],r[1]);a=p*u}else{let[p,u]=Sp(r[0],r[1]);a=p*u}let i=CJ(t,s);return a*i}function wJ(r,e){switch(r){case or.PACKED_2X2_FLOAT32:return yh(e);case or.PACKED_2X2_FLOAT16:return bh(e);case or.UNPACKED_FLOAT32:return hh(e);case or.UNPACKED_FLOAT16:return gh(e);case or.PACKED_4X1_UNSIGNED_BYTE:return xh(e);default:throw new Error(`Unknown physical texture type ${r}`)}}function SJ(r){return A().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?r?or.PACKED_2X2_FLOAT32:or.UNPACKED_FLOAT32:r?or.PACKED_2X2_FLOAT16:or.UNPACKED_FLOAT16}function gA(r,e){if(r===hr.UPLOAD)return or.PACKED_2X2_FLOAT32;if(r===hr.RENDER||r==null)return SJ(e);if(r===hr.DOWNLOAD||r===hr.PIXELS)return or.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${r}`)}function xA(r,e,t){return`${r[0]}_${r[1]}_${e}_${t}`}var nr=class{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=lt(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}},Gt="if (isnan(x)) return x;",yA="return x;",T0="return abs(x);";var bA="return (x >= 0.0) ? x : (exp(x) - 1.0);",CA=Gt+`
  return (x < 0.0) ? 0.0 : x;
`,wA=Gt+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,Ha="return x;",SA="return 1.0 / (1.0 + exp(-1.0 * x));";var vA="return x;",kA=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,NA=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,TA=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,_A="return 1.0 / (1.0 + exp(-1.0 * x));",Lr=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=lt(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}};var kh=class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=lt(this.outputShape.length);let t=e.length,o=At("rc",t),n=Re(t),s=fA(t,o),a=o.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`
      void main() {
        ${n} rc = getOutputCoords();
        vec4 packedInput = getA(${s});

        setOutput(getChannel(packedInput, ${i}));
      }
    `}};var vJ=Ut.whereImpl,kJ=1e-7,NJ=1e-4,Nh={};function TJ(r){return r in Nh||(Nh[r]={}),Nh[r]}var _J=A().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),EJ=600;function $J(){return A().global.screen==null?1024:A().global.screen.height*A().global.screen.width*window.devicePixelRatio*EJ/1024/1024}var Ul=class r extends mo{nextDataId(){return r.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!A().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(e!=null){if(e instanceof kp)t=e;else{let o=Zr(A().getNumber("WEBGL_VERSION"),e);t=new kp(o)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{let o=Zr(A().getNumber("WEBGL_VERSION"));t=new kp(o),this.binaryCache=TJ(A().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new vh(this.gpgpu),this.numMBBeforeWarning=$J(),this.texData=new mn(this,cr())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,o,n,s,a){let i=this.makeTensorInfo(t,o),p=this.texData.get(i.dataId);p.isPacked=!1,p.texture={texture:e,texShape:[n,s]},p.texShape=[n,s];let u=Al(t),l=new sm(u,!1,a),c=this.runWebGLProgram(l,[i],o,[[n,s]]);return c.shape=t,p.texture=null,this.disposeIntermediateTensorInfo(i),c.dataId}write(e,t,o){if((A().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||A().getBool("DEBUG"))&&this.checkNumericalProblems(e),o==="complex64"&&e!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.texData.set(n,{shape:t,dtype:o,values:e,usage:hr.UPLOAD,refCount:1}),n}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){let t=this.texData.get(e);t.refCount++}decRef(e){if(this.texData.has(e)){let t=this.texData.get(e);t.refCount--}}move(e,t,o,n,s){if(A().getBool("DEBUG")&&this.checkNumericalProblems(t),n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:o,dtype:n,values:t,usage:hr.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){let t=this.texData.get(e),{values:o,dtype:n,complexTensorInfos:s,slice:a,shape:i,isPacked:p}=t;if(a!=null){let m;p?m=new Lr(i,Ha):m=new nr(i,Ha);let d=this.runWebGLProgram(m,[{dataId:e,shape:i,dtype:n}],n),f=this.readSync(d.dataId);return this.disposeIntermediateTensorInfo(d),f}if(o!=null)return this.convertAndCacheOnCPU(e);if(n==="string")return o;let u=this.activeTimers!=null,l;u&&(l=y.now());let c;if(n==="complex64"){let m=this.readSync(s.real.dataId),d=this.readSync(s.imag.dataId);c=C.mergeRealAndImagArrays(m,d)}else c=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=y.now()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){let f=this.pendingRead.get(e);return new Promise(h=>f.push(h))}let t=this.texData.get(e),{values:o,shape:n,slice:s,dtype:a,complexTensorInfos:i,isPacked:p}=t;if(s!=null){let f;p?f=new Lr(n,Ha):f=new nr(n,Ha);let h=this.runWebGLProgram(f,[{dataId:e,shape:n,dtype:a}],a),g=this.read(h.dataId);return this.disposeIntermediateTensorInfo(h),g}if(o!=null)return this.convertAndCacheOnCPU(e);if(A().getBool("DEBUG")&&!A().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&A().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u=null,l;if(a!=="complex64"&&A().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);let f=this.texData.get(l.dataId);u=this.gpgpu.createBufferFromTexture(f.texture.texture,...tm(n))}this.pendingRead.set(e,[]),a!=="complex64"&&await this.gpgpu.createAndWaitForFence();let c;if(a==="complex64"){let f=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]),h=f[0],g=f[1];c=C.mergeRealAndImagArrays(h,g)}else if(u==null)c=this.getValuesFromTexture(e);else{let f=y.sizeFromShape(n);c=this.gpgpu.downloadFloat32MatrixFromBuffer(u,f)}if(l!=null&&this.disposeIntermediateTensorInfo(l),u!=null){let f=this.gpgpu.gl;ce(f,()=>f.deleteBuffer(u))}let m=this.convertAndCacheOnCPU(e,c),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach(f=>f(m)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&cr().removeDataId(e,this),this.pendingDeletes--),m}readToGPU(e,t={}){let o=this.texData.get(e),{values:n,shape:s,slice:a,dtype:i,isPacked:p,texture:u}=o;if(i==="complex64")throw new Error("Does not support reading texture for complex64 dtype.");if(a!=null){let d;p?d=new Lr(s,Ha):d=new nr(s,Ha);let f=this.runWebGLProgram(d,[{dataId:e,shape:s,dtype:i}],i),h=this.readToGPU(f,t);return this.disposeIntermediateTensorInfo(f),h}if(u==null)throw n!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let l=this.decode(e,t.customTexShape),c=cr().makeTensorFromTensorInfo(l),m=this.texData.get(l.dataId);return Object.assign({tensorRef:c},m.texture)}bufferSync(e){let t=this.readSync(e.dataId);if(e.dtype==="string")try{let o=t.map(n=>y.decodeString(n));return ie(e.shape,e.dtype,o)}catch(o){throw new Error("Failed to decode encoded string bytes into utf-8")}return ie(e.shape,e.dtype,t)}checkNumericalProblems(e){if(e!=null)for(let t=0;t<e.length;t++){let o=e[t];if(!WI(o))throw A().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${o} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${o} cannot be represented on this device.`)}}getValuesFromTexture(e){let{shape:t,dtype:o,isPacked:n}=this.texData.get(e),s=y.sizeFromShape(t);if(A().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let m=this.decode(e),d=this.texData.get(m.dataId),f=this.gpgpu.downloadMatrixFromPackedTexture(d.texture.texture,...tm(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(m),f}let a=A().getBool("WEBGL_PACK")&&n===!0,i=a?Al(t):t,p=a?new dh(i):new mh(i),u=this.runWebGLProgram(p,[{shape:i,dtype:o,dataId:e}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture.texture,l.texShape[0],l.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),c}timerAvailable(){return A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){let t=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,e();let s=y.flatten(this.activeTimers.map(p=>p.query)).filter(p=>p!=null),a=y.flatten(this.activeTimers.map(p=>p.name)).filter(p=>p!=null);this.activeTimers=t,n&&(this.programTimersStack=null);let i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let p=await Promise.all(s);i.kernelMs=y.sum(p),i.getExtraProfileInfo=()=>p.map((u,l)=>({name:a[l],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:y.now(),endMs:null}}endTimer(e){return A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=y.now(),e)}async getQueryTime(e){if(A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);let t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);let{complexTensorInfos:o}=this.texData.get(e);return o!=null&&(this.disposeData(o.real.dataId,t),this.disposeData(o.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){let{texture:t,dtype:o,texShape:n,usage:s,isPacked:a,slice:i}=this.texData.get(e),p=i&&i.origDataId||e,u=this.dataRefCount.get(p);u>1?this.dataRefCount.set(p,u-1):(this.dataRefCount.delete(p),t!=null&&(this.numBytesInGPU-=this.computeBytes(n,o),this.textureManager.releaseTexture(t,n,s,a)));let l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=_J){return A().getBool("WEBGL_CPU_FORWARD")&&e.every(o=>this.texData.get(o.dataId).texture==null&&y.sizeFromShape(o.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){C.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let t=e.dataSync();return vJ(e.shape,t)}packedUnaryOp(e,t,o){let n=new Lr(e.shape,t),s=this.compileAndRun(n,[e],o);return cr().makeTensorFromTensorInfo(s)}abs(e){if(this.shouldExecuteOnCPU([e])&&e.dtype!=="complex64"){let n=wh(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,n)}if(A().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,T0,e.dtype);let t=new nr(e.shape,T0),o=this.compileAndRun(t,[e]);return cr().makeTensorFromTensorInfo(o)}makeTensorInfo(e,t,o){let n;if(t==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(a=>y.encodeString(a));n=this.write(s,e,t)}else n=this.write(o,e,t);return this.texData.get(n).usage=null,{dataId:n,shape:e,dtype:t}}makeOutput(e,t,o){return cr().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,o),this)}unpackTensor(e){let t=new kh(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){let t=new Ih(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){let o=[ki(e.shape),...Ni(e.shape)],n={dtype:e.dtype,shape:o,dataId:e.dataId},s=[ki(t),...Ni(t)],a=new Wl(s,o),i=!0,p=[o],u=this.runWebGLProgram(a,[n],e.dtype,p,i);return{dataId:u.dataId,shape:t,dtype:u.dtype}}decode(e,t){let o=this.texData.get(e),{isPacked:n,shape:s,dtype:a}=o;if(t!=null){let m=y.sizeFromShape(s),d=t[0]*t[1]*4;y.assert(m<=d,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let i=Al(s),p;n?p=new ch(i):p=new lh(i);let u=!0,l=[t!=null?t:tm(i)],c=this.runWebGLProgram(p,[{shape:i,dtype:a,dataId:e}],a,l,u,t);return{dtype:a,shape:s,dataId:c.dataId}}runWebGLProgram(e,t,o,n,s=!1,a){let i=this.makeTensorInfo(e.outputShape,o),p=this.texData.get(i.dataId);if(e.packedOutput&&(p.isPacked=!0),e.outPackingScheme===Iu.DENSE){let x=a!=null?a:tm(e.outputShape);p.texShape=x.map(b=>b*2)}if(e.outTexUsage!=null&&(p.usage=e.outTexUsage),y.sizeFromShape(i.shape)===0)return p.values=y.getTypedArrayFromDType(i.dtype,0),i;let u=[],l=t.map(x=>{if(x.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(x.dataId);if(b.texture==null){if(!e.packedInputs&&y.sizeFromShape(x.shape)<=A().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:x.shape,texData:null,isUniform:!0,uniformValues:b.values};e.packedInputs&&(b.isPacked=!0,b.shape=x.shape)}if(this.uploadToGPU(x.dataId),!!b.isPacked!=!!e.packedInputs)x=b.isPacked?this.unpackTensor(x):this.packTensor(x),u.push(x),b=this.texData.get(x.dataId);else if(b.isPacked&&!vu(b.shape,x.shape)){let w=x,S=x.shape;x.shape=b.shape,x=this.packedReshape(x,S),u.push(x),b=this.texData.get(x.dataId),w.shape=S}return{shape:x.shape,texData:b,isUniform:!1}});this.uploadToGPU(i.dataId);let c={shape:i.shape,texData:p,isUniform:!1},m=SD(e,l,c),d=this.getAndSaveBinary(m,()=>CD(this.gpgpu,e,l,c)),f=this.activeTimers!=null,h;f&&(h=this.startTimer()),A().get("ENGINE_COMPILE_ONLY")||wD(this.gpgpu,d,l,c,n),u.forEach(x=>this.disposeIntermediateTensorInfo(x)),f&&(h=this.endTimer(h),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(h)}));let g=A().getNumber("WEBGL_FLUSH_THRESHOLD");if(g>0){let x=y.now();x-this.lastGlFlushTime>g&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=x)}if(!A().getBool("WEBGL_LAZILY_UNPACK")&&p.isPacked&&s===!1){let x=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),x}return i}compileAndRun(e,t,o,n,s=!1){return o=o||t[0].dtype,this.runWebGLProgram(e,t,o,n,s)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(A().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement!="undefined"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=De(()=>{if(!A().get("WEBGL_RENDER_FLOAT32_ENABLED")){let e=A().getBool("DEBUG");A().set("DEBUG",!1);let t=this.abs(ke(1e-8)).dataSync()[0];if(A().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?kJ:NJ}uploadToGPU(e){let t=this.texData.get(e),{shape:o,dtype:n,values:s,texture:a,usage:i,isPacked:p}=t;if(a!=null)return;let u=this.activeTimers!=null,l;u&&(l=y.now());let c=t.texShape;if(c==null&&(c=t0(o,p),t.texShape=c),s!=null){let m=Al(o),d,f=c[1],h=c[0],g=s instanceof Uint8Array||s instanceof Uint8ClampedArray;(p||!g)&&([f,h]=Ga(c[0],c[1])),p?d=new fh(m,g):d=new sm(m,g);let x=g?[h,f]:c,b=this.makeTensorInfo(x,n),w=this.texData.get(b.dataId);g?w.usage=hr.PIXELS:w.usage=hr.UPLOAD,w.texShape=x,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),f,h,s);let S=[[h,f]],T=this.runWebGLProgram(d,[b],n,S,!0),E=this.texData.get(T.dataId);t.texShape=E.texShape,t.isPacked=E.isPacked,t.usage=E.usage,A().get("ENGINE_COMPILE_ONLY")?this.disposeData(T.dataId):(t.texture=E.texture,t.values=null,this.texData.delete(T.dataId)),this.disposeIntermediateTensorInfo(b),u&&(this.uploadWaitMs+=y.now()-l)}else{let m=this.acquireTexture(c,i,n,p);t.texture=m}}convertAndCacheOnCPU(e,t){let o=this.texData.get(e),{dtype:n}=o;return t!=null&&(o.values=RJ(t,n)),o.values}acquireTexture(e,t,o,n){if(this.numBytesInGPU+=this.computeBytes(e,o),!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){let s=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,n)}computeBytes(e,t){return e[0]*e[1]*y.bytesPerElement(t)}checkCompileCompletion(){for(let[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){let e=[];if(this.gpgpu.parallelCompilationExtension){for(let[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}else{for(let[,t]of Object.entries(this.binaryCache)){let o=new Promise(n=>{try{this.checkCompletion_(t),n(!0)}catch(s){throw s}});e.push(o)}return Promise.all(e)}}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await IS(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)===!1)throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)===!1?(nh(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(let e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);let{variablesLocations:t,customUniformLocations:o,infLoc:n,nanLoc:s,outShapeLocation:a,outShapeStridesLocation:i,outTexShapeLocation:p}=u0(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=o,e.infLoc=n,e.nanLoc=s,e.outShapeLocation=a,e.outShapeStridesLocation=i,e.outTexShapeLocation=p}}createTensorFromGPUData(e,t,o){e.channels=e.channels||"RGBA";let{texture:n,height:s,width:a,channels:i}=e,p=cr().backend;if(!p.gpgpu.gl.isTexture(n))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");let u=p.writeTexture(n,t,o,s,a,i);return cr().makeTensorFromDataId(u,t,o,p)}};Ul.nextDataId=0;function RJ(r,e){if(e==="float32"||e==="complex64")return r;if(e==="int32"||e==="bool"){let t=e==="int32"?new Int32Array(r.length):new Uint8Array(r.length);for(let o=0;o<t.length;++o)t[o]=Math.round(r[o]);return t}else throw new Error(`Unknown dtype ${e}`)}var DJ="4.17.0";function EA(){A().set("WEBGL_FORCE_F16_TEXTURES",!0)}uu.isBrowser()&&pu("webgl",()=>new Ul,2);var sut={forceHalfFloat:EA};var Gl=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;var Br=class{constructor(e,t,o){this.variableNames=["A","B"],this.outputShape=C.assertAndGetBroadcastShape(t,o),this.enableShapeUniforms=lt(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}};var to=`
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;var eo=class{constructor(e,t,o,n=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=C.assertAndGetBroadcastShape(t,o);let s=this.outputShape.length;this.enableShapeUniforms=lt(s);let a="";if(n)if(s===0||y.sizeFromShape(this.outputShape)===1)a=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(a=`
          ${Re(s)} coords = getOutputCoords();
        `,s===1)this.enableShapeUniforms?a+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:a+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let p=At("coords",s);this.enableShapeUniforms?a+=`
            bool nextRowOutOfBounds =
              (${p[s-2]} + 1) >= outShape[${s} - 2];
            bool nextColOutOfBounds =
              (${p[s-1]} + 1) >= outShape[${s} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:a+=`
            bool nextRowOutOfBounds =
              (${p[s-2]} + 1) >= ${this.outputShape[s-2]};
            bool nextColOutOfBounds =
              (${p[s-1]} + 1) >= ${this.outputShape[s-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${a}

        setOutput(result);
      }
    `}};function Ft(r){let{inputs:e,backend:t}=r,{x:o}=e;return t.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var $A={kernelName:vo,backendName:"webgl",kernelFunc:Ft};function zr(r){let{inputs:e,backend:t}=r,{real:o,imag:n}=e,s=t.makeTensorInfo(o.shape,"complex64"),a=t.texData.get(s.dataId),i=Ft({inputs:{x:o},backend:t}),p=Ft({inputs:{x:n},backend:t});return a.complexTensorInfos={real:i,imag:p},s}var RA={kernelName:ei,backendName:"webgl",kernelFunc:zr};var _0="return (a < 0.) ? b * a : a;",E0=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function AJ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{alpha:s}=o,a=t.makeTensorInfo([],"float32",y.createScalarValue(s,"float32")),i=A().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new eo(E0,n.shape,a.shape):new Br(_0,n.shape,a.shape),p=t.runWebGLProgram(i,[n,a],"float32");return t.disposeIntermediateTensorInfo(a),p}var DA={kernelName:Yn,backendName:"webgl",kernelFunc:AJ};var $0="return (a < 0.) ? b * a : a;",R0=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function FJ(r){let{inputs:e,backend:t}=r,{x:o,alpha:n}=e,s=A().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new eo(R0,o.shape,n.shape):new Br($0,o.shape,n.shape);return t.runWebGLProgram(s,[o,n],"float32")}var AA={kernelName:gs,backendName:"webgl",kernelFunc:FJ};var sn="if (isnan(x)) return x;";function xe({opSnippet:r,packedOpSnippet:e,cpuKernelImpl:t,dtype:o}){return({inputs:n,backend:s})=>{let{x:a}=n,i=s,p=o||a.dtype;if(i.shouldExecuteOnCPU([a])&&t!=null){let c=i.texData.get(a.dataId),m=t(c.values,p);return i.makeTensorInfo(a.shape,p,m)}let u=A().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&e!=null,l;return u?l=new Lr(a.shape,e):l=new nr(a.shape,r),i.runWebGLProgram(l,[a],p)}}function st({opSnippet:r,packedOpSnippet:e,checkOutOfBounds:t=!1,supportsComplex:o=!1,cpuKernelImpl:n,dtype:s}){return({inputs:a,backend:i})=>{let{a:p,b:u}=a,l=i;if(o&&p.dtype==="complex64"){let f=l.texData.get(p.dataId),h=l.texData.get(u.dataId),[g,x]=[[f.complexTensorInfos.real,h.complexTensorInfos.real],[f.complexTensorInfos.imag,h.complexTensorInfos.imag]].map(w=>{let[S,k]=w,T={dataId:S.dataId,dtype:S.dtype,shape:p.shape},E={dataId:k.dataId,dtype:k.dtype,shape:u.shape},R=new Br(r,p.shape,u.shape);return l.runWebGLProgram(R,[T,E],pt(S.dtype,k.dtype))}),b=zr({inputs:{real:g,imag:x},backend:l});return l.disposeIntermediateTensorInfo(g),l.disposeIntermediateTensorInfo(x),b}let c=s||pt(p.dtype,u.dtype);if((p.dtype==="string"||u.dtype==="string"||l.shouldExecuteOnCPU([p,u]))&&n!=null){let f=l.texData.get(p.dataId).values,h=l.texData.get(u.dataId).values,g=p.dtype==="string"?C.fromUint8ToStringArray(f):f,x=p.dtype==="string"?C.fromUint8ToStringArray(h):h,[b,w]=n(p.shape,u.shape,g,x,c),S=l.makeTensorInfo(w,c),k=l.texData.get(S.dataId);return k.values=b,S}let m=A().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&e!=null,d;return m?d=new eo(e,p.shape,u.shape,t):d=new Br(r,p.shape,u.shape),l.runWebGLProgram(d,[p,u],c)}}function Ti(r,e=!1){if(r==="linear")return e?vA:yA;if(r==="relu")return e?NA:CA;if(r==="elu")return e?kA:bA;if(r==="relu6")return e?TA:wA;if(r==="prelu")return e?R0:$0;if(r==="leakyrelu")return e?E0:_0;if(r==="sigmoid")return e?_A:SA;throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`)}var Hl=class{constructor(e,t,o,n=!1,s=!1,a=!1,i=null,p=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=o,this.enableShapeUniforms=lt(this.outputShape.length);let l=n?e[1]:e[2],c=Math.ceil(l/2),m=n?"i * 2, rc.y":"rc.y, i * 2",d=s?"rc.z, i * 2":"i * 2, rc.z",f=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],h=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],g="",x="";i&&(p?g=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }`:u?g=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }`:g=`vec4 activation(vec4 x) {
          ${i}
        }`,x="result = activation(result);");let b=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),p&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let w="rc.x",S="rc.x";e[0]<t[0]?w=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(S=`imod(rc.x, ${t[0]})`),this.userCode=`
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${c}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${w};
        int batchB = ${S};
        for (int i = 0; i < ${c}; i++) {
          vec4 a = getMatrixA(batchA, ${m});
          vec4 b = getMatrixB(batchB, ${d});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${f[0]} * ${h[0]});
          result += (${f[1]} * ${h[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${x}

        setOutput(result);
      }
    `}};var D0={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"},im=class{constructor(e,t,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=C.assertAndGetBroadcastShape(t,o),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}};var FA="return a * b;";function um(r){let{inputs:e,backend:t}=r,{a:o,b:n}=e,s=C.upcastType(o.dtype,n.dtype);if(o.dtype==="complex64"){let i=t.texData.get(o.dataId),p=t.texData.get(n.dataId),u=new im(D0.REAL,o.shape,n.shape),l=new im(D0.IMAG,o.shape,n.shape),c=[{dataId:i.complexTensorInfos.real.dataId,dtype:i.complexTensorInfos.real.dtype,shape:o.shape},{dataId:i.complexTensorInfos.imag.dataId,dtype:i.complexTensorInfos.imag.dtype,shape:o.shape},{dataId:p.complexTensorInfos.real.dataId,dtype:p.complexTensorInfos.real.dtype,shape:n.shape},{dataId:p.complexTensorInfos.imag.dataId,dtype:p.complexTensorInfos.imag.dtype,shape:n.shape}],m=t.runWebGLProgram(u,c,"float32"),d=t.runWebGLProgram(l,c,"float32"),f=zr({inputs:{real:m,imag:d},backend:t});return t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(d),f}if(t.shouldExecuteOnCPU([o,n])){let i=t.texData.get(o.dataId),p=t.texData.get(n.dataId),[u,l]=GD(o.shape,n.shape,i.values,p.values,s),c=t.makeTensorInfo(l,s),m=t.texData.get(c.dataId);return m.values=u,c}let a;return A().getBool("WEBGL_PACK_BINARY_OPERATIONS")?a=new eo(FA,o.shape,n.shape):a=new Br(FA,o.shape,n.shape),t.runWebGLProgram(a,[o,n],s)}var PA={kernelName:$o,backendName:"webgl",kernelFunc:um};function OA(r,e,t){let o=[ki(r.shape),...Ni(r.shape)],n={dtype:r.dtype,shape:o,dataId:r.dataId},s=[ki(e),...Ni(e)],a=new Wl(s,o),i=!0,p=[o],u=t.runWebGLProgram(a,[n],r.dtype,p,i);return{dataId:u.dataId,shape:e,dtype:u.dtype}}function te(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{shape:s}=o,a=t,i=y.sizeFromShape(n.shape),p=y.inferFromImplicitShape(s,i),u=y.sizeFromShape(p);y.assert(i===u,()=>`The new shape (${p}) has ${u} elements and the old shape (${n.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);let l=a.texData.get(n.dataId);return l.isPacked&&!vu(n.shape,p)&&!(l.texture!==null&&vu(l.shape,p))?OA(n,p,a):(a.incRef(n.dataId),{dataId:n.dataId,shape:p,dtype:n.dtype})}var MA={kernelName:Ca,backendName:"webgl",kernelFunc:te};var pm=class{constructor(e,t){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:a}=e;this.outputShape=[n,a];let i=Math.floor(o/4)*4,p=o%4,u="sumValue += dot(values, ones);";if(t!=null){let c=1/t;u=`sumValue += dot(values * ${y.isInt(c)?c.toPrecision(2):c}, ones);`}let l="";s%o>0&&(l=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${l}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${i};
        if (${p===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${p===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${p===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `}};var Th=class{constructor(e,t){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:a}=e;this.outputShape=[n,a];let i="0.0",p="";t==="prod"?i="1.0":t==="min"?(i="1.0 / 1e-20",p="min"):t==="max"&&(i="-1.0 / 1e-20",p="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="sum"?u="sumValue":t==="prod"?u="prodValue":t==="all"?u="allValue":t==="any"&&(u="anyValue");let l=Math.floor(o/4)*4,c=o%4,m=`
      if (${t==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${t==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${p}(values, minMaxValue);
        if (${t==="min"} || ${t==="max"}) {
          minMaxValue = ${p}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,d="vec4";t==="all"?(i="1.0",m=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,d="bvec4"):t==="any"&&(i="0.0",m=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,d="bvec4");let f="";s%o>0&&(f=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${i};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        vec4 minMaxValue = vec4(${i});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${l}; i += 4) {
          int inIdx = inOffset + i;
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${m}
        }

        int inIdx = inOffset + ${l};
        if (${c===1}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${c===2}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${c===3}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function OJ(r){let e=[];for(;e.length===0||e[e.length-1].outSize!==1;){let t=e.length?e[e.length-1].outSize:r[1],o=C.computeOptimalWindowSize(t);e.push({inSize:t,windowSize:o,outSize:Math.ceil(t/o)})}return e}function ro(r,e,t,o){let n=OJ(r.shape),s=r;for(let a=0;a<n.length;a++){let{inSize:i,windowSize:p,outSize:u}=n[a],l,c;t==="mean"?l=a===0?new pm({windowSize:p,inSize:i,batchSize:r.shape[0],outSize:u},i):new pm({windowSize:p,inSize:i,batchSize:r.shape[0],outSize:u}):l=new Th({windowSize:p,inSize:i,batchSize:r.shape[0],outSize:u},t),c=s,s=o.runWebGLProgram(l,[s],e),c.dataId!==r.dataId&&o.disposeIntermediateTensorInfo(c)}return s}var _h=class{constructor(e,t){this.variableNames=["A"];let o=new Array(e.length);for(let a=0;a<o.length;a++)o[a]=e[t[a]];this.outputShape=o,this.rank=o.length;let n=Re(this.rank),s=MJ(t);this.userCode=`
    void main() {
      ${n} resRC = getOutputCoords();
      setOutput(getA(${s}));
    }
    `}};function MJ(r){let e=r.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);let t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],o=new Array(e);for(let n=0;n<r.length;n++)o[r[n]]=t[n];return o.join()}var Eh=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let o=new Array(e.length);for(let l=0;l<o.length;l++)o[l]=e[t[l]];if(this.outputShape=o,this.rank=o.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let n=Re(this.rank),s=N0("rc",this.rank),a=new Array(this.rank);for(let l=0;l<t.length;l++)a[t[l]]=s[l];let i=`vec2(${a.slice(-2).join()})`,p=`++${s[this.rank-1]} < ${o[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`
    void main() {
      ${n} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${u};
      if(${p}) {
        result[1] = ${u};
      }
      --${s[this.rank-1]};
      if(++${s[this.rank-2]} < ${o[this.rank-2]}) {
        result[2] = ${u};
        if(${p}) {
          result[3] = ${u};
        }
      }
      setOutput(result);
    }
    `}};function ku(r,e,t){let o=A().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Eh(r.shape,e):new _h(r.shape,e);return t.runWebGLProgram(o,[r],r.dtype)}function LA(r,e,t,o){let n=e,s=r.shape.length,a=y.parseAxisParam(n,r.shape),i=a,p=C.getAxesPermutation(i,s),u=p!=null,l=r;u&&(l=ku(r,p,o),i=C.getInnerMostAxes(i.length,s)),C.assertAxesAreInnerMostDims("sum",i,s);let[c,m]=C.computeOutAndReduceShapes(l.shape,i),d=c;t&&(d=C.expandShapeToKeepDim(c,a));let f=y.sizeFromShape(m),g=y.sizeFromShape(r.shape)/f,x=te({inputs:{x:l},attrs:{shape:[g,f]},backend:o}),b=mi(r.dtype),w=ro(x,b,"sum",o),S=te({inputs:{x:w},attrs:{shape:d},backend:o});return o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),u&&o.disposeIntermediateTensorInfo(l),S}function Tp(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o;return LA(n,s,a,t)}var BA={kernelName:As,backendName:"webgl",kernelFunc:Tp};function Ct(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{perm:s}=o,a=t,i=n.shape.length,p=new Array(i);for(let l=0;l<p.length;l++)p[l]=n.shape[s[l]];let u;if(a.shouldExecuteOnCPU([n])){let c=a.texData.get(n.dataId).values,m=Np(c,n.shape,n.dtype,s,p);u=a.makeTensorInfo(p,n.dtype);let d=a.texData.get(u.dataId);d.values=m}else u=ku(n,s,a);return u}var zA={kernelName:Kr,backendName:"webgl",kernelFunc:Ct};var A0=1e3;function _p({a:r,b:e,transposeA:t,transposeB:o,backend:n,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:p=null}){let u=r.shape.length,l=e.shape.length,c=t?r.shape[u-2]:r.shape[u-1],m=o?e.shape[l-1]:e.shape[l-2],d=t?r.shape[u-1]:r.shape[u-2],f=o?e.shape[l-2]:e.shape[l-1],h=r.shape.slice(0,-2),g=e.shape.slice(0,-2),x=y.sizeFromShape(h),b=y.sizeFromShape(g),S=kr.assertAndGetBroadcastShape(r.shape.slice(0,-2),e.shape.slice(0,-2)).concat([d,f]);y.assert(c===m,()=>`Error in matMul: inner shapes (${c}) and (${m}) of Tensors with shapes ${r.shape} and ${e.shape} and transposeA=${t} and transposeB=${o} must match.`);let k=t?[x,c,d]:[x,d,c],T=o?[b,f,m]:[b,m,f],E=te({inputs:{x:r},backend:n,attrs:{shape:k}}),R=te({inputs:{x:e},backend:n,attrs:{shape:T}}),D=[E,R],F=Math.max(x,b),O=t?E.shape[1]:E.shape[2],M=s!=null,L=a!=null,B=p==="leakyrelu",z=p!=null?Ti(p,!0):null,U=M||L||B||z!=null,j;if((d===1||f===1)&&O>A0&&U===!1){let Y=E,J=R;t&&(Y=Ct({inputs:{x:E},backend:n,attrs:{perm:[0,2,1]}}),D.push(Y)),o&&(J=Ct({inputs:{x:R},backend:n,attrs:{perm:[0,2,1]}}),D.push(J));let re=f!==1,ne=f===1,ee=Y;re&&(ee=te({inputs:{x:Y},backend:n,attrs:{shape:[F,O,1]}}),D.push(ee));let oe=f===1?2:1,ue=J;ne&&(ue=te({inputs:{x:J},backend:n,attrs:{shape:[F,1,O]}}),D.push(ue));let me=um({inputs:{a:ee,b:ue},backend:n});j=Tp({inputs:{x:me},backend:n,attrs:{axis:oe,keepDims:!0}}),D.push(me)}else{let Y=pt(r.dtype,e.dtype),J=new Hl(k,T,[F,d,f],t,o,M,z,L,B),re=[E,R];if(s!=null&&re.push(s),L&&re.push(a),B){let ne=n.makeTensorInfo([],"float32",y.createScalarValue(i,"float32"));re.push(ne),D.push(ne)}j=n.runWebGLProgram(J,re,Y)}let q=te({inputs:{x:j},backend:n,attrs:{shape:S}});D.push(j);for(let Y of D)n.disposeIntermediateTensorInfo(Y);return q}function LJ(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s,bias:a,preluActivationWeights:i}=e,{transposeA:p,transposeB:u,activation:l,leakyreluAlpha:c}=o;return _p({a:n,b:s,transposeA:p,transposeB:u,backend:t,bias:a,preluActivationWeights:i,leakyreluAlpha:c,activation:l})}var VA={kernelName:qo,backendName:"webgl",kernelFunc:LJ};var WA="return abs(x);";function BJ(r){let{inputs:e,backend:t}=r,{x:o}=e;if(t.shouldExecuteOnCPU([o])&&o.dtype!=="complex64"){let s=t.texData.get(o.dataId),a=wh(s.values);return t.makeTensorInfo(o.shape,o.dtype,a)}let n;return A().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new Lr(o.shape,WA):n=new nr(o.shape,WA),t.runWebGLProgram(n,[o],o.dtype)}var UA={kernelName:fn,backendName:"webgl",kernelFunc:BJ};var zJ=Gt+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,VJ=xe({opSnippet:zJ}),GA={kernelName:hn,backendName:"webgl",kernelFunc:VJ};var WJ=Gt+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,UJ=xe({opSnippet:WJ}),HA={kernelName:gn,backendName:"webgl",kernelFunc:UJ};var KA="return a + b;",GJ=st({opSnippet:KA,packedOpSnippet:KA,supportsComplex:!0,cpuKernelImpl:ID}),qA={kernelName:Rr,backendName:"webgl",kernelFunc:GJ};var $h=class{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((s,a)=>`T${a}`);let o=[];this.variableNames.forEach(s=>{o.push(`float v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        float result = ${n};
        setOutput(result);
      }
    `}};var Rh=class{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((s,a)=>`T${a}`);let o=[];this.variableNames.forEach(s=>{o.push(`vec4 v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        vec4 result = ${n};
        setOutput(result);
      }
    `}};function Dh(r){let{inputs:e,backend:t}=r,o=e;if(o.length===1)return Ft({inputs:{x:o[0]},backend:t});if(o.length>A().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){let p=Math.floor(o.length/2),u=Dh({inputs:o.slice(0,p),backend:t}),l=Dh({inputs:o.slice(p),backend:t});return Dh({inputs:[u,l],backend:t})}let n=o.map(p=>p.dtype).reduce((p,u)=>pt(p,u)),s=o.map(p=>p.shape),i=A().getBool("WEBGL_PACK")?new Rh(o[0].shape,s):new $h(o[0].shape,s);return t.runWebGLProgram(i,o,n)}var jA={kernelName:xn,backendName:"webgl",kernelFunc:Dh};function HJ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o,i=n.shape.length,p=y.parseAxisParam(s,n.shape),u=p,l=C.getAxesPermutation(u,i),c=n;l!=null&&(c=Ct({inputs:{x:n},backend:t,attrs:{perm:l}}),u=C.getInnerMostAxes(u.length,i)),C.assertAxesAreInnerMostDims("all",u,i);let[m,d]=C.computeOutAndReduceShapes(c.shape,u),f=y.sizeFromShape(d),h=te({inputs:{x:c},backend:t,attrs:{shape:[-1,f]}}),g=ro(h,h.dtype,"all",t),x;if(a){let b=C.expandShapeToKeepDim(m,p);x=te({inputs:{x:g},backend:t,attrs:{shape:b}})}else x=te({inputs:{x:g},backend:t,attrs:{shape:m}});return t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(g),l!=null&&t.disposeIntermediateTensorInfo(c),x}var XA={kernelName:yn,backendName:"webgl",kernelFunc:HJ};function KJ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o,i=n.shape.length,p=y.parseAxisParam(s,n.shape),u=p,l=C.getAxesPermutation(u,i),c=n;l!=null&&(c=Ct({inputs:{x:n},backend:t,attrs:{perm:l}}),u=C.getInnerMostAxes(u.length,i)),C.assertAxesAreInnerMostDims("any",u,i);let[m,d]=C.computeOutAndReduceShapes(c.shape,u),f=y.sizeFromShape(d),h=te({inputs:{x:c},backend:t,attrs:{shape:[-1,f]}}),g=ro(h,h.dtype,"any",t),x;if(a){let b=C.expandShapeToKeepDim(m,p);x=te({inputs:{x:g},backend:t,attrs:{shape:b}})}else x=te({inputs:{x:g},backend:t,attrs:{shape:m}});return t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(g),l!=null&&t.disposeIntermediateTensorInfo(c),x}var YA={kernelName:bn,backendName:"webgl",kernelFunc:KJ};var Ah=class{constructor(e,t,o){this.variableNames=["A"];let{windowSize:n,batchSize:s,outSize:a}=e;o||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];let i=t==="max"?">":"<",p=o?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${n}; i++) {
          int inIdx = ${p};
          float candidate = getA(batch, inIdx);
          if (candidate ${i} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}};var Fh=class{constructor(e,t,o,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,y.assert(e.length>2,()=>`Packed arg${o.charAt(0).toUpperCase()+o.slice(1)} supports only inputs with rank above 2.`);let s=e[e.length-1],a=Math.ceil(s/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),n||this.variableNames.push("bestIndicesA");let i=this.outputShape,p=i.length,u=Re(p),l=At("coords",p),c,m;if(a===1){m=p+1;let R=Re(m);c=`
        ${R} sourceLocR = ${R}(${l.join()}, 0);
        ++${l[p-1]};
        ${R} sourceLocG = ${R}(${l.join()}, 0);
        ++${l[p-2]};
        ${R} sourceLocA = ${R}(${l.join()}, 0);
        --${l[p-1]};
        ${R} sourceLocB = ${R}(${l.join()}, 0);
        --${l[p-2]};`}else m=p,c=`
        ${u} sourceLocR = coords;
        ++${l[p-1]};
        ${u} sourceLocG = coords;
        ++${l[p-2]};
        ${u} sourceLocA = coords;
        --${l[p-1]};
        ${u} sourceLocB = coords;
        --${l[p-2]};`;let d=["x","y","z","w","u","v"].slice(0,m),f="."+d[m-1],h=d.map(R=>"int "+R),g=At("sourceLocR",m-1).concat("inIdx.r"),x=At("sourceLocG",m-1).concat("inIdx.g"),b=At("sourceLocB",m-1).concat("inIdx.b"),w=At("sourceLocA",m-1).concat("inIdx.a"),S=o==="max"?"greaterThan":"lessThan",k=n?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${x.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${w.join()})));`,T=`vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${x.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`,E=n?"":`
      float getBestIndicesAChannel(${h.join()}) {
        return getChannel(getBestIndicesA(${d.join()}),
                                          vec2(${d.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${h.join()}) {
        return getChannel(getA(${d.join()}),
                               vec2(${d.slice(-2).join()}));
      }
      ${E}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${l[p-1]} < ${i[p-1]-1};
        bool hasNextRow = ${l[p-2]} < ${i[p-2]-1};
        ${c}
        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},
          sourceLocB${f}, sourceLocA${f}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${T};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${k}
          vec4 candidate = ${T};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${S}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}};function QA(r,e,t,o=null){let n=e.shape[0],s=e.shape[1];o!=null&&(n=o.shape[0],s=o.shape[1]);let a=C.computeOptimalWindowSize(s),i={windowSize:a,inSize:s,batchSize:n,outSize:Math.ceil(s/a)},p=new Ah(i,t,o==null),u=[e];o!=null&&u.push(o);let l=r.runWebGLProgram(p,u,"int32");if(l.shape[1]===1)return l;let c=QA(r,e,t,l);return r.disposeIntermediateTensorInfo(l),c}function ZA(r,e,t,o=null){let n=o!=null?o.shape:e.shape,s=n[n.length-1],a=C.computeOptimalWindowSize(s),i=new Fh(n,a,t,o==null),p=o==null?[e]:[e,o],u=r.runWebGLProgram(i,p,"int32");if(u.shape.length===e.shape.length){let l=ZA(r,e,t,u);return r.disposeIntermediateTensorInfo(u),l}return u}function Ph(r,e,t,o){let n=[t];if(C.assertAxesAreInnerMostDims("arg"+o.charAt(0).toUpperCase()+o.slice(1),n,e.shape.length),!A().getBool("WEBGL_PACK_REDUCE")||e.shape.length<=2){let s=[],a=r.texData.get(e.dataId),i=a!==null&&a.isPacked,p=e;i&&(p=r.unpackTensor(e),s.push(p));let[u,l]=C.computeOutAndReduceShapes(p.shape,n),c=y.sizeFromShape(l),m=te({inputs:{x:p},backend:r,attrs:{shape:[-1,c]}});s.push(m);let d=QA(r,m,o);s.push(d);let f=te({inputs:{x:d},backend:r,attrs:{shape:u}});return s.forEach(h=>r.disposeIntermediateTensorInfo(h)),f}return ZA(r,e,o)}function qJ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o,a=y.parseAxisParam(s,n.shape),i=C.getAxesPermutation(a,n.shape.length),p=n,u=[];i!=null&&(p=Ct({inputs:{x:n},backend:t,attrs:{perm:i}}),u.push(p),a=C.getInnerMostAxes(a.length,p.shape.length)),C.assertAxesAreInnerMostDims("argMax",[a[0]],p.shape.length);let l=Ph(t,p,a[0],"max");return u.forEach(c=>t.disposeIntermediateTensorInfo(c)),l}var JA={kernelName:na,backendName:"webgl",kernelFunc:qJ};function jJ(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o,a=y.parseAxisParam(s,n.shape),i=C.getAxesPermutation(a,n.shape.length),p=n,u=[];i!=null&&(p=Ct({inputs:{x:n},backend:t,attrs:{perm:i}}),u.push(p),a=C.getInnerMostAxes(a.length,p.shape.length)),C.assertAxesAreInnerMostDims("argMin",[a[0]],p.shape.length);let l=Ph(t,p,a[0],"min");return u.forEach(c=>t.disposeIntermediateTensorInfo(c)),l}var eF={kernelName:sa,backendName:"webgl",kernelFunc:jJ};var XJ=Gt+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,YJ=xe({opSnippet:XJ}),tF={kernelName:Cn,backendName:"webgl",kernelFunc:YJ};var QJ=Gt+"return log(x + sqrt(x * x + 1.0));",ZJ=xe({opSnippet:QJ}),rF={kernelName:wn,backendName:"webgl",kernelFunc:ZJ};var JJ=Gt+`
  return atan(x);
`,eee=xe({opSnippet:JJ}),oF={kernelName:Sn,backendName:"webgl",kernelFunc:eee};var tee=Gl+`
  return atan(a, b);
`,ree=`
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+to+`
  return result;
`,oee=st({opSnippet:tee,packedOpSnippet:ree}),nF={kernelName:vn,backendName:"webgl",kernelFunc:oee};var nee=Gt+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,see=xe({opSnippet:nee}),sF={kernelName:In,backendName:"webgl",kernelFunc:see};var Zs=class{constructor(e,t,o,n=!1,s=!1){if(this.variableNames=["x"],t==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let a=e.filterWidth,i=e.strideHeight,p=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,m=e.effectiveFilterWidth,d=e.padInfo.top,f=e.padInfo.left;this.outputShape=e.outShape;let h=t==="avg",g=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,x=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`,b="0.0";if(h||(b="-1.0 / 1e-20"),o){let R=">=";this.userCode=`
        const ivec2 strides = ivec2(${i}, ${p});
        const ivec2 pads = ivec2(${d}, ${f});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${c};
              wR += ${u}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${m};
                wC += ${l}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${R} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${n?s?g:x:`wR * ${m} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let w="max",S=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="avg"&&(S="avgValue / max(count, 1.0)");let k=Math.floor(a/4)*4,T=a%4,E=`
      if (${h}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${w}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${i}, ${p});
      const ivec2 pads = ivec2(${d}, ${f});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${c};
            wR += ${u}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${k}; wC += 4) {
            int xC = xCCorner + wC * ${l};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${l}, d),
              getValue(batch, xR, xC + 2 * ${l}, d),
              getValue(batch, xR, xC + 3 * ${l}, d)
            );

            ${E}
          }

          int xC = xCCorner + ${k};
          if (${T===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${E}
          } else if (${T===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${l}, d),
              initializationValue,
              initializationValue
            );

            ${E}
          } else if (${T===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${l}, d),
              getValue(batch, xR, xC + 2 * ${l}, d),
              initializationValue
            );

            ${E}
          }
        }
        setOutput(${S});
      }
    `}},Nu=class{constructor(e,t,o,n=!1,s=!1){if(this.variableNames=["x"],t==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let a=e.filterWidth,i=e.strideDepth,p=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,m=e.dilationWidth,d=e.effectiveFilterDepth,f=e.effectiveFilterHeight,h=e.effectiveFilterWidth,g=e.padInfo.front,x=e.padInfo.top,b=e.padInfo.left;this.outputShape=e.outShape;let w=t==="avg",S="0.0";if(w||(S="-1.0 / 1e-20"),o){let F=">=";this.userCode=`
        const ivec3 strides =
            ivec3(${i}, ${p}, ${u});
        const ivec3 pads = ivec3(${g}, ${x}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${d};
              wD += ${l}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${f};
                wR += ${c}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${h};
                  wC += ${m}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${F} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${n?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${f} * ${h} +
                      wR * ${h} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let k="max",T=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="avg"&&(T="avgValue / max(count, 1.0)");let E=Math.floor(a/4)*4,R=a%4,D=`
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${k}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${i}, ${p}, ${u});
      const ivec3 pads = ivec3(${g}, ${x}, ${b});
      const float initializationValue = ${S};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${S});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${l}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${f};
            wR += ${c}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${E}; wC += 4) {
              int xC = xCCorner + wC * ${m};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                getValue(batch, xD, xR, xC + 3 * ${m}, ch)
              );

              ${D}
            }

            int xC = xCCorner + ${E};
            if (${R===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${D}
            } else if (${R===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                initializationValue,
                initializationValue
              );

              ${D}
            } else if (${R===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                initializationValue
              );

              ${D}
            }
          }
        }
        setOutput(${T});
      }
    `}};function aee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e;Ys(n,"avgPool");let{filterSize:s,strides:a,pad:i,dimRoundingMode:p}=o,u=1;y.assert(C.eitherStridesOrDilationsAreOne(a,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);let l=C.computePool2DInfo(n.shape,s,a,u,i,p);if(l.filterWidth===1&&l.filterHeight===1&&y.arraysEqual(l.inShape,l.outShape))return Ft({inputs:{x:n},backend:t});let c=new Zs(l,"avg",!1);return t.runWebGLProgram(c,[n],"float32")}var aF={kernelName:kn,backendName:"webgl",kernelFunc:aee};function iee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:a,pad:i,dimRoundingMode:p,dataFormat:u}=o,l=[1,1,1],c=C.computePool3DInfo(n.shape,s,a,l,i,p,u),m=new Nu(c,"avg",!1);return t.runWebGLProgram(m,[n],"float32")}var iF={kernelName:aa,backendName:"webgl",kernelFunc:iee};var Oh=class{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterHeight,o=e.filterWidth,n=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,p=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=p-1-e.padInfo.top,c=u-1-e.padInfo.left,m=1/(t*o);this.userCode=`
      const ivec2 pads = ivec2(${l}, ${c});
      const float avgMultiplier = float(${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${p};
            wR += ${a}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${u};
            wC+= ${i}) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}},Mh=class{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterDepth,o=e.filterHeight,n=e.filterWidth,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,p=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,m=e.effectiveFilterHeight,d=e.effectiveFilterWidth,f=c-1-e.padInfo.front,h=m-1-e.padInfo.top,g=d-1-e.padInfo.left,x=1/(t*o*n);this.userCode=`
      const ivec3 pads = ivec3(${f}, ${h}, ${g});
      const float avgMultiplier = float(${x});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${c};
            wD += ${p}) {
          float dyD = float(dyDCorner + wD) / ${s}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${m};
              wR += ${u}) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${d};
                wC += ${l}) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function uee(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,a=s,{filterSize:i,strides:p,pad:u,dimRoundingMode:l}=o,c=[1,1,1],m=C.computePool3DInfo(a.shape,i,p,c,u,l),d=new Mh(m);return t.runWebGLProgram(d,[n],a.dtype)}var uF={kernelName:Vi,backendName:"webgl",kernelFunc:uee};function pee(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,a=s;Ys([n,s],"avgPoolGrad");let{filterSize:i,strides:p,pad:u}=o,l=C.computePool2DInfo(a.shape,i,p,1,u),c=new Oh(l);return t.runWebGLProgram(c,[n],a.dtype)}var pF={kernelName:zi,backendName:"webgl",kernelFunc:pee};function lee(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s}=e,{transposeA:a,transposeB:i}=o;return _p({a:n,b:s,transposeA:a,transposeB:i,backend:t})}var lF={kernelName:Nn,backendName:"webgl",kernelFunc:lee};var Lh=class{constructor(e,t,o,n,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],C.assertAndGetBroadcastShape(e,t),C.assertAndGetBroadcastShape(e,o);let i="0.0";n!=null&&(C.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let p="1.0";s!=null&&(C.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),p="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${p};
        float inv = scale * inversesqrt(variance + float(${a}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}};var Bh=class{constructor(e,t,o,n,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],C.assertAndGetBroadcastShape(e,t),C.assertAndGetBroadcastShape(e,o);let i="vec4(0.0)";n!=null&&(C.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let p="vec4(1.0)";s!=null&&(C.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),p="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${p};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${a}));

        setOutput((x - mean) * inv + offset);
      }
    `}};var cee=({inputs:r,backend:e,attrs:t})=>{let{x:o,mean:n,variance:s,offset:a,scale:i}=r;y.assert(n.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(a==null||n.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(i==null||n.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:p}=t;p==null&&(p=.001);let u=[o,n,s],l=null;a!=null&&(l=a.shape,u.push(a));let c=null;i!=null&&(c=i.shape,u.push(i));let m=A().getBool("WEBGL_PACK_NORMALIZATION")?new Bh(o.shape,n.shape,s.shape,l,c,p):new Lh(o.shape,n.shape,s.shape,l,c,p);return e.runWebGLProgram(m,u,u[0].dtype)},cF={kernelName:Hn,backendName:"webgl",kernelFunc:cee};var zh=class{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;let t=Re(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let o=mee(this.rank),n,s=e.map((a,i)=>`sourceLoc.${F0[i]} = start[${i}] + coords.${F0[i]};`);n=`
        ${t} sourceLoc;
        ${t} coords = getOutputCoords();
        ${s.join(`
`)}
      `,this.userCode=`
      void main() {
        ${n}
        setOutput(getSource(${o}));
      }
    `}},F0=["x","y","z","w","u","v"];function mee(r){if(r===1)return"sourceLoc";if(r<=6)return F0.slice(0,r).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}var Vh=class{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let t=Re(this.rank),o=At("coords",this.rank),n=At("sourceLoc",this.rank),s=this.rank===1?"sourceLoc":`vec2(${n.slice(-2).join()})`,a=`getChannel(getSource(${n.join()}), ${s})`,i=`
      result.x = ${a};
      if (++${o[this.rank-1]} < ${e[this.rank-1]}) {
        ++${n[this.rank-1]};
        result.y = ${a};
        --${n[this.rank-1]};
      }
    `,p=this.rank===1?"":`
      --${o[this.rank-1]};
      if (++${o[this.rank-2]} < ${e[this.rank-2]}) {
        ++${n[this.rank-2]};
        result.z = ${a};
        if (++${o[this.rank-1]} < ${e[this.rank-1]}) {
          ++${n[this.rank-1]};
          result.w = ${a};
        }
      }
    `,u=this.rank<=4?`sourceLoc = coords +
            ${t}(${e.map((l,c)=>`start[${c}]`).join()});`:e.map((l,c)=>`${n[c]} = ${o[c]} + start[${c}];`).join(`
`);this.userCode=`
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${u}
        vec4 result = vec4(0.);
        ${i}
        ${p}
        setOutput(result);
      }
    `}};function dee(r,e,t,o){let n=o.texData.get(r.dataId),s=o.makeTensorInfo(t,r.dtype),a=o.texData.get(s.dataId);Object.assign(a,n),a.refCount=1,a.shape=t,a.dtype=r.dtype;let i=nt.computeFlatOffset(e,y.computeStrides(r.shape));n.slice&&(i+=n.slice.flatOffset),a.slice={flatOffset:i,origDataId:n.slice&&n.slice.origDataId||r.dataId};let p=o.dataRefCount.get(a.slice.origDataId)||1;return o.dataRefCount.set(a.slice.origDataId,p+1),s}function Js(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,size:a}=o,[i,p]=nt.parseSliceParams(n,s,a);if(nt.assertParamsValid(n,i,p),y.sizeFromShape(p)===0)return t.makeTensorInfo(p,n.dtype,[]);if(t.shouldExecuteOnCPU([n])||n.dtype==="string"){let c=t.texData.get(n.dataId),m=tA(c.values,i,p,n.shape,n.dtype);return t.makeTensorInfo(p,n.dtype,m)}let{isPacked:u}=t.texData.get(n.dataId),l=nt.isSliceContinous(n.shape,i,p);if(u||!l){let c=A().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Vh(p):new zh(p),m=[i];return t.runWebGLProgram(c,[n],n.dtype,m)}return t.uploadToGPU(n.dataId),dee(n,i,p,t)}var mF={kernelName:_s,backendName:"webgl",kernelFunc:Js};var fee=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,crops:a}=o;y.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let i=s.reduce((b,w)=>b*w),p=C.getReshaped(n.shape,s,i),u=C.getPermuted(p.length,s.length),l=C.getReshapedPermuted(n.shape,s,i),c=C.getSliceBeginCoords(a,s.length),m=C.getSliceSize(l,a,s.length),d=[],f=te({inputs:{x:n},backend:t,attrs:{shape:p}}),h=Ct({inputs:{x:f},backend:t,attrs:{perm:u}}),g=te({inputs:{x:h},backend:t,attrs:{shape:l}}),x=Js({inputs:{x:g},backend:t,attrs:{begin:c,size:m}});return d.push(f),d.push(h),d.push(g),d.forEach(b=>t.disposeIntermediateTensorInfo(b)),x},dF={kernelName:ia,backendName:"webgl",kernelFunc:fee};function hee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,weights:s}=e,{size:a}=o,i=t.readSync(n.dataId),p=t.readSync(s.dataId),u=Ch(i,p,s.dtype,s.shape,a);return t.makeTensorInfo([a],s.dtype,u)}var fF={kernelName:Tn,backendName:"webgl",kernelFunc:hee};var gee=`
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`,xee=`
  return float(int(a.r) & int(b.r));
`;function yee(r){let{inputs:e,backend:t}=r,{a:o,b:n}=e,s=A().getBool("WEBGL_PACK_BINARY_OPERATIONS"),a=A().getNumber("WEBGL_VERSION");if(t.shouldExecuteOnCPU([o,n])||a===1){let p=t.texData.get(o.dataId).values,u=t.texData.get(n.dataId).values,[l,c]=kD(o.shape,n.shape,p,u,o.dtype),m=t.makeTensorInfo(c,o.dtype),d=t.texData.get(m.dataId);return d.values=l,m}let i;return s?i=new eo(gee,o.shape,n.shape,!1):i=new Br(xee,o.shape,n.shape),t.runWebGLProgram(i,[o,n],o.dtype)}var hF={kernelName:_n,backendName:"webgl",kernelFunc:yee};function bee(r){let{inputs:e,backend:t}=r,{s0:o,s1:n}=e,s=t.readSync(o.dataId),a=t.readSync(n.dataId),i=C.assertAndGetBroadcastShape(Array.from(s),Array.from(a));return t.makeTensorInfo([i.length],"int32",Int32Array.from(i))}var gF={kernelName:ua,backendName:"webgl",kernelFunc:bee};var Cee="return float(a != b);",P0=st({opSnippet:Cee,cpuKernelImpl:KD,dtype:"bool"}),xF={kernelName:Ro,backendName:"webgl",kernelFunc:P0};function _i(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.texData.get(o.dataId);return Ft({inputs:{x:n.complexTensorInfos.real},backend:t})}var yF={kernelName:si,backendName:"webgl",kernelFunc:_i};var wee="return float(int(x));";function bF(r,e){let t=new nr(r.shape,wee),o=e.runWebGLProgram(t,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function O0(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return Ft({inputs:{x:n},backend:t});let a=Yr(n.shape),i=O0({inputs:{x:n},backend:t,attrs:{dtype:"float32"}}),p=zr({inputs:{real:i,imag:a},backend:t});return a.dispose(),t.disposeIntermediateTensorInfo(i),p}if(n.dtype==="complex64"){let a=_i({inputs:{input:n},backend:t}),i=O0({inputs:{x:a},backend:t,attrs:{dtype:s}});return t.disposeIntermediateTensorInfo(a),i}if(!y.hasEncodingLoss(n.dtype,s)){let a=Ft({inputs:{x:n},backend:t});return{dataId:a.dataId,shape:a.shape,dtype:s}}if(t.shouldExecuteOnCPU([n])){let a=t.texData.get(n.dataId).values,[i,p,u]=ND(a,n.shape,n.dtype,s);return t.makeTensorInfo(i,p,u)}if(s==="int32")return bF(n,t);if(s==="bool"){let a=t.makeTensorInfo([],"bool",y.getTypedArrayFromDType("bool",1)),p=P0({inputs:{a:n,b:a},backend:t});return t.disposeIntermediateTensorInfo(a),p}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var CF={kernelName:ho,backendName:"webgl",kernelFunc:O0};var wF="return ceil(x);",See=xe({opSnippet:wF,packedOpSnippet:wF,cpuKernelImpl:TD}),SF={kernelName:go,backendName:"webgl",kernelFunc:See};var Wh=class{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}};var Uh=class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}};function Iee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{clipValueMin:s,clipValueMax:a}=o,i;A().getBool("WEBGL_PACK_CLIP")?i=new Uh(n.shape):i=new Wh(n.shape);let p=[[s],[a]];return t.runWebGLProgram(i,[n],n.dtype,p)}var IF={kernelName:Go,backendName:"webgl",kernelFunc:Iee};var Gh=class{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}};function vF(r,e){return{dataId:e.dataId,dtype:e.dtype,shape:r.shape}}function vee(r){let{inputs:e,backend:t}=r,{x:o}=e,n=t.texData.get(o.dataId),s=new Gh(o.shape),a=[vF(o,n.complexTensorInfos.real),vF(o,n.complexTensorInfos.imag)];return t.runWebGLProgram(s,a,a[0].dtype)}var kF={kernelName:Wi,backendName:"webgl",kernelFunc:vee};var Hh=class{constructor(e){this.outputShape=[],this.outputShape=C.computeOutShape(e,1),this.variableNames=e.map((a,i)=>`T${i}`);let t=new Array(e.length-1);t[0]=e[0][1];for(let a=1;a<t.length;a++)t[a]=t[a-1]+e[a][1];let o=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let a=1;a<t.length;a++){let i=t[a-1];o.push(`else if (yC < ${t[a]}) setOutput(getT${a}(yR, yC-${i}));`)}let n=t.length,s=t[t.length-1];o.push(`else setOutput(getT${n}(yR, yC-${s}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${o.join(`
        `)}
      }
    `}};var qh=class{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=C.computeOutShape(e,t);let o=this.outputShape,n=o.length,s=Re(n),a=At("coords",n),i=["x","y","z","w","u","v"].slice(0,n);this.variableNames=e.map((h,g)=>`T${g}`);let p=new Array(e.length-1);p[0]=e[0][t];for(let h=1;h<p.length;h++)p[h]=p[h-1]+e[h][t];let u=i[t],l=i.slice(-2),c=i.join(),m=`if (${u} < ${p[0]}) {
        return getChannel(
            getT0(${c}), vec2(${l.join()}));
        }`;for(let h=1;h<p.length;h++){let g=p[h-1];m+=`
        if (${u} < ${p[h]}  && ${u} >= ${p[h-1]}) {
          return getChannel(
            getT${h}(${Kh(i,u,g)}),
            vec2(${Kh(l,u,g)}));
        }`}let d=p.length,f=p[p.length-1];m+=`
        return getChannel(
          getT${d}(${Kh(i,u,f)}),
          vec2(${Kh(l,u,f)}));`,this.userCode=`
      float getValue(${i.map(h=>"int "+h)}) {
        ${m}
      }

      void main() {
        ${s} coords = getOutputCoords();
        vec4 result = vec4(getValue(${a}), 0., 0., 0.);

        ${a[n-1]} = ${a[n-1]} + 1;
        if (${a[n-1]} < ${o[n-1]}) {
          result.g = getValue(${a});
        }

        ${a[n-2]} = ${a[n-2]} + 1;
        if (${a[n-2]} < ${o[n-2]}) {
          result.a = getValue(${a});
        }

        ${a[n-1]} = ${a[n-1]} - 1;
        if (${a[n-2]} < ${o[n-2]} &&
            ${a[n-1]} < ${o[n-1]}) {
          result.b = getValue(${a});
        }
        setOutput(result);
      }
    `}};function Kh(r,e,t){let o=r.indexOf(e);return r.map((s,a)=>a===o?`${s} - ${t}`:s).join()}function Ep(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.texData.get(o.dataId);return Ft({inputs:{x:n.complexTensorInfos.imag},backend:t})}var NF={kernelName:Qi,backendName:"webgl",kernelFunc:Ep};function Kl(r,e,t){let o=r[0].dtype;if(o==="complex64"){let d=r.map(b=>_i({inputs:{input:b},backend:t})),f=r.map(b=>Ep({inputs:{input:b},backend:t})),h=Kl(d,e,t),g=Kl(f,e,t),x=zr({inputs:{real:h,imag:g},backend:t});return d.forEach(b=>t.disposeIntermediateTensorInfo(b)),f.forEach(b=>t.disposeIntermediateTensorInfo(b)),t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(g),x}let n=t.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let d=r.map(S=>{let T=[-1,y.sizeFromShape(S.shape.slice(e))];return te({inputs:{x:S},backend:t,attrs:{shape:T}})}),f=d.map(S=>({vals:t.readSync(S.dataId),shape:S.shape})),h=C.computeOutShape(d.map(S=>S.shape),1),g=d[0].shape[0]===1,x=_D(f,h,o,g),b=C.computeOutShape(r.map(S=>S.shape),e),w=t.makeTensorInfo(b,o,x);return d.forEach(S=>t.disposeIntermediateTensorInfo(S)),w}let s=r.filter(d=>y.sizeFromShape(d.shape)>0),a=A().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&s[0].shape.length>1;if(s.length===1){let d=a?new nr(r[0].shape,Ha):new Lr(r[0].shape,Ha);return t.runWebGLProgram(d,r,o)}let i=A().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(s.length>i){let d=[];for(let h=0;h<s.length;h+=i){let g=s.slice(h,h+i);d.push(Kl(g,e,t))}let f=Kl(d,e,t);for(let h of d)t.disposeIntermediateTensorInfo(h);return f}if(a){let d=new qh(s.map(f=>f.shape),e);return t.runWebGLProgram(d,s,o)}let{tensors2D:p,outShape:u}=kee(s,e,t),l=new Hh(p.map(d=>d.shape)),c=t.runWebGLProgram(l,p,o);p.forEach(d=>t.disposeIntermediateTensorInfo(d));let m=te({inputs:{x:c},attrs:{shape:u},backend:t});return t.disposeIntermediateTensorInfo(c),m}function kee(r,e,t){let o=C.computeOutShape(r.map(s=>s.shape),e);return{tensors2D:r.map(s=>te({inputs:{x:s},attrs:{shape:[-1,y.sizeFromShape(s.shape.slice(e))]},backend:t})),outShape:o}}function M0(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,e[0].shape)[0],a=e.map(u=>u.shape);C.assertParamsConsistent(a,s);let i=C.computeOutShape(e.map(u=>u.shape),s);if(y.sizeFromShape(i)===0)return t.makeTensorInfo(i,e[0].dtype,[]);let p=e.filter(u=>y.sizeFromShape(u.shape)>0);return p.length===1?Ft({inputs:{x:p[0]},backend:t}):Kl(p,s,t)}var TF={kernelName:pa,backendName:"webgl",kernelFunc:M0};var ql=class{constructor(e,t=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;let a=e.padInfo.top,i=e.padInfo.left,p=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,m=e.filterHeight,d=e.filterWidth,f=Math.floor(e.inChannels/4)*4,h=e.inChannels%4,g=e.dataFormat==="channelsLast",x=g?1:2,b=g?2:3,w=g?3:1,S="",k="";o&&(n?S=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?S=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:S=`
          float activation(float x) {
            ${o}
          }
        `,k="result = activation(result);");let T=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${S}

      const ivec2 strides = ivec2(${p}, ${u});
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${w}];

        ivec2 xRCCorner =
            ivec2(coords[${x}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${m}; wR++) {
          int xR = xRCorner + wR * ${l};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${d}; wC++) {
            int xC = xCCorner + wC * ${c};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${f}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${h===1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${f}) *
                    getW(wR, wC, ${f}, d2);
              } else {
                dotProd +=
                    getX(batch, ${f}, xR, xC) *
                    getW(wR, wC, ${f}, d2);
              }

            } else if (${h===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${h===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2),
                getW(wR, wC, ${f} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1),
                  getX(batch, xR, xC, ${f} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC),
                  getX(batch, ${f} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${T}
        ${k}
        setOutput(result);
      }
    `}},jh=class{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let t=e.padInfo.front,o=e.padInfo.top,n=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,p=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,m=e.filterHeight,d=e.filterWidth,f=Math.floor(e.inChannels/4)*4,h=e.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${s}, ${a}, ${i});
      const ivec3 pads = ivec3(${t}, ${o}, ${n});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${c}; wF++) {
          int xF = xFCorner + wF * ${p};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${m}; wR++) {
            int xR = xRCorner + wR * ${u};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d}; wC++) {
              int xC = xCCorner + wC * ${l};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${f}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${h===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${f}) *
                  getW(wF, wR, wC, ${f}, d2);
              } else if (${h===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${h===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1),
                  getX(batch, xF, xR, xC, ${f} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2),
                  getW(wF, wR, wC, ${f} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};var jl=class{constructor(e,t=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=lt(this.outputShape.length);let a=e.padInfo.left,i=e.strideWidth,p=e.dilationWidth,u=e.filterHeight,l=e.filterWidth,c=l,m=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let g=0;g<l;g++)m+=`
           vec4 xTexelC${g*2};
           int xTexelC${g*2}Ready;
           vec4 xTexelC${g*2+1};
           int xTexelC${g*2+1}Ready;
           vec4 xC${g};`;m+=`
     for (int r = 0; r < ${u}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;for(let g=0;g<l;g++)m+=`
           xTexelC${g*2} = vec4(0.0);
           xTexelC${g*2}Ready = 0;
           xTexelC${g*2+1} = vec4(0.0);
           xTexelC${g*2+1}Ready = 0;
           xC${g} = vec4(0.0);`;m+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let g=0;g<(c+1)/2;g++){let x=g*2;if(m+=`
           xC = xCCorner + ${x*p};
           `,i===1){if(x<l&&(a%2===1?(m+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }
               `,p===1&&x>0?m+=`
                 xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);
                 `:m+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                   } else {
                     xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                   }
                   `):m+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xC${x} = xTexelC${x};
                 `,x+1<l)){let b=a%2===0?y.nearestLargerEven(p):p;p%2===0&&a%2===1||p%2!==0&&a%2!==1?(m+=`
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                     xTexelC${x+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${x+1}.zw = vec2(0.0);
                     }
                     xTexelC${x+1}Ready = 1;
                   }
                   `,p>1?m+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);
                     } else {
                      xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);
                     }
                     `:m+=`
                     xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);
                     `):b===1?m+=`
                     xC${x+1} = xTexelC${x};
                     `:m+=`
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                       xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${x+1}.zw = vec2(0.0);
                       }
                       xTexelC${x+1}Ready = 1;
                     }

                     xC${x+1} = xTexelC${x+1};
                     `}}else x<l&&(a%2===1?(m+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.0);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
               `,x+1<l&&(m+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);
                 `)):(m+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(
                   xTexelC${x}.xy, xTexelC${x+1}.xy);
               `,x+1<l&&(m+=`
                   xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
                 `)));x<l&&(m+=`
             wTexel = getW(r, ${x}, d1, d2);
             dotProd += xC${x}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${x}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,x+1<l&&(m+=`
               wTexel = getW(r, ${x+1}, d1, d2);
               dotProd += xC${x+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${x+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}m+=`
     }
   `,m+=`
     }
   `,m+=`
     }
   `;let d="",f="";o&&(n?d=`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${o}
         }`:s?d=`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${o}
         }`:d=`vec4 activation(vec4 x) {
           ${o}
         }`,f="result = activation(result);");let h=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${d}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${m}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${h}
         ${f}
         setOutput(result);
       }
     `}};var Xh=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=lt(this.outputShape.length);let{dataFormat:o}=t,n=kt(),s=o==="channelsLast",a=s?1:2,i=s?2:3,p=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`,u="";for(let l=0;l<=1;l++)for(let c=0;c<=1;c++)u+=`
          blockIndex = rc.z + ${c};
          pos = rc.y + ${l};

          ${p}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${a}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${i}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${s}) {
                  innerDims = vec2(d1, ch);
                  result[${l*2+c}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${l*2+c}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${u}

        ${n.output} = result;
      }
    `}};function Yh(r,e){let t=r.length;return t>=3?e?[...r.slice(0,-3),r[t-3]*r[t-2],r[t-1]]:[...r.slice(0,-3),r[t-3],r[t-2]*r[t-1]]:!e&&t===1&&r[0]>1?[r[0],1]:null}function Qh({x:r,filter:e,convInfo:t,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:a=0,activation:i=null}){let p=r.shape,u=o.texData.get(r.dataId),l=t.inChannels,c=p[0]*p[1]*p[2],m=t.outChannels,d=t.dataFormat==="channelsLast",f=!1,h=!1,g,x=[];if(s!=null){let S=Yh(s.shape,d);S!=null&&(s=te({inputs:{x:s},backend:o,attrs:{shape:S}}),x.push(s))}if(n!=null){let S=Yh(n.shape,d);S!=null&&(n=te({inputs:{x:n},backend:o,attrs:{shape:S}}),x.push(n))}if(!((c===1||m===1)&&l>A0)&&u.isPacked&&d&&u.texture!=null&&p[2]%2!==0&&y.arraysEqual(u.shape.slice(-3),p.slice(-3))){let S=p[0]*p[1]*(p[2]+1),k={dataId:r.dataId,shape:[1,S,t.inChannels],dtype:r.dtype},T=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,y.assert(vu(u.shape,k.shape),()=>`packed reshape ${u.shape} to ${k.shape} isn't free`);let E=te({inputs:{x:e},backend:o,attrs:{shape:[1,t.inChannels,t.outChannels]}});x.push(E);let R=_p({a:k,b:E,backend:o,transposeA:f,transposeB:h,bias:n,activation:i,preluActivationWeights:s,leakyreluAlpha:a}),D=o.texData.get(R.dataId);y.assert(D.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=T,D.shape=t.outShape,g=Ft({inputs:{x:R},backend:o}),g.shape=t.outShape,x.push(R)}else{let S=t.outHeight*t.outWidth,k=te({inputs:{x:r},backend:o,attrs:{shape:d?[t.batchSize,S,t.inChannels]:[t.batchSize,t.inChannels,S]}}),T=te({inputs:{x:e},backend:o,attrs:{shape:[1,t.inChannels,t.outChannels]}}),E=_p({a:d?k:T,b:d?T:k,transposeA:!d,transposeB:h,backend:o,bias:n,activation:i,preluActivationWeights:s,leakyreluAlpha:a});g=te({inputs:{x:E},backend:o,attrs:{shape:t.outShape}}),x.push(k),x.push(T),x.push(E)}for(let S of x)o.disposeIntermediateTensorInfo(S);return g}function Zh({x:r,filter:e,convInfo:t,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:a=0,activation:i=null}){let{filterWidth:p,filterHeight:u,inChannels:l,outWidth:c,outHeight:m,dataFormat:d}=t,f=d==="channelsLast",h=p*u*l,g=m*c,x=[t.batchSize,h,g],b=!0,w=!1,S=[];if(s!=null){let q=Yh(s.shape,f);q!=null&&(s=te({inputs:{x:s},backend:o,attrs:{shape:q}}),S.push(s))}if(n!=null){let q=Yh(n.shape,f);q!=null&&(n=te({inputs:{x:n},backend:o,attrs:{shape:q}}),S.push(n))}let k=te({inputs:{x:e},backend:o,attrs:{shape:[1,h,y.sizeFromShape(e.shape)/h]}});S.push(k);let T=new Xh(x,t),E=[r.shape,[t.padInfo.top,t.padInfo.left],[t.strideHeight,t.strideWidth],[t.dilationHeight,t.dilationWidth],[t.inChannels],[t.filterWidth*t.inChannels],[t.outWidth]],R=o.runWebGLProgram(T,[r],"float32",E),D=te({inputs:{x:R},backend:o,attrs:{shape:x}});S.push(R),S.push(D);let F=n!=null,O=s!=null,M=i==="leakyrelu",L=i?Ti(i,!0):null,B=new Hl(f?D.shape:k.shape,f?k.shape:D.shape,f?[t.batchSize,g,t.outChannels]:[t.batchSize,t.outChannels,g],b,w,F,L,O,M),z=f?[D,k]:[k,D];if(n&&z.push(n),O&&z.push(s),M){let q=o.makeTensorInfo([],"float32",y.createScalarValue(a,"float32"));z.push(q),S.push(q)}let U=o.runWebGLProgram(B,z,"float32"),j=te({inputs:{x:U},backend:o,attrs:{shape:t.outShape}});S.push(U);for(let q of S)o.disposeIntermediateTensorInfo(q);return j}function Nee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:a,pad:i,dataFormat:p,dilations:u,dimRoundingMode:l}=o,c=C.convertConv2DDataFormat(p),m=C.computeConv2DInfo(n.shape,s.shape,a,u,i,l,!1,c),d;if(m.filterHeight===1&&m.filterWidth===1&&m.dilationHeight===1&&m.dilationWidth===1&&m.strideHeight===1&&m.strideWidth===1&&(m.padInfo.type==="SAME"||m.padInfo.type==="VALID"))d=Qh({x:n,filter:s,convInfo:m,backend:t});else if(m.strideWidth<=2&&c==="channelsLast"&&A().getBool("WEBGL_EXP_CONV")){let h=new jl(m),g=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]];d=t.runWebGLProgram(h,[n,s],"float32",g)}else if(A().getBool("WEBGL_CONV_IM2COL"))d=Zh({x:n,filter:s,convInfo:m,backend:t});else{let h=new ql(m);d=t.runWebGLProgram(h,[n,s],"float32")}let f=te({inputs:{x:d},backend:t,attrs:{shape:m.outShape}});return t.disposeIntermediateTensorInfo(d),f}var _F={kernelName:En,backendName:"webgl",kernelFunc:Nee};var Jh=class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,o=e.strideWidth,n=e.padInfo.top,s=e.padInfo.left,a=e.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${n};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              ${a?`float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);`:`float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `}},eg=class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,o=e.filterWidth,n=e.strideHeight,s=e.strideWidth,a=e.dataFormat==="channelsLast",i=t-1-e.padInfo.top,p=o-1-e.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${p});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${c}];

        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${a}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},tg=class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideDepth,o=e.strideHeight,n=e.strideWidth,s=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${s};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${o} - ${a};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${n} - ${i};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}},rg=class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterDepth,o=e.filterHeight,n=e.filterWidth,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,p=t-1-e.padInfo.front,u=o-1-e.padInfo.top,l=n-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${p}, ${u}, ${l});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${s}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${o}; wR++) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${o} - 1 - wR;

            for (int wC = 0; wC < ${n}; wC++) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${n} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function Tee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:a,pad:i,dataFormat:p,dimRoundingMode:u,filterShape:l}=o,c=C.convertConv2DDataFormat(p),m=C.computeConv2DInfo(n.shape,l,a,1,i,u,!1,c),d=new Jh(m);return t.runWebGLProgram(d,[n,s],"float32")}var EF={kernelName:Ui,backendName:"webgl",kernelFunc:Tee};var og=class{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=lt(this.outputShape.length);let t=e.filterHeight,o=e.filterWidth,n=t-1-e.padInfo.top,s=o-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${n}, ${s});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            int wCPerm = ${o} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `}};function _ee(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{inputShape:a,strides:i,pad:p,dataFormat:u,dimRoundingMode:l}=o,c=C.convertConv2DDataFormat(u),m=C.computeConv2DInfo(a,s.shape,i,1,p,l,!1,c);if(A().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&c==="channelsLast"){let d=[[m.strideHeight,m.strideWidth]],f=new og(m);return t.runWebGLProgram(f,[n,s],"float32",d)}else{let d=new eg(m);return t.runWebGLProgram(d,[n,s],"float32")}}var $F={kernelName:$n,backendName:"webgl",kernelFunc:_ee};function Eee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:a,pad:i,dilations:p}=o,u=C.computeConv3DInfo(n.shape,s.shape,a,p,i),l=new jh(u);return t.runWebGLProgram(l,[n,s],"float32")}var RF={kernelName:Rn,backendName:"webgl",kernelFunc:Eee};function $ee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:a,pad:i,filterShape:p}=o,u=C.computeConv3DInfo(n.shape,p,a,1,i),l=new tg(u);return t.runWebGLProgram(l,[n,s],"float32")}var DF={kernelName:ti,backendName:"webgl",kernelFunc:$ee};function Ree(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{pad:a,strides:i,inputShape:p}=o,u=C.computeConv3DInfo(p,s.shape,i,1,a),l=new rg(u);return t.runWebGLProgram(l,[n,s],"float32")}var AF={kernelName:Dn,backendName:"webgl",kernelFunc:Ree};var Dee=sn+`
  return cos(x);
`,Aee=`
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${to}
  return result;
`,Fee=xe({opSnippet:Dee,packedOpSnippet:Aee}),FF={kernelName:An,backendName:"webgl",kernelFunc:Fee};var Pee=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,Oee=xe({opSnippet:Pee}),PF={kernelName:Fn,backendName:"webgl",kernelFunc:Oee};var ng=class{constructor(e,t,o,n,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[a,i,p,u]=e,[l]=t,[c,m]=o;this.outputShape=[l,c,m,u];let d=n==="bilinear"?1:0,[f,h]=[`${i-1}.0`,`${p-1}.0`],[g,x,b]=c>1?[`${(i-1)/(c-1)}`,"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${f}`],[w,S,k]=m>1?[`${(p-1)/(m-1)}`,"(x2-x1) * width_ratio",`x1*${h} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${h}`];this.userCode=`
      const float height_ratio = float(${g});
      const float width_ratio = float(${w});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${a}) {
          return;
        }

        float height_scale = ${x};
        float width_scale = ${S};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${f} ) {
          setOutput(float(${s}));
          return;
        }
        float in_x = ${k};
        if( in_x < 0.0 || in_x > ${h} ) {
          setOutput(float(${s}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${d} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}};var Mee=r=>{let{inputs:e,backend:t,attrs:o}=r,{image:n,boxes:s,boxInd:a}=e,{cropSize:i,method:p,extrapolationValue:u}=o,l=new ng(n.shape,s.shape,i,p,u);return t.runWebGLProgram(l,[n,s,a],"float32")},OF={kernelName:Mn,backendName:"webgl",kernelFunc:Mee};var $p;(function(r){r.Prod="*",r.Sum="+"})($p||($p={}));var lm=class{constructor(e,t,o,n){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let s=this.outputShape.length,a=this.op===$p.Prod?"1.0":"0.0",i=o?a:`getX(${MF(s,"coords",this.op)})`,p=this.outputShape[this.outputShape.length-1],u="",l="";o?(u=n?`end != ${p-1}`:"end != 0",l=n?"end + 1":"end - 1"):(u=n?`end + pow2 < ${p}`:"end >= pow2",l=n?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${Re(s)} coords = getOutputCoords();
        int end = ${LF(s,"coords",this.op)};
        float val = ${i};
        int pow2 = int(pow(2.0, index));
        if (${u}) {
          int idx = ${l};
          ${LF(s,"coords",this.op)} = idx;
          val ${this.op}= getX(${MF(s,"coords",this.op)});
        }
        setOutput(val);
      }
    `}};function MF(r,e,t){if(r===1)return`${e}`;if(r===2)return`${e}.x, ${e}.y`;if(r===3)return`${e}.x, ${e}.y, ${e}.z`;if(r===4)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw new Error(`Cumulative ${t} for rank ${r} is not yet supported`)}function LF(r,e,t){if(r===1)return`${e}`;if(r===2)return`${e}.y`;if(r===3)return`${e}.z`;if(r===4)return`${e}.w`;throw new Error(`Cumulative ${t} for rank ${r} is not yet supported`)}function sg(r,e,t,o,n,s){let a=e.shape.length,i=C.getAxesPermutation([o],a),p=e;i!=null&&(p=Ct({inputs:{x:e},backend:t,attrs:{perm:i}}));let u=C.getInnerMostAxes(1,a)[0];if(u!==a-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${e.shape.length-1} but got axis=${o}`);let l=p.shape[u],c=Ft({inputs:{x:p},backend:t});for(let m=0;m<=Math.ceil(Math.log2(l))-1;m++){let d=new lm(r,p.shape,!1,s),f=[[m]],h=c;c=t.runWebGLProgram(d,[c],c.dtype,f),t.disposeIntermediateTensorInfo(h)}if(n){let m=new lm(r,p.shape,n,s),d=c;c=t.runWebGLProgram(m,[c],c.dtype),t.disposeIntermediateTensorInfo(d)}if(i!=null){let m=C.getUndoAxesPermutation(i),d=Ct({inputs:{x:c},backend:t,attrs:{perm:m}});return t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(p),d}return c}function Lee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:a,reverse:i}=o;return sg($p.Prod,n,t,s,a,i)}var BF={kernelName:Pn,backendName:"webgl",kernelFunc:Lee};function Bee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:a,reverse:i}=o;return sg($p.Sum,n,t,s,a,i)}var zF={kernelName:On,backendName:"webgl",kernelFunc:Bee};function zee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,weights:s}=e,{size:a,binaryOutput:i}=o;if(n.shape.length===1){let p=t.readSync(n.dataId),u=t.readSync(s.dataId),l=Ch(p,u,s.dtype,s.shape,a);return t.makeTensorInfo([a],s.dtype,l)}else if(n.shape.length===2){let p=t.bufferSync(n),u=t.bufferSync(s),l=vD(p,u,a,i);return t.makeTensorInfo(l.shape,s.dtype,l.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var VF={kernelName:la,backendName:"webgl",kernelFunc:zee};var ag=class{constructor(e,t,o){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=o,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function Vee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockSize:s,dataFormat:a}=o,i=n.shape[0],p=a==="NHWC"?n.shape[1]:n.shape[2],u=a==="NHWC"?n.shape[2]:n.shape[3],l=a==="NHWC"?n.shape[3]:n.shape[1],c=p*s,m=u*s,d=l/(s*s),f=a==="NHWC"?[i,c,m,d]:[i,d,c,m],h=new ag(f,s,a);return t.runWebGLProgram(h,[n],n.dtype)}var WF={kernelName:Ln,backendName:"webgl",kernelFunc:Vee};var Xl=class{constructor(e,t=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=lt(this.outputShape.length);let a=e.filterHeight,i=e.filterWidth,p=e.outChannels/e.inChannels,u="",l="";o&&(n?u=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?u=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:u=`
          float activation(float x) {
            ${o}
          }
        `,l="result = activation(result);");let c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${p};
        int q = d2 - d1 * ${p};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${a}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${c}
        ${l}
        setOutput(result);
      }
    `}};var Yl=class{constructor(e,t=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=lt(this.outputShape.length);let a=e.outChannels/e.inChannels,i=e.padInfo.left,p=e.strideWidth,u=e.dilationWidth,l=e.filterHeight,c=e.filterWidth,m=c,d=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let x=0;x<c;x++)d+=`
          vec4 xTexelC${x*2};
          int xTexelC${x*2}Ready;
          vec4 xTexelC${x*2+1};
          int xTexelC${x*2+1}Ready;
          vec4 xC${x};`;d+=`
    for (int r = 0; r < ${l}; r++) {
      `;for(let x=0;x<c;x++)d+=`
          xTexelC${x*2} = vec4(0.0);
          xTexelC${x*2}Ready = 0;
          xTexelC${x*2+1} = vec4(0.0);
          xTexelC${x*2+1}Ready = 0;
          xC${x} = vec4(0.0);`;d+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let x=0;x<(m+1)/2;x++){let b=x*2;if(d+=`
          xC = xCCorner + ${b*u};
          `,p===1){if(b<c&&(i%2===1?(d+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `,u===1&&b>0?d+=`
                xC${b} = vec4(xTexelC${b-2}.zw, xTexelC${b}.xy);
                `:d+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `):d+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `,b+1<c)){let w=i%2===0?y.nearestLargerEven(u):u;u%2===0&&i%2===1||u%2!==0&&i%2!==1?(d+=`
                  xCOffset = xC + imod(pads[1], 2) + ${w};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                    xTexelC${b+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b+1}.zw = vec2(0.0);
                    }
                    xTexelC${b+1}Ready = 1;
                  }
                  `,u>1?d+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b+1} = vec4(previous.zw, xTexelC${b+1}.xy);
                    } else {
                     xC${b+1} = vec4(0.0, 0.0, xTexelC${b+1}.xy);
                    }
                    `:d+=`
                    xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.xy);
                    `):w===1?d+=`
                    xC${b+1} = xTexelC${b};
                    `:d+=`
                    xCOffset = xC + ${w};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                      xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b+1}.zw = vec2(0.0);
                      }
                      xTexelC${b+1}Ready = 1;
                    }

                    xC${b+1} = xTexelC${b+1};
                    `}}else b<c&&(i%2===1?(d+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.0);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
              `,b+1<c&&(d+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b+1} = vec4(xTexelC${b+1}.xy, final.xy);
                `)):(d+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b+1}.xy);
              `,b+1<c&&(d+=`
                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
                `)));b<c&&(d+=`
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `,b+1<c&&(d+=`
              wTexel = getW(r, ${b+1}, d1, q);
              dotProd += xC${b+1} * vec4(wTexel.xz, wTexel.xz);
            `))}d+=`
    }
  `,d+=`
      }
    `;let f="",h="";o&&(n?f=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?f=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:f=`vec4 activation(vec4 x) {
          ${o}
        }`,h="result = activation(result);");let g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${a};
        int q = d2 - d1 * ${a};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${d}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${h}
        setOutput(result);
      }
    `}};function Wee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:a,pad:i,dilations:p,dimRoundingMode:u}=o,l=p;l==null&&(l=[1,1]),y.assert(C.eitherStridesOrDilationsAreOne(a,l),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${l}'`);let c=C.computeConv2DInfo(n.shape,s.shape,a,l,i,u,!0),m;A().getBool("WEBGL_PACK_DEPTHWISECONV")&&c.strideWidth<=2&&c.outChannels/c.inChannels===1?m=new Yl(c):m=new Xl(c);let d=[[c.padInfo.top,c.padInfo.left],[c.strideHeight,c.strideWidth],[c.dilationHeight,c.dilationWidth],[c.inHeight,c.inWidth]];return t.runWebGLProgram(m,[n,s],"float32",d)}var UF={kernelName:Bn,backendName:"webgl",kernelFunc:Wee};var ig=class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,o=e.strideWidth,n=e.padInfo.top,s=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${a} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${n};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}},ug=class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,o=e.filterWidth,n=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.top,i=o-1-e.padInfo.left,p=e.outChannels/e.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${p}; dm++) {
              int d2 = d1 * ${p} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function Uee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:a,dilations:i,pad:p,dimRoundingMode:u,filterShape:l}=o,c=C.computeConv2DInfo(n.shape,l,a,i,p,u,!0),m=new ig(c);return t.runWebGLProgram(m,[n,s],"float32")}var GF={kernelName:Gi,backendName:"webgl",kernelFunc:Uee};function Gee(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{strides:a,dilations:i,pad:p,dimRoundingMode:u,inputShape:l}=o,c=C.computeConv2DInfo(l,s.shape,a,i,p,u,!0),m=new ug(c);return t.runWebGLProgram(m,[n,s],"float32")}var HF={kernelName:Hi,backendName:"webgl",kernelFunc:Gee};var pg=class{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}};function Hee(r){let{inputs:e,backend:t}=r,{x:o}=e,n=[...o.shape,...o.shape],s=y.sizeFromShape(o.shape),a=te({inputs:{x:o},backend:t,attrs:{shape:[s]}}),i=new pg(s),p=t.runWebGLProgram(i,[a],a.dtype),u=te({inputs:{x:p},backend:t,attrs:{shape:n}});return t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(p),u}var KF={kernelName:ca,backendName:"webgl",kernelFunc:Hee};var lg=class{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let{inHeight:t,inWidth:o,padInfo:n,strideHeight:s,strideWidth:a,filterHeight:i,filterWidth:p,dilationHeight:u,dilationWidth:l}=e,{top:c,left:m}=n;this.userCode=`
      const ivec2 strides = ivec2(${s}, ${a});
      const ivec2 pads = ivec2(${c}, ${m});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${i}; h++) {
          int hIn = hBeg + h * ${u};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${p}; w++) {
              int wIn = wBeg + w * ${l};

              if (wIn >= 0 && wIn < ${o}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}};function Kee(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:a,pad:i,dilations:p}=o,u=C.computeDilation2DInfo(n.shape,s.shape,a,i,"NHWC",p),l,c=new lg(u);l=t.runWebGLProgram(c,[n,s],"float32");let m=te({inputs:{x:l},backend:t,attrs:{shape:u.outShape}});return t.disposeIntermediateTensorInfo(l),m}var qF={kernelName:zn,backendName:"webgl",kernelFunc:Kee};function qee(r){let{inputs:e,backend:t,attrs:o}=r,{equation:n}=o,s=e,{allDims:a,summedDims:i,idDims:p}=C.decodeEinsumEquation(n,s.length);C.checkEinsumDimSizes(a.length,p,s);let{path:u,steps:l}=C.getEinsumComputePath(i,p),c=l.length,m=null,d=a.length,f=[];for(let h=0;h<c;++h){for(let g of l[h]){let{permutationIndices:x,expandDims:b}=C.getEinsumPermutation(d,p[g]),w;C.isIdentityPermutation(x)?w=s[g]:(w=Ct({inputs:{x:s[g]},backend:t,attrs:{perm:x}}),f.push(w));let S=w.shape.slice();for(let k=0;k<b.length;++k)S.splice(b[k],0,1);y.arraysEqual(w.shape,S)||(w=te({inputs:{x:w},backend:t,attrs:{shape:S}}),f.push(w)),m===null?m=w:(m=um({inputs:{a:w,b:m},backend:t}),f.push(m))}h<c-1&&(u[h]>=0&&(m=Tp({inputs:{x:m},backend:t,attrs:{axis:u[h]-(a.length-d),keepDims:!1}}),f.push(m)),d--)}for(let h of f)h!==m&&t.disposeIntermediateTensorInfo(h);return m}var jF={kernelName:ji,backendName:"webgl",kernelFunc:qee};var jee="return (x >= 0.0) ? x : (exp(x) - 1.0);",Xee=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,Yee=xe({opSnippet:jee,packedOpSnippet:Xee}),XF={kernelName:Wn,backendName:"webgl",kernelFunc:Yee};var Qee="return (b >= 0.0) ? a : a * (b + 1.0);",Zee=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,Jee=r=>{let{inputs:e,backend:t}=r,{dy:o,y:n}=e,s=A().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new eo(Zee,o.shape,n.shape):new Br(Qee,o.shape,n.shape);return t.runWebGLProgram(s,[o,n],o.dtype)},YF={kernelName:ri,backendName:"webgl",kernelFunc:Jee};var ete=`
  return vec4(equal(a, b));
`,tte="return float(a == b);",rte=st({opSnippet:tte,packedOpSnippet:ete,dtype:"bool",cpuKernelImpl:ED}),QF={kernelName:xo,backendName:"webgl",kernelFunc:rte};var ote=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${C.ERF_P};
  float a1 = ${C.ERF_A1};
  float a2 = ${C.ERF_A2};
  float a3 = ${C.ERF_A3};
  float a4 = ${C.ERF_A4};
  float a5 = ${C.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,nte=xe({opSnippet:ote}),ZF={kernelName:Un,backendName:"webgl",kernelFunc:nte};var ste=sn+`
  return exp(x);
`,ate=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,L0=xe({opSnippet:ste,packedOpSnippet:ate,cpuKernelImpl:$D,dtype:"float32"}),JF={kernelName:yo,backendName:"webgl",kernelFunc:L0};function cg(r){let{inputs:e,attrs:t,backend:o}=r,{dim:n}=t,{input:s}=e,a=s.shape.length,i=s.shape.slice(),p=n;return n<0&&(y.assert(-(a+1)<=n,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),p=a+n+1),i.splice(p,0,1),te({inputs:{x:s},backend:o,attrs:{shape:i}})}var e3={kernelName:ma,backendName:"webgl",kernelFunc:cg};var t3="return exp(x) - 1.0;",ite=xe({opSnippet:t3,packedOpSnippet:t3,cpuKernelImpl:RD}),r3={kernelName:bo,backendName:"webgl",kernelFunc:ite};var cm=class{constructor(e,t,o){this.variableNames=["real","imag"];let n=t[1];this.outputShape=t;let s=o?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=o?`${n}.0`:"1.0",i;if(e==="real")i="return real * expR - imag * expI;";else if(e==="imag")i="return real * expI + imag * expR;";else throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);this.userCode=`
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${i}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${n});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${n}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${a};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}};function mg(r,e,t){let o=t.texData.get(r.dataId),n=y.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],a=n/s,i=te({inputs:{x:r},backend:t,attrs:{shape:[a,s]}}),p=i.shape,u=new cm("real",p,e),l=new cm("imag",p,e),c=[{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:p},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:p}],m=t.runWebGLProgram(u,c,"float32"),d=t.runWebGLProgram(l,c,"float32"),f=zr({inputs:{real:m,imag:d},backend:t});t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(d);let h=te({inputs:{x:f},backend:t,attrs:{shape:r.shape}});return t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(f),h}function ute(r){let{inputs:e,backend:t}=r,{input:o}=e;return mg(o,!1,t)}var o3={kernelName:Xi,backendName:"webgl",kernelFunc:ute};var dg=class{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}};function Ei(r){let{backend:e,attrs:t}=r,{shape:o,value:n}=t,{dtype:s}=t;if(s=s||y.inferDtype(n),s==="string"){let a=y.getArrayFromDType(s,y.sizeFromShape(o));return a.fill(n),e.makeTensorInfo(o,s,a)}else{let a=new dg(o,n),i=[[n]];return e.runWebGLProgram(a,[],s,i)}}var n3={kernelName:da,backendName:"webgl",kernelFunc:Ei};var fg=class{constructor(e){this.variableNames=["Image"],this.outputShape=[];let t=e[2];this.outputShape=e,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var s3={kernelName:Gn,backendName:"webgl",kernelFunc:({inputs:r,backend:e})=>{let{image:t}=r,o=e,n=new fg(t.shape);return o.runWebGLProgram(n,[t],t.dtype)}};var a3="return floor(x);",pte=xe({opSnippet:a3,packedOpSnippet:a3,cpuKernelImpl:DD}),i3={kernelName:Co,backendName:"webgl",kernelFunc:pte};var lte=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,cte=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,mte=st({opSnippet:lte,packedOpSnippet:cte,dtype:"int32"}),u3={kernelName:wo,backendName:"webgl",kernelFunc:mte};var hg=class{constructor(e){this.variableNames=["A"];let t=kt(),[o,n]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}.0, ${o}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}};var gg=class{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let t=kt(),[o,n]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${n}.0, ${o}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `}};var p3={kernelName:Lu,backendName:"webgl",kernelFunc:dte},Ql,B0=A().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function dte(r){let{inputs:e,backend:t,attrs:o}=r,{pixels:n}=e,{numChannels:s}=o,a=typeof HTMLVideoElement!="undefined"&&n instanceof HTMLVideoElement,i=typeof HTMLImageElement!="undefined"&&n instanceof HTMLImageElement,[p,u]=a?[n.videoWidth,n.videoHeight]:[n.width,n.height],l=[u,p],c=[u,p,s];if(i||a){let h=A().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(Ql==null||h!==B0)&&(B0=h,Ql=document.createElement("canvas").getContext("2d",{willReadFrequently:B0})),Ql.canvas.width=p,Ql.canvas.height=u,Ql.drawImage(n,0,0,p,u),n=Ql.canvas}let m=t.makeTensorInfo(l,"int32");t.texData.get(m.dataId).usage=hr.PIXELS,t.gpgpu.uploadPixelDataToTexture(t.getTexture(m.dataId),n);let d=A().getBool("WEBGL_PACK")?new gg(c):new hg(c),f=t.runWebGLProgram(d,[m],"int32");return t.disposeData(m.dataId),f}function fte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=e,{strides:p,pad:u,dataFormat:l,dilations:c,dimRoundingMode:m,activation:d,leakyreluAlpha:f}=o,h=C.convertConv2DDataFormat(l),g=C.computeConv2DInfo(n.shape,s.shape,p,c,u,m,!1,h),x,b=[],w=a!=null,S=i!=null,k=d==="leakyrelu",T=()=>{let R=[n,s],D=(F,O)=>{if(O==="NCHW"&&F.shape.length===1&&F.shape[0]!==1){let M=te({inputs:{x:F},backend:t,attrs:{shape:[F.shape[0],1,1]}});return b.push(M),M}return F};if(w&&R.push(D(a,l)),S&&R.push(D(i,l)),k){let F=t.makeTensorInfo([],"float32",y.createScalarValue(f,"float32"));R.push(F),b.push(F)}return R};if(g.filterHeight===1&&g.filterWidth===1&&g.dilationHeight===1&&g.dilationWidth===1&&g.strideHeight===1&&g.strideWidth===1&&(g.padInfo.type==="SAME"||g.padInfo.type==="VALID"))x=Qh({x:n,filter:s,convInfo:g,backend:t,bias:a,activation:d,preluActivationWeights:i,leakyreluAlpha:f});else if(g.strideWidth<=2&&h==="channelsLast"&&A().getBool("WEBGL_EXP_CONV")){let R=d?Ti(d,!0):null,D=new jl(g,w,R,S,k),F=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],O=T();x=t.runWebGLProgram(D,O,"float32",F)}else if(A().getBool("WEBGL_CONV_IM2COL"))x=Zh({x:n,filter:s,convInfo:g,backend:t,bias:a,activation:d,preluActivationWeights:i,leakyreluAlpha:f});else{let R=d?Ti(d,!1):null,D=new ql(g,w,R,S,k),F=T();x=t.runWebGLProgram(D,F,"float32")}let E=te({inputs:{x},backend:t,attrs:{shape:g.outShape}});return b.push(x),b.forEach(R=>t.disposeIntermediateTensorInfo(R)),E}var l3={kernelName:jo,backendName:"webgl",kernelFunc:fte};function hte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=e,{strides:p,pad:u,dilations:l,dimRoundingMode:c,activation:m,leakyreluAlpha:d}=o,f=[],h=l;h==null&&(h=[1,1]),y.assert(C.eitherStridesOrDilationsAreOne(p,h),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${p} and dilations '${h}'`);let g=C.computeConv2DInfo(n.shape,s.shape,p,h,u,c,!0),x=A().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels===1,b=m?Ti(m,x):null,w=[n,s],S=a!=null,k=i!=null,T=m==="leakyrelu";if(S&&w.push(a),k&&w.push(i),T){let F=t.makeTensorInfo([],"float32",y.createScalarValue(d,"float32"));w.push(F),f.push(F)}let E;x?E=new Yl(g,S,b,k,T):E=new Xl(g,S,b,k,T);let R=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],D=t.runWebGLProgram(E,w,"float32",R);return f.forEach(F=>t.disposeIntermediateTensorInfo(F)),D}var c3={kernelName:Xo,backendName:"webgl",kernelFunc:hte};var xg=class{constructor(e,t,o,n){this.sliceDim=e,this.strides=t,this.paramsShape=n,this.variableNames=["x","indices"],this.outputShape=o;let s=Re(o.length),a=`
    int index;`;for(let i=0;i<this.sliceDim;i++)a+=`
          index = round(getIndices(coords[0], ${i}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};
          flattenIndex += index * ${this.strides[i]};`;this.userCode=`
         void main() {
          ${s} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${a}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}};function gte(r){let{inputs:e,backend:t}=r,{params:o,indices:n}=e,s=n.shape,a=s[s.length-1],i=y.sizeFromShape(o.shape),[p,u,l,c]=C.prepareAndValidate(o,n),m=te({inputs:{x:n},backend:t,attrs:{shape:[u,a]}}),d=te({inputs:{x:o},backend:t,attrs:{shape:[y.sizeFromShape(o.shape)/l,l]}});if(t.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let x=t.readSync(n.dataId),b=t.bufferSync(o),w=AD(x,b,o.dtype,u,a,l,c,o.shape,i);return t.makeTensorInfo(p,o.dtype,w.values)}let f=new xg(a,c,[u,l],o.shape),h=t.runWebGLProgram(f,[d,m],d.dtype),g=te({inputs:{x:h},backend:t,attrs:{shape:p}});return t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(h),g}var m3={kernelName:Kn,backendName:"webgl",kernelFunc:gte};var yg=class{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;let o=Re(this.rank),n=xte(e,2);this.userCode=`
      void main() {
        ${o} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${n}));
      }
    `}};function xte(r,e){let t=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r.length;n++)n===2?o.push("index"):o.push(`${t[n]}`);return o.join()}function z0(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,indices:s}=e,{axis:a,batchDims:i}=o,p=y.parseAxisParam(a,n.shape)[0];if(A().get("DEBUG")){let b=t.readSync(s.dataId),w=n.shape[p];for(let S=0;S<b.length;++S){let k=b[S];y.assert(k<=w-1&&k>=0,()=>`GatherV2: the index value ${k} is not in [0, ${w-1}]`)}}let u=C.segment_util.collectGatherOpShapeInfo(n,s,p,i),l=y.sizeFromShape(s.shape),c=[],m=te({inputs:{x:n},backend:t,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=te({inputs:{x:s},backend:t,attrs:{shape:[u.batchSize,l/u.batchSize]}});c.push(m),c.push(d);let f=[u.batchSize,u.outerSize,l/u.batchSize,u.sliceSize];if(t.shouldExecuteOnCPU([n,s])||n.dtype==="string"){let b=t.bufferSync(d),w=t.bufferSync(m),S=FD(w,b,f);return c.forEach(k=>t.disposeIntermediateTensorInfo(k)),t.makeTensorInfo(u.outputShape,S.dtype,S.values)}let h=new yg(m.shape,f),g=t.runWebGLProgram(h,[m,d],m.dtype);c.push(g);let x=te({inputs:{x:g},backend:t,attrs:{shape:u.outputShape}});return c.forEach(b=>t.disposeIntermediateTensorInfo(b)),x}var d3={kernelName:fa,backendName:"webgl",kernelFunc:z0};var yte="return float(a > b);",bte=`
  return vec4(greaterThan(a, b));
`,Cte=st({opSnippet:yte,packedOpSnippet:bte,cpuKernelImpl:PD,dtype:"bool"}),f3={kernelName:So,backendName:"webgl",kernelFunc:Cte};var wte="return float(a >= b);",Ste=`
  return vec4(greaterThanEqual(a, b));
`,Ite=st({opSnippet:wte,packedOpSnippet:Ste,dtype:"bool",cpuKernelImpl:OD}),h3={kernelName:Io,backendName:"webgl",kernelFunc:Ite};function vte(r){let{inputs:e,backend:t}=r,{input:o}=e;return mg(o,!0,t)}var g3={kernelName:Yi,backendName:"webgl",kernelFunc:vte};var kte="return float(!isnan(x) && !isinf(x));",Nte=xe({opSnippet:kte,dtype:"bool"}),x3={kernelName:qn,backendName:"webgl",kernelFunc:Nte};var Tte="return float(isinf(x));",_te=xe({opSnippet:Tte,dtype:"bool"}),y3={kernelName:jn,backendName:"webgl",kernelFunc:_te};var Ete="return float(isnan(x));",$te=xe({opSnippet:Ete,dtype:"bool"}),b3={kernelName:Xn,backendName:"webgl",kernelFunc:$te};var Rte="return float(a < b);",Dte=`
  return vec4(lessThan(a, b));
`,Ate=st({opSnippet:Rte,packedOpSnippet:Dte,cpuKernelImpl:MD,dtype:"bool"}),C3={kernelName:ko,backendName:"webgl",kernelFunc:Ate};var Fte="return float(a <= b);",Pte=`
  return vec4(lessThanEqual(a, b));
`,Ote=st({opSnippet:Fte,packedOpSnippet:Pte,cpuKernelImpl:LD,dtype:"bool"}),w3={kernelName:No,backendName:"webgl",kernelFunc:Ote};function Mte(r){let{backend:e,attrs:t}=r,{start:o,stop:n,num:s}=t,a=BD(o,n,s);return e.makeTensorInfo([a.length],"float32",a)}var S3={kernelName:Qn,backendName:"webgl",kernelFunc:Mte};var Lte=sn+`
  return x < 0.0 ? 0./0. : log(x);
`,Bte=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,zte=xe({opSnippet:Lte,packedOpSnippet:Bte,cpuKernelImpl:zD}),I3={kernelName:To,backendName:"webgl",kernelFunc:zte};var Vte=sn+`
  return log(1.0 + x);
`,Wte=xe({opSnippet:Vte}),v3={kernelName:Zn,backendName:"webgl",kernelFunc:Wte};var Ute="return float(a >= 1.0 && b >= 1.0);",Gte=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,Hte=st({opSnippet:Ute,packedOpSnippet:Gte,dtype:"bool"}),k3={kernelName:Jn,backendName:"webgl",kernelFunc:Hte};var Kte="return float(!(x >= 1.0));",qte=xe({opSnippet:Kte}),N3={kernelName:es,backendName:"webgl",kernelFunc:qte};var jte="return float(a >= 1.0 || b >= 1.0);",Xte=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,Yte=st({opSnippet:jte,packedOpSnippet:Xte,dtype:"bool"}),T3={kernelName:ts,backendName:"webgl",kernelFunc:Yte};var bg=class{constructor(e,t,o,n,s){this.variableNames=["x"],this.outputShape=[];let a=t,i=e[3]-1;this.outputShape=e;let p,u=`float(${o}) + float(${n}) * sum`;s===.5?p=`inversesqrt(${u})`:s===1?p=`1.0/(${u})`:p=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${a}; j <= ${a}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${i}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${p};
        setOutput(val);
      }
    `}};var Cg=class{constructor(e,t,o,n,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let a=t,i=e[3]-1;this.outputShape=e;let p,u=`float(${o}) + float(${n}) * sum`;s===.5?p=`inversesqrt(${u})`:s===1?p=`1.0/(${u})`:p=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${a};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${a}; j <= ${a}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${p};
        setOutput(result);
      }
    `}};var Qte=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{depthRadius:s,bias:a,alpha:i,beta:p}=o,u=A().getBool("WEBGL_PACK_NORMALIZATION")?new Cg(n.shape,s,a,i,p):new bg(n.shape,s,a,i,p);return t.runWebGLProgram(u,[n],n.dtype)},_3={kernelName:rs,backendName:"webgl",kernelFunc:Qte};var wg=class{constructor(e,t,o,n,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=o,this.alpha=n,this.beta=s,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${n}) * norm + float(${o});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${n})
                * float(${s})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${s});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}};var Zte=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n,y:s,dy:a}=e,{depthRadius:i,bias:p,alpha:u,beta:l}=o,c=new wg(n.shape,i,p,u,l);return t.runWebGLProgram(c,[n,s,a],n.dtype)},E3={kernelName:oi,backendName:"webgl",kernelFunc:Zte};function $3(r,e,t,o){let n=y.sizeFromShape(e),a=y.sizeFromShape(r.shape)/n,i=te({inputs:{x:r},attrs:{shape:[a,n]},backend:o}),p=ro(i,r.dtype,"max",o),u=te({inputs:{x:p},attrs:{shape:t},backend:o});return o.disposeIntermediateTensorInfo(i),o.disposeIntermediateTensorInfo(p),u}function V0(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reductionIndices:s,keepDims:a}=o,i=n.shape.length,p=y.parseAxisParam(s,n.shape),u=p,l=C.getAxesPermutation(u,i),c=l!=null,m=t.shouldExecuteOnCPU([n]),d=n;if(c){if(m){let w=t.texData.get(d.dataId).values,S=new Array(i);for(let E=0;E<S.length;E++)S[E]=n.shape[l[E]];let k=Np(w,n.shape,n.dtype,l,S);d=t.makeTensorInfo(S,n.dtype);let T=t.texData.get(d.dataId);T.values=k}else d=ku(n,l,t);u=C.getInnerMostAxes(u.length,i)}C.assertAxesAreInnerMostDims("max",u,i);let[f,h]=C.computeOutAndReduceShapes(d.shape,u),g=f;a&&(g=C.expandShapeToKeepDim(f,p));let x;if(m){let w=t.texData.get(d.dataId).values,S=VD(w,y.sizeFromShape(h),g,n.dtype);x=t.makeTensorInfo(g,n.dtype);let k=t.texData.get(x.dataId);k.values=S}else x=$3(d,h,g,t);return c&&t.disposeIntermediateTensorInfo(d),x}var R3={kernelName:os,backendName:"webgl",kernelFunc:V0};var Jte=Gl+`
  return max(a, b);
`,ere=`
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+to+`
  return result;
`,tre=st({opSnippet:Jte,packedOpSnippet:ere,cpuKernelImpl:WD}),D3={kernelName:_o,backendName:"webgl",kernelFunc:tre};function rre(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e;Ys(n,"maxPool");let{filterSize:s,strides:a,pad:i,dimRoundingMode:p}=o,u=1;y.assert(C.eitherStridesOrDilationsAreOne(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);let l=C.computePool2DInfo(n.shape,s,a,u,i,p);if(l.filterWidth===1&&l.filterHeight===1&&y.arraysEqual(l.inShape,l.outShape))return Ft({inputs:{x:n},backend:t});let c=new Zs(l,"max",!1);return t.runWebGLProgram(c,[n],n.dtype)}var A3={kernelName:ns,backendName:"webgl",kernelFunc:rre};function ore(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:a,pad:i,dataFormat:p,dimRoundingMode:u}=o,l=[1,1,1],c=C.computePool3DInfo(n.shape,s,a,l,i,u,p),m=new Nu(c,"max",!1);return t.runWebGLProgram(m,[n],n.dtype)}var F3={kernelName:ha,backendName:"webgl",kernelFunc:ore};var Sg=class{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideHeight,o=e.strideWidth,n=e.dilationHeight,s=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=s-1-e.padInfo.top,p=a-1-e.padInfo.left,u=s*a-1;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${p});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${s};
          wR += ${n}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${a}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${a} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}},Ig=class{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideDepth,o=e.strideHeight,n=e.strideWidth,s=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,p=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=p-1-e.padInfo.front,m=u-1-e.padInfo.top,d=l-1-e.padInfo.left,f=p*u*l-1;this.userCode=`
      const ivec3 pads = ivec3(${c}, ${m}, ${d});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
           wD += ${s}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${u};
              wR += ${a}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${l};
                wC += ${i}) {
              float dyC = float(dyCCorner + wC) / ${n}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${f} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${u} * ${l} +
                  wR * ${l} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function nre(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,a=s,{filterSize:i,strides:p,pad:u,dimRoundingMode:l}=o,c=[1,1,1],m=C.computePool3DInfo(a.shape,i,p,c,u,l),d=new Nu(m,"max",!0),f=t.runWebGLProgram(d,[a],a.dtype),h=new Ig(m),g=t.runWebGLProgram(h,[n,f],a.dtype);return t.disposeIntermediateTensorInfo(f),g}var P3={kernelName:Ji,backendName:"webgl",kernelFunc:nre};function sre(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s,output:a}=e,i=s;Ys([s,a],"maxPoolGrad");let{filterSize:p,strides:u,pad:l,dimRoundingMode:c}=o,m=C.computePool2DInfo(i.shape,p,u,1,l,c),d=!0,f=new Zs(m,"max",d),h=t.runWebGLProgram(f,[i],i.dtype),g=new Sg(m),x=t.runWebGLProgram(g,[n,h],i.dtype);return t.disposeIntermediateTensorInfo(h),x}var O3={kernelName:Zi,backendName:"webgl",kernelFunc:sre};function M3(r,e,t,o){let n=new Zs(t,"max",!1),s=o.runWebGLProgram(n,[r],"float32");n=new Zs(t,"max",!0,!0,e);let a=o.runWebGLProgram(n,[r],"float32");return[s,a]}var L3={kernelName:ga,backendName:"webgl",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{x:o}=r,{filterSize:n,strides:s,pad:a,includeBatchInIndex:i}=e,p=t;y.assert(o.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`);let u=[1,1];y.assert(C.eitherStridesOrDilationsAreOne(s,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);let l=C.computePool2DInfo(o.shape,n,s,u,a),[c,m]=M3(o,i,l,p);return[c,m]}};function B3(r,e,t,o){let n=y.sizeFromShape(e),a=y.sizeFromShape(r.shape)/n,i=te({inputs:{x:r},attrs:{shape:[a,n]},backend:o}),p=ro(i,"float32","mean",o),u=te({inputs:{x:p},attrs:{shape:t},backend:o});return o.disposeIntermediateTensorInfo(i),o.disposeIntermediateTensorInfo(p),u}var z3={kernelName:ss,backendName:"webgl",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{x:o}=r,{keepDims:n,axis:s}=e,a=t,i=o.shape.length,p=y.parseAxisParam(s,o.shape),u=p,l=C.getAxesPermutation(u,i),c=l!=null,m=a.shouldExecuteOnCPU([o]),d=[],f=o;if(c){if(m){let S=a.texData.get(f.dataId).values,k=new Array(i);for(let R=0;R<k.length;R++)k[R]=o.shape[l[R]];let T=Np(S,o.shape,o.dtype,l,k);f=a.makeTensorInfo(k,o.dtype);let E=a.texData.get(f.dataId);E.values=T}else f=ku(o,l,a);d.push(f),u=C.getInnerMostAxes(u.length,i)}C.assertAxesAreInnerMostDims("sum",u,i);let[h,g]=C.computeOutAndReduceShapes(f.shape,u),x=h;n&&(x=C.expandShapeToKeepDim(h,p));let b=B3(f,g,x,a);for(let w of d)a.disposeIntermediateTensorInfo(w);return b}};function are(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o,i=n.shape.length,p=y.parseAxisParam(s,n.shape),u=p,l=C.getAxesPermutation(u,i),c=n;l!=null&&(c=Ct({inputs:{x:n},backend:t,attrs:{perm:l}}),u=C.getInnerMostAxes(u.length,n.shape.length)),C.assertAxesAreInnerMostDims("min",u,i);let[m,d]=C.computeOutAndReduceShapes(c.shape,u),f=y.sizeFromShape(d),h=te({inputs:{x:c},backend:t,attrs:{shape:[-1,f]}}),g=ro(h,h.dtype,"min",t),x;if(a){let b=C.expandShapeToKeepDim(m,p);x=te({inputs:{x:g},backend:t,attrs:{shape:b}})}else x=te({inputs:{x:g},backend:t,attrs:{shape:m}});return t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(g),l!=null&&t.disposeIntermediateTensorInfo(c),x}var V3={kernelName:as,backendName:"webgl",kernelFunc:are};var ire=Gl+`
  return min(a, b);
`,ure=`
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+to+`
  return result;
`,pre=st({opSnippet:ire,packedOpSnippet:ure,cpuKernelImpl:UD}),W3={kernelName:Eo,backendName:"webgl",kernelFunc:pre};var vg=class{constructor(e,t,o){this.variableNames=["x"],this.outputShape=t.map((l,c)=>l[0]+e[c]+l[1]);let n=e.length,s=Re(n),a=t.map(l=>l[0]).join(","),i=t.map((l,c)=>l[0]+e[c]).join(","),p=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n),u=o==="reflect"?0:1;if(n===1){this.userCode=`
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${a});
      ${s} end = ${s}(${i});

      void main() {
        ${s} outC = getOutputCoords();
        for (int i = 0; i < ${n}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${s} coords = outC - start;
        setOutput(getX(${p}));
      }
    `}};var kg=class{constructor(e,t,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((f,h)=>f[0]+e[h]+f[1]);let n=e.length,s=Re(n),a=t.map(f=>f[0]).join(","),i=t.map((f,h)=>f[0]+e[h]).join(","),p=At("rc",n),u=At("source",n),l=`${p[n-1]} < ${this.outputShape[n-1]}`,c=n===1?"source":`vec2(${u.slice(-2).join()})`,m=o==="reflect"?0:1,d="";if(n===1){let f=`
        ${s} source = rc;
        if (source < start) {
          source = start * 2 - source - ${m};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${m};
        }
        source -= start;
      `;d=`
        ${s} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${u.join()}), ${c});
        ${p[n-1]} += 1;
        if(${l}) {
          ${f}
          result[1] = getChannel(getX(${u.join()}), ${c});
        }
      `}else{let f=`
        ${s} source = rc;
        ${s} lt = ${s}(lessThan(source, start));
        ${s} gte = ${s}(greaterThanEqual(source, end));
        ${s} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${m}) +
                gte * ((end - 1) * 2 - source + ${m});
        source -= start;
      `;d=`
        ${s} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${u.join()}), ${c});
        ${p[n-1]} += 1;
        if(${l}) {
          ${f}
          result[1] = getChannel(getX(${u.join()}), ${c});
        }
        rc = outputLoc;
        ${p[n-2]} += 1;
        if(${p[n-2]} < ${this.outputShape[n-2]}) {
          ${f}
          result[2] = getChannel(getX(${u.join()}), ${c});
          ${p[n-1]} += 1;
          if(${l}) {
            ${f}
            result[3] = getChannel(getX(${u.join()}), ${c});
          }
        }
      `}this.userCode=`
      const ${s} start = ${s}(${a});
      const ${s} end = ${s}(${i});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${d}
        setOutput(result);
      }
    `}};var lre=({inputs:r,backend:e,attrs:t})=>{let{x:o}=r,{paddings:n,mode:s}=t,a=A().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new kg(o.shape,n,s):new vg(o.shape,n,s);return e.runWebGLProgram(a,[o],o.dtype)},U3={kernelName:is,backendName:"webgl",kernelFunc:lre};var cre=`if (b == 0.0) return NAN;
  return mod(a, b);`,mre=`
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  `+to+`
  return result;
`,dre=st({opSnippet:cre,packedOpSnippet:mre}),G3={kernelName:us,backendName:"webgl",kernelFunc:dre};var Ng=class{constructor(e,t,o){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,o],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t-1}));
      }
    `}};var fre=`
if (a == b) {
  return 1.0;
};
return a / b;`,hre=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,W0=st({opSnippet:fre,packedOpSnippet:hre,checkOutOfBounds:!0}),H3={kernelName:Vn,backendName:"webgl",kernelFunc:W0};var K3="return a - b;",U0=st({opSnippet:K3,packedOpSnippet:K3,supportsComplex:!0,cpuKernelImpl:lA}),q3={kernelName:Oo,backendName:"webgl",kernelFunc:U0};function G0(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{dim:s}=o,a=y.parseAxisParam([s],n.shape),i=V0({inputs:{x:n},backend:t,attrs:{reductionIndices:a,keepDims:!1}}),p=C.expandShapeToKeepDim(i.shape,a),u=te({inputs:{x:i},backend:t,attrs:{shape:p}}),l=U0({inputs:{a:n,b:u},backend:t}),c=L0({inputs:{x:l},backend:t}),m=Tp({inputs:{x:c},backend:t,attrs:{axis:a,keepDims:!1}}),d=te({inputs:{x:m},backend:t,attrs:{shape:p}}),f=W0({inputs:{a:c,b:d},backend:t});return t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(u),t.disposeIntermediateTensorInfo(l),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(d),f}var j3={kernelName:Fs,backendName:"webgl",kernelFunc:G0};function gre(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{numSamples:s,seed:a,normalized:i}=o,p=i?n:G0({inputs:{logits:n},backend:t,attrs:{dim:n.shape.length-1}}),u=p.shape[0],l=p.shape[1],c=new Ng(u,l,s),m=[[a]],d=t.runWebGLProgram(c,[p],"int32",m);return i||t.disposeIntermediateTensorInfo(p),d}var X3={kernelName:ps,backendName:"webgl",kernelFunc:gre};var xre=Gt+`
  return -x;
`,yre=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function bre(r){let{inputs:e,backend:t}=r,{x:o}=e;if(t.shouldExecuteOnCPU([o])){let s=t.texData.get(o.dataId),[a,i]=HD(s.values,o.shape,o.dtype);return t.makeTensorInfo(i,o.dtype,a)}let n;return A().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new Lr(o.shape,yre):n=new nr(o.shape,xre),t.runWebGLProgram(n,[o],o.dtype)}var Y3={kernelName:ls,backendName:"webgl",kernelFunc:bre};var Cre=Ut.nonMaxSuppressionV3Impl;function wre(r){C.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p}=o,u=t.readSync(n.dataId),l=t.readSync(s.dataId),{selectedIndices:c}=Cre(u,l,a,i,p);return t.makeTensorInfo([c.length],"int32",new Int32Array(c))}var Q3={kernelName:cs,backendName:"webgl",kernelFunc:wre};var Sre=Ut.nonMaxSuppressionV4Impl;function Ire(r){C.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p,padToMaxOutputSize:u}=o,l=t.readSync(n.dataId),c=t.readSync(s.dataId),{selectedIndices:m,validOutputs:d}=Sre(l,c,a,i,p,u);return[t.makeTensorInfo([m.length],"int32",new Int32Array(m)),t.makeTensorInfo([],"int32",new Int32Array([d]))]}var Z3={kernelName:ni,backendName:"webgl",kernelFunc:Ire};var vre=Ut.nonMaxSuppressionV5Impl;function kre(r){C.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p,softNmsSigma:u}=o,l=t.readSync(n.dataId),c=t.readSync(s.dataId),m=a,d=i,f=p,h=u,{selectedIndices:g,selectedScores:x}=vre(l,c,m,d,f,h);return[t.makeTensorInfo([g.length],"int32",new Int32Array(g)),t.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var J3={kernelName:ms,backendName:"webgl",kernelFunc:kre};var Tg=class{constructor(e,t,o,n){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${n}), float(${o}),
                      float(index == coords.y)));
      }
    `}};var Nre=r=>{let{inputs:e,backend:t,attrs:o}=r,{indices:n}=e,{dtype:s,depth:a,onValue:i,offValue:p}=o,u=y.sizeFromShape(n.shape),l=new Tg(u,a,i,p),c=te({inputs:{x:n},backend:t,attrs:{shape:[u]}}),m=t.runWebGLProgram(l,[c],s);t.disposeIntermediateTensorInfo(c);let d=[...n.shape,a],f=te({inputs:{x:m},backend:t,attrs:{shape:d}});return t.disposeIntermediateTensorInfo(m),f},eP={kernelName:ds,backendName:"webgl",kernelFunc:Nre};function mm(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="complex64"){let n=_i({inputs:{input:o},backend:t}),s=mm({inputs:{x:n},backend:t}),a=Ep({inputs:{input:o},backend:t}),i=mm({inputs:{x:a},backend:t}),p=zr({inputs:{real:s,imag:i},backend:t});return t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(i),p}else return Ei({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:t})}var tP={kernelName:_a,backendName:"webgl",kernelFunc:mm};function rP(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=_i({inputs:{input:o},backend:t}),s=rP({inputs:{x:n},backend:t}),a=Ep({inputs:{input:o},backend:t}),i=mm({inputs:{x:a},backend:t}),p=zr({inputs:{real:s,imag:i},backend:t});return t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(i),p}else return Ei({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:t})}var oP={kernelName:xa,backendName:"webgl",kernelFunc:rP};function Tre(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o;if(e.length===1)return cg({inputs:{input:e[0]},backend:t,attrs:{dim:n}});let s=e[0].shape,a=e[0].dtype;e.forEach(l=>{y.assertShapesMatch(s,l.shape,"All tensors passed to stack must have matching shapes"),y.assert(a===l.dtype,()=>"All tensors passed to stack must have matching dtypes")});let i=[],p=e.map(l=>{let c=cg({inputs:{input:l},backend:t,attrs:{dim:n}});return i.push(c),c}),u=M0({inputs:p,backend:t,attrs:{axis:n}});return i.forEach(l=>t.disposeIntermediateTensorInfo(l)),u}var nP={kernelName:ya,backendName:"webgl",kernelFunc:Tre};var _g=class{constructor(e,t,o){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((u,l)=>u[0]+e[l]+u[1]);let n=e.length,s=Re(n),a=t.map(u=>u[0]).join(","),i=t.map((u,l)=>u[0]+e[l]).join(","),p=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n);if(n===1){this.userCode=`
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${a});
      ${s} end = ${s}(${i});

      void main() {
        ${s} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${s} coords = outC - start;
          setOutput(getX(${p}));
        }
      }
    `}};var Eg=class{constructor(e,t,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((h,g)=>h[0]+e[g]+h[1]);let n=e.length,s=Re(n),a=t.map(h=>h[0]).join(","),i=t.map((h,g)=>h[0]+e[g]).join(","),p=At("rc",n),u=At("source",n),l=`${p[n-1]} < ${this.outputShape[n-1]}`,c=n===1?"source":`vec2(${u.slice(-2).join()})`,m=[`${s} rc = outputLoc;`,`${p[n-1]} += 1;
       if(${l}) {
      `,n===1?"":`}
       rc = outputLoc;
       ${p[n-2]} += 1;
       if(${p[n-2]} < ${this.outputShape[n-2]}) {`,n===1?"":`  ${p[n-1]} += 1;
         if(${l}) {`],d=n===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",f="";for(let h=0,g=n===1?2:4;h<g;h++)f+=`
        ${m[h]}
        if (${d}) {
          result[${h}] = float(value);
        } else {
          ${s} source = rc - start;
          result[${h}] = getChannel(getX(${u.join()}), ${c});
        }
      `;f+=n===1?"} ":"}}",this.userCode=`
      const ${s} start = ${s}(${a});
      const ${s} end = ${s}(${i});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `}};var H0=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{paddings:s,constantValue:a}=o;if(y.sizeFromShape(n.shape)===0){let u=s.map((l,c)=>l[0]+n.shape[c]+l[1]);return Ei({backend:t,attrs:{shape:u,value:a,dtype:n.dtype}})}let i=A().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Eg(n.shape,s,a):new _g(n.shape,s,a),p=[[a]];return t.runWebGLProgram(i,[n],n.dtype,p)},sP={kernelName:fs,backendName:"webgl",kernelFunc:H0};var _re=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,Ere=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  `+to+`
  return result;
`,$re=st({opSnippet:_re,packedOpSnippet:Ere}),aP={kernelName:hs,backendName:"webgl",kernelFunc:$re};function Rre(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o,i=n.shape.length,p=[],u=y.parseAxisParam(s,n.shape),l=u,c=C.getAxesPermutation(l,i),m=n;c!=null&&(m=Ct({inputs:{x:n},backend:t,attrs:{perm:c}}),l=C.getInnerMostAxes(l.length,i),p.push(m)),C.assertAxesAreInnerMostDims("prod",l,i);let d;if(t.shouldExecuteOnCPU([m])){let f=t.texData.get(m.dataId).values,{outVals:h,outShape:g,outDtype:x}=qD(m.shape,m.dtype,f,l);d=t.makeTensorInfo(g,x,h)}else{let[f,h]=C.computeOutAndReduceShapes(m.shape,l),g=y.sizeFromShape(h),x=te({inputs:{x:m},backend:t,attrs:{shape:[-1,g]}}),b=mi(n.dtype),w=ro(x,b,"prod",t);d=te({inputs:{x:w},backend:t,attrs:{shape:f}}),p.push(x),p.push(w)}if(a){p.push(d);let f=C.expandShapeToKeepDim(d.shape,u);d=te({inputs:{x:d},backend:t,attrs:{shape:f}})}return p.forEach(f=>t.disposeIntermediateTensorInfo(f)),d}var iP={kernelName:Ho,backendName:"webgl",kernelFunc:Rre};function Dre(r){let{inputs:e,backend:t,attrs:o}=r,{paramsNestedSplits:n,paramsDenseValues:s,indices:a}=e,{outputRaggedRank:i}=o,p=n.map(x=>t.readSync(x.dataId)),u=n.map(x=>x.shape),l=t.readSync(s.dataId),c=t.readSync(a.dataId),[m,d,f]=jD(p,u,l,s.shape,s.dtype,c,a.shape,i),h=m.map(x=>t.makeTensorInfo([x.length],"int32",x)),g=t.makeTensorInfo(f,s.dtype,d);return h.concat([g])}var uP={kernelName:Qp,backendName:"webgl",kernelFunc:Dre};function Are(r){let{inputs:e,backend:t}=r,{starts:o,limits:n,deltas:s}=e,a=t.readSync(o.dataId),i=t.readSync(n.dataId),p=t.readSync(s.dataId),[u,l]=XD(a,o.shape,o.dtype,i,n.shape,p,s.shape),c=t.makeTensorInfo([u.length],"int32",u),m=t.makeTensorInfo([l.length],o.dtype,l);return[c,m]}var pP={kernelName:Zp,backendName:"webgl",kernelFunc:Are};function Fre(r){let{inputs:e,backend:t,attrs:o}=r,{shape:n,values:s,defaultValue:a,rowPartitionTensors:i}=e,{rowPartitionTypes:p}=o,u=t.readSync(n.dataId),l=t.readSync(s.dataId),c=t.readSync(a.dataId),m=i.map(g=>t.readSync(g.dataId)),d=i.map(g=>g.shape),[f,h]=YD(u,n.shape,l,s.shape,s.dtype,c,a.shape,m,d,p);return t.makeTensorInfo(f,s.dtype,h)}var lP={kernelName:Jp,backendName:"webgl",kernelFunc:Fre};var K0=r=>{let{backend:e,attrs:t}=r,{start:o,stop:n,step:s,dtype:a}=t,i=QD(o,n,s,a);return e.makeTensorInfo([i.length],a,i)},cP={kernelName:ba,backendName:"webgl",kernelFunc:K0};var Pre="return 1.0 / x;",Ore=xe({opSnippet:Pre}),mP={kernelName:xs,backendName:"webgl",kernelFunc:Ore};var Mre=Gt+`
  return (x < 0.0) ? 0.0 : x;
`,Lre=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,Bre=xe({opSnippet:Mre,packedOpSnippet:Lre}),dP={kernelName:ys,backendName:"webgl",kernelFunc:Bre};var zre=Gt+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,Vre=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,Wre=xe({opSnippet:zre,packedOpSnippet:Vre}),fP={kernelName:ws,backendName:"webgl",kernelFunc:Wre};var $g=class{constructor(e,t,o,n,s){this.variableNames=["A"],this.outputShape=[];let[a,i,p,u]=e;this.outputShape=[a,t,o,u];let l=[n&&t>1?i-1:i,n&&o>1?p-1:p],c=[n&&t>1?t-1:t,n&&o>1?o-1:o],m;s?m="(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":m="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${l[0]/c[0]},
          ${l[1]/c[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${p}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}};var Rg=class{constructor(e,t,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[a,i,p,u]=e;this.outputShape=[a,t,o,u];let l=[n&&t>1?i-1:i,n&&o>1?p-1:p],c=[n&&t>1?t-1:t,n&&o>1?o-1:o],m;s?m="(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":m="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${l[0]/c[0]},
          ${l[1]/c[1]},
          ${l[1]/c[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${p}.0,
                                     ${p}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}};function Ure(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:a,size:i}=o,[p,u]=i,l=A().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Rg(n.shape,p,u,s,a):new $g(n.shape,p,u,s,a);return t.runWebGLProgram(l,[n],"float32")}var hP={kernelName:Cs,backendName:"webgl",kernelFunc:Ure};var Dg=class{constructor(e,t,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,n,s]=t,[,a,i]=e,p=[o&&a>1?n-1:n,o&&i>1?s-1:s],u=[o&&a>1?a-1:a,o&&i>1?i-1:i],l=p[0]/u[0],c=p[1]/u[1],m=1/l,d=1/c,f=Math.ceil(m)*2+2,h=Math.ceil(d)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${l});
        const float widthScale = float(${c});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${d});

        const int winHeight = int(${f});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${n-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function Gre(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:a}=o,i=new Dg(s.shape,n.shape,a);return t.runWebGLProgram(i,[s],s.dtype)}var gP={kernelName:ii,backendName:"webgl",kernelFunc:Gre};var Ag=class{constructor(e,t,o,n,s){this.variableNames=["A"],this.outputShape=[];let[a,i,p,u]=e;this.outputShape=[a,t,o,u];let l=[n&&t>1?i-1:i,n&&o>1?p-1:p],c=[n&&t>1?t-1:t,n&&o>1?o-1:o],m=n?"0.5":"0.0",d;s?d="max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":d="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${l[0]/c[0]},
          ${l[1]/c[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${p}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}};var Fg=class{constructor(e,t,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[a,i,p,u]=e;this.outputShape=[a,t,o,u];let l=[n&&t>1?i-1:i,n&&o>1?p-1:p],c=[n&&t>1?t-1:t,n&&o>1?o-1:o],m=n?"0.5":"0.0",d;s?d="max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":d="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${l[0]/c[0]},
          ${l[1]/c[1]},
          ${l[1]/c[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${p}.0,
                                     ${p}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}};function Hre(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:a,size:i}=o,[p,u]=i,l=A().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Fg(n.shape,p,u,s,a):new Ag(n.shape,p,u,s,a);return t.runWebGLProgram(l,[n],n.dtype)}var xP={kernelName:bs,backendName:"webgl",kernelFunc:Hre};var Pg=class{constructor(e,t,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,n,s]=t,[,a,i]=e,p=[o&&a>1?n-1:n,o&&i>1?s-1:s],u=[o&&a>1?a-1:a,o&&i>1?i-1:i],l=p[0]/u[0],c=p[1]/u[1],m=1/l,d=1/c,f=Math.ceil(m)*2+2,h=Math.ceil(d)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${l});
        const float widthScale = float(${c});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${d});

        const int winHeight = int(${f});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float sourceFracRow =
              float(${p[0]}) *
                (float(dyR) / float(${u[0]}));

            float sourceFracCol =
                float(${p[1]}) *
                  (float(dyC) / float(${u[1]}));

            int sourceNearestRow = int(min(
                float(int(${n}) - 1),
                ${o} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${s}) - 1),
                ${o} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function Kre(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:a}=o,i=new Pg(s.shape,n.shape,a);return t.runWebGLProgram(i,[s],s.dtype)}var yP={kernelName:ai,backendName:"webgl",kernelFunc:Kre};var Og=class{constructor(e,t){this.variableNames=["x"];let o=e.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);if(this.outputShape=e,o===1){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;return}let n=i=>t.indexOf(i)!==-1&&e[i]!==1?`${e[i]} - coords[${i}] - 1`:`coords[${i}]`,s=e.map((i,p)=>n(p)).join(","),a=Re(o);this.userCode=`
      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `}};var Mg=class{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let o=e.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);this.outputShape=e;let n=At("rc",o),s=`${n[o-1]} + 1 < ${this.outputShape[o-1]}`,a=`${n[o-2]} + 1 < ${this.outputShape[o-2]}`,i=Re(o);o===1?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${s}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${i} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${p(n.slice())};
          if(${s}){
            result.g = ${u(n.slice())};
          }
          if(${a}) {
            result.b = ${l(n.slice())};
            if(${s}) {
              result.a = ${c(n.slice())};
            }
          }
          setOutput(result);
        }
    `;function p(f){return m(f)}function u(f){return f[o-1]="("+f[o-1]+" + 1)",m(f)}function l(f){return f[o-2]="("+f[o-2]+" + 1)",m(f)}function c(f){return f[o-1]="("+f[o-1]+" + 1)",f[o-2]="("+f[o-2]+" + 1)",m(f)}function m(f){let h=e.map((b,w)=>d(w,f)),g=h.join(","),x=h.slice(-2).join(",");return`getChannel(getX(${g}), vec2(${x}))`}function d(f,h){return t.indexOf(f)!==-1&&e[f]!==1?`${e[f]} - ${h[f]} - 1`:`${h[f]}`}}};function qre(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dims:s}=o,a=n.shape.length,i=y.parseAxisParam(s,n.shape);if(a===0)return Ft({inputs:{x:n},backend:t});let p=A().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Mg(n.shape,i):new Og(n.shape,i);return t.runWebGLProgram(p,[n],n.dtype)}var bP={kernelName:Ss,backendName:"webgl",kernelFunc:qre};var Lg=class{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let o=e[1],n=e[2];this.outputShape=e;let s="";typeof t=="number"?s=`float outputValue = ${t.toFixed(2)};`:s=`
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${s}
          if(coordX >= 0 && coordX < ${n} && coordY >= 0 && coordY < ${o}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var CP={kernelName:Vs,backendName:"webgl",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{image:o}=r,{radians:n,fillValue:s,center:a}=e,i=t,p=new Lg(o.shape,s),[u,l]=C.getImageCenter(a,o.shape[1],o.shape[2]),c=[[u,l,Math.sin(n),Math.cos(n)]];return i.runWebGLProgram(p,[o],o.dtype,c)}};var jre=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,Xre=xe({opSnippet:jre}),wP={kernelName:Is,backendName:"webgl",kernelFunc:Xre};var Yre="return inversesqrt(x);",Qre=xe({opSnippet:Yre,cpuKernelImpl:ZD}),SP={kernelName:Do,backendName:"webgl",kernelFunc:Qre};var Tu=class{constructor(e,t,o,n,s,a,i=!0,p=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;let u=Re(s.length),l=Re(a.length),c="";o===1?c="i":o===2&&(c="i, j");let m=`getIndices(${c})`,d="";n===1?d="i":n===2&&(d="i, coords[1]");let f=`getUpdates(${d})`,h="";p&&(h="coords[0], coords[1]");let g=`getDefaultValue(${h})`,x=t>1?"strides[j]":"strides";this.userCode=`
        ${u} strides = ${u}(${s});

        void main() {
          ${l} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${m});
              flattenedIndex += index * ${x};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(${g}, sum, float(found)));
        }
      `}};var Bg=class{constructor(e,t,o,n,s,a,i=!0,p=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;let u=Re(s.length),l=Re(a.length),c="";o===1?c="i":o===2&&(c="i, j");let m=`getIndices(${c})`,d="";n===1?d="i":n===2&&(d="i, coords[1]");let f=`getUpdates(${d})`,h="";p&&(h="coords[0], coords[1]");let g=`getDefaultValue(${h})`,x=t>1?"strides[j]":"strides",b=t>1?"strides[j + 1]":"strides";this.userCode=`
        ${u} strides = ${u}(${s});

        void main() {
          ${l} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${e}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${t}; j+=2) {
              ivec4 index = round(${m});
              flattenedIndex += index.xz * ${x};
              if (j + 1 < ${t}) {
                flattenedIndex += index.yw * ${b};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${f};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${g}, sum, found));
        }
      `}};function Zre(r){let{inputs:e,backend:t,attrs:o}=r,{indices:n,updates:s}=e,{shape:a}=o,{sliceRank:i,numUpdates:p,sliceSize:u,strides:l,outputSize:c}=C.calculateShapes(s,n,a),m=[c/u,u];if(c===0)return t.makeTensorInfo(a,n.dtype);let d=te({inputs:{x:n},backend:t,attrs:{shape:[p,i]}}),f=te({inputs:{x:s},backend:t,attrs:{shape:[p,u]}}),h=t.makeTensorInfo([],"float32",new Float32Array([0])),g;A().getBool("WEBGL_PACK")?g=new Bg(p,i,d.shape.length,f.shape.length,l,m):g=new Tu(p,i,d.shape.length,f.shape.length,l,m);let x=t.runWebGLProgram(g,[f,d,h],f.dtype),b=te({inputs:{x},backend:t,attrs:{shape:a}});return t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(h),b}var IP={kernelName:vs,backendName:"webgl",kernelFunc:Zre};var zg=class{constructor(e,t,o,n){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,o];let s="while (left < right) {",a=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,i=A().getNumber("WEBGL_VERSION")===2?s:a,p=n==="left"?"<":"<=";this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${i}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${p} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}};function Jre(r){let{inputs:e,backend:t,attrs:o}=r,{sortedSequence:n,values:s}=e,{side:a}=o,i=new zg(n.shape[0],n.shape[1],s.shape[1],a),p=[[n.shape[1]]];return t.runWebGLProgram(i,[n,s],"int32",p)}var vP={kernelName:Ns,backendName:"webgl",kernelFunc:Jre};var Vg=class{constructor(e,t,o){this.variableNames=["c","a","b"],this.outputShape=t;let n,s;if(o>4)throw Error(`Where for rank ${o} is not yet supported`);if(o===1)s="resRC",n="resRC";else{let i=["resRC.x","resRC.y","resRC.z","resRC.w"],p=[],u=[];for(let l=0;l<t.length;l++)u.push(`${i[l]}`),l<e&&p.push(`${i[l]}`);n=p.join(),s=u.join()}let a=Re(o);this.userCode=`
      void main() {
        ${a} resRC = getOutputCoords();
        float cVal = getC(${n});
        if (cVal >= 1.0) {
          setOutput(getA(${s}));
        } else {
          setOutput(getB(${s}));
        }
      }
    `}};function eoe(r){let{inputs:e,backend:t}=r,{condition:o,t:n,e:s}=e,a=new Vg(o.shape.length,n.shape,n.shape.length);return t.runWebGLProgram(a,[o,n,s],pt(n.dtype,s.dtype))}var kP={kernelName:wa,backendName:"webgl",kernelFunc:eoe};var toe=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${C.SELU_SCALEALPHA};
  float scale = ${C.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,roe=xe({opSnippet:toe}),NP={kernelName:Ts,backendName:"webgl",kernelFunc:roe};var ooe=sn+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,noe=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,soe=xe({opSnippet:ooe,packedOpSnippet:noe,cpuKernelImpl:eA}),TP={kernelName:Ao,backendName:"webgl",kernelFunc:soe};var aoe=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,ioe=xe({opSnippet:aoe}),_P={kernelName:Rs,backendName:"webgl",kernelFunc:ioe};var uoe=sn+`
  return sin(x);
`,poe=`
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${to}
  return result;
`,loe=xe({opSnippet:uoe,packedOpSnippet:poe}),EP={kernelName:Es,backendName:"webgl",kernelFunc:loe};var coe=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,moe=xe({opSnippet:coe}),$P={kernelName:$s,backendName:"webgl",kernelFunc:moe};var doe=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,foe=xe({opSnippet:doe}),RP={kernelName:Ds,backendName:"webgl",kernelFunc:foe};var hoe=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,paddings:a}=o;y.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let i=s.reduce((x,b)=>x*b),p=[[0,0]];p.push(...a);for(let x=1+s.length;x<n.shape.length;++x)p.push([0,0]);let u=[],l=H0({inputs:{x:n},backend:t,attrs:{paddings:p,constantValue:0}}),c=C.getReshaped(l.shape,s,i,!1),m=C.getPermuted(c.length,s.length,!1),d=C.getReshapedPermuted(l.shape,s,i,!1),f=te({inputs:{x:l},backend:t,attrs:{shape:c}}),h=Ct({inputs:{x:f},backend:t,attrs:{perm:m}}),g=te({inputs:{x:h},backend:t,attrs:{shape:d}});return u.push(l),u.push(f),u.push(h),u.forEach(x=>t.disposeIntermediateTensorInfo(x)),g},DP={kernelName:Sa,backendName:"webgl",kernelFunc:hoe};function goe(r){let{inputs:e,backend:t}=r,{indices:o,values:n,denseShape:s,defaultValue:a}=e;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${n.shape}`);if(a.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${a.shape}`);let i=t.readSync(o.dataId),p=t.readSync(n.dataId),u=t.readSync(s.dataId),l=t.readSync(a.dataId)[0],[c,m,d,f,h]=rA(i,o.shape,o.dtype,p,n.dtype,u,l);return[t.makeTensorInfo(m,o.dtype,c),t.makeTensorInfo([m[0]],n.dtype,d),t.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(g=>Number(g)))),t.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}var AP={kernelName:eu,backendName:"webgl",kernelFunc:goe};function xoe(r){let{inputs:e,backend:t}=r,{inputIndices:o,inputShape:n,newShape:s}=e;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let a=Array.from(t.readSync(n.dataId)),i=t.readSync(o.dataId),p=Array.from(t.readSync(s.dataId)),[u,l,c]=oA(i,o.shape,o.dtype,a,p);return[t.makeTensorInfo(l,o.dtype,u),t.makeTensorInfo([c.length],s.dtype,new Int32Array(c))]}var FP={kernelName:ui,backendName:"webgl",kernelFunc:xoe};function yoe(r){let{inputs:e,backend:t}=r,{data:o,indices:n,segmentIds:s}=e;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`);let a=t.readSync(o.dataId),i=t.readSync(n.dataId),p=t.readSync(s.dataId),[u,l]=Sh(a,o.shape,o.dtype,i,p,!0);return t.makeTensorInfo(l,o.dtype,u)}var PP={kernelName:va,backendName:"webgl",kernelFunc:yoe};function boe(r){let{inputs:e,backend:t}=r,{data:o,indices:n,segmentIds:s}=e;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`);let a=t.readSync(o.dataId),i=t.readSync(n.dataId),p=t.readSync(s.dataId),[u,l]=Sh(a,o.shape,o.dtype,i,p);return t.makeTensorInfo(l,o.dtype,u)}var OP={kernelName:ka,backendName:"webgl",kernelFunc:boe};function Coe(r){let{inputs:e,backend:t,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:a}=e,{outputShape:i}=o,{sliceRank:p,numUpdates:u,sliceSize:l,strides:c,outputSize:m}=C.calculateShapes(s,n,i),d=!1;if(s.dtype==="string"){let x=t.bufferSync(n),b=t.bufferSync(s),w=y.decodeString(t.readSync(a.dataId)[0]),S=JD(x,b,i,m,l,u,p,c,w,d);return t.makeTensorInfo(i,S.dtype,S.values)}let f=new Tu(u,p,n.shape.length,s.shape.length,c,[m,1],d),h=t.runWebGLProgram(f,[s,n,a],s.dtype),g=te({inputs:{x:h},backend:t,attrs:{shape:i}});return t.disposeIntermediateTensorInfo(h),g}var MP={kernelName:Ps,backendName:"webgl",kernelFunc:Coe};function woe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{numOrSizeSplits:s,axis:a}=o,i=y.parseAxisParam(a,n.shape)[0],p=C.prepareSplitSize(n,s,i),u=n.shape.length,l=new Array(u).fill(0),c=n.shape.slice();return p.map(m=>{let d=[...c];d[i]=m;let f=Js({inputs:{x:n},backend:t,attrs:{begin:l,size:d}});return l[i]+=m,f})}var LP={kernelName:Ia,backendName:"webgl",kernelFunc:woe};var BP="return sqrt(x);",Soe=xe({opSnippet:BP,packedOpSnippet:BP,cpuKernelImpl:nA}),zP={kernelName:Fo,backendName:"webgl",kernelFunc:Soe};var Ioe="return x * x;",voe=xe({opSnippet:Ioe}),VP={kernelName:tu,backendName:"webgl",kernelFunc:voe};var WP="return (a - b) * (a - b);",koe=st({opSnippet:WP,packedOpSnippet:WP}),UP={kernelName:Po,backendName:"webgl",kernelFunc:koe};function Noe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e;if(n.dtype!=="string")throw new Error("Input must be of datatype string");let s=t.readSync(n.dataId),a=C.fromUint8ToStringArray(s),i=sA(a,"string",o);return t.makeTensorInfo(n.shape,"string",i)}var GP={kernelName:pi,backendName:"webgl",kernelFunc:Noe};function Toe({inputs:r,attrs:e,backend:t}){let{x:o}=r,n=Gt+`
    return x > 0.0 ? 1.0 : float(${e.alpha});
  `,s=new nr(o.shape,n);return t.runWebGLProgram(s,[o],o.dtype)}var HP={kernelName:Ko,backendName:"webgl",kernelFunc:Toe};var Wg=class{constructor(e,t,o){this.variableNames=["x"],this.outputShape=o;let n=o.length,s=Re(o.length),a=Re(o.length),i="";if(n===1)i="coords * strides + begin";else{let p=0;i=o.map((u,l)=>(p++,o.length===1?`coords * strides[${l}] + begin[${l}]`:`coords[${p-1}] * strides[${l}] + begin[${l}]`)).join(",")}this.userCode=`
      ${s} begin = ${s}(${e});
      ${s} strides = ${s}(${t});

      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `}};function _oe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,end:a,strides:i,beginMask:p,endMask:u,ellipsisMask:l,newAxisMask:c,shrinkAxisMask:m}=o,{finalShapeSparse:d,finalShape:f,isIdentity:h,sliceDim0:g,isSimpleSlice:x,begin:b,end:w,strides:S}=nt.sliceInfo(n.shape,s,a,i,p,u,l,c,m),k;if(h)k=te({inputs:{x:n},backend:t,attrs:{shape:f}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let E=nt.computeOutShape(b,w,S),R=Js({inputs:{x:n},backend:t,attrs:{begin:b,size:E}});k=te({inputs:{x:R},backend:t,attrs:{shape:f}}),t.disposeIntermediateTensorInfo(R)}else if(t.shouldExecuteOnCPU([n])){let R=t.readSync(n.dataId),D=ie(n.shape,n.dtype,R),F=aA(d,D,S,b);k=t.makeTensorInfo(f,n.dtype,F.values)}else{let R=new Wg(b,S,d);k=t.runWebGLProgram(R,[n],n.dtype)}let T=te({inputs:{x:k},backend:t,attrs:{shape:f}});return t.disposeIntermediateTensorInfo(k),T}var KP={kernelName:Os,backendName:"webgl",kernelFunc:_oe};function Eoe(r){let{inputs:e,backend:t,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:a,rightPad:i,padWidth:p,preserveShortSequences:u}=o,{data:l,dataSplits:c}=e,m=t.readSync(l.dataId),d=t.readSync(c.dataId),[f,h]=iA(m,d,n,s,a,i,p,u);return[t.makeTensorInfo([f.length],"string",f),t.makeTensorInfo(c.shape,"int32",h)]}var qP={kernelName:Na,backendName:"webgl",kernelFunc:Eoe};function $oe(r){let{inputs:e,backend:t,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:a}=e;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(a.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);let i=t.readSync(s.dataId),p=t.readSync(a.dataId)[0],[u,l,c]=uA(i,p,n),m=l.length;return[t.makeTensorInfo([m,2],"int32",u),t.makeTensorInfo([m],"string",l),t.makeTensorInfo([2],"int32",new Int32Array(c))]}var jP={kernelName:ru,backendName:"webgl",kernelFunc:$oe};function Roe(r){let{inputs:e,backend:t,attrs:o}=r,{numBuckets:n}=o,{input:s}=e;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let a=t.readSync(s.dataId),i=pA(a,n);return t.makeTensorInfo(s.shape,"int32",i)}var XP={kernelName:ou,backendName:"webgl",kernelFunc:Roe};var Doe="return tan(x);",Aoe=xe({opSnippet:Doe}),YP={kernelName:Ms,backendName:"webgl",kernelFunc:Aoe};var Foe=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,Poe=xe({opSnippet:Foe}),QP={kernelName:Ls,backendName:"webgl",kernelFunc:Poe};function Ooe(r){let{inputs:e,backend:t,attrs:o}=r,{tensor:n,indices:s,updates:a}=e,{}=o,{sliceRank:i,numUpdates:p,sliceSize:u,strides:l,outputSize:c}=C.calculateShapes(a,s,n.shape),m=[c/u,u];if(c===0)return t.makeTensorInfo(n.shape,s.dtype);let d=te({inputs:{x:s},backend:t,attrs:{shape:[p,i]}}),f=te({inputs:{x:a},backend:t,attrs:{shape:[p,u]}}),h=te({inputs:{x:n},backend:t,attrs:{shape:m}}),g=new Tu(p,i,d.shape.length,f.shape.length,l,m,!1,!0),x=t.runWebGLProgram(g,[f,d,h],h.dtype),b=te({inputs:{x},backend:t,attrs:{shape:n.shape}});return t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(x),b}var ZP={kernelName:ks,backendName:"webgl",kernelFunc:Ooe};var Ug=class{constructor(e,t){this.variableNames=["A"];let o=new Array(e.length);for(let a=0;a<o.length;a++)o[a]=e[a]*t[a];this.outputShape=o,this.rank=o.length;let n=Re(this.rank),s=Moe(e);this.userCode=`
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${s}));
      }
    `}};function Moe(r){let e=r.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(e===1)return`imod(resRC, ${r[0]})`;let t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],o=[];for(let n=0;n<r.length;n++)o.push(`imod(${t[n]}, ${r[n]})`);return o.join()}function q0(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reps:s}=o;if(n.dtype==="string"||n.shape.length>5){let p=t.readSync(n.dataId),u=n.dtype==="string"?p.map(m=>y.decodeString(m)):p,l=ie(n.shape,n.dtype,u),c=cA(l,s);return t.makeTensorInfo(c.shape,c.dtype,c.values)}let a=new Ug(n.shape,s);return t.runWebGLProgram(a,[n],n.dtype)}var JP={kernelName:Mo,backendName:"webgl",kernelFunc:q0};var Gg=class{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}},Hg=class{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}};function Rp(r,e){e!==null&&r.disposeIntermediateTensorInfo(e)}function eO(r){let e=1;for(;e<r;)e*=2;return e}function Loe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{k:s,sorted:a}=o,i=A().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),p=A().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=n.shape,l=u[u.length-1];if(t.shouldExecuteOnCPU([n])||l<i||s>p){let F=t.readSync(n.dataId),[O,M]=mA(F,u,n.dtype,s,a);return[t.makeTensorInfo(O.shape,O.dtype,O.values),t.makeTensorInfo(M.shape,M.dtype,M.values)]}if(s===0)return u[u.length-1]=0,[t.makeTensorInfo(u,n.dtype,[]),t.makeTensorInfo(u,"int32",[])];if(l===1)return[n,Ei({attrs:{shape:u,dtype:"int32",value:0},backend:t})];let c=t.texData.get(n.dataId),m=c!==null&&c.isPacked,d=m?t.unpackTensor(n):n,h=y.sizeFromShape(u)/l,g=te({inputs:{x:d},attrs:{shape:[h,l]},backend:t});m&&Rp(t,d);let x=eO(s),b=eO(l),w=null,S=()=>w===null?[g,g]:[g,w],k=(F,O,M)=>{let L=S(),B=new Gg(M),U=[[l],[w===null?1:0],[Number.NEGATIVE_INFINITY],[F],[O]],j=w;w=t.runWebGLProgram(B,L,"int32",U),Rp(t,j)};for(let F=1;F<x;F*=2){let O=F*2;for(let M=F;M>=1;M/=2)k(O,M,[h,b])}for(let F=b;F>x;F/=2){let O=S(),M=new Hg([h,F/2]),B=[[l],[w===null?1:0],[x]],z=w;w=t.runWebGLProgram(M,O,"int32",B),Rp(t,z);let U=x/2,j=U*2;for(let q=U;q>=1;q/=2)k(j,q,w.shape)}let T=w;w=Js({inputs:{x:w},backend:t,attrs:{begin:0,size:[h,s]}}),Rp(t,T);let E=z0({inputs:{x:g,indices:w},backend:t,attrs:{axis:1,batchDims:1}});Rp(t,g);let R=u.slice(0,-1);R.push(s),T=w,w=te({inputs:{x:w},attrs:{shape:R},backend:t}),Rp(t,T);let D=E;return E=te({inputs:{x:E},attrs:{shape:R},backend:t}),Rp(t,D),[E,w]}var tO={kernelName:Bs,backendName:"webgl",kernelFunc:Loe};var Kg=class{constructor(e,t,o,n,s,a){this.variableNames=["Image","Transforms"],this.outputShape=a;let i=o==="nearest"?1:2,p;switch(n){case"constant":p=1;break;case"reflect":p=2;break;case"wrap":p=3;break;case"nearest":p=4;break;default:p=1;break}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${p} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${p} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${p} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${s});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${s});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${i} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}};function Boe(r){let{inputs:e,backend:t,attrs:o}=r,{image:n,transforms:s}=e,{interpolation:a,fillMode:i,fillValue:p,outputShape:u}=o,[l,c,m,d]=n.shape,[f,h]=u!=null?u:[c,m],g=[l,f,h,d],x=new Kg(c,m,a,i,p,g);return t.runWebGLProgram(x,[n,s],"float32")}var rO={kernelName:zs,backendName:"webgl",kernelFunc:Boe};function zoe(r){let{inputs:e,attrs:t,backend:o}=r,{axis:n}=t,{x:s}=e;Ys(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let a=o.readSync(s.dataId),{outputValues:i,outputShape:p,indices:u}=dA(a,n,s.shape,s.dtype);return[o.makeTensorInfo(p,s.dtype,i),o.makeTensorInfo([u.length],"int32",u)]}var oO={kernelName:nu,backendName:"webgl",kernelFunc:zoe};function Voe(r){let{inputs:e,backend:t,attrs:o}=r,{value:n}=e,{axis:s}=o;s<0&&(s+=n.shape.length);let a=n,i=a.shape.length,p=n.shape[s],u=new Array(i-1),l=0;for(let h=0;h<i;h++)h!==s&&(u[l++]=a.shape[h]);let c=[],m=new Array(i).fill(0),d=a.shape.slice();d[s]=1;let f=new Array(p);for(let h=0;h<f.length;h++){m[s]=h;let g=Js({inputs:{x:a},backend:t,attrs:{begin:m,size:d}}),x=te({inputs:{x:g},backend:t,attrs:{shape:u}});f[h]=x,c.push(g)}return c.forEach(h=>t.disposeIntermediateTensorInfo(h)),f}var nO={kernelName:Ta,backendName:"webgl",kernelFunc:Voe};var qg=class{constructor(e,t){this.variableNames=["x","segmentIds"];let o=e.windowSize,n=e.batchSize,s=e.inSize,a=e.numSegments,i=a*Math.ceil(s/o);this.outputShape=[n,i];let p="0.0",u="sumValue",l=Math.floor(o/4)*4,c=o%4,m=`
        sumValue += dot(values, segFilter);
    `,d="";s%o>0&&(d=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `);let f="";s%o>0&&(f=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = ${p};

      float getValue(int batch, int inIdx) {
        ${d}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${f}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${a})) * float(${o}));
        int currentSeg = int(mod(float(outIdx), float(${a})));

        float sumValue = 0.0;

        for (int i = 0; i < ${l}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${m}
        }

        int inIdx = inOffset + ${l};
        if (${c===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${m}
        } else if (${c===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${m}
        } else if (${c===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function Woe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,segmentIds:s}=e,{numSegments:a}=o,i=n.shape.length,p=[],u=0,l=C.getAxesPermutation([u],i),c=n;l!=null&&(c=Ct({inputs:{x:n},backend:t,attrs:{perm:l}}),p.push(c),u=C.getInnerMostAxes(1,i)[0]);let m=C.segment_util.computeOutShape(c.shape,u,a),d=y.sizeFromShape([c.shape[u]]),f=te({inputs:{x:c},backend:t,attrs:{shape:[-1,d]}});p.push(f);let h=mi(n.dtype),g=(S,k,T,E,R)=>{let D=S.shape[0],F=S.shape[1],O=C.segment_util.segOpComputeOptimalWindowSize(F,R),M={windowSize:O,inSize:F,batchSize:D,numSegments:R},L=new qg(M,k),B=t.compileAndRun(L,[S,T],E);if(p.push(B),B.shape[1]===R)return B;let z=K0({backend:t,attrs:{start:0,stop:R,step:1,dtype:"float32"}}),U=q0({inputs:{x:z},backend:t,attrs:{reps:[F/O]}});return p.push(z),p.push(U),g(B,k,U,E,R)},x=g(f,"unsortedSegmentSum",s,h,a),b=te({inputs:{x},backend:t,attrs:{shape:m}}),w=b;if(l!=null){p.push(b);let S=C.getUndoAxesPermutation(l);w=Ct({inputs:{x:w},backend:t,attrs:{perm:S}})}return p.forEach(S=>t.disposeIntermediateTensorInfo(S)),w}var sO={kernelName:su,backendName:"webgl",kernelFunc:Woe};var Uoe=[VA,UA,GA,HA,qA,jA,XA,YA,JA,eF,tF,rF,oF,nF,sF,aF,iF,uF,pF,lF,cF,dF,fF,hF,gF,CF,SF,IF,RA,kF,TF,_F,EF,$F,RF,DF,AF,FF,PF,OF,BF,zF,VF,WF,UF,GF,HF,KF,qF,jF,XF,YF,QF,ZF,JF,e3,r3,o3,n3,s3,i3,u3,p3,l3,c3,m3,d3,f3,h3,$A,g3,NF,x3,y3,b3,DA,C3,w3,S3,I3,v3,k3,N3,T3,_3,E3,R3,D3,A3,F3,P3,O3,L3,z3,V3,W3,U3,G3,X3,PA,Y3,Q3,Z3,J3,xF,eP,oP,nP,sP,aP,AA,iP,uP,pP,lP,cP,yF,H3,mP,dP,fP,MA,hP,gP,xP,yP,bP,CP,wP,SP,IP,vP,kP,NP,TP,_P,EP,$P,mF,j3,RP,DP,AP,FP,PP,OP,MP,LP,zP,VP,UP,GP,HP,KP,qP,jP,XP,q3,BA,YP,QP,ZP,JP,tO,rO,zA,oO,nO,sO,tP];for(let r of Uoe)li(r);var we;(function(r){r[r.float32=0]="float32",r[r.int32=1]="int32",r[r.bool=2]="bool",r[r.string=3]="string",r[r.complex64=4]="complex64"})(we||(we={}));var _u;(function(r){r[r.linear=0]="linear",r[r.relu=1]="relu",r[r.relu6=2]="relu6",r[r.prelu=3]="prelu",r[r.leakyrelu=4]="leakyrelu",r[r.sigmoid=5]="sigmoid",r[r.elu=6]="elu"})(_u||(_u={}));var aO;function Goe(r){aO=r.wasm.cwrap(qo,null,["number","array","number","number","array","number","number","number","number","number","number","number","number"])}function Hoe(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s,bias:a,preluActivationWeights:i}=e;if(n.dtype!=="float32"||s.dtype!=="float32")throw new Error("_FusedMatMul for non non-float32 tensors not yet supported.");let{transposeA:p,transposeB:u,activation:l,leakyreluAlpha:c}=o,m=t.dataIdMap.get(n.dataId).id,d=t.dataIdMap.get(s.dataId).id,f=0;if(a!=null){let R=t.dataIdMap.get(a.dataId);if(R.shape.length!==1)throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${R.shape.length}.`);f=R.id}let h=i==null?0:t.dataIdMap.get(i.dataId).id,g=_u[l];if(g==null)throw new Error(`${l} activation not yet supported for FusedConv2D in the wasm backend.`);let x=p?n.shape[2]:n.shape[1],b=u?s.shape[1]:s.shape[2],w=kr.assertAndGetBroadcastShape(n.shape.slice(0,-2),s.shape.slice(0,-2)),S=t.makeOutput([...w,x,b],n.dtype),k=t.dataIdMap.get(S.dataId).id,T=new Uint8Array(new Int32Array(n.shape).buffer),E=new Uint8Array(new Int32Array(s.shape).buffer);return aO(m,T,n.shape.length,d,E,s.shape.length,p,u,g,f,h,c||0,k),S}var iO={kernelName:qo,backendName:"wasm",setupFunc:Goe,kernelFunc:Hoe};function he(r,e){let t;function o(s){t=s.wasm.cwrap(r,null,["number","number","number"])}function n(s){let{backend:a,inputs:{x:i}}=s,p=a.dataIdMap.get(i.dataId).id,u=a.makeOutput(i.shape,e||i.dtype),l=a.dataIdMap.get(u.dataId).id;return y.sizeFromShape(u.shape)===0||t(p,we[i.dtype],l),u}return{kernelName:r,backendName:"wasm",setupFunc:o,kernelFunc:n}}var uO=he(fn);var pO=he(hn);var lO=he(gn);function He(r,e,t){let o;function n(a){o=a.wasm.cwrap(r,null,["number","array","number","number","array","number","number","number"])}function s(a){let{backend:i,inputs:p}=a,{a:u,b:l}=p,c=i.dataIdMap.get(u.dataId).id,m=i.dataIdMap.get(l.dataId).id,d=t!=null?t:u.dtype,f=C.assertAndGetBroadcastShape(u.shape,l.shape),h=i.makeOutput(f,d);if(y.sizeFromShape(f)===0)return h;let g=new Uint8Array(new Int32Array(u.shape).buffer),x=new Uint8Array(new Int32Array(l.shape).buffer),b=i.dataIdMap.get(h.dataId).id;return o(c,g,u.shape.length,m,x,l.shape.length,we[u.dtype],b),h}return{kernelName:r,backendName:"wasm",setupFunc:n,kernelFunc:s}}var Koe=!0,cO=He(Rr,Koe);var mO;function qoe(r){mO=r.wasm.cwrap(xn,null,["array","number","number","number"])}function joe(r){let{inputs:e,backend:t}=r,o=t.makeOutput(e[0].shape,e[0].dtype);if(y.sizeFromShape(o.shape)===0)return o;let n=e.map(i=>t.dataIdMap.get(i.dataId).id),s=new Uint8Array(new Int32Array(n).buffer),a=t.dataIdMap.get(o.dataId).id;return mO(s,n.length,we[o.dtype],a),o}var dO={kernelName:xn,backendName:"wasm",setupFunc:qoe,kernelFunc:joe};function Dp(r){let{inputs:{x:e},backend:t}=r;if(e.dtype==="string")return pr(t.readSync(e.dataId),e.shape,e.dtype);let o=t.makeOutput(e.shape,e.dtype),n=t.typedArrayFromHeap(e);return t.typedArrayFromHeap(o).set(n),o}var fO={kernelName:vo,backendName:"wasm",kernelFunc:Dp};var hO;function Xoe(r){hO=r.wasm.cwrap(Kr,null,["number","array","number","number","number","array","number"])}function Vo(r){let{inputs:e,backend:t,attrs:o}=r,[n,s]=Qoe(e.x.shape,o.perm),a=!0;for(let f=0;f<s.length;f++)s[f]!==f&&(a=!1);let i=Yoe(e.x.shape,o.perm),p={dataId:e.x.dataId,shape:n,dtype:e.x.dtype};if(a){let f=Dp({inputs:e,backend:t});return f.shape=i,f}let u=t.makeOutput(i,p.dtype),l=t.dataIdMap.get(p.dataId).id,c=t.dataIdMap.get(u.dataId).id,m=new Uint8Array(new Int32Array(s).buffer),d=new Uint8Array(new Int32Array(p.shape).buffer);return hO(l,d,p.shape.length,we[p.dtype],c,m,s.length),u}function Yoe(r,e){let t=new Array(r.length);for(let o=0;o<t.length;o++)t[o]=r[e[o]];return t}function Qoe(r,e){let t=[],o=[];for(let n=0;n<r.length;++n)r[n]!==1&&t.push(r[n]),r[e[n]]!==1&&o.push(e[n]);for(let n=0;n<o.length;++n){let s=-1;for(let a=0;a<o.length;++a)o[a]>=n&&(s===-1||o[s]>o[a])&&(s=a);o[s]=n}return[t,o]}var gO={kernelName:Kr,backendName:"wasm",kernelFunc:Vo,setupFunc:Xoe};function $r(r,e,t){let o=r.shape,n=r.shape.length,s=y.parseAxisParam(e,o),a=s,i=C.getAxesPermutation(a,n),p=null,u=!1;if(i!=null){let l=new Array(n);for(let d=0;d<l.length;d++)l[d]=o[i[d]];a=C.getInnerMostAxes(a.length,n),p=Vo({inputs:{x:r},attrs:{perm:i},backend:t});let c=t.dataIdMap.get(r.dataId).id;t.dataIdMap.get(p.dataId).id!==c&&(u=!0)}return{transposed:p,originalAxes:s,axes:a,inputWasTransposed:u}}var xO;function Zoe(r){xO=r.wasm.cwrap(yn,null,["number, number, number"])}function Joe(r){let{backend:e,inputs:t,attrs:o}=r,{axis:n,keepDims:s}=o,{x:a}=t,p=e.dataIdMap.get(a.dataId).id,u=a,{transposed:l,axes:c,originalAxes:m,inputWasTransposed:d}=$r(a,n,e);if(d){let w=e.dataIdMap.get(l.dataId).id;u=l,p=w}let f=u.shape.length;C.assertAxesAreInnerMostDims("all",c,f);let[h,g]=C.computeOutAndReduceShapes(u.shape,c),x=y.sizeFromShape(g),b=e.makeOutput(h,a.dtype);if(y.sizeFromShape(u.shape)!==0){let w=e.dataIdMap.get(b.dataId).id;xO(p,x,w)}if(d&&e.disposeData(l.dataId),s){let w=C.expandShapeToKeepDim(b.shape,m);b.shape=w}return b}var yO={kernelName:yn,backendName:"wasm",setupFunc:Zoe,kernelFunc:Joe};var bO;function ene(r){bO=r.wasm.cwrap(bn,null,["number, number, number"])}function tne(r){let{backend:e,inputs:t,attrs:o}=r,{axis:n,keepDims:s}=o,{x:a}=t,p=e.dataIdMap.get(a.dataId).id,u=a,{transposed:l,axes:c,originalAxes:m,inputWasTransposed:d}=$r(a,n,e);if(d){let w=e.dataIdMap.get(l.dataId).id;u=l,p=w}let f=u.shape.length;C.assertAxesAreInnerMostDims("any",c,f);let[h,g]=C.computeOutAndReduceShapes(u.shape,c),x=y.sizeFromShape(g),b=e.makeOutput(h,a.dtype);if(y.sizeFromShape(u.shape)!==0){let w=e.dataIdMap.get(b.dataId).id;bO(p,x,w)}if(d&&e.disposeData(l.dataId),s){let w=C.expandShapeToKeepDim(b.shape,m);b.shape=w}return b}var CO={kernelName:bn,backendName:"wasm",setupFunc:ene,kernelFunc:tne};function jg(r){let e;function t(n){e=n.wasm.cwrap(r,null,["number","number","number","number","number"])}function o(n){let{backend:s,inputs:a,attrs:i}=n,{axis:p}=i,{x:u}=a,l=s.dataIdMap.get(u.dataId).id,c=l,m=u,{transposed:d,axes:f,inputWasTransposed:h}=$r(u,p,s);if(h){let k=s.dataIdMap.get(d.dataId).id;k!==l&&(m=d,c=k)}let g=m.shape.slice(0,-1),x=s.makeOutput(g,"int32"),b=s.dataIdMap.get(x.dataId).id,w=y.sizeFromShape(x.shape),S=m.shape[f[0]];return e(c,we[m.dtype],w,S,b),h&&s.disposeData(d.dataId),x}return{kernelName:r,backendName:"wasm",setupFunc:t,kernelFunc:o}}var wO=jg(na);var SO=jg(sa);var IO=he(Cn);var vO=he(wn);var kO=he(Sn);var NO=He(vn,!1);var TO=he(In);var _O;function rne(r){_O=r.wasm.cwrap(kn,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function one(r){let{inputs:e,attrs:t,backend:o}=r,n=e.x,s=o.dataIdMap.get(n.dataId).id,{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=t,l=C.computePool2DInfo(n.shape,a,i,1,p,u),c=l.filterHeight,m=l.filterWidth,d=l.padInfo.top,f=l.padInfo.right,h=l.padInfo.bottom,g=l.padInfo.left,x=l.strideHeight,b=l.strideWidth,w=l.inChannels;if(l.dataFormat!=="channelsLast")throw new Error(`wasm backend does not support dataFormat:'${l.dataFormat}'. Please use 'channelsLast'.`);if(l.dilationWidth!==1||l.dilationHeight!==1)throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${l.dilationHeight}, ${l.dilationWidth}].`);let S=o.makeOutput(l.outShape,"float32"),k=o.dataIdMap.get(S.dataId).id;return _O(s,n.shape[0],n.shape[1],n.shape[2],c,m,d,f,h,g,x,b,w,k),S}var EO={kernelName:kn,backendName:"wasm",setupFunc:rne,kernelFunc:one};var $O;function nne(r){$O=r.wasm.cwrap("AvgPool3D",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function sne(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:a,pad:i,dimRoundingMode:p,dataFormat:u}=o,l=C.computePool3DInfo(n.shape,s,a,1,i,p,u),c=t.makeOutput(l.outShape,n.dtype);return $O(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(c.dataId).id,l.batchSize,l.inChannels,l.inDepth,l.inHeight,l.inWidth,l.outDepth,l.outHeight,l.outWidth,l.strideDepth,l.strideHeight,l.strideWidth,l.dilationDepth,l.dilationHeight,l.dilationWidth,l.effectiveFilterDepth,l.effectiveFilterHeight,l.effectiveFilterWidth,l.padInfo.front,l.padInfo.top,l.padInfo.left),c}var RO={kernelName:aa,backendName:"wasm",setupFunc:nne,kernelFunc:sne};var DO;function ane(r){DO=r.wasm.cwrap("AvgPool3DGrad",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function ine(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=o,l=C.computePool3DInfo(s.shape,a,i,1,p,u),c=t.makeOutput(s.shape,s.dtype);return DO(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(c.dataId).id,l.batchSize,l.inChannels,l.inDepth,l.inHeight,l.inWidth,l.outDepth,l.outHeight,l.outWidth,l.strideDepth,l.strideHeight,l.strideWidth,l.dilationDepth,l.dilationHeight,l.dilationWidth,l.effectiveFilterDepth,l.effectiveFilterHeight,l.effectiveFilterWidth,l.padInfo.front,l.padInfo.top,l.padInfo.left,l.filterDepth,l.filterHeight,l.filterWidth),c}var AO={kernelName:Vi,backendName:"wasm",setupFunc:ane,kernelFunc:ine};var FO;function une(r){FO=r.wasm.cwrap("AvgPoolGrad",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function pne(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,{filterSize:a,strides:i,pad:p}=o,u=C.computePool2DInfo(s.shape,a,i,1,p),l=t.makeOutput(s.shape,s.dtype);return FO(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(l.dataId).id,u.batchSize,u.inChannels,u.inHeight,u.inWidth,u.outHeight,u.outWidth,u.strideHeight,u.strideWidth,u.dilationHeight,u.dilationWidth,u.effectiveFilterHeight,u.effectiveFilterWidth,u.padInfo.top,u.padInfo.left,u.filterHeight,u.filterWidth),l}var PO={kernelName:zi,backendName:"wasm",setupFunc:une,kernelFunc:pne};function Wt(r){let{inputs:e,attrs:t}=r,{x:o}=e,{shape:n}=t,s=y.sizeFromShape(o.shape),a=y.inferFromImplicitShape(n,s);return y.assert(s===y.sizeFromShape(a),()=>`new shape: ${a}, old shape: ${o.shape}. New shape and old shape must have the same number of elements.`),r.backend.incRef(o.dataId),{dataId:o.dataId,shape:a,dtype:o.dtype}}var OO={kernelName:Ca,backendName:"wasm",kernelFunc:Wt};var MO;function lne(r){MO=r.wasm.cwrap(Nn,null,["number","array","number","number","array","number","number","number","number"])}function cne(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s}=e,{transposeA:a,transposeB:i}=o;if(n.dtype!=="float32"||s.dtype!=="float32")throw new Error("BatchMatMul for non non-float32 tensors not yet supported.");let p=n.shape.length,u=s.shape.length,l=a?n.shape[p-2]:n.shape[p-1],c=i?s.shape[u-1]:s.shape[u-2],m=a?n.shape[p-1]:n.shape[p-2],d=i?s.shape[u-2]:s.shape[u-1],f=n.shape.slice(0,-2),h=s.shape.slice(0,-2),g=y.sizeFromShape(f),x=y.sizeFromShape(h),w=kr.assertAndGetBroadcastShape(n.shape.slice(0,-2),s.shape.slice(0,-2)).concat([m,d]);y.assert(l===c,()=>`Error in matMul: inner shapes (${l}) and (${c}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${a} and transposeB=${i} must match.`);let S=a?[g,l,m]:[g,m,l],k=i?[x,d,c]:[x,c,d],T=Wt({inputs:{x:n},backend:t,attrs:{shape:S}}),E=Wt({inputs:{x:s},backend:t,attrs:{shape:k}}),R=t.dataIdMap.get(T.dataId).id,D=t.dataIdMap.get(E.dataId).id,F=a?T.shape[2]:T.shape[1],O=i?E.shape[1]:E.shape[2],M=Math.max(g,x),L=t.makeOutput([M,F,O],T.dtype),B=t.dataIdMap.get(L.dataId).id,z=new Uint8Array(new Int32Array(T.shape).buffer),U=new Uint8Array(new Int32Array(E.shape).buffer);return MO(R,z,T.shape.length,D,U,E.shape.length,a,i,B),t.disposeData(T.dataId),t.disposeData(E.dataId),L.shape=w,L}var LO={kernelName:Nn,backendName:"wasm",setupFunc:lne,kernelFunc:cne};function an(r){let{inputs:{x:e},attrs:{begin:t,size:o},backend:n}=r,[s,a]=nt.parseSliceParams(e,t,o),i=nt.isSliceContinous(e.shape,s,a),p=n.readSync(e.dataId),u=n.makeOutput(a,e.dtype),l=y.computeStrides(e.shape),c=n.dataIdMap.get(u.dataId);if(i){let f=nt.computeFlatOffset(s,l);return e.dtype==="string"?c.stringBytes=p.slice(f,f+y.sizeFromShape(a)):n.typedArrayFromHeap(u).set(p.subarray(f,f+y.sizeFromShape(a))),u}if(e.dtype==="string"){let f=hp(p,s,a,e.shape,e.dtype);return c.stringBytes=f,u}let m=n.typedArrayFromHeap(u),d=e.shape.length;if(d===2)mne(p,l[0],m,s,a);else if(d===3)dne(p,l[0],l[1],m,s,a);else if(d===4)fne(p,l[0],l[1],l[2],m,s,a);else{let f=hp(p,s,a,e.shape,e.dtype);m.set(f)}return u}function mne(r,e,t,o,n){let s=0,a=o[0],i=o[1],p=a+n[0];for(let u=a;u<p;u++){let l=u*e+i;t.set(r.subarray(l,l+n[1]),s),s+=n[1]}}function dne(r,e,t,o,n,s){let a=0,i=n[0],p=n[1],u=n[2],l=i+s[0],c=p+s[1];for(let m=i;m<l;m++)for(let d=p;d<c;d++){let f=m*e+d*t+u;o.set(r.subarray(f,f+s[2]),a),a+=s[2]}}function fne(r,e,t,o,n,s,a){let i=0,p=s[0],u=s[1],l=s[2],c=p+a[0],m=u+a[1],d=l+a[2],f=s[3];for(let h=p;h<c;h++)for(let g=u;g<m;g++)for(let x=l;x<d;x++){let b=h*e+g*t+x*o+f;n.set(r.subarray(b,b+a[3]),i),i+=a[3]}}var BO={kernelName:_s,backendName:"wasm",kernelFunc:an};function hne(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,crops:a}=o,i=s.reduce((x,b)=>x*b),p=C.getReshaped(n.shape,s,i),u=C.getPermuted(p.length,s.length),l=C.getReshapedPermuted(n.shape,s,i),c=C.getSliceBeginCoords(a,s.length),m=C.getSliceSize(l,a,s.length),d=Wt({inputs:{x:n},backend:t,attrs:{shape:p}}),f=Vo({inputs:{x:d},backend:t,attrs:{perm:u}}),h=Wt({inputs:{x:f},backend:t,attrs:{shape:l}}),g=an({inputs:{x:h},backend:t,attrs:{begin:c,size:m}});return t.disposeData(d.dataId),t.disposeData(f.dataId),t.disposeData(h.dataId),g}var zO={kernelName:ia,backendName:"wasm",kernelFunc:hne};var VO;function gne(r){VO=r.wasm.cwrap(Tn,null,["number","number","boolean","number","number","number"])}function xne(r){let{backend:e,inputs:t,attrs:o}=r,{x:n,weights:s}=t,{size:a}=o,i=s.shape.reduce((c,m)=>c*m,1)!==0,p=n.shape.length===1?[a]:[n.shape[0],a],u=e.makeOutput(p,s.dtype);function l(c){return e.dataIdMap.get(c.dataId).id}return VO(l(n),a,i,l(s),we[s.dtype],l(u)),u}var WO={kernelName:Tn,backendName:"wasm",setupFunc:gne,kernelFunc:xne};var yne=!0,UO=He(_n,yne);function bne(r){let{inputs:e,backend:t}=r,{s0:o,s1:n}=e,s=t.typedArrayFromHeap(o),a=t.typedArrayFromHeap(n),i=C.assertAndGetBroadcastShape(Array.from(s),Array.from(a));return t.makeOutput([i.length],"int32",void 0,new Int32Array(i))}var GO={kernelName:ua,backendName:"wasm",kernelFunc:bne};function Vr(r){let{inputs:{x:e},attrs:{dtype:t},backend:o}=r,n=o.makeOutput(e.shape,t),s=o.typedArrayFromHeap(e);return o.typedArrayFromHeap(n).set(s),n}var HO={kernelName:ho,backendName:"wasm",kernelFunc:Vr};var KO=he(go);var qO;function Cne(r){qO=r.wasm.cwrap(Go,null,["number","number","number","number"])}function wne(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{clipValueMin:s,clipValueMax:a}=o,i=t.dataIdMap.get(n.dataId).id,p=t.makeOutput(n.shape,n.dtype),u=t.dataIdMap.get(p.dataId).id;return qO(i,s,a,u),p}var jO={kernelName:Go,backendName:"wasm",setupFunc:Cne,kernelFunc:wne};function j0(r){let{inputs:e,backend:t}=r,o=y.parseAxisParam(r.attrs.axis,e[0].shape)[0],n=e.map(d=>d.shape);C.assertParamsConsistent(n,o);let s=C.computeOutShape(e.map(d=>d.shape),o),a=e.filter(d=>y.sizeFromShape(d.shape)>0);if(a.length===1)return Dp({inputs:{x:a[0]},backend:t});let i=t.makeOutput(s,e[0].dtype);if(y.sizeFromShape(s)===0)return i;if(a[0].dtype==="string"){let d=a.map(w=>{let k=[-1,y.sizeFromShape(w.shape.slice(o))];return Wt({inputs:{x:w},backend:t,attrs:{shape:k}})}),f=d.map(w=>({vals:t.readSync(w.dataId),shape:w.shape}));s=C.computeOutShape(d.map(w=>w.shape),1);let h=d[0].shape[0]===1,g=mp(f,s,e[0].dtype,h),x=C.computeOutShape(a.map(w=>w.shape),o);i.shape=x;let b=t.dataIdMap.get(i.dataId);return b.stringBytes=C.fromStringArrayToUint8(g),d.forEach(w=>t.disposeData(w.dataId)),i}let p=y.sizeFromShape(a[0].shape.slice(0,o)),u=0,l=a.map(d=>{let f=y.sizeFromShape(d.shape.slice(o));return u+=f,f}),c=a.map(d=>t.typedArrayFromHeap(d)),m=t.typedArrayFromHeap(i);for(let d=0;d<p;d++){let f=d*u;for(let h=0;h<c.length;h++){let g=l[h],x=d*g,b=c[h].subarray(x,x+g);m.set(b,f),f+=g}}return i}var XO={kernelName:pa,backendName:"wasm",kernelFunc:j0};var YO;function Sne(r){YO=r.wasm.cwrap(En,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Ine(r){let{inputs:e,attrs:t,backend:o}=r,{x:n,filter:s}=e,a=o.dataIdMap.get(n.dataId).id,i=o.dataIdMap.get(s.dataId).id,{strides:p,dilations:u,pad:l,dimRoundingMode:c,dataFormat:m}=t,d=C.convertConv2DDataFormat(m),f=C.computeConv2DInfo(n.shape,s.shape,p,u,l,c,!1,d),h=f.filterHeight,g=f.filterWidth,x=f.padInfo.top,b=f.padInfo.right,w=f.padInfo.bottom,S=f.padInfo.left,k=f.dilationHeight,T=f.dilationWidth,E=f.strideHeight,R=f.strideWidth,D=f.inChannels,F=f.outChannels,O=f.padInfo.type==="SAME"?1:0;if(f.dataFormat!=="channelsLast")throw new Error(`wasm backend Conv2D does not support dataFormat:'${f.dataFormat}'. Please use 'channelsLast'.`);let M=o.makeOutput(f.outShape,"float32"),L=o.dataIdMap.get(M.dataId).id;return YO(a,n.shape[0],n.shape[1],n.shape[2],i,h,g,x,b,w,S,O,k,T,E,R,D,F,L),M}var QO={kernelName:En,backendName:"wasm",setupFunc:Sne,kernelFunc:Ine};var ZO;function vne(r){ZO=r.wasm.cwrap($n,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function kne(r){let{backend:e,inputs:t,attrs:o}=r,{dy:n,filter:s}=t,{strides:a,pad:i,dataFormat:p,dimRoundingMode:u,inputShape:l}=o,c=1,m=C.convertConv2DDataFormat(p),d=C.computeConv2DInfo(l,s.shape,a,c,i,u,!1,m),{batchSize:f,filterHeight:h,filterWidth:g,inChannels:x,inHeight:b,inWidth:w,outChannels:S,outHeight:k,outWidth:T,strideHeight:E,strideWidth:R}=d,D=h-1-d.padInfo.top,F=g-1-d.padInfo.left,O=d.dataFormat==="channelsLast",M=y.computeStrides(d.inShape),L=y.computeStrides(n.shape),[B,z,U]=y.computeStrides(s.shape),j=M[0],q=O?M[1]:M[2],Y=O?M[2]:1,J=O?1:M[1],re=L[0],ne=O?L[1]:L[2],ee=O?L[2]:1,oe=O?1:L[1],ue=e.makeOutput(d.inShape,"float32"),me=e.dataIdMap.get(ue.dataId).id,be=e.dataIdMap.get(n.dataId).id,_e=e.dataIdMap.get(s.dataId).id;return ZO(be,_e,f,h,g,b,w,x,k,T,S,E,R,D,F,B,z,U,j,q,Y,J,re,ne,ee,oe,me),ue}var JO={kernelName:$n,backendName:"wasm",setupFunc:vne,kernelFunc:kne};var eM;function Nne(r){eM=r.wasm.cwrap(Rn,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Tne(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:a,pad:i,dilations:p}=o;if(n.dtype!=="float32")throw new Error(`Tensor x must have dtype float32, got ${n.dtype}`);if(s.dtype!=="float32")throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`);let u=C.computeConv3DInfo(n.shape,s.shape,a,p,i),l=t.makeOutput(u.outShape,n.dtype);return eM(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(s.dataId).id,t.dataIdMap.get(l.dataId).id,u.batchSize,u.inDepth,u.inHeight,u.inWidth,u.inChannels,u.outDepth,u.outHeight,u.outWidth,u.outChannels,u.strideDepth,u.strideHeight,u.strideWidth,u.dilationDepth,u.dilationHeight,u.dilationWidth,u.filterDepth,u.filterHeight,u.filterWidth,u.padInfo.front,u.padInfo.top,u.padInfo.left),l}var tM={kernelName:Rn,backendName:"wasm",setupFunc:Nne,kernelFunc:Tne};var rM;function _ne(r){rM=r.wasm.cwrap(ti,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Ene(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:a,pad:i,filterShape:p}=o;if(n.dtype!=="float32")throw new Error(`Tensor dy must have dtype float32, got ${n.dtype}`);if(s.dtype!=="float32")throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`);let u=C.computeConv3DInfo(n.shape,p,a,1,i),l=t.makeOutput(u.filterShape,s.dtype);return rM(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(s.dataId).id,t.dataIdMap.get(l.dataId).id,u.batchSize,u.inDepth,u.inHeight,u.inWidth,u.inChannels,u.outDepth,u.outHeight,u.outWidth,u.outChannels,u.strideDepth,u.strideHeight,u.strideWidth,u.dilationDepth,u.dilationHeight,u.dilationWidth,u.filterDepth,u.filterHeight,u.filterWidth,u.padInfo.front,u.padInfo.top,u.padInfo.left),l}var oM={kernelName:ti,backendName:"wasm",setupFunc:_ne,kernelFunc:Ene};var nM;function $ne(r){nM=r.wasm.cwrap(Dn,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Rne(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{pad:a,strides:i,inputShape:p}=o;if(n.dtype!=="float32")throw new Error(`Tensor dy must have dtype float32, got ${n.dtype}`);if(s.dtype!=="float32")throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`);let u=C.computeConv3DInfo(p,s.shape,i,1,a),l=t.makeOutput(u.inShape,n.dtype);return nM(t.dataIdMap.get(s.dataId).id,t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(l.dataId).id,u.batchSize,u.inDepth,u.inHeight,u.inWidth,u.inChannels,u.outDepth,u.outHeight,u.outWidth,u.outChannels,u.strideDepth,u.strideHeight,u.strideWidth,u.dilationDepth,u.dilationHeight,u.dilationWidth,u.filterDepth,u.filterHeight,u.filterWidth,u.padInfo.front,u.padInfo.top,u.padInfo.left),l}var sM={kernelName:Dn,backendName:"wasm",setupFunc:$ne,kernelFunc:Rne};var aM=he(An);var iM=he(Fn);var X0;(function(r){r[r.bilinear=0]="bilinear",r[r.nearest=1]="nearest"})(X0||(X0={}));var uM;function Dne(r){uM=r.wasm.cwrap(Mn,null,["number","number","number","number","array","number","number","number","number","number"])}function Ane(r){let{backend:e,inputs:t,attrs:o}=r,{method:n,extrapolationValue:s,cropSize:a}=o,{image:i,boxes:p,boxInd:u}=t,l=p.shape[0],[c,m]=a,d=[l,c,m,i.shape[3]],f=e.dataIdMap.get(i.dataId),h;i.dtype!=="float32"&&(h=Vr({backend:e,inputs:{x:i},attrs:{dtype:"float32"}}),f=e.dataIdMap.get(h.dataId));let g=f.id,x=e.dataIdMap.get(p.dataId).id,b=e.dataIdMap.get(u.dataId).id,w=e.makeOutput(d,"float32"),S=e.dataIdMap.get(w.dataId).id,k=new Uint8Array(new Int32Array(i.shape).buffer);return uM(g,x,b,l,k,c,m,X0[n],s,S),h!=null&&e.disposeData(h.dataId),w}var pM={kernelName:Mn,backendName:"wasm",setupFunc:Dne,kernelFunc:Ane};var lM;function Fne(r){lM=r.wasm.cwrap(Pn,null,["number","number","number","number","number","number"])}function Pne(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:a,reverse:i}=o,p=n.shape.length;y.assert(n.dtype==="float32"||n.dtype==="int32",()=>`cumprod does not support ${n.dtype} tensors in the WASM backend`);let u=C.getAxesPermutation([s],p),l=n;u!==null&&(l=Vo({inputs:{x:n},attrs:{perm:u},backend:t}));let c=C.getInnerMostAxes(1,p)[0];C.assertAxesAreInnerMostDims("cumprod",[c],p);let m=t.makeOutput(l.shape,l.dtype),d=l.shape[c],f=t.dataIdMap.get(l.dataId).id,h=t.dataIdMap.get(m.dataId).id;lM(f,a?1:0,i?1:0,d,h,we[n.dtype]);let g=m;if(u!==null){let x=C.getUndoAxesPermutation(u);g=Vo({inputs:{x:m},attrs:{perm:x},backend:t}),t.disposeData(l.dataId),t.disposeData(m.dataId)}return g}var cM={kernelName:Pn,backendName:"wasm",setupFunc:Fne,kernelFunc:Pne};var mM;function One(r){mM=r.wasm.cwrap(On,null,["number","number","number","number","number","number"])}function Mne(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:a,reverse:i}=o,p=n.shape.length;y.assert(n.dtype==="float32"||n.dtype==="int32",()=>`cumsum does not support ${n.dtype} tensors in the WASM backend`);let u=C.getAxesPermutation([s],p),l=n;u!==null&&(l=Vo({inputs:{x:n},attrs:{perm:u},backend:t}));let c=C.getInnerMostAxes(1,p)[0];C.assertAxesAreInnerMostDims("cumsum",[c],p);let m=t.makeOutput(l.shape,l.dtype),d=l.shape[c],f=t.dataIdMap.get(l.dataId).id,h=t.dataIdMap.get(m.dataId).id;mM(f,a?1:0,i?1:0,d,h,we[n.dtype]);let g=m;if(u!==null){let x=C.getUndoAxesPermutation(u);g=Vo({inputs:{x:m},attrs:{perm:x},backend:t}),t.disposeData(l.dataId),t.disposeData(m.dataId)}return g}var dM={kernelName:On,backendName:"wasm",setupFunc:One,kernelFunc:Mne};var fM;function Lne(r){fM=r.wasm.cwrap("DenseBincount",null,["number","array","number","number","boolean","number","number","boolean","number"])}function Bne(r){let{backend:e,inputs:t,attrs:o}=r,{x:n,weights:s}=t,{size:a,binaryOutput:i}=o,p=s.shape.reduce((m,d)=>m*d,1)!==0,u=n.shape.length===1?[a]:[n.shape[0],a],l=e.makeOutput(u,s.dtype);function c(m){return e.dataIdMap.get(m.dataId).id}return fM(c(n),new Uint8Array(new Int32Array(n.shape).buffer),n.shape.length,a,p,c(s),we[s.dtype],i,c(l)),l}var hM={kernelName:la,backendName:"wasm",setupFunc:Lne,kernelFunc:Bne};var gM;function zne(r){gM=r.wasm.cwrap(Ln,null,["number","number","number","array","number","array","array","number","number"])}function Vne(r){let{backend:e,inputs:t,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:a}=o,i=n.shape[0],p=a==="NHWC"?n.shape[1]:n.shape[2],u=a==="NHWC"?n.shape[2]:n.shape[3],l=a==="NHWC"?n.shape[3]:n.shape[1],c=p*s,m=u*s,d=l/(s*s),f=a==="NHWC"?[i,c,m,d]:[i,d,c,m],h=e.makeOutput(f,"float32"),x=e.dataIdMap.get(n.dataId).id,b=new Uint8Array(new Int32Array(y.computeStrides(n.shape)).buffer),w=new Uint8Array(new Int32Array(f).buffer),S=new Uint8Array(new Int32Array(y.computeStrides(f)).buffer),k=e.dataIdMap.get(h.dataId).id;return gM(x,s,a==="NHWC"?1:0,b,n.shape.length-1,w,S,f.length,k),h}var xM={kernelName:Ln,backendName:"wasm",setupFunc:zne,kernelFunc:Vne};var yM;function Wne(r){yM=r.wasm.cwrap(Bn,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Une(r){let{inputs:e,attrs:t,backend:o}=r,{x:n,filter:s}=e,a=o.dataIdMap.get(n.dataId).id,i=o.dataIdMap.get(s.dataId).id,{strides:p,dilations:u,pad:l,dimRoundingMode:c}=t,m=u==null?[1,1]:u,d=C.computeConv2DInfo(n.shape,s.shape,p,m,l,c,!0),f=d.filterHeight,h=d.filterWidth,g=d.padInfo.top,x=d.padInfo.right,b=d.padInfo.bottom,w=d.padInfo.left,S=d.dilationHeight,k=d.dilationWidth,T=d.strideHeight,E=d.strideWidth,R=d.inChannels,D=d.outChannels,F=d.padInfo.type==="SAME"?1:0;if(d.dataFormat!=="channelsLast")throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${d.dataFormat}'. Please use 'channelsLast'.`);let O=o.makeOutput(d.outShape,"float32"),M=o.dataIdMap.get(O.dataId).id;return yM(a,n.shape[0],n.shape[1],n.shape[2],i,f,h,g,x,b,w,F,S,k,T,E,R,D,M),O}var bM={kernelName:Bn,backendName:"wasm",setupFunc:Wne,kernelFunc:Une};var CM;function Gne(r){CM=r.wasm.cwrap("Diag",null,["number","number","number","number"])}function Hne(r){let{inputs:e,backend:t}=r,{x:o}=e,n=y.sizeFromShape(o.shape),s=t.makeOutput([...o.shape,...o.shape],o.dtype);return CM(t.dataIdMap.get(o.dataId).id,we[o.dtype],n,t.dataIdMap.get(s.dataId).id),s}var wM={kernelName:ca,backendName:"wasm",setupFunc:Gne,kernelFunc:Hne};var SM;function Kne(r){SM=r.wasm.cwrap(zn,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function qne(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:a,pad:i,dilations:p}=o;if(n.dtype!==s.dtype)throw new Error(`Dilation2D error: x must have the same dtype as filter. Got ${n.dtype} and ${s.dtype}`);let u=C.computeDilation2DInfo(n.shape,s.shape,a,i,"NHWC",p),l=t.makeOutput(u.outShape,n.dtype);return SM(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(s.dataId).id,t.dataIdMap.get(l.dataId).id,we[n.dtype],u.batchSize,u.inChannels,u.inHeight,u.inWidth,u.outHeight,u.outWidth,u.strideHeight,u.strideWidth,u.dilationHeight,u.dilationWidth,u.filterHeight,u.filterWidth,u.padInfo.top,u.padInfo.left),l}var IM={kernelName:zn,backendName:"wasm",setupFunc:Kne,kernelFunc:qne};var vM;function jne(r){vM=r.wasm.cwrap(qi,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Xne(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,dy:a}=e,{strides:i,pad:p,dilations:u}=o;if(n.dtype!==s.dtype||n.dtype!==a.dtype)throw new Error(`Dilation2DBackpropFilter error: x must have the same dtype as filter and dy. Got ${n.dtype}, ${s.dtype}, and ${a.dtype}`);let l=C.computeDilation2DInfo(n.shape,s.shape,i,p,"NHWC",u),c=t.makeOutput(s.shape,s.dtype);return vM(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(s.dataId).id,t.dataIdMap.get(a.dataId).id,t.dataIdMap.get(c.dataId).id,we[n.dtype],l.batchSize,l.inChannels,l.inHeight,l.inWidth,l.outHeight,l.outWidth,l.strideHeight,l.strideWidth,l.dilationHeight,l.dilationWidth,l.filterHeight,l.filterWidth,l.padInfo.top,l.padInfo.left),c}var kM={kernelName:qi,backendName:"wasm",setupFunc:jne,kernelFunc:Xne};var NM;function Yne(r){NM=r.wasm.cwrap(Ki,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Qne(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,dy:a}=e,{strides:i,pad:p,dilations:u}=o;if(n.dtype!==s.dtype||n.dtype!==a.dtype)throw new Error(`Dilation2DBackpropInput error: x must have the same dtype as filter and dy. Got ${n.dtype}, ${s.dtype}, and ${a.dtype}`);let l=C.computeDilation2DInfo(n.shape,s.shape,i,p,"NHWC",u),c=t.makeOutput(n.shape,n.dtype);return NM(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(s.dataId).id,t.dataIdMap.get(a.dataId).id,t.dataIdMap.get(c.dataId).id,we[n.dtype],l.batchSize,l.inChannels,l.inHeight,l.inWidth,l.outHeight,l.outWidth,l.strideHeight,l.strideWidth,l.dilationHeight,l.dilationWidth,l.filterHeight,l.filterWidth,l.padInfo.top,l.padInfo.left),c}var TM={kernelName:Ki,backendName:"wasm",setupFunc:Yne,kernelFunc:Qne};var _M=he(Wn);var EM;function Zne(r){EM=r.wasm.cwrap(ri,null,["number","number","number"])}function Jne(r){let{inputs:e,backend:t}=r,{dy:o,y:n}=e,s=t.makeOutput(n.shape,"float32"),a=i=>t.dataIdMap.get(i.dataId).id;return EM(a(n),a(o),a(s)),s}var $M={kernelName:ri,backendName:"wasm",setupFunc:Zne,kernelFunc:Jne};var ese=!1,RM=He(xo,ese,"bool");var DM=he(Un);var AM=he(yo,"float32");function Xg(r){let{inputs:e,attrs:t,backend:o}=r,{input:n}=e,{dim:s}=t,a=n.shape.length,i=n.shape.slice(),p=s;return s<0&&(y.assert(-(a+1)<=s,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),p=a+s+1),i.splice(p,0,1),Wt({inputs:{x:n},backend:o,attrs:{shape:i}})}var FM={kernelName:ma,backendName:"wasm",kernelFunc:Xg};var PM=he(bo,"float32");function Y0(r){let{attrs:{shape:e,value:t},backend:o}=r,{attrs:{dtype:n}}=r;n=n||y.inferDtype(t);let s=o.makeOutput(e,n);return o.typedArrayFromHeap(s).fill(t),s}var OM={kernelName:da,backendName:"wasm",kernelFunc:Y0};var MM;function tse(r){MM=r.wasm.cwrap(Gn,null,["number","number","number","number","number","number"])}function rse(r){let{inputs:e,backend:t}=r,{image:o}=e,n=t.makeOutput(o.shape,o.dtype),s=t.dataIdMap.get(o.dataId).id,a=t.dataIdMap.get(n.dataId).id,[i,p,u,l]=o.shape;return MM(s,i,p,u,l,a),n}var LM={kernelName:Gn,backendName:"wasm",kernelFunc:rse,setupFunc:tse};var BM=he(Co);var ose=!1,zM=He(wo,ose);var VM;function nse(r){VM=r.wasm.cwrap(Hn,null,["number","number","number","number","number","number","number"])}function sse(r){let{backend:e,inputs:t,attrs:o}=r,{varianceEpsilon:n}=o,{x:s,mean:a,variance:i,offset:p,scale:u}=t,l=e.dataIdMap.get(s.dataId).id,c=e.dataIdMap.get(a.dataId).id,m=e.dataIdMap.get(i.dataId).id,d=p!=null?e.dataIdMap.get(p.dataId).id:0,f=u!=null?e.dataIdMap.get(u.dataId).id:0,h=e.makeOutput(s.shape,s.dtype);if(y.sizeFromShape(s.shape)===0)return h;let g=e.dataIdMap.get(h.dataId).id;return VM(l,c,m,d,f,n,g),h}var WM={kernelName:Hn,backendName:"wasm",setupFunc:nse,kernelFunc:sse};var UM;function ase(r){UM=r.wasm.cwrap(jo,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function ise(r){let{inputs:e,attrs:t,backend:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=e,{strides:p,pad:u,dilations:l,dataFormat:c,dimRoundingMode:m,activation:d,leakyreluAlpha:f}=t,h=C.computeConv2DInfo(n.shape,s.shape,p,l,u,m),g=_u[d];if(g==null)throw new Error(`${d} activation not yet supported for FusedConv2D in the wasm backend.`);let x=o.dataIdMap.get(n.dataId).id,b=o.dataIdMap.get(s.dataId).id,w=h.outChannels,S=0;if(a!=null){let ee=o.dataIdMap.get(a.dataId);if(ee.shape.length!==1)throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${ee.shape.length}.`);if(ee.shape[0]!==w)throw new Error(`FusedConv2D bias shape (${ee.shape}) does not match the number of output channels (${w})`);S=ee.id}let k=h.filterHeight,T=h.filterWidth,E=h.padInfo.top,R=h.padInfo.right,D=h.padInfo.bottom,F=h.padInfo.left,O=h.dilationHeight,M=h.dilationWidth,L=h.strideHeight,B=h.strideWidth,z=h.inChannels,U=h.padInfo.type==="SAME"?1:0,j=h.batchSize,q=h.inHeight,Y=h.inWidth;if(c!=="NHWC")throw new Error(`wasm backend FusedConv2D does not support dataFormat:'${c}'. Please use 'NHWC'.`);let J=o.makeOutput(h.outShape,"float32"),re=o.dataIdMap.get(J.dataId).id,ne=i==null?0:o.dataIdMap.get(i.dataId).id;return UM(x,j,q,Y,b,k,T,S,E,R,D,F,U,O,M,L,B,z,w,g,ne,f||0,re),J}var GM={kernelName:jo,backendName:"wasm",setupFunc:ase,kernelFunc:ise};var HM;function use(r){HM=r.wasm.cwrap(Xo,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function pse(r){let{inputs:e,attrs:t,backend:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=e,{strides:p,pad:u,dilations:l,dataFormat:c,dimRoundingMode:m,activation:d,leakyreluAlpha:f}=t,h=C.computeConv2DInfo(n.shape,s.shape,p,l,u,m,!0),g=_u[d];if(g==null)throw new Error(`${d} activation not yet supported for FusedDepthwiseConv2D in the wasm backend.`);let x=o.dataIdMap.get(n.dataId).id,b=o.dataIdMap.get(s.dataId).id,w=h.outChannels,S=0;if(a!=null){let ee=o.dataIdMap.get(a.dataId);if(ee.shape.length!==1)throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${ee.shape.length}.`);if(ee.shape[0]!==w)throw new Error(`FusedDepthwiseConv2D bias shape (${ee.shape}) does not match the number of output channels (${w})`);S=ee.id}let k=h.filterHeight,T=h.filterWidth,E=h.padInfo.top,R=h.padInfo.right,D=h.padInfo.bottom,F=h.padInfo.left,O=h.dilationHeight,M=h.dilationWidth,L=h.strideHeight,B=h.strideWidth,z=h.inChannels,U=h.padInfo.type==="SAME"?1:0,j=h.batchSize,q=h.inHeight,Y=h.inWidth;if(c!=="NHWC")throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'${c}'. Please use 'NHWC'.`);let J=o.makeOutput(h.outShape,"float32"),re=o.dataIdMap.get(J.dataId).id,ne=i==null?0:o.dataIdMap.get(i.dataId).id;return HM(x,j,q,Y,b,k,T,S,E,R,D,F,U,O,M,L,B,z,w,g,ne,f||0,re),J}var KM={kernelName:Xo,backendName:"wasm",setupFunc:use,kernelFunc:pse};var qM;function lse(r){qM=r.wasm.cwrap(Kn,null,["number","number","number","number","number","number","array","number"])}function cse(r){let{backend:e,inputs:t}=r,{params:o,indices:n}=t,[s,a,i,p]=xf.prepareAndValidate(o,n),u=e.makeOutput(s,o.dtype);if(a===0)return u;let l=n.shape,c=l[l.length-1],d=e.dataIdMap.get(o.dataId).id,h=e.dataIdMap.get(n.dataId).id,g=new Uint8Array(new Int32Array(p).buffer),x=e.dataIdMap.get(u.dataId).id;return qM(d,we[o.dtype],h,a,c,i,g,x),u}var jM={kernelName:Kn,backendName:"wasm",setupFunc:lse,kernelFunc:cse};var XM;function mse(r){XM=r.wasm.cwrap("Gather",null,["number","number","array","number","number","number","array","number"])}function dse(r){let{backend:e,inputs:t,attrs:o}=r,{x:n,indices:s}=t,{axis:a,batchDims:i}=o,p=y.parseAxisParam(a,n.shape)[0],u=e.readSync(s.dataId),l=n.shape[p];for(let D=0;D<u.length;++D){let F=u[D];y.assert(F<=l-1&&F>=0,()=>`GatherV2: the index value ${F} is not in [0, ${l-1}]`)}let c=C.segment_util.collectGatherOpShapeInfo(n,s,p,i),m=Wt({inputs:{x:n},attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]},backend:e}),d=y.sizeFromShape(s.shape),f=Wt({inputs:{x:s},attrs:{shape:[c.batchSize,d/c.batchSize]},backend:e}),h=[c.batchSize,c.outerSize,d/c.batchSize,c.sliceSize],g=e.makeOutput(h,n.dtype);if(y.sizeFromShape(n.shape)===0)return g;let x=m.shape.length-1,w=e.dataIdMap.get(m.dataId).id,k=e.dataIdMap.get(f.dataId).id,T=e.dataIdMap.get(g.dataId).id,E=new Uint8Array(new Int32Array(y.computeStrides(m.shape)).buffer),R=new Uint8Array(new Int32Array(y.computeStrides(h)).buffer);return XM(w,we[n.dtype],E,x,k,c.batchSize,R,T),e.disposeData(m.dataId),e.disposeData(f.dataId),g.shape=c.outputShape,g}var YM={kernelName:fa,backendName:"wasm",setupFunc:mse,kernelFunc:dse};var fse=!1,QM=He(So,fse,"bool");var hse=!1,ZM=He(Io,hse,"bool");var JM=he(qn,"bool");var eL=he(jn,"bool");var tL=he(Xn,"bool");var rL;function gse(r){rL=r.wasm.cwrap(Yn,null,["number","number","number","number"])}function xse(r){let{inputs:{x:e},attrs:{alpha:t},backend:o}=r,n=o.dataIdMap.get(e.dataId).id,s=o.makeOutput(e.shape,"float32");if(y.sizeFromShape(e.shape)!==0){let a=o.dataIdMap.get(s.dataId).id;rL(n,we[e.dtype],t,a)}return s}var oL={kernelName:Yn,backendName:"wasm",setupFunc:gse,kernelFunc:xse};var yse=!1,nL=He(ko,yse,"bool");var bse=!1,sL=He(No,bse,"bool");var aL;function Cse(r){aL=r.wasm.cwrap(Qn,null,["number","number","number","number"])}function wse(r){let{attrs:e,backend:t}=r,{start:o,stop:n,num:s}=e,a=Math.floor(s),i=t.makeOutput([a],"float32");return aL(t.dataIdMap.get(i.dataId).id,o,n,a),i}var iL={kernelName:Qn,backendName:"wasm",setupFunc:Cse,kernelFunc:wse};var uL=he(To);var pL=he(Zn);var Sse=!1,lL=He(Jn,Sse,"bool");var cL=he(es);var Ise=!1,mL=He(ts,Ise,"bool");var vse=!1,dL=He(gk,vse,"bool");var fL;function kse(r){fL=r.wasm.cwrap(rs,null,["number","number","number","number","number","number","number"])}function Nse(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{depthRadius:s,bias:a,alpha:i,beta:p}=o;if(n.dtype!=="float32")throw new Error("LRN error: x must have dtype float32");let u=t.makeOutput(n.shape,n.dtype);return fL(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(u.dataId).id,n.shape[3],s,a,i,p),u}var hL={kernelName:rs,backendName:"wasm",setupFunc:kse,kernelFunc:Nse};var gL;function Tse(r){gL=r.wasm.cwrap(oi,null,["number","number","number","number","number","number","number","number","number"])}function _se(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,y:s,dy:a}=e,{depthRadius:i,bias:p,alpha:u,beta:l}=o;if(n.dtype!=="float32"||s.dtype!=="float32"||a.dtype!=="float32")throw new Error("LRNGrad error: x, y, and dy must have dtype float32");let c=t.makeOutput(n.shape,n.dtype);return gL(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(s.dataId).id,t.dataIdMap.get(a.dataId).id,t.dataIdMap.get(c.dataId).id,a.shape[3],i,p,u,l),c}var xL={kernelName:oi,backendName:"wasm",setupFunc:Tse,kernelFunc:_se};var yL;function Ese(r){yL=r.wasm.cwrap(os,null,["number","number","number","number"])}function $se(r){let{backend:e,inputs:t,attrs:o}=r,{reductionIndices:n,keepDims:s}=o,{x:a}=t,p=e.dataIdMap.get(a.dataId).id,u=a,{transposed:l,axes:c,originalAxes:m,inputWasTransposed:d}=$r(a,n,e);if(d){let w=e.dataIdMap.get(l.dataId).id;u=l,p=w}let f=u.shape.length;C.assertAxesAreInnerMostDims("max",c,f);let[h,g]=C.computeOutAndReduceShapes(u.shape,c),x=y.sizeFromShape(g),b=e.makeOutput(h,a.dtype);if(y.sizeFromShape(u.shape)!==0){let w=e.dataIdMap.get(b.dataId).id;yL(p,we[a.dtype],x,w)}if(d&&e.disposeData(l.dataId),s){let w=C.expandShapeToKeepDim(b.shape,m);b.shape=w}return b}var bL={kernelName:os,backendName:"wasm",setupFunc:Ese,kernelFunc:$se};var Rse=!1,CL=He(_o,Rse);var wL;function Dse(r){wL=r.wasm.cwrap(ns,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Ase(r){let{inputs:e,attrs:t,backend:o}=r,n=e.x,s=o.dataIdMap.get(n.dataId).id;y.assert(n.dtype==="float32",()=>`Error in MaxPool: only float32 input is supported. Got ${n.dtype}.`);let{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=t,l=C.computePool2DInfo(n.shape,a,i,1,p,u),c=l.filterHeight,m=l.filterWidth,d=l.padInfo.top,f=l.padInfo.right,h=l.padInfo.bottom,g=l.padInfo.left,x=l.dilationHeight,b=l.dilationWidth,w=l.strideHeight,S=l.strideWidth,k=l.inChannels,T=l.outChannels;if(l.dataFormat!=="channelsLast")throw new Error(`wasm backend does not support dataFormat:'${l.dataFormat}'. Please use 'channelsLast'.`);let E=o.makeOutput(l.outShape,"float32"),R=o.dataIdMap.get(E.dataId).id;return wL(s,n.shape[0],n.shape[1],n.shape[2],c,m,d,f,h,g,x,b,w,S,k,T,R),E}var SL={kernelName:ns,backendName:"wasm",setupFunc:Dse,kernelFunc:Ase};var IL;function Fse(r){IL=r.wasm.cwrap("MaxPool3D",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Pse(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:a,pad:i,dimRoundingMode:p,dataFormat:u}=o,l=C.computePool3DInfo(n.shape,s,a,1,i,p,u),c=t.makeOutput(l.outShape,n.dtype);return IL(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(c.dataId).id,l.batchSize,l.inChannels,l.inDepth,l.inHeight,l.inWidth,l.outDepth,l.outHeight,l.outWidth,l.strideDepth,l.strideHeight,l.strideWidth,l.dilationDepth,l.dilationHeight,l.dilationWidth,l.effectiveFilterDepth,l.effectiveFilterHeight,l.effectiveFilterWidth,l.padInfo.front,l.padInfo.top,l.padInfo.left),c}var vL={kernelName:ha,backendName:"wasm",setupFunc:Fse,kernelFunc:Pse};var kL;function Ose(r){kL=r.wasm.cwrap("MaxPool3DGrad",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Mse(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=o,l=C.computePool3DInfo(s.shape,a,i,1,p,u),c=t.makeOutput(s.shape,s.dtype);return kL(t.dataIdMap.get(s.dataId).id,t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(c.dataId).id,l.batchSize,l.inChannels,l.inDepth,l.inHeight,l.inWidth,l.outDepth,l.outHeight,l.outWidth,l.strideDepth,l.strideHeight,l.strideWidth,l.dilationDepth,l.dilationHeight,l.dilationWidth,l.effectiveFilterDepth,l.effectiveFilterHeight,l.effectiveFilterWidth,l.padInfo.front,l.padInfo.top,l.padInfo.left),c}var NL={kernelName:Ji,backendName:"wasm",setupFunc:Ose,kernelFunc:Mse};var TL;function Lse(r){TL=r.wasm.cwrap("MaxPoolGrad",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Bse(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=o,l=C.computePool2DInfo(s.shape,a,i,1,p,u),c=t.makeOutput(s.shape,s.dtype);return TL(t.dataIdMap.get(s.dataId).id,t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(c.dataId).id,l.batchSize,l.inChannels,l.inHeight,l.inWidth,l.outHeight,l.outWidth,l.strideHeight,l.strideWidth,l.dilationHeight,l.dilationWidth,l.effectiveFilterHeight,l.effectiveFilterWidth,l.padInfo.top,l.padInfo.left),c}var _L={kernelName:Zi,backendName:"wasm",setupFunc:Lse,kernelFunc:Bse};var EL;function zse(r){EL=r.wasm.cwrap("MaxPoolWithArgmax",null,["number","number","number","number","boolean","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Vse(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:a,pad:i,includeBatchInIndex:p}=o;y.assert(n.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${n.shape.length}.`);let u=[1,1];y.assert(C.eitherStridesOrDilationsAreOne(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);let l=C.computePool2DInfo(n.shape,s,a,[1,1],i),c=t.makeOutput(l.outShape,n.dtype),m=t.makeOutput(l.outShape,"int32");return EL(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(c.dataId).id,t.dataIdMap.get(m.dataId).id,we[n.dtype],p,l.batchSize,l.inChannels,l.inHeight,l.inWidth,l.outHeight,l.outWidth,l.strideHeight,l.strideWidth,l.dilationHeight,l.dilationWidth,l.effectiveFilterHeight,l.effectiveFilterWidth,l.padInfo.top,l.padInfo.left),[c,m]}var $L={kernelName:ga,backendName:"wasm",setupFunc:zse,kernelFunc:Vse};var RL;function Wse(r){RL=r.wasm.cwrap(ss,null,["number, number, number"])}function Use(r){let{backend:e,inputs:t,attrs:o}=r,{axis:n,keepDims:s}=o,{x:a}=t,i=e.dataIdMap.get(a.dataId).id,p=i,u=a,{transposed:l,axes:c,originalAxes:m,inputWasTransposed:d}=$r(a,n,e),f=c;if(d){let S=e.dataIdMap.get(l.dataId).id;S!==i&&(u=l,p=S,f=C.getInnerMostAxes(f.length,u.shape.length))}C.assertAxesAreInnerMostDims("mean",f,u.shape.length);let[h,g]=C.computeOutAndReduceShapes(u.shape,f),x=y.sizeFromShape(g),b=u;u.dtype!=="float32"&&(b=Vr({backend:e,inputs:{x:u},attrs:{dtype:"float32"}}),p=e.dataIdMap.get(b.dataId).id);let w=e.makeOutput(h,"float32");if(y.sizeFromShape(u.shape)!==0){let S=e.dataIdMap.get(w.dataId).id;RL(p,x,S)}if(d&&e.disposeData(l.dataId),s){let S=C.expandShapeToKeepDim(w.shape,m);w.shape=S}return u.dtype!=="float32"&&e.disposeData(b.dataId),w}var DL={kernelName:ss,backendName:"wasm",setupFunc:Wse,kernelFunc:Use};var AL;function Gse(r){AL=r.wasm.cwrap(as,null,["number","number","number","number"])}function Hse(r){let{backend:e,inputs:t,attrs:o}=r,{axis:n,keepDims:s}=o,{x:a}=t,i=e.dataIdMap.get(a.dataId).id,p=i,u=a,{transposed:l,axes:c,originalAxes:m,inputWasTransposed:d}=$r(a,n,e);if(d){let w=e.dataIdMap.get(l.dataId).id;w!==i&&(u=l,p=w)}let f=u.shape.length;C.assertAxesAreInnerMostDims("min",c,f);let[h,g]=C.computeOutAndReduceShapes(u.shape,c),x=y.sizeFromShape(g),b=e.makeOutput(h,u.dtype);if(y.sizeFromShape(u.shape)!==0){let w=e.dataIdMap.get(b.dataId).id;AL(p,we[a.dtype],x,w)}if(d&&e.disposeData(l.dataId),s){let w=C.expandShapeToKeepDim(b.shape,m);b.shape=w}return b}var FL={kernelName:as,backendName:"wasm",setupFunc:Gse,kernelFunc:Hse};var Kse=!1,PL=He(Eo,Kse);var Q0;(function(r){r[r.reflect=0]="reflect",r[r.symmetric=1]="symmetric"})(Q0||(Q0={}));var OL;function qse(r){OL=r.wasm.cwrap(is,null,["number","array","number","number","array","array","number","number"])}function jse(r){let{inputs:{x:e},backend:t,attrs:{paddings:o,mode:n}}=r,s=o.map((f,h)=>f[0]+e.shape[h]+f[1]),a=t.dataIdMap.get(e.dataId).id,i=t.makeOutput(s,e.dtype),p=t.dataIdMap.get(i.dataId).id,u=new Uint8Array(new Int32Array(e.shape).buffer),l=o.map(f=>f[0]),c=o.map(f=>f[1]),m=new Uint8Array(new Int32Array(l).buffer),d=new Uint8Array(new Int32Array(c).buffer);return OL(a,u,e.shape.length,we[e.dtype],m,d,Q0[n],p),i}var ML={kernelName:is,backendName:"wasm",kernelFunc:jse,setupFunc:qse};var LL;function Xse(r){LL=r.wasm.cwrap(Fs,null,["number","number","number","number"])}function Z0(r){let{backend:e,inputs:{logits:t},attrs:{dim:o}}=r,n=e.dataIdMap.get(t.dataId).id,s=e.makeOutput(t.shape,t.dtype),a=e.dataIdMap.get(s.dataId).id,i=t.shape[o],p=y.sizeFromShape(t.shape)/i;return y.sizeFromShape(s.shape)===0||LL(n,a,i,p),s}var BL={kernelName:Fs,backendName:"wasm",setupFunc:Xse,kernelFunc:Z0};var zL;function Yse(r){zL=r.wasm.cwrap(ps,null,["number","number","number","number","number","number"])}function Qse(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{numSamples:s,seed:a,normalized:i}=o;if(n.dtype!=="float32")throw new Error(`Tensor logits must have dtype float32, got ${n.dtype}`);let p=i?n:Z0({inputs:{logits:n},backend:t,attrs:{dim:n.shape.length-1}}),[u,l]=p.shape,c=t.makeOutput([u,s],"int32");return zL(t.dataIdMap.get(p.dataId).id,u,l,s,a,t.dataIdMap.get(c.dataId).id),i||t.disposeData(p.dataId),c}var VL={kernelName:ps,backendName:"wasm",setupFunc:Yse,kernelFunc:Qse};var WL=He(us,!0);var Zse=!0,UL=He($o,Zse);var GL=he(ls);function Zl(r,e){let t=new Int32Array(r.wasm.HEAPU8.buffer,e,4),o=t[0],n=t[1],s=t[2],a=t[3];return r.wasm._free(e),{pSelectedIndices:o,selectedSize:n,pSelectedScores:s,pValidOutputs:a}}var HL;function Jse(r){HL=r.wasm.cwrap(cs,"number",["number","number","number","number","number"])}function eae(r){let{backend:e,inputs:t,attrs:o}=r,{iouThreshold:n,maxOutputSize:s,scoreThreshold:a}=o,{boxes:i,scores:p}=t,u=e.dataIdMap.get(i.dataId).id,l=e.dataIdMap.get(p.dataId).id,c=HL(u,l,s,n,a),{pSelectedIndices:m,selectedSize:d,pSelectedScores:f,pValidOutputs:h}=Zl(e,c);return e.wasm._free(f),e.wasm._free(h),e.makeOutput([d],"int32",m)}var KL={kernelName:cs,backendName:"wasm",setupFunc:Jse,kernelFunc:eae};var qL;function tae(r){qL=r.wasm.cwrap(ni,"number",["number","number","number","number","number","bool"])}function rae(r){let{backend:e,inputs:t,attrs:o}=r,{iouThreshold:n,maxOutputSize:s,scoreThreshold:a,padToMaxOutputSize:i}=o,{boxes:p,scores:u}=t,l=e.dataIdMap.get(p.dataId).id,c=e.dataIdMap.get(u.dataId).id,m=qL(l,c,s,n,a,i),{pSelectedIndices:d,selectedSize:f,pSelectedScores:h,pValidOutputs:g}=Zl(e,m);e.wasm._free(h);let x=e.makeOutput([f],"int32",d),b=e.makeOutput([],"int32",g);return[x,b]}var jL={kernelName:ni,backendName:"wasm",setupFunc:tae,kernelFunc:rae};var XL;function oae(r){XL=r.wasm.cwrap(ms,"number",["number","number","number","number","number","number"])}function nae(r){let{backend:e,inputs:t,attrs:o}=r,{iouThreshold:n,maxOutputSize:s,scoreThreshold:a,softNmsSigma:i}=o,{boxes:p,scores:u}=t,l=e.dataIdMap.get(p.dataId).id,c=e.dataIdMap.get(u.dataId).id,m=XL(l,c,s,n,a,i),{pSelectedIndices:d,selectedSize:f,pSelectedScores:h,pValidOutputs:g}=Zl(e,m);e.wasm._free(g);let x=e.makeOutput([f],"int32",d),b=e.makeOutput([f],"float32",h);return[x,b]}var YL={kernelName:ms,backendName:"wasm",setupFunc:oae,kernelFunc:nae};var sae=!1,QL=He(Ro,sae,"bool");var ZL;function aae(r){ZL=r.wasm.cwrap(ds,null,["number","number","number","number","number"])}function iae(r){let{inputs:e,backend:t,attrs:o}=r,{indices:n}=e,{dtype:s,depth:a,onValue:i,offValue:p}=o,u=t.makeOutput([...n.shape,a],s),l=t.dataIdMap.get(u.dataId).id,m=t.dataIdMap.get(n.dataId).id;return ZL(m,a,i,p,l),u}var JL={kernelName:ds,backendName:"wasm",setupFunc:aae,kernelFunc:iae};function uae(r){let{inputs:{x:e},backend:t}=r,o=t.makeOutput(e.shape,e.dtype);return t.typedArrayFromHeap(o).fill(1),o}var eB={kernelName:xa,backendName:"wasm",kernelFunc:uae};function pae(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o;if(e.length===1)return Xg({inputs:{input:e[0]},backend:t,attrs:{dim:n}});let s=e[0].shape,a=e[0].dtype;e.forEach(l=>{y.assertShapesMatch(s,l.shape,"All tensors passed to stack must have matching shapes"),y.assert(a===l.dtype,()=>"All tensors passed to stack must have matching dtypes")});let i=[],p=e.map(l=>{let c=Xg({inputs:{input:l},backend:t,attrs:{dim:n}});return i.push(c),c}),u=j0({inputs:p,backend:t,attrs:{axis:n}});return i.forEach(l=>t.disposeData(l.dataId)),u}var tB={kernelName:ya,backendName:"wasm",kernelFunc:pae};var rB;function lae(r){rB=r.wasm.cwrap(fs,null,["number","array","number","number","array","array","number","number"])}function cae(r){let{inputs:{x:e},backend:t,attrs:{paddings:o,constantValue:n}}=r,s=o.map((h,g)=>h[0]+e.shape[g]+h[1]);if(y.sizeFromShape(e.shape)===0)return Y0({backend:t,attrs:{shape:s,value:n,dtype:e.dtype}});let a=t.dataIdMap.get(e.dataId).id,i=t.makeOutput(s,e.dtype),u=t.dataIdMap.get(i.dataId).id,l=new Uint8Array(new Int32Array(e.shape).buffer),c=o.map(h=>h[0]),m=o.map(h=>h[1]),d=new Uint8Array(new Int32Array(c).buffer),f=new Uint8Array(new Int32Array(m).buffer);return rB(a,l,e.shape.length,we[e.dtype],d,f,n,u),i}var Yg={kernelName:fs,backendName:"wasm",kernelFunc:cae,setupFunc:lae};var mae=!1,oB=He(hs,mae);var nB;function dae(r){nB=r.wasm.cwrap(gs,null,["number","number","number"])}function fae(r){let{inputs:e,backend:t}=r,{x:o,alpha:n}=e,s=t.dataIdMap.get(o.dataId).id,a=t.dataIdMap.get(n.dataId).id,i=s,p=o,u=p;p.dtype!=="float32"&&(u=Vr({backend:t,inputs:{x:o},attrs:{dtype:"float32"}}),i=t.dataIdMap.get(u.dataId).id);let l=t.makeOutput(o.shape,"float32"),c=t.dataIdMap.get(l.dataId).id;return nB(i,a,c),p.dtype!=="float32"&&t.disposeData(u.dataId),l}var sB={kernelName:gs,backendName:"wasm",setupFunc:dae,kernelFunc:fae};var aB;function hae(r){aB=r.wasm.cwrap(Ho,null,["number","number","number","number"])}function gae(r){let{backend:e,inputs:t,attrs:o}=r,{axis:n,keepDims:s}=o,{x:a}=t,i=e.dataIdMap.get(a.dataId).id,p=i,u=a,{transposed:l,axes:c,originalAxes:m,inputWasTransposed:d}=$r(a,n,e),f=c;if(d){let w=e.dataIdMap.get(l.dataId).id;w!==i&&(u=l,p=w,f=C.getInnerMostAxes(f.length,u.shape.length))}C.assertAxesAreInnerMostDims("prod",f,u.shape.length);let[h,g]=C.computeOutAndReduceShapes(u.shape,f),x=y.sizeFromShape(g),b=e.makeOutput(h,u.dtype);if(y.sizeFromShape(u.shape)!==0){let w=e.dataIdMap.get(b.dataId).id;aB(p,x,we[b.dtype],w)}if(d&&e.disposeData(l.dataId),s){let w=C.expandShapeToKeepDim(b.shape,m);b.shape=w}return b}var iB={kernelName:Ho,backendName:"wasm",setupFunc:hae,kernelFunc:gae};var xae=r=>{let{backend:e,attrs:t}=r,{start:o,stop:n,step:s,dtype:a}=t,i=fp(o,n,s,a),p=e.makeOutput([i.length],a);return e.typedArrayFromHeap(p).set(i),p},uB={kernelName:ba,backendName:"wasm",kernelFunc:xae};var yae=!0,pB=He(Vn,yae);var lB=he(xs);var cB=he(ys);var mB=he(ws);var dB;function bae(r){dB=r.wasm.cwrap(Cs,null,["number","number","number","number","number","number","number","number","number","number"])}function Cae(r){let{backend:e,inputs:t,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:a,size:i}=o,[p,u]=i,[l,c,m,d]=n.shape,f=[l,p,u,d],h=e.dataIdMap.get(n.dataId),g;h.dtype!=="float32"&&(g=Vr({backend:e,inputs:{x:n},attrs:{dtype:"float32"}}),h=e.dataIdMap.get(g.dataId));let x=h.id,b=e.makeOutput(f,"float32");if(y.sizeFromShape(n.shape)===0)return b;let w=e.dataIdMap.get(b.dataId).id;return dB(x,l,c,m,d,p,u,s?1:0,a?1:0,w),g!=null&&e.disposeData(g.dataId),b}var fB={kernelName:Cs,backendName:"wasm",setupFunc:bae,kernelFunc:Cae};var hB;function wae(r){hB=r.wasm.cwrap(ii,null,["number","number","number","array","array","boolean"])}function Sae(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:a}=o,i=t.makeOutput(n.shape,"float32"),p=t.dataIdMap.get(n.dataId),u;return p.dtype!=="float32"&&(u=Vr({backend:t,inputs:{x:n},attrs:{dtype:"float32"}}),p=t.dataIdMap.get(u.dataId)),hB(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(s.dataId).id,t.dataIdMap.get(i.dataId).id,new Uint8Array(new Int32Array(n.shape).buffer),new Uint8Array(new Int32Array(s.shape).buffer),a),u!=null&&t.disposeData(u.dataId),i}var gB={kernelName:ii,backendName:"wasm",setupFunc:wae,kernelFunc:Sae};var xB;function Iae(r){xB=r.wasm.cwrap(bs,null,["number","number","number","number","number","number","number","number","number","number"])}function vae(r){let{backend:e,inputs:t,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:a,size:i}=o,[p,u]=i,[l,c,m,d]=n.shape,f=[l,p,u,d],h=e.makeOutput(f,"float32");if(y.sizeFromShape(n.shape)===0)return h;let g=e.dataIdMap.get(n.dataId),x;g.dtype!=="float32"&&(x=Vr({backend:e,inputs:{x:n},attrs:{dtype:"float32"}}),g=e.dataIdMap.get(x.dataId));let b=g.id,w=e.dataIdMap.get(h.dataId).id;return xB(b,l,c,m,d,p,u,s?1:0,a?1:0,w),x!=null&&e.disposeData(x.dataId),h}var yB={kernelName:bs,backendName:"wasm",setupFunc:Iae,kernelFunc:vae};var bB;function kae(r){bB=r.wasm.cwrap(ai,null,["number","number","number","array","array","boolean"])}function Nae(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:a}=o,i=t.makeOutput(n.shape,"float32"),p=t.dataIdMap.get(n.dataId),u;return p.dtype!=="float32"&&(u=Vr({backend:t,inputs:{x:n},attrs:{dtype:"float32"}}),p=t.dataIdMap.get(u.dataId)),bB(t.dataIdMap.get(n.dataId).id,t.dataIdMap.get(s.dataId).id,t.dataIdMap.get(i.dataId).id,new Uint8Array(new Int32Array(n.shape).buffer),new Uint8Array(new Int32Array(s.shape).buffer),a),u!=null&&t.disposeData(u.dataId),i}var CB={kernelName:ai,backendName:"wasm",setupFunc:kae,kernelFunc:Nae};var wB;function Tae(r){wB=r.wasm.cwrap(Ss,null,["number","array","number","array","number","number"])}function _ae(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dims:s}=o,a=y.parseAxisParam(s,n.shape);if(n.shape.length===0)return Dp({inputs:{x:n},backend:t});let i=t.makeOutput(n.shape,n.dtype),p=t.dataIdMap.get(n.dataId).id,u=t.dataIdMap.get(i.dataId).id,l=new Uint8Array(new Int32Array(a).buffer),c=new Uint8Array(new Int32Array(n.shape).buffer);wB(p,l,a.length,c,n.shape.length,u);let m=Wt({inputs:{x:i},attrs:{shape:n.shape},backend:t});return t.disposeData(i.dataId),m}var SB={kernelName:Ss,backendName:"wasm",kernelFunc:_ae,setupFunc:Tae};var IB;function Eae(r){IB=r.wasm.cwrap(Vs,null,["number","number","number","number","number","number","number","number","array","number","number"])}function $ae(r){let{inputs:e,backend:t,attrs:o}=r,{image:n}=e,{radians:s,fillValue:a,center:i}=o,p=t.makeOutput(n.shape,n.dtype),u=t.dataIdMap.get(n.dataId).id,l=t.dataIdMap.get(p.dataId).id,[c,m,d,f]=n.shape,[h,g]=C.getImageCenter(i,m,d),x=a===0,b=255,w=typeof a=="number"?[a,a,a,x?0:b]:[...a,b],S=new Uint8Array(new Int32Array(w).buffer);return IB(u,c,m,d,f,s,h,g,S,w.length,l),p}var vB={kernelName:Vs,backendName:"wasm",kernelFunc:$ae,setupFunc:Eae};var kB=he(Is);var NB=he(Do);var TB;function Rae(r){TB=r.wasm.cwrap(vs,null,["number","number","number","number","number","number","array","number","number"])}function Dae(r){let{backend:e,inputs:t,attrs:o}=r,{indices:n,updates:s}=t,{shape:a}=o,i=e.makeOutput(a,s.dtype);if(y.sizeFromShape(a)===0)return i;let{sliceRank:p,numUpdates:u,sliceSize:l,strides:c,outputSize:m}=Cu.calculateShapes(s,n,a),f=e.dataIdMap.get(n.dataId).id,g=e.dataIdMap.get(s.dataId).id,x=new Uint8Array(new Int32Array(c).buffer),b=e.dataIdMap.get(i.dataId).id;return TB(f,g,we[s.dtype],p,u,l,x,m,b),i}var _B={kernelName:vs,backendName:"wasm",setupFunc:Rae,kernelFunc:Dae};var EB;function Aae(r){EB=r.wasm.cwrap(Ns,null,["number","number","number","number","number","number","bool","number"])}function Fae(r){let{inputs:e,backend:t,attrs:o}=r,{sortedSequence:n,values:s}=e,{side:a}=o;if(n.dtype!==s.dtype)throw new Error(`SearchSorted error: sorted_sequence must have the same dtype as values. Got ${n.dtype} and ${s.dtype}`);let i=t.makeOutput(s.shape,"int32");function p(u){return t.dataIdMap.get(u.dataId).id}return EB(p(n),p(s),n.shape[0],n.shape[1],s.shape[1],we[n.dtype],a==="left",p(i)),i}var $B={kernelName:Ns,backendName:"wasm",setupFunc:Aae,kernelFunc:Fae};var RB;function Pae(r){RB=r.wasm.cwrap("SelectV2",null,["number","number","number","number","number"])}function Oae(r){let{inputs:e,backend:t}=r,{condition:o,t:n,e:s}=e,a=t.dataIdMap.get(o.dataId).id,i=t.dataIdMap.get(n.dataId).id,p=t.dataIdMap.get(s.dataId).id,u=t.makeOutput(n.shape,n.dtype),l=t.dataIdMap.get(u.dataId).id,c=o.shape.length,m=n.shape.length,d=c===0||c>1||m===1?1:y.sizeFromShape(n.shape.slice(1));return RB(a,i,p,d,l),u}var DB={kernelName:wa,backendName:"wasm",kernelFunc:Oae,setupFunc:Pae};var AB=he(Ts);var FB;function Mae(r){FB=r.wasm.cwrap(Ao,null,["number","number"])}function Lae(r){let{backend:e,inputs:{x:t}}=r,o=e.dataIdMap.get(t.dataId).id,n=e.makeOutput(t.shape,t.dtype),s=e.dataIdMap.get(n.dataId).id;return y.sizeFromShape(n.shape)===0||FB(o,s),n}var PB={kernelName:"Sigmoid",backendName:"wasm",setupFunc:Mae,kernelFunc:Lae};var OB=he(Rs);var MB=he(Es);var LB=he($s);var BB=he(Ds);function Bae(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,paddings:a}=o,i=y.sizeFromShape(s),p=[[0,0]];p.push(...a);for(let T=1+s.length;T<n.shape.length;++T)p.push([0,0]);let u=Yg.kernelFunc({inputs:{x:n},backend:t,attrs:{paddings:p,constantValue:0}}),l=C.getReshaped(u.shape,s,i,!1),c=C.getPermuted(l.length,s.length,!1),m=C.getReshapedPermuted(u.shape,s,i,!1),h=Wt({inputs:{x:u},backend:t,attrs:{shape:l}}),b=Vo({inputs:{x:h},backend:t,attrs:{perm:c}}),k=Wt({inputs:{x:b},backend:t,attrs:{shape:m}});return t.disposeData(u.dataId),t.disposeData(h.dataId),t.disposeData(b.dataId),k}var zB={kernelName:Sa,backendName:"wasm",kernelFunc:Bae};var VB;function zae(r){VB=r.wasm.cwrap("SparseFillEmptyRows","number",["number","number","number","number","number","number","number","number","number","number","number","number"])}function Vae(r){let{backend:e,inputs:t}=r,{indices:o,values:n,denseShape:s,defaultValue:a}=t,i=o.shape[0],p=o.shape[1],u=e.readSync(s.dataId)[0],l=[i+u,p],c=e.dataIdMap.get(o.dataId).id,m=e.dataIdMap.get(n.dataId).id,d=e.dataIdMap.get(a.dataId).id,f=e.makeOutput(l,o.dtype),h=e.dataIdMap.get(f.dataId).id,g=e.makeOutput(l.slice(0,1),n.dtype),x=e.dataIdMap.get(g.dataId).id,b=e.makeOutput([u],"bool"),w=e.dataIdMap.get(b.dataId).id,S=e.makeOutput([i],o.dtype),k=e.dataIdMap.get(S.dataId).id,T=e.makeOutput([4],"int32"),E=e.dataIdMap.get(T.dataId).id,R=VB(c,m,we[n.dtype],i,u,p,d,h,x,w,k,E),D=e.readSync(T.dataId),F;switch(D[0]){case 1:{F=C.getSparseFillEmptyRowsIndicesDenseShapeMismatch(D[1]);break}case 2:{F=C.getSparseFillEmptyRowsNegativeIndexErrorMessage(D[1],D[2]);break}case 3:F=C.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(D[1],D[2],D[3]);break;default:F=""}if(e.disposeData(T.dataId),F)throw e.disposeData(f.dataId),e.disposeData(g.dataId),e.disposeData(b.dataId),e.disposeData(S.dataId),new Error(F);let O=f,M=g;return R!==l[0]&&(O=an({inputs:{x:f},attrs:{begin:0,size:[R,p]},backend:e}),M=an({inputs:{x:g},attrs:{begin:0,size:R},backend:e}),e.disposeData(f.dataId),e.disposeData(g.dataId)),[O,M,b,S]}var WB={kernelName:eu,backendName:"wasm",setupFunc:zae,kernelFunc:Vae};var UB;function Wae(r){UB=r.wasm.cwrap(ui,null,["number","number","number","number","number","number","number"])}function Uae(r){let{backend:e,inputs:t}=r,{inputIndices:o,inputShape:n,newShape:s}=t;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let a=e.dataIdMap.get(o.dataId).id,i=e.dataIdMap.get(n.dataId).id,p=e.dataIdMap.get(s.dataId).id,u=o.shape[0],l=y.sizeFromShape(s.shape),c=e.makeOutput([u,l],o.dtype),m=e.dataIdMap.get(c.dataId).id,d=e.makeOutput([l],s.dtype),f=e.dataIdMap.get(d.dataId).id,h=e.makeOutput([3],"int32"),g=e.dataIdMap.get(h.dataId).id;UB(a,i,p,u,m,f,g);let x=e.readSync(h.dataId),b;switch(x[0]){case 0:{b=C.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(x[1],x[2]);break}case 1:{b=C.getSparseReshapeNegativeOutputDimErrorMessage(x[1],x[2]);break}case 2:b=C.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage();break;case 3:{let w=Array.from(e.readSync(n.dataId)),S=Array.from(e.readSync(d.dataId));b=C.getSparseReshapeInputOutputMultipleErrorMessage(w,S);break}case 4:{let w=Array.from(e.readSync(n.dataId)),S=Array.from(e.readSync(d.dataId));b=C.getSparseReshapeInputOutputMismatchErrorMessage(w,S);break}default:b=""}if(e.disposeData(h.dataId),b)throw e.disposeData(c.dataId),e.disposeData(d.dataId),new Error(b);return[c,d]}var GB={kernelName:ui,backendName:"wasm",setupFunc:Wae,kernelFunc:Uae};var HB;function Qg(r){HB=r.wasm.cwrap("SparseSegmentReduction",null,["number","number","number","number","number","number","number","number","number"])}function Zg(r,e){let{backend:t,inputs:o}=r,{data:n,indices:s,segmentIds:a}=o,i=s.shape[0],p=t.readSync(a.dataId,i-1,i)[0],l=i>0?p+1:0;if(l<0)throw new Error(C.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let c=n.shape.slice();c[0]=l;let m=t.dataIdMap.get(n.dataId).id,d=t.dataIdMap.get(s.dataId).id,f=t.dataIdMap.get(a.dataId).id,h=t.makeOutput(c,n.dtype),g=t.dataIdMap.get(h.dataId).id,x=t.makeOutput([4],"int32"),b=t.dataIdMap.get(x.dataId).id;HB(m,we[n.dtype],n.shape[0],d,f,g,b,e,0);let w=t.readSync(x.dataId),S;switch(w[0]){case 0:{S=C.getSparseSegmentReductionNegativeSegmentIdsErrorMessage();break}case 1:{S=C.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage();break}case 2:S=C.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(w[1],w[2]);break;case 3:S=C.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(w[1],w[2],w[3]);break;default:S=""}if(t.disposeData(x.dataId),S)throw t.disposeData(h.dataId),new Error(S);return h}function Gae(r){return Zg(r,!0)}var KB={kernelName:va,backendName:"wasm",setupFunc:Qg,kernelFunc:Gae};function Hae(r){return Zg(r,!1)}var qB={kernelName:ka,backendName:"wasm",setupFunc:Qg,kernelFunc:Hae};var jB;function Kae(r){jB=r.wasm.cwrap(Ps,null,["number","number","number","number","number","number","number","number","array","number","number"])}function qae(r){let{backend:e,inputs:t,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:a}=t,{outputShape:i}=o,p=e.makeOutput(i,a.dtype);if(y.sizeFromShape(i)===0)return p;let{sliceRank:u,numUpdates:l,sliceSize:c,strides:m,outputSize:d}=C.calculateShapes(s,n,i),f=e.dataIdMap.get(n.dataId).id,h=e.dataIdMap.get(s.dataId).id,g=e.dataIdMap.get(a.dataId).id,x=new Uint8Array(new Int32Array(m).buffer),b=e.dataIdMap.get(p.dataId).id;return jB(f,h,s.shape.length,g,we[a.dtype],u,l,c,x,d,b),p}var XB={kernelName:Ps,backendName:"wasm",setupFunc:Kae,kernelFunc:qae};function jae(r){let{inputs:e,attrs:t,backend:o}=r,{x:n}=e,{numOrSizeSplits:s,axis:a}=t,i=y.parseAxisParam(a,n.shape)[0],p=C.prepareSplitSize(n,s,i),u=new Array(n.shape.length).fill(0),l=n.shape.slice();return p.map(c=>{let m=[...l];m[i]=c;let d=an({inputs:{x:n},attrs:{begin:u,size:m},backend:o});return u[i]+=c,d})}var YB={kernelName:Ia,backendName:"wasm",kernelFunc:jae};var QB=he(Fo);var ZB=he(tu);var Xae=!0,JB=He(Po,Xae);var ez;function Yae(r){ez=r.wasm.cwrap(Ko,null,["number","number","number","number"])}function Qae(r){let{backend:e,inputs:t,attrs:o}=r,{alpha:n}=o,{x:s}=t,a=e.dataIdMap.get(s.dataId).id,i=e.makeOutput(s.shape,s.dtype),p=e.dataIdMap.get(i.dataId).id;return ez(a,n,we[s.dtype],p),i}var tz={kernelName:Ko,backendName:"wasm",setupFunc:Yae,kernelFunc:Qae};var rz;function Zae(r){rz=r.wasm.cwrap(Os,null,["number","array","number","array","array","array","array","array","number","number"])}function Jae(r){let{backend:e,inputs:t,attrs:o}=r,{x:n}=t,{begin:s,end:a,strides:i,beginMask:p,endMask:u,ellipsisMask:l,newAxisMask:c,shrinkAxisMask:m}=o,{finalShapeSparse:d,finalShape:f,isIdentity:h,sliceDim0:g,isSimpleSlice:x,begin:b,end:w,strides:S}=nt.sliceInfo(n.shape,s,a,i,p,u,l,c,m),k;if(h)k=Wt({inputs:{x:n},backend:e,attrs:{shape:f}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let T=nt.computeOutShape(b,w,S),E=an({inputs:{x:n},backend:e,attrs:{begin:b,size:T}});k=Wt({inputs:{x:E},backend:e,attrs:{shape:f}}),e.disposeData(E.dataId)}else{let T=e.makeOutput(d,"float32"),E=e.dataIdMap.get(n.dataId).id,R=new Uint8Array(new Int32Array(y.computeStrides(n.shape)).buffer),D=new Uint8Array(new Int32Array(b).buffer),F=new Uint8Array(new Int32Array(w).buffer),O=new Uint8Array(new Int32Array(S).buffer),M=new Uint8Array(new Int32Array(d).buffer),L=new Uint8Array(new Int32Array(y.computeStrides(d)).buffer),B=e.dataIdMap.get(T.dataId).id;rz(E,R,n.shape.length,D,F,O,M,L,d.length,B),k=Wt({inputs:{x:T},backend:e,attrs:{shape:f}}),e.disposeData(T.dataId)}return k}var oz={kernelName:Os,backendName:"wasm",setupFunc:Zae,kernelFunc:Jae};function eie(r){let{backend:e,inputs:t,attrs:o}=r,{data:n,dataSplits:s}=t,{separator:a,nGramWidths:i,leftPad:p,rightPad:u,padWidth:l,preserveShortSequences:c}=o,m=e.readSync(n.dataId),d=e.readSync(s.dataId),[f,h]=gp(m,d,a,i,p,u,l,c),g=e.makeOutput([f.length],"string"),x=e.dataIdMap.get(g.dataId);x.stringBytes=f;let b=e.makeOutput(s.shape,"int32");return e.typedArrayFromHeap(b).set(h),[g,b]}var nz={kernelName:Na,backendName:"wasm",kernelFunc:eie};function tie(r){let{backend:e,inputs:t,attrs:o}=r,{input:n,delimiter:s}=t,{skipEmpty:a}=o,i=e.readSync(n.dataId),p=e.readSync(s.dataId),[u,l,c]=xp(i,p[0],a),m=l.length,d=e.makeOutput([m,2],"int32");e.typedArrayFromHeap(d).set(u);let h=e.makeOutput([m],"string"),g=e.dataIdMap.get(h.dataId);g.stringBytes=l;let x=e.makeOutput([2],"int32");return e.typedArrayFromHeap(x).set(c),[d,h,x]}var sz={kernelName:ru,backendName:"wasm",kernelFunc:tie};function rie(r){let{backend:e,inputs:t,attrs:o}=r,{input:n}=t,{numBuckets:s}=o,a=e.readSync(n.dataId),i=yp(a,s),p=e.makeOutput(n.shape,"int32");return e.typedArrayFromHeap(p).set(i),p}var az={kernelName:ou,backendName:"wasm",kernelFunc:rie};var oie=!0,iz=He(Oo,oie);var uz;function nie(r){uz=r.wasm.cwrap(As,null,["number","number","number","number"])}function sie(r){let{backend:e,inputs:t,attrs:o}=r,{axis:n,keepDims:s}=o,{x:a}=t,i=e.dataIdMap.get(a.dataId).id,p=i,u=a,{transposed:l,axes:c,originalAxes:m,inputWasTransposed:d}=$r(a,n,e),f=c;if(d){let w=e.dataIdMap.get(l.dataId).id;w!==i&&(u=l,p=w,f=C.getInnerMostAxes(f.length,u.shape.length))}C.assertAxesAreInnerMostDims("sum",f,u.shape.length);let[h,g]=C.computeOutAndReduceShapes(u.shape,f),x=y.sizeFromShape(g),b=e.makeOutput(h,u.dtype);if(y.sizeFromShape(u.shape)!==0){let w=e.dataIdMap.get(b.dataId).id;uz(p,x,we[b.dtype],w)}if(d&&e.disposeData(l.dataId),s){let w=C.expandShapeToKeepDim(b.shape,m);b.shape=w}return b}var pz={kernelName:As,backendName:"wasm",setupFunc:nie,kernelFunc:sie};var lz=he(Ms);var cz=he(Ls);var mz;function aie(r){mz=r.wasm.cwrap(ks,null,["number","number","number","number","number","number","array","number","number","number"])}function iie(r){let{backend:e,inputs:t,attrs:o}=r,{tensor:n,indices:s,updates:a}=t,{}=o,i=e.makeOutput(n.shape,n.dtype);if(y.sizeFromShape(n.shape)===0)return i;let{sliceRank:p,numUpdates:u,sliceSize:l,strides:c,outputSize:m}=Cu.calculateShapes(a,s,n.shape),f=e.dataIdMap.get(s.dataId).id,g=e.dataIdMap.get(a.dataId).id,b=e.dataIdMap.get(n.dataId).id,w=new Uint8Array(new Int32Array(c).buffer),S=e.dataIdMap.get(i.dataId).id;return mz(f,g,we[a.dtype],p,u,l,w,m,S,b),i}var dz={kernelName:ks,backendName:"wasm",setupFunc:aie,kernelFunc:iie};var fz;function uie(r){fz=r.wasm.cwrap(Mo,null,["number","array","number","array","number","number"])}function pie(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,s=t.dataIdMap.get(n.dataId).id,{reps:a}=o,i=new Array(n.shape.length);for(let m=0;m<i.length;m++)i[m]=n.shape[m]*a[m];let p=new Uint8Array(new Int32Array(n.shape).buffer),u=new Uint8Array(new Int32Array(i).buffer),l=t.makeOutput(i,n.dtype),c=t.dataIdMap.get(l.dataId).id;return fz(s,p,n.shape.length,u,i.length,we[l.dtype],c),l}var hz={kernelName:Mo,backendName:"wasm",setupFunc:uie,kernelFunc:pie};var gz;function lie(r){gz=r.wasm.cwrap(Bs,null,["number","array","number","number","number","bool","number","number"])}var cie=({inputs:r,backend:e,attrs:t})=>{let{x:o}=r,{k:n,sorted:s}=t,a=e.dataIdMap.get(o.dataId).id,i=new Uint8Array(new Int32Array(o.shape).buffer),p=o.shape.slice();p[p.length-1]=n;let u=e.makeOutput(p,o.dtype),l=e.dataIdMap.get(u.dataId).id,c=e.makeOutput(p,"int32"),m=e.dataIdMap.get(c.dataId).id;return gz(a,i,o.shape.length,we[o.dtype],n,s,l,m),[u,c]},xz={kernelName:Bs,backendName:"wasm",setupFunc:lie,kernelFunc:cie};var yz;function mie(r){yz=r.wasm.cwrap(zs,null,["number","number","bool","number","number","number","number","number","number","array","number","array","number","number","number","number","number"])}function die(r){let{backend:e,inputs:t,attrs:o}=r,{image:n,transforms:s}=t,{interpolation:a,fillMode:i,fillValue:p,outputShape:u}=o,[l,c,m,d]=n.shape,[f,h]=u!=null?u:[c,m],g=[l,f,h,d],x=new Uint8Array(new Int32Array(y.computeStrides(n.shape)).buffer),b=new Uint8Array(new Int32Array(y.computeStrides(g)).buffer),w=e.makeOutput(g,n.dtype),S=e.dataIdMap.get(w.dataId).id,T=e.dataIdMap.get(n.dataId).id,R=e.dataIdMap.get(s.dataId).id,D=a==="nearest"?1:2,F;switch(i){case"constant":F=1;break;case"reflect":F=2;break;case"wrap":F=3;break;case"nearest":F=4;break;default:F=1;break}return yz(T,R,s.shape[0]>1,l,f,h,d,m,c,x,n.shape.length-1,b,g.length-1,D,F,p,S),w}var bz={kernelName:zs,backendName:"wasm",setupFunc:mie,kernelFunc:die};function fie(r){let{inputs:e,attrs:t,backend:o}=r,{axis:n}=t,{x:s}=e,{outputValues:a,outputShape:i,indices:p}=bp(o.readSync(s.dataId),n,s.shape,s.dtype);return[o.makeOutput(i,s.dtype,void 0,a),o.makeOutput([p.length],"int32",void 0,p)]}var Cz={kernelName:nu,backendName:"wasm",kernelFunc:fie};function hie(r){let{inputs:e,backend:t,attrs:o}=r,{value:n}=e,{axis:s}=o;s<0&&(s+=n.shape.length);let a=n.shape[s],i=n.shape.length,p=new Array(i-1),u=0;for(let d=0;d<i;d++)d!==s&&(p[u++]=n.shape[d]);let l=new Array(a),c=new Array(i).fill(0),m=n.shape.slice();m[s]=1;for(let d=0;d<l.length;d++)c[s]=d,l[d]=an({inputs:{x:n},attrs:{begin:c,size:m},backend:t});return l.map(({dataId:d,dtype:f})=>({dataId:d,dtype:f,shape:p}))}var wz={kernelName:Ta,backendName:"wasm",kernelFunc:hie};function gie(r){let{inputs:{x:e},backend:t}=r,o=t.makeOutput(e.shape,e.dtype);return t.typedArrayFromHeap(o).fill(0),o}var Sz={kernelName:_a,backendName:"wasm",kernelFunc:gie};var xie=[iO,uO,pO,lO,cO,dO,yO,CO,wO,SO,IO,vO,kO,NO,TO,EO,PO,RO,AO,LO,zO,WO,UO,GO,HO,KO,jO,XO,QO,JO,tM,oM,sM,aM,iM,pM,cM,dM,hM,xM,bM,wM,IM,kM,TM,_M,$M,RM,DM,AM,FM,PM,OM,LM,BM,zM,WM,GM,KM,jM,YM,QM,ZM,fO,JM,eL,tL,oL,nL,sL,iL,pL,uL,lL,cL,mL,dL,hL,xL,bL,CL,SL,vL,NL,_L,$L,DL,FL,PL,ML,VL,WL,UL,GL,KL,jL,YL,QL,JL,eB,tB,Yg,oB,sB,iB,uB,pB,lB,cB,mB,OO,fB,gB,yB,CB,SB,vB,kB,NB,_B,$B,DB,AB,PB,OB,MB,LB,BO,BL,BB,zB,WB,GB,KB,qB,XB,YB,QB,ZB,JB,tz,oz,nz,sz,az,iz,pz,lz,cz,dz,hz,xz,bz,gO,Cz,wz,Sz];for(let r of xie)li(r);var J0=A();J0.registerFlag("WASM_HAS_SIMD_SUPPORT",async()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]))}catch(r){return!1}});J0.registerFlag("WASM_HAS_MULTITHREAD_SUPPORT",async()=>{if(J0.get("IS_NODE"))return!1;try{return new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch(r){return!1}});var iv=Kp(Nz()),Dz=Kp(_z()),uv=Kp(Ez());var $z=iv.default||iv,yie=uv.default||uv,gm=class extends mo{constructor(e){super(),this.wasm=e,this.dataIdNextNumber=1,this.wasm.tfjs.initWithThreadsCount(Fz),av=this.wasm.tfjs.getThreadsCount(),this.dataIdMap=new mn(this,cr())}write(e,t,o){let n={id:this.dataIdNextNumber++};return this.move(n,e,t,o,1),n}numDataIds(){return this.dataIdMap.numDataIds()}async time(e){let t=y.now();return e(),{kernelMs:y.now()-t}}move(e,t,o,n,s){let a=this.dataIdNextNumber++;if(n==="string"){let l=t;this.dataIdMap.set(e,{id:a,stringBytes:l,shape:o,dtype:n,memoryOffset:null,refCount:s});return}let i=y.sizeFromShape(o),p=i*y.bytesPerElement(n),u=this.wasm._malloc(p)>>>0;this.dataIdMap.set(e,{id:a,memoryOffset:u,shape:o,dtype:n,refCount:s}),this.wasm.tfjs.registerTensor(a,i,u),t!=null&&this.wasm.HEAPU8.set(new Uint8Array(t.buffer,t.byteOffset,p),u)}async read(e){return this.readSync(e)}readSync(e,t,o){let{memoryOffset:n,dtype:s,shape:a,stringBytes:i}=this.dataIdMap.get(e);if(s==="string")return(t==null||t===0)&&(o==null||o>=i.length)?i:i.slice(t,o);t=t||0,o=o||y.sizeFromShape(a);let p=y.bytesPerElement(s),u=this.wasm.HEAPU8.slice(n+t*p,n+o*p);return Cie(u.buffer,s)}disposeData(e,t=!1){if(this.dataIdMap.has(e)){let o=this.dataIdMap.get(e);if(o.refCount--,!t&&o.refCount>0)return!1;this.wasm._free(o.memoryOffset),this.wasm.tfjs.disposeData(o.id),this.dataIdMap.delete(e)}return!0}refCount(e){return this.dataIdMap.has(e)?this.dataIdMap.get(e).refCount:0}incRef(e){let t=this.dataIdMap.get(e);t!=null&&t.refCount++}floatPrecision(){return 32}getMemoryOffset(e){return this.dataIdMap.get(e).memoryOffset}dispose(){this.wasm.tfjs.dispose(),"PThread"in this.wasm&&this.wasm.PThread.terminateAllThreads(),this.wasm=null}memory(){return{unreliable:!1}}makeOutput(e,t,o,n){let s;if(o==null)s=this.write(n!=null?n:null,e,t);else{let a=this.dataIdNextNumber++;s={id:a},this.dataIdMap.set(s,{id:a,memoryOffset:o,shape:e,dtype:t,refCount:1});let i=y.sizeFromShape(e);this.wasm.tfjs.registerTensor(a,i,o)}return{dataId:s,shape:e,dtype:t}}typedArrayFromHeap({shape:e,dtype:t,dataId:o}){let n=this.wasm.HEAPU8.buffer,{memoryOffset:s}=this.dataIdMap.get(o),a=y.sizeFromShape(e);switch(t){case"float32":return new Float32Array(n,s,a);case"int32":return new Int32Array(n,s,a);case"bool":return new Uint8Array(n,s,a);default:throw new Error(`Unknown dtype ${t}`)}}};function bie(r){return(e,t)=>(y.fetch(r,{credentials:"same-origin"}).then(o=>{o.ok||e.env.a(`failed to load wasm binary file at '${r}'`),o.arrayBuffer().then(n=>{WebAssembly.instantiate(n,e).then(s=>{t(s.instance,s.module)})})}),{})}function Rz(r,e,t){if(tx!=null)return tx;let o="tfjs-backend-wasm.wasm";return r&&e?o="tfjs-backend-wasm-threaded-simd.wasm":r&&(o="tfjs-backend-wasm-simd.wasm"),fm!=null&&fm[o]!=null?fm[o]:t+o}async function Az(){let[r,e]=await Promise.all([A().getAsync("WASM_HAS_SIMD_SUPPORT"),A().getAsync("WASM_HAS_MULTITHREAD_SUPPORT")]);return new Promise((t,o)=>{let n={};n.locateFile=(i,p)=>{if(i.endsWith(".worker.js")){let u=Dz.wasmWorkerContents.replace(/\n/g,"\\n"),l=new Blob([u],{type:"application/javascript"});return URL.createObjectURL(l)}return i.endsWith(".wasm")?Rz(r,e,dm!=null?dm:p):p+i},pv&&(n.instantiateWasm=bie(Rz(r,e,dm!=null?dm:"")));let s=!1;n.onAbort=()=>{if(s||hm)return;hm=!0,o({message:"Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers"})};let a;e&&r&&tx==null?(n.mainScriptUrlOrBlob=new Blob(["var WasmBackendModuleThreadedSimd = "+$z.toString()],{type:"text/javascript"}),a=$z(n)):a=yie(n),a.then(i=>{s=!0,hm=!1;let p=null;i.tfjs={init:i.cwrap("init",null,[]),initWithThreadsCount:i.cwrap("init_with_threads_count",null,["number"]),getThreadsCount:i.cwrap("get_threads_count","number",[]),registerTensor:i.cwrap("register_tensor",null,["number","number","number"]),disposeData:i.cwrap("dispose_data",p,["number"]),dispose:i.cwrap("dispose",p,[])},t({wasm:i})}).catch(o)})}function Cie(r,e){switch(e){case"float32":return new Float32Array(r);case"int32":return new Int32Array(r);case"bool":return new Uint8Array(r);default:throw new Error(`Unknown dtype ${e}`)}}var wie=["tfjs-backend-wasm.wasm","tfjs-backend-wasm-simd.wasm","tfjs-backend-wasm-threaded-simd.wasm"],tx=null,dm=null,fm={},hm=!1,pv=!1;function Sie(r,e=!1){if(zw("setWasmPath has been deprecated in favor of setWasmPaths and will be removed in a future release."),hm)throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`");tx=r,pv=e}function Iie(r,e=!1){if(hm)throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPaths()` before you call `tf.setBackend()` or `tf.ready()`");if(typeof r=="string")dm=r;else{fm=r;let t=wie.filter(o=>fm[o]==null);if(t.length>0)throw new Error(`There were no entries found for the following binaries: ${t.join(",")}. Please either call setWasmPaths with a map providing a path for each binary, or with a string indicating the directory where all the binaries can be found.`)}pv=e}var Fz=-1,av=-1;function vie(r){Fz=r}function kie(){if(av===-1)throw new Error("WASM backend not initialized.");return av}var Nie="4.17.0";var Tie=2;pu("wasm",async()=>{let{wasm:r}=await Az();return new gm(r)},Tie);var Wo=A();Wo.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",()=>15);Wo.registerFlag("WEBGPU_CPU_FORWARD",()=>!0);Wo.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",()=>-1);Wo.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",()=>!0);Wo.registerFlag("WEBGPU_USE_LOW_POWER_GPU",()=>!1);Wo.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e3);Wo.registerFlag("WEBGPU_USE_PROFILE_TOOL",()=>!1);Wo.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",()=>!0);Wo.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG",()=>!1);Wo.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL",()=>-1);Wo.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER",()=>!1);Wo.registerFlag("WEBGPU_PRINT_SHADER",()=>"");Wo.registerFlag("WEBGPU_ENGINE_COMPILE_ONLY",()=>!1);var rx=class{constructor(e){e&&(this.vendor=e.vendor,this.architecture=e.architecture,this.intelGPUGeneration=this.getIntelGPUGeneration())}getIntelGPUGeneration(){if(this.isIntel()){if(this.architecture.startsWith("gen"))return Number(this.architecture.match(/\d+/));if(this.architecture.startsWith("xe"))return 12}return 0}isIntel(){return this.vendor==="intel"}};var ox=class{constructor(e){this.device=e,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireBuffer(e,t,o=!1,n=!0){let s,a=Pz(e,t);return n?(this.freeBuffers.has(a)||this.freeBuffers.set(a,[]),this.freeBuffers.get(a).length>0?(s=this.freeBuffers.get(a).pop(),this.numFreeBuffers--):(s=this.device.createBuffer({size:e,usage:t,mappedAtCreation:o}),this.numBytesAllocated+=e)):(s=this.device.createBuffer({size:e,usage:t,mappedAtCreation:o}),this.numBytesAllocated+=e),this.usedBuffers.has(a)||this.usedBuffers.set(a,[]),this.usedBuffers.get(a).push(s),this.numUsedBuffers++,this.numBytesUsed+=e,s}releaseBuffer(e,t=!0){if(this.freeBuffers.size===0)return;let o=e.size,n=e.usage,s=Pz(o,n),a=this.usedBuffers.get(s),i=a.indexOf(e);if(i<0)throw new Error("Cannot find the buffer in buffer manager");a[i]=a[a.length-1],a.pop(),this.numUsedBuffers--,this.numBytesUsed-=o,t?(this.freeBuffers.get(s).push(e),this.numFreeBuffers++):(e.destroy(),this.numBytesAllocated-=o)}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach((e,t)=>{e.forEach(o=>{o.destroy()})}),this.usedBuffers.forEach((e,t)=>{e.forEach(o=>{o.destroy()})}),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}};function Pz(r,e){return`${r}_${e}`}var nx=class{constructor(e){this.device=e,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(e,t,o,n){let s=Mz(o),a=e*t*s,i=Oz(e,t,o,n);if(this.freeTextures.has(i)||this.freeTextures.set(i,[]),this.usedTextures.has(i)||this.usedTextures.set(i,[]),this.numBytesUsed+=a,this.numUsedTextures++,this.freeTextures.get(i).length>0){this.numFreeTextures--;let u=this.freeTextures.get(i).shift();return this.usedTextures.get(i).push(u),u}this.numBytesAllocated+=a;let p=this.device.createTexture({size:[e,t],format:o,usage:n});return this.usedTextures.get(i).push(p),p}releaseTexture(e){if(this.freeTextures.size===0)return;let t=e.width,o=e.height,n=e.format,s=e.usage,a=Oz(t,o,n,s);this.freeTextures.has(a)||this.freeTextures.set(a,[]),this.freeTextures.get(a).push(e),this.numFreeTextures++,this.numUsedTextures--;let i=this.usedTextures.get(a),p=i.indexOf(e);if(p<0)throw new Error("Cannot release a texture that was never provided by this texture manager");i.splice(p,1);let u=Mz(n),l=t*o*u;this.numBytesUsed-=l}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach((e,t)=>{e.forEach(o=>{o.destroy()})}),this.usedTextures.forEach((e,t)=>{e.forEach(o=>{o.destroy()})}),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}};function Oz(r,e,t,o){return`${r}_${e}_${t}_${o}`}function Mz(r){if(r==="rgba8unorm")return 16;throw new Error(`${r} is not supported!`)}function Lz(r,e){if(Math.max(...r)>5)throw new Error("Cannot symbolically compute strides for rank > 6 tensor.");let t=r.length,o="xyzwuv",n=r.map(a=>`${e}.${o[a]}`),s=new Array(t-1);s[t-2]=n[t-1];for(let a=t-3;a>=0;--a)s[a]=`(${s[a+1]} * ${n[a+1]})`;return s}var oo=(r,e,t)=>t==="int32"?`atomicAdd(${r}, bitcast<i32>(${e}));`:`
          {
            var oldValue = 0;
            loop {
              let newValueF32 = bitcast<f32>(oldValue) + (${e});
              let newValue = bitcast<i32>(newValueF32);
              let res = atomicCompareExchangeWeak(${r}, oldValue, newValue);
              if res.exchanged {
                break;
              }
              oldValue = res.old_value;
            }
          }`;var $i;(function(r){r[r.FROM_PIXELS=0]="FROM_PIXELS",r[r.DRAW=1]="DRAW"})($i||($i={}));var Wz=(r,e,t,o,n)=>{let s={dtype:o.dtype,shape:o.shape},a=Eie(t,s,e),i=r.createShaderModule({code:a,label:e.constructor.name}),p=A().get("WEBGPU_PRINT_SHADER");if(p!==""){p=p.toLowerCase();let u=p.split(",");(p==="all"||u.some(l=>e.shaderKey.toLowerCase().includes(l)))&&(console.group(e.shaderKey),console.debug(a),console.groupEnd())}return n?r.createComputePipelineAsync({compute:{module:i,entryPoint:"_start"},label:e.constructor.name,layout:"auto"}):r.createComputePipeline({compute:{module:i,entryPoint:"_start"},label:e.constructor.name,layout:"auto"})},Ae=(r,e="f32")=>{switch(r){case 1:return`${e}`;case 2:return`vec2<${e}>`;case 3:return`vec3<${e}>`;case 4:return`vec4<${e}>`;default:throw new Error(`${r}-component ${e} is not supported.`)}};function ft(r){if(r<=1)return"i32";if(r===2)return"vec2<i32>";if(r===3)return"vec3<i32>";if(r===4)return"vec4<i32>";if(r===5)return"vec5";if(r===6)return"vec6";throw Error(`GPU for rank ${r} is not yet supported`)}function un(r){if(r===0)return"x";if(r===1)return"y";if(r===2)return"z";if(r===3)return"w";if(r===4)return"u";if(r===5)return"v";throw Error(`Index ${r} is not yet supported`)}function G(...r){let e;switch(r.length){case 0:e=`
        fn main()
      `;break;case 1:e=`
        fn main(${r[0]} : i32)
      `;break;default:throw Error("Unreachable")}return e}function Bz(r,e){let t;return t=`
     ${_ie(e)}
      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                @builtin(global_invocation_id) GlobalId : vec3<u32>,
                @builtin(local_invocation_index) LocalIndex: u32,
                @builtin(workgroup_id) WorkgroupId : vec3<u32>,
                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
        localId = LocalId;
        localIndex = LocalIndex;
        globalId = GlobalId;
        numWorkgroups = NumWorkgroups;
        workgroupId = WorkgroupId;
        ${r?"main(getGlobalIndex());":"main();"};
      }
    `,t}function _ie(r){return`
  @compute @workgroup_size(${r.workgroupSize[0]}, ${r.workgroupSize[1]}, ${r.workgroupSize[2]})
`}function Eie(r,e,t){let o=[],n=t.workgroupSize[0]*t.workgroupSize[1]*t.workgroupSize[2];if(t.outputComponent=t.outputComponent?t.outputComponent:1,o.push(`

      var<private> localId: vec3<u32>;
      var<private> localIndex: u32;
      var<private> globalId: vec3<u32>;
      var<private> numWorkgroups: vec3<u32>;
      var<private> workgroupId: vec3<u32>;

      // Only used when the y/z dimension of workgroup size is 1.
      fn getGlobalIndex() -> i32 {
        ${Gz(t)?"  return i32(globalId.x);":`  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +
                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${n}u +
                localIndex);
        `}
      }
    `),t.pixelsOpType!=null){let f=t.pixelsOpType===$i.FROM_PIXELS?`@group(0) @binding(0) var<storage, read_write> result: array<${Eu(e.dtype,t.outputComponent)}>;`:`@group(0) @binding(1) var<storage, read> inBuf : array<${Eu(r[0].dtype,t.outputComponent)}>;`,h=e.shape.length===3?"vec2<i32>":"i32";o.push(`
        struct Uniform {
          outShapeStrides : ${h},
          size            : i32,
          numChannels     : i32,
          alpha           : f32,
        };

        ${f}
        @group(0) @binding(2) var<uniform> uniforms: Uniform;
      `);let g=Vz(t);return[zz,o.join(`
`),xm(e.shape),t.getUserCode(),Bz(g,t)].join(`
`)}let s,a,i="struct Uniforms { NAN : f32, INFINITY : f32, ";t.variableNames.forEach((f,h)=>{let g=ft(r[h].shape.length);i+=`${f.charAt(0).toLowerCase()+f.slice(1)}Shape : ${g}, `,s=r[h].shape.length-1,a=ft(s),i+=`${f.charAt(0).toLowerCase()+f.slice(1)}ShapeStrides: ${a}, `});let p=ft(e.shape.length);i+=`outShape : ${p}, `,s=e.shape.length-1,a=ft(s),i+=`
         outShapeStrides: ${a}, `,t.size&&(i+="size : i32, "),t.uniforms&&(i+=t.uniforms),i+="};",i=Mie(i),o.push(i),t.atomic?o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;
    `):o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<${Eu(e.dtype,t.outputComponent)}>;
    `),t.variableNames.forEach((f,h)=>{o.push(`
      @group(0) @binding(${1+h}) var<storage, read> ${f}: array<${t.variableComponents?Eu(r[h].dtype,t.variableComponents[h]):Eu(r[h].dtype,t.outputComponent)}>;
        `)}),i!==""&&o.push(`
      @group(0) @binding(${1+t.variableNames.length}) var<uniform> uniforms: Uniforms;
      `);let u=Fie(e.shape,t.dispatchLayout),l=[zz,o.join(`
`)+$ie,xm(e.shape),u,Pie(e.shape.length)];t.atomic||l.push(Oie(e.shape,e.dtype,t.outputComponent)),t.variableNames.forEach((f,h)=>{l.push(`${xm(r[h].shape,f)}`)});let c=r.map((f,h)=>Aie(f,e.shape,t.variableComponents?t.variableComponents[h]:t.outputComponent,t.dispatchLayout.x.length===e.shape.length)).join(`
`);l.push(c),l.push(t.getUserCode());let m=Vz(t);return l.push(Bz(m,t)),l.join(`
`)}function Uz(r,e,t){let o=r.shaderKey;if(r.pixelsOpType!=null)return o;let n=[],s=[];e.forEach(l=>{n.push(l.shape),s.push(l.dtype)}),n.push(t.shape),s.push(t.dtype);let a=e.map(l=>C.getBroadcastDims(l.shape,t.shape)),i=e.map(l=>y.arraysEqual(l.shape,t.shape)).join("_"),p=a.map(l=>l.join("_")).join(";"),u=Gz(r)?"flatDispatch":"";return o+="_"+(r.workgroupSize?r.workgroupSize.join(","):"")+n.map(l=>l.length).join(",")+s.join(",")+r.variableNames.join(",")+p+i+u,o}var zz=`
  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};
  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};

  // Checks whether coordinates lie within the bounds of the shape.
  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {
    return all(coord >= vec2<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {
    return all(coord >= vec3<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {
    return all(coord >= vec4<i32>(0)) && all(coord < shape);
  }

  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {
    return coord;
  }
  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {
    return dot(coords, vec2<i32>(shape.y, 1));
  }
  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {
    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));
  }
  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
    return dot(coords, vec4<i32>(
        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
  }
  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {
    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;
  }
  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {
    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;
  }

  // NaN defination in IEEE 754-1985 is :
  //   - sign = either 0 or 1.
  //   - biased exponent = all 1 bits.
  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).
  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
  fn isnan(val: f32) -> bool {
    let floatToUint: u32 = bitcast<u32>(val);
    return (floatToUint & 0x7fffffffu) > 0x7f800000u;
  }
  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {
    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);
    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);
  }
`,$ie=`
  fn isinf(val: f32) -> bool {
    return abs(val) == uniforms.INFINITY;
  }
`;function xm(r,e=""){let t=r.length,o=e!==""?`get${e.charAt(0).toUpperCase()+e.slice(1)}CoordsFromIndex`:"getCoordsFromIndex",n=e!==""?`${e.charAt(0).toLowerCase()+e.slice(1)}ShapeStrides`:"outShapeStrides";if(t<=1)return`fn ${o}(index : i32) -> i32 { return index; }`;let s=y.computeStrides(r),a=ft(t),i=[];for(let u=0;u<t;u++)i.push(`d${u}`);if(s.length===1)return`    fn ${o}(index : i32) -> vec2<i32> {
      let d0 = index / uniforms.${n}; let d1 = index - d0 * uniforms.${n};
      return vec2<i32>(d0, d1);
    }`;let p;return p="var index2 = index;"+s.map((u,l)=>{let c=`let ${i[l]} = index2 / uniforms.${n}.${un(l)}`,m=l===s.length-1?`let ${i[l+1]} = index2 - ${i[l]} * uniforms.${n}.${un(l)}`:`index2 = index2 - ${i[l]} * uniforms.${n}.${un(l)}`;return`${c}; ${m};`}).join(""),`
    fn ${o}(index : i32) -> ${a} {
      ${p}
      return ${a}(${i.join(",")});
    }
  `}function Rie(r,e){let t=r.name,o=r.shape.length,n=ft(o),s="get"+t.charAt(0).toUpperCase()+t.slice(1),a=["d0","d1","d2","d3","d4","d5"].slice(0,o),i=a.map(l=>`${l} : i32`).join(", ");if(o<1)return`
      fn ${s}() -> ${Ae(e)} {
        return ${Ae(e)}(${t}[0]);
      }
    `;let p=`uniforms.${t.charAt(0).toLowerCase()+t.slice(1)}Shape`,u=`${o}D`;return o===0&&(u="1D"),`
    fn ${s}(${i}) -> ${Ae(e)} {
      return ${Ae(e)}(${t}[getIndexFromCoords${u}(${n}(${a.join(",")}),
        ${p})${e===1?"":` / ${e}`}]);
    }
   `}function Die(r,e,t,o){let n=r.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"ByOutput",i=r.shape.length,p=e.length,u=ft(p);if(y.arraysEqual(r.shape,e)&&o)return`
    fn ${a}Index(globalIndex : i32) -> ${Ae(t)} {
      return ${Ae(t)}(${n}[globalIndex]);
    }

    fn ${a}Coords(coords : ${u}) -> ${Ae(t)} {
      return ${Ae(t)}(${n}[${p>1?"getOutputIndexFromCoords(coords)":"coords"}${t===1?"":` / ${t}`}]);
    }
    `;let l=C.getBroadcastDims(r.shape,e),c=p-i,m="";if(i===0)return`
    fn ${a}Index(globalIndex : i32) -> ${Ae(t)}{
      return get${s}();
    }

    fn ${a}Coords(coords : ${u}) -> ${Ae(t)}{
      return get${s}();
    }
  `;p<2&&l.length>=1?m="coords = 0;":m=l.map(g=>`coords.${un(g+c)} = 0;`).join(`
`);let d="";if(p<2&&i>0)d="coords";else if(p>1){let g=ft(i),x=r.shape.map((b,w)=>`coords.${un(w+c)}`).join(", ");d=`${g}(${x})`}else d="coords";let f=`uniforms.${n.charAt(0).toLowerCase()+n.slice(1)}Shape`,h=`${i}D`;return`
  fn ${a}Index(globalIndex : i32) -> ${Ae(t)} {
    var coords = getCoordsFromIndex(globalIndex);
    ${m}
    return ${Ae(t)}(${n}[getIndexFromCoords${h}(${d}, ${f})${t===1?"":` / ${t}`}]);
  }

  fn ${a}Coords(coordsIn : ${u}) -> ${Ae(t)} {
    var coords = coordsIn;
    ${m}
    return ${Ae(t)}(${n}[getIndexFromCoords${h}(${d}, ${f})${t===1?"":` / ${t}`}]);
  }
`}function Aie(r,e,t,o){let n=Rie(r,t);return r.shape.length<=e.length&&(n+=Die(r,e,t,o)),n}function Fie(r,e){let{x:t,y:o=[],z:n=[]}=e,s=r.length,a=t.length+o.length+n.length;if(a!==s)return"";if(t.length===s)return`fn getOutputCoords() -> ${ft(s)}{
    let globalIndex = getGlobalIndex();
    return getCoordsFromIndex(globalIndex);
  }
  `;let i="",p=[t,o,n];for(let m=0;m<p.length;m++){let d=p[m];if(d.length!==0)if(d.length===1)i+=`let d${d[0]} = i32(globalId[${m}]);`;else{let f=Lz(d,"uniforms.outShape");i+=`var index${m} = i32(globalId[${m}]);`;for(let h=0;h<f.length;h++)i+=`let d${d[h]} = index${m} / ${f[h]};`,h===f.length-1?i+=`let d${d[h+1]} = index${m} - d${d[h]} * ${f[h]};`:i+=`index${m} = index${m} - d${d[h]} * ${f[h]};`}}let u=[];for(let m=0;m<a;m++)u.push(`d${m}`);let l=ft(a),c=`fn getOutputCoords() -> ${l} {
  ${i}
`;return u.length===0?c+=`return ${l}(0); }`:c+=`return ${l}(${u.join(",")}); }`,c}function Pie(r){let e="";switch(r){case 0:case 1:e+=`
        fn getOutputIndexFromCoords(coords : i32) -> i32 {
          return coords;
        }
        `;break;case 2:e+=`
        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {
          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));
        }
        `;break;case 3:e+=`
        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {
          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));
        }
        `;break;case 4:e+=`
        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
          return dot(coords, vec4<i32>(
            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));
        }
        `;break;case 5:e+=`
        fn getOutputIndexFromCoords(coords : vec5) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u;
        }
        `;break;case 6:e+=`
        fn getOutputIndexFromCoords(coords : vec6) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u * uniforms.outShapeStrides.u +
              coords.v;
        }
        `;break;default:y.assert(!1,()=>`Unsupported ${r}D shape`);break}return e}function Gz(r){return r.dispatch[1]===1&&r.dispatch[2]===1}function Eu(r,e=1){if(r==="float32")return Ae(e,"f32");if(r==="int32"||r==="bool")return Ae(e,"i32");throw new Error(`type ${r} is not supported.`)}function Oie(r,e,t){let o=r.length,n=Eu(e,t),s=`fn setOutputAtIndex(flatIndex : i32, value : ${Ae(t)}) {
      result[flatIndex] = ${n}(value);
    }

    fn setOutputAtIndexI32(flatIndex : i32, value : ${Ae(t,"i32")}) {
      result[flatIndex] = ${n}(value);
    }
    `;if(o>=2){let a=["d0","d1","d2","d3","d4","d5"].slice(0,o),i=ft(o);s+=`
      fn setOutputAtCoords(${a.map(p=>`${p} : i32`).join(", ")}, value : ${Ae(t)}) {
        let flatIndex = getOutputIndexFromCoords(${i}(${a.join(", ")}));
        setOutputAtIndex(flatIndex${t===1?"":` / ${t}`}, value);
      }
      fn setOutputAtCoordsI32(${a.map(p=>`${p} : i32`).join(", ")}, value : ${Ae(t,"i32")}) {
        let flatIndex = getOutputIndexFromCoords(${i}(${a.join(", ")}));
        setOutputAtIndexI32(flatIndex${t===1?"":` / ${t}`}, value);
      }
    `}return s}function Mie(r){let e=/(\w+)\s*:\s*vec(5|6)/g;r=r.replace(e,o=>"@align(16) "+o);let t=/vec(5|6)\s*,\s*(\w+)/g;return r=r.replace(t,(o,n,s)=>`vec${n}, @align(16) ${s}`),r}function Vz(r){return!(r.dispatchLayout.hasOwnProperty("y")&&r.dispatchLayout.y.length!==0||r.dispatchLayout.hasOwnProperty("z")&&r.dispatchLayout.z.length!==0)}var cv={};qe(cv,{GPUBytesPerElement:()=>sx,MatMulProgramType:()=>pn,assertNotComplex:()=>wm,computeDispatch:()=>H,computeWorkPerThreadForConv2d:()=>bm,computeWorkgroupInfoForMatMul:()=>lv,computeWorkgroupSizeForConv2d:()=>ym,flatDispatchLayout:()=>X,isWebGPUSupported:()=>Cm,tilesFitEvenlyIntoShape:()=>Bie});var Ap=r=>{let e=1;for(let t=0;t<r.length;t++)e*=r[t];return e};function Bie(r,e){if(r.length!==e.length)throw new Error(`Cannot compute whether rank ${r.length} tiles fit evenly into rank ${e.length} shape - ranks must match.`);return e.every((t,o)=>t%r[o]===0)}function H(r,e,t=[1,1,1],o=[1,1,1]){let[n,s,a]=[Math.ceil(Ap(r.x.map(i=>e[i]))/(t[0]*o[0])),r.y?Math.ceil(Ap(r.y.map(i=>e[i]))/(t[1]*o[1])):1,r.z?Math.ceil(Ap(r.z.map(i=>e[i]))/(t[2]*o[2])):1];return[n,s,a]}function lv(r,e,t,o=!1){let n=[8,8,1],s=[4,4,1];return o||(r<=8&&(s[1]=1),e<=16&&t<=16&&(n[0]=4)),{workgroupSize:n,elementsPerThread:s}}function ym(r,e,t=!1){if(t)return[8,8,1];let o=Ap(r.x.map(s=>e[s])),n=Ap(r.y.map(s=>e[s]));return o<=4?[4,16,1]:n<=4?[16,4,1]:[16,16,1]}function bm(r,e,t=!1){if(t)return[4,4,1];let o=Ap(r.x.map(s=>e[s])),n=Ap(r.y.map(s=>e[s]));return o<=4?[1,2,1]:n<=4?[2,1,1]:[2,2,1]}function X(r){return{x:r.map((e,t)=>t)}}function sx(r){if(r==="float32"||r==="int32"||r==="bool"||r==="string")return 4;if(r==="complex64")return 8;throw new Error(`Unknown dtype ${r}`)}function Cm(){return!!(globalThis&&globalThis.navigator&&globalThis.navigator.gpu)}function wm(r,e){Array.isArray(r)||(r=[r]),r.forEach(t=>{t!=null&&y.assert(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the WebGPU backend.`)})}var pn;(function(r){r[r.MatMulReduceProgram=0]="MatMulReduceProgram",r[r.MatMulSplitKProgram=1]="MatMulSplitKProgram",r[r.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",r[r.MatMulPackedProgram=3]="MatMulPackedProgram",r[r.MatMulMax=4]="MatMulMax"})(pn||(pn={}));var zie=A().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD"),Vie=(r,e)=>{let t=r.limits.maxComputeWorkgroupsPerDimension,o=e.dispatchLayout,n=e.dispatch;if(n.every(a=>a<=t))return n;y.assert(n[0]>t&&o.y===void 0&&o.z===void 0,()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension.");let s=Math.ceil(Math.sqrt(n[0]));return s>t?(s=Math.ceil(Math.cbrt(n[0])),y.assert(s<=t,()=>"Total dispatch size exceeds WebGPU maximum."),[s,s,s]):[s,s,1]},Jl=class r extends mo{nextDataId(){return r.nextDataId++}constructor(e,t){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchCountInPass=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.queryResolveBuffer=null,this.querySet=null,this.querySetCount=2,this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,this.hasReadSyncWarned=!1,this.hasTimestampQueryWarned=!1,!Cm())throw new Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=e,this.queue=e.queue,this.commandEncoder=null,this.computePassEncoder=null,this.adapterInfo=new rx(t),this.supportTimestampQuery=this.device.features.has("timestamp-query"),this.thresholdToIncreaseWorkgroups=this.adapterInfo.intelGPUGeneration>=12?16:8,this.bufferManager=new ox(this.device),this.textureManager=new nx(this.device),this.tensorMap=new mn(this,cr()),A().getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:e,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}floatPrecision(){return 32}disposeData(e,t=!1){if(!this.tensorMap.has(e))return!0;let o=this.tensorMap.get(e);return t?o.refCount=0:o.refCount--,o.refCount>0?!1:(o.complexTensorInfos!=null&&(this.disposeData(o.complexTensorInfos.real.dataId),this.disposeData(o.complexTensorInfos.imag.dataId)),this.commandQueueOwnedIds.has(e)?(this.tensorDataPendingDisposal.push(e),!0):(this.releaseResource(e),this.tensorMap.delete(e),!0))}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(e){let t=this.tensorMap.get(e);if(!(!t||!t.resource)){if(t.external){t.resource=null;return}t.resource instanceof GPUBuffer?this.bufferManager.releaseBuffer(t.resource):t.resource instanceof GPUTexture&&this.textureManager.releaseTexture(t.resource),t.resource=null}}refCount(e){return this.tensorMap.has(e)?this.tensorMap.get(e).refCount:0}incRef(e){let t=this.tensorMap.get(e);t.refCount++}decRef(e){if(this.tensorMap.has(e)){let t=this.tensorMap.get(e);t.refCount--}}write(e,t,o){if(o==="complex64"&&e!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.tensorMap.set(n,{dtype:o,shape:t,values:e,refCount:1}),n}move(e,t,o,n,s){if(n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(e,{dtype:n,shape:o,values:t,refCount:s})}submitQueue(){this.queue.submit([this.commandEncoder.finish()]),this.commandEncoder=null,this.dispatchCountInPass=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach(e=>{this.releaseResource(e),this.tensorMap.delete(e)}),this.uniformPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e)),this.stagingPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e,!1)),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder())}endComputePassEncoder(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}async checkCompileCompletionAsync(){let e;try{e=await Promise.all(Object.values(this.pipelineCache))}catch(t){throw new Error(t.message)}Object.keys(this.pipelineCache).map((t,o)=>{this.pipelineCache[t]=e[o]})}async getBufferData(e){if(A().getBool("WEBGPU_ENGINE_COMPILE_ONLY"))return console.warn("The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false"),null;let t=e.size,o=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,o,0,t),this.submitQueue(),await o.mapAsync(GPUMapMode.READ);let n=o.getMappedRange().slice(0);return o.unmap(),o!=null&&this.bufferManager.releaseBuffer(o),A().getBool("WEBGPU_USE_PROFILE_TOOL")&&(y.assert(this.dummyContext!==void 0,()=>"Fail to get context for profiling tool"),this.dummyContext.getCurrentTexture()),n}convertAndCacheOnCPU(e,t){let o=this.tensorMap.get(e);return o.values=t,o.values}readSync(e){let t=this.tensorMap.get(e),{values:o,complexTensorInfos:n}=t;if(o!=null||t.dtype==="string")return o;if(t.dtype==="complex64"){let h=this.readSync(n.real.dataId),g=this.readSync(n.imag.dataId),x=y.convertBackendValuesAndArrayBuffer(C.mergeRealAndImagArrays(h,g).buffer,"float32");return this.convertAndCacheOnCPU(e,x),x}this.hasReadSyncWarned||(this.hasReadSyncWarned=!0,console.warn("The performance of synchronously reading data from GPU to CPU is poor on the webgpu backend, please use asynchronous APIs instead."));let s=["opaque","premultiplied"],a=t.resource,i=a.size;y.assert(i%4===0,()=>"Because there is 4 bytes for one pixel, buffer size must be multiple of 4.");let p=i/4,u=new ArrayBuffer(i),l=256,c=256,m=s.map(h=>new OffscreenCanvas(l,c)),d=new OffscreenCanvas(l,c);this.endComputePassEncoder(),m.map((h,g)=>{let x=h.getContext("webgpu");return x.configure({device:this.device,format:"bgra8unorm",usage:GPUTextureUsage.COPY_DST,alphaMode:s[g]}),x.getCurrentTexture()}).map((h,g)=>{let x=l*4,b=(R,D,F)=>{this.ensureCommandEncoderReady(),this.commandEncoder.copyBufferToTexture({buffer:a,bytesPerRow:x,offset:F},{texture:h},{width:R,height:D}),this.submitQueue();let O=d.getContext("2d",{willReadFrequently:!0});O.clearRect(0,0,R,D),O.drawImage(m[g],0,0);let M=O.getImageData(0,0,R,D).data,L=s[g],B=new Uint8ClampedArray(u,F,R*D*4);for(let z=0;z<B.length;z+=4)if(L==="premultiplied")B[z+3]=M[z+3];else{let U=M[z];B[z]=M[z+2],B[z+1]=M[z+1],B[z+2]=U}},w=Math.floor(p/(l*c)),S=l,k=c,T=0;for(let R=0;R<w;R++)b(S,k,T),T+=l*c*4;let E=p%(l*c);k=Math.floor(E/l),k>0&&(b(S,k,T),T+=k*(l*4)),S=E%l,S>0&&b(S,1,T)});let f=y.convertBackendValuesAndArrayBuffer(u,t.dtype);return this.convertAndCacheOnCPU(e,f),f}async read(e){if(!this.tensorMap.has(e))throw new Error(`Tensor ${e} was not registered!`);let t=this.tensorMap.get(e),{values:o}=t;if(o!=null)return o;let n;if(t.dtype==="complex64"){let s=await Promise.all([this.read(t.complexTensorInfos.real.dataId),this.read(t.complexTensorInfos.imag.dataId)]),a=s[0],i=s[1];n=C.mergeRealAndImagArrays(a,i)}else{let s=await this.getBufferData(t.resource);n=y.convertBackendValuesAndArrayBuffer(s,t.dtype)}return this.convertAndCacheOnCPU(e,n),n}copyBuffer(e){let t=e.size,o=e.usage,n=this.bufferManager.acquireBuffer(t,o);return this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,n,0,t),this.submitQueue(),n}createTensorFromGPUData(e,t,o){let n=e.buffer;if(o==="complex64")throw new Error("Cannot write to a complex64 dtype. ");let s={id:this.nextDataId()};this.tensorMap.set(s,{dtype:o,shape:t,values:null,refCount:1,external:e.zeroCopy});let a=this.tensorMap.get(s),i=sx(a.dtype)*y.sizeFromShape(a.shape);if(e.buffer.size<i)throw new Error(`GPUBuffer size(${e.buffer.size}) is smaller than tensor size(${i})!`);if((e.buffer.usage&(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))!==(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))throw new Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");return e.zeroCopy!==!0&&(n=this.copyBuffer(n)),a.resource=n,cr().makeTensorFromDataId(s,t,o,this)}readToGPU(e){let t=this.tensorMap.get(e),{values:o,dtype:n,shape:s,resource:a}=t;if(n==="complex64")throw new Error("Does not support reading buffer for complex64 dtype.");if(a==null)throw o!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let i=a,p=i.size,u=i.usage,l=this.bufferManager.acquireBuffer(p,u);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(a,0,l,0,p),this.submitQueue();let c=this.makeTensorInfo(s,n),m=cr().makeTensorFromTensorInfo(c),d=this.tensorMap.get(c.dataId);return d.resource=l,{tensorRef:m,buffer:l}}bufferSync(e){let t=this.readSync(e.dataId);if(e.dtype==="string")try{let o=t.map(n=>y.decodeString(n));return ie(e.shape,e.dtype,o)}catch(o){throw new Error("Failed to decode encoded string bytes into utf-8")}return ie(e.shape,e.dtype,t)}async time(e){!this.supportTimestampQuery&&!this.hasTimestampQueryWarned&&(console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --enable-dawn-features=allow_unsafe_apis to try it again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled."),this.hasTimestampQueryWarned=!0);let t=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,e();let s=y.flatten(this.activeTimers.map(u=>u.query)).filter(u=>u!=null),a=y.flatten(this.activeTimers.map(u=>u.name)).filter(u=>u!=null);this.activeTimers=t,n&&(this.programTimersStack=null);let i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},p=await Promise.all(s);return i.kernelMs=y.sum(p),i.getExtraProfileInfo=()=>p.map((u,l)=>({name:a[l],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", "),this.uploadWaitMs=0,this.downloadWaitMs=0,i}makeTensorInfo(e,t,o){return t==="string"&&o!=null&&o.length>0&&y.isString(o[0])&&(o=o.map(s=>y.encodeString(s))),{dataId:this.write(o,e,t),shape:e,dtype:t}}tensorToBinding(e){if(!e)return null;let o=this.tensorMap.get(e.dataId).resource;return o instanceof GPUBuffer?{buffer:o}:o instanceof GPUTexture?o.createView():o}uploadToGPU(e){let t=this.tensorMap.get(e);if(t.resource!=null)return;let o=sx(t.dtype)*y.sizeFromShape(t.shape),n,s=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;if(t.values){if(n=this.bufferManager.acquireBuffer(o,s,!0),n.mapState==="unmapped"){let a=this.bufferManager.acquireBuffer(o,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,!0,!1),i=a.getMappedRange();t.dtype==="int32"||t.dtype==="bool"?new Int32Array(i).set(t.values):new Float32Array(i).set(t.values),a.unmap(),this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(a,0,n,0,o),this.stagingPendingDisposal.push(a)}else{let a=n.getMappedRange();t.dtype==="int32"||t.dtype==="bool"?new Int32Array(a).set(t.values):new Float32Array(a).set(t.values),n.unmap()}t.values=null}else n=this.bufferManager.acquireBuffer(o,s);t.resource=n}makeUniforms(e){let t=0,o=0,n=[],s=1;e.forEach(p=>{p.data.length===0&&(p.data=[1]);let u;switch(p.data.length){case 1:u=4;break;case 2:u=8;break;case 3:u=16;break;case 4:u=16;break;case 5:u=16;break;case 6:u=16;break;default:y.assert(!1,()=>`Unsupported ${p.data.length}D shape`)}(o===5||o===6)&&(u=16),u>s&&(s=u),t=Math.ceil(t/u)*u,o=p.data.length,n.push(t),t+=p.data.length*4}),t=Math.ceil(t/s)*s;let a=new ArrayBuffer(t);e.forEach((p,u)=>{let l=n[u];p.type==="int32"?new Int32Array(a,l,p.data.length).set(p.data):p.type==="uint32"?new Uint32Array(a,l,p.data.length).set(p.data):new Float32Array(a,l,p.data.length).set(p.data)});let i=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);return this.queue.writeBuffer(i,0,a,0,t),this.uniformPendingDisposal.push(i),{offset:0,size:t,buffer:i}}runWebGPUProgram(e,t,o,n,s){if(s||(s=this.makeTensorInfo(e.outputShape,o)),y.sizeFromShape(s.shape)===0)return this.tensorMap.get(s.dataId).values=y.getTypedArrayFromDType(s.dtype,0),s;this.uploadToGPU(s.dataId),e.dispatch=Vie(this.device,e);let a=t.map((p,u)=>{if(p.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(p.dataId),{dtype:this.tensorMap.get(p.dataId).dtype,shape:p.shape,name:e.variableNames[u]}});e.shaderKey=Uz(e,a,s);let i=A().getBool("WEBGPU_ENGINE_COMPILE_ONLY");return e.shaderKey in this.pipelineCache||(this.pipelineCache[e.shaderKey]=Wz(this.device,e,a,s,i)),e.pipeline=this.pipelineCache[e.shaderKey],i||this.recordAndSubmit(e,s,t,n),s}recordAndSubmit(e,t,o,n){if(e.pipeline instanceof Promise)throw new Error("Please call checkCompileCompletionAsync to ensure parallel compilation is done!");let s=[],a=[],i="int32";if(e.pixelsOpType==null){s.push({type:"float32",data:[NaN]},{type:"float32",data:[1/0]}),a=o.concat(t).map(d=>d.shape);let m="int32";a.map(d=>{s.push({type:m,data:d});let f=y.computeStrides(d);s.push({type:m,data:f})})}else{let m=y.computeStrides(t.shape);s.push({type:i,data:m})}if(e.size){let m=y.sizeFromShape(e.outputShape);s.push({type:i,data:[e.outputComponent?m/e.outputComponent:m]})}n&&(s=[...s,...n]);let p=[this.tensorToBinding(t),...o.map(m=>this.tensorToBinding(m)),this.makeUniforms(s)];o.forEach(m=>{this.commandQueueOwnedIds.add(m.dataId)}),this.commandQueueOwnedIds.add(t.dataId);let u=this.device.createBindGroup({layout:e.pipeline.getBindGroupLayout(0),entries:p.map((m,d)=>({binding:d,resource:m}))}),l=this.activeTimers!=null;this.ensureCommandEncoderReady();let c={};l&&this.supportTimestampQuery?(this.endComputePassEncoder(),this.querySet==null&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),c.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1},this.computePassEncoder=this.commandEncoder.beginComputePass(c)):this.computePassEncoder||(this.computePassEncoder=this.commandEncoder.beginComputePass(c)),this.computePassEncoder.setPipeline(e.pipeline),this.computePassEncoder.setBindGroup(0,u),this.computePassEncoder.dispatchWorkgroups(e.dispatch[0],e.dispatch[1],e.dispatch[2]),this.dispatchCountInPass++,(l||A().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchCountInPass||e.pixelsOpType===$i.DRAW)&&(this.endComputePassEncoder(),l?this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime()}):this.submitQueue())}async getQueryTime(){if(!this.supportTimestampQuery)return 0;this.queryResolveBuffer==null&&(this.queryResolveBuffer=this.bufferManager.acquireBuffer(this.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST|GPUBufferUsage.QUERY_RESOLVE)),this.commandEncoder.resolveQuerySet(this.querySet,0,this.querySetCount,this.queryResolveBuffer,0);let e=this.bufferManager.acquireBuffer(this.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,this.querySetCount*8),this.submitQueue(),await e.mapAsync(GPUMapMode.READ);let t=new BigUint64Array(e.getMappedRange()),o=Number(t[1]-t[0])/1e6;return e.unmap(),this.bufferManager.releaseBuffer(e),o}shouldExecuteOnCPU(e,t=zie){return A().getBool("WEBGPU_CPU_FORWARD")&&e.every(o=>this.tensorMap.get(o.dataId).resource==null&&y.sizeFromShape(o.shape)<t)}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(this.querySet!=null&&this.querySet.destroy(),this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}};Jl.nextDataId=0;Cm()&&pu("webgpu",async()=>{let r={powerPreference:A().get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},e=await navigator.gpu.requestAdapter(r),t={},o=[];e.features.has("timestamp-query")&&o.push("timestamp-query"),e.features.has("bgra8unorm-storage")&&o.push(["bgra8unorm-storage"]),t.requiredFeatures=o;let n=e.limits;t.requiredLimits={maxComputeWorkgroupStorageSize:n.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:n.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:n.maxStorageBufferBindingSize,maxBufferSize:n.maxBufferSize,maxComputeWorkgroupSizeX:n.maxComputeWorkgroupSizeX,maxComputeInvocationsPerWorkgroup:n.maxComputeInvocationsPerWorkgroup};let s=await e.requestDevice(t),a=await e.requestAdapterInfo();return new Jl(s,a)},3);var fe;(function(r){r[r.ADD=0]="ADD",r[r.ATAN2=1]="ATAN2",r[r.COMPLEX_MULTIPLY_IMAG=2]="COMPLEX_MULTIPLY_IMAG",r[r.COMPLEX_MULTIPLY_REAL=3]="COMPLEX_MULTIPLY_REAL",r[r.DIV=4]="DIV",r[r.ELU_DER=5]="ELU_DER",r[r.EQUAL=6]="EQUAL",r[r.FLOOR_DIV=7]="FLOOR_DIV",r[r.GREATER=8]="GREATER",r[r.GREATER_EQUAL=9]="GREATER_EQUAL",r[r.LESS=10]="LESS",r[r.LESS_EQUAL=11]="LESS_EQUAL",r[r.LOGICAL_AND=12]="LOGICAL_AND",r[r.LOGICAL_OR=13]="LOGICAL_OR",r[r.MAX=14]="MAX",r[r.MIN=15]="MIN",r[r.MOD=16]="MOD",r[r.MUL=17]="MUL",r[r.NOT_EQUAL=18]="NOT_EQUAL",r[r.POW=19]="POW",r[r.PRELU=20]="PRELU",r[r.SQUARED_DIFFERENCE=21]="SQUARED_DIFFERENCE",r[r.SUB=22]="SUB"})(fe||(fe={}));var Wie="let resultTemp = a + b;",Uie="let resultTemp = atan2(a, b);",Gie="let resultTemp = areal * breal - aimag * bimag;",Hie="let resultTemp = areal * bimag + aimag * breal;",Kie="let resultTemp = a / b;",qie="let resultTemp = select(a * (b + 1.0), a, b >= b - b);",jie=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a == b);
`,Xie=`
  let remainder =
      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));
  let quotient = (a - remainder) / b;
  let resultTemp =
      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));
`,Yie=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a > b);
`,Qie=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a >= b);
`,Zie=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a < b);
`,Jie=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a <= b);
`,eue="return f32(a >= 1.0 && b >= 1.0);",tue=`return (vec4<f32>(a >= vec4<f32>(1.0)) *
  vec4<f32>(b >= vec4<f32>(1.0)));`,rue="return f32(a >= 1.0 || b >= 1.0);",oue=`return min(vec4<f32>(a >= vec4<f32>(1.0)) +
  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));`,nue="let resultTemp = max(a, b);",sue="let resultTemp = min(a, b);",aue=`
  let isNaN = b == 0.;
  var resultTemp = a % b;
  resultTemp = select((resultTemp + b) % b, resultTemp,
      (a < 0. && b < 0.) || (a >= 0. && b > 0.));
`,iue=`
  let isNaN = !vec4<bool>(b);
  var resultTemp = vec4<f32>(a % b);
  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {
    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];
  }
  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {
    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];
  }
  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {
    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];
  }
  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {
    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];
  }
`,uue="let resultTemp = a * b;",pue=`
  var resultTemp = f32(a != b);
  let valueForNaN = 1.0;
`,lue=`
  var resultTemp = vec4<f32>(a != b);
  let valueForNaN = 1.0;
`,cue=`
  let isNaN = a < 0.0 && floor(b) < b;
  if (b == 0.0) {
    return 1.0;
  }
  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),
      round(abs(b) % 2.0) != 1.0);
`,mue=`
  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);
  let isModRound1 = vec4<f32>(isModRound1Bool);
  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);
  var resultTemp = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  let isExpZero = b == vec4<f32>(0.0);
  if (isExpZero.r) {
    resultTemp.r = 1.0;
  }
  if (isExpZero.g) {
    resultTemp.g = 1.0;
  }
  if (isExpZero.b) {
    resultTemp.b = 1.0;
  }
  if (isExpZero.a) {
    resultTemp.a = 1.0;
  }
  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);
`,due="if (a < 0.0) { return b * a; }  return a;",fue=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`,hue="let resultTemp = (a - b) * (a - b);",gue="let resultTemp = a - b;";function ec(r,e){let t;do{switch(r){case fe.ATAN2:t=Uie;break;case fe.MAX:t=nue;break;case fe.MIN:t=sue;break;case fe.MOD:t=e?iue:aue;break;case fe.NOT_EQUAL:t=e?lue:pue;break;case fe.POW:t=e?mue:cue;break;default:continue}let o,n,s;return e?(o="isnanVec4",n="vec4<f32>",s="vec4<bool>"):(o="isnan",n="f32",s="bool"),`
      let aIsNaN = ${o}(a);
      let aPostLegalization = select(a, ${n}(42), aIsNaN);
      let bIsNaN = ${o}(b);
      let bPostLegalization = select(b, ${n}(42), bIsNaN);
      let isNaN = false;
      let valueForNaN = uniforms.NAN;
      {
        let a = aPostLegalization;
        let b = bPostLegalization;
        ${t}
        return select(
            resultTemp, ${n}(valueForNaN),
            ${s}(isNaN) | aIsNaN | bIsNaN);
      }
    `}while(!1);switch(r){case fe.ADD:t=Wie;break;case fe.COMPLEX_MULTIPLY_IMAG:t=Hie;break;case fe.COMPLEX_MULTIPLY_REAL:t=Gie;break;case fe.DIV:t=Kie;break;case fe.ELU_DER:t=qie;break;case fe.EQUAL:t=jie;break;case fe.FLOOR_DIV:t=Xie;break;case fe.GREATER:t=Yie;break;case fe.GREATER_EQUAL:t=Qie;break;case fe.LESS:t=Zie;break;case fe.LESS_EQUAL:t=Jie;break;case fe.LOGICAL_AND:return e?tue:eue;case fe.LOGICAL_OR:return e?oue:rue;case fe.MUL:t=uue;break;case fe.PRELU:return e?fue:due;case fe.SQUARED_DIFFERENCE:t=hue;break;case fe.SUB:t=gue;break;default:}return`
    ${t}
    return resultTemp;
  `}var Z;(function(r){r[r.ABS=0]="ABS",r[r.ACOS=1]="ACOS",r[r.ACOSH=2]="ACOSH",r[r.ASIN=3]="ASIN",r[r.ASINH=4]="ASINH",r[r.ATAN=5]="ATAN",r[r.ATANH=6]="ATANH",r[r.CEIL=7]="CEIL",r[r.COS=8]="COS",r[r.COSH=9]="COSH",r[r.ELU=10]="ELU",r[r.ERF=11]="ERF",r[r.EXP=12]="EXP",r[r.EXPM1=13]="EXPM1",r[r.FLOOR=14]="FLOOR",r[r.IS_FINITE=15]="IS_FINITE",r[r.IS_INF=16]="IS_INF",r[r.IS_NAN=17]="IS_NAN",r[r.LINEAR=18]="LINEAR",r[r.LOG=19]="LOG",r[r.LOG1P=20]="LOG1P",r[r.LOGICAL_NOT=21]="LOGICAL_NOT",r[r.NEG=22]="NEG",r[r.RELU=23]="RELU",r[r.RELU6=24]="RELU6",r[r.LEAKYRELU=25]="LEAKYRELU",r[r.RECIPROCAL=26]="RECIPROCAL",r[r.ROUND=27]="ROUND",r[r.RSQRT=28]="RSQRT",r[r.SELU=29]="SELU",r[r.SIGMOID=30]="SIGMOID",r[r.SIGN=31]="SIGN",r[r.SIN=32]="SIN",r[r.SINH=33]="SINH",r[r.SOFTPLUS=34]="SOFTPLUS",r[r.SQRT=35]="SQRT",r[r.SQUARE=36]="SQUARE",r[r.STEP=37]="STEP",r[r.TAN=38]="TAN",r[r.TANH=39]="TANH",r[r.TO_INT=40]="TO_INT"})(Z||(Z={}));var xue="return abs(a);",yue=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return acos(a);
`,bue=`
  if (a < 1.) {
    return uniforms.NAN;
  }
  return acosh(a);
`,Cue=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return asin(a);
`,wue="return asinh(a);",Sue=`
  if (isnan(a)) {
    return uniforms.NAN;
  }
  return atan(a);
`,Iue=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  if (a == 1.) {
    return uniforms.INFINITY;
  }
  if (a == -1.) {
    return -uniforms.INFINITY;
  }
  return atanh(a);
`,vue="return ceil(a);",kue="return cos(a);",Nue=`
  let e2x = exp(-a);
  return (e2x + 1.0 / e2x) / 2.0;
`,Tue="return exp(a) - 1.0;",_ue="if (a >= 0.0) { return a; }  return (exp(a) - 1.0);",Eue=`
  var resFloat = exp(a) - vec4<f32>(1.0);
  if (a.r >= 0.0) {
    resFloat.r = a.r;
  }
  if (a.g >= 0.0) {
    resFloat.g = a.g;
  }
  if (a.b >= 0.0) {
    resFloat.b = a.b;
  }
  if (a.a >= 0.0) {
    resFloat.a = a.a;
  }
  return resFloat;
`,$ue=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  let p = ${C.ERF_P};
  let a1 = ${C.ERF_A1};
  let a2 = ${C.ERF_A2};
  let a3 = ${C.ERF_A3};
  let a4 = ${C.ERF_A4};
  let a5 = ${C.ERF_A5};

  let sign = sign(a);
  let absA = abs(a);
  let t = 1.0 / (1.0 + p * absA);
  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));
`,Rue="return exp(a);",Due="return floor(a);",Aue="return f32(!isnan(a) && !isinf(a));",Fue="return f32(isinf(a));",Pue="return f32(isnan(a));",Oue="return a;",Mue=`if (a < 0.0) { return uniforms.NAN; }
  return log(a);`,Lue=`
  if (isnan(a)) { return a; }
  return log(1.0 + a);
`,Bue="return f32(!(a >= 1.0));",zue="return -a;",Vue="if (a < 0.0) { return uniforms.alpha * a; } return a;",Wue=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`,Uue="return 1.0 / a;",Gue="return select(a, 0.0, a < 0.0);",Hue="return clamp(a, 0.0, 6.0);",Kue="return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));",que=`
  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));
`,jue="return round(a);",Xue="return inverseSqrt(a);",Yue=`
  if (a >= 0.0) {
    return ${C.SELU_SCALE} * a;
  } else {
    return ${C.SELU_SCALEALPHA} * (exp(a) - 1.0);
  }
`,Que="return 1.0 / (1.0 + exp(-1.0 * a));",Zue="return sign(a);",Jue="return sin(a);",epe=`
  let e2x = exp(a);
  return (e2x - 1.0 / e2x) / 2.0;
`,tpe=`
  let epsilon = 1.1920928955078125e-7;
  let threshold = log(epsilon) + 2.0;

  let too_large = a > -threshold;
  let too_small = a < threshold;
  let exp_a = exp(a);

  if (too_large) {
    return a;
  } else if (too_small) {
    return exp_a;
  } else {
    return log(exp_a + 1.0);
  }
`,rpe="return sqrt(a);",ope="return a * a;",npe=`
  if (isnan(a)) {
    return a;
  }

  return select(uniforms.stepAlpha, 1.0, a > 0.0);
`,spe="return tan(a);",ape=`
  let e2x = exp(-2.0 * abs(a));
  return sign(a) * (1.0 - e2x) / (1.0 + e2x);
`,ipe="return f32(i32((a)));";function Ri(r,e){switch(r){case Z.ABS:return xue;case Z.ACOS:return yue;case Z.ACOSH:return bue;case Z.ASIN:return Cue;case Z.ASINH:return wue;case Z.ATAN:return Sue;case Z.ATANH:return Iue;case Z.COS:return kue;case Z.COSH:return Nue;case Z.CEIL:return vue;case Z.ELU:return e?Eue:_ue;case Z.ERF:return $ue;case Z.EXP:return Rue;case Z.EXPM1:return Tue;case Z.FLOOR:return Due;case Z.IS_FINITE:return Aue;case Z.IS_INF:return Fue;case Z.IS_NAN:return Pue;case Z.LINEAR:return Oue;case Z.LOG:return Mue;case Z.LOG1P:return Lue;case Z.LOGICAL_NOT:return Bue;case Z.NEG:return zue;case Z.LEAKYRELU:return e?Wue:Vue;case Z.RECIPROCAL:return Uue;case Z.RELU:return e?que:Gue;case Z.RELU6:return e?Kue:Hue;case Z.ROUND:return jue;case Z.RSQRT:return Xue;case Z.SELU:return Yue;case Z.SIGMOID:return Que;case Z.SIGN:return Zue;case Z.SIN:return Jue;case Z.SINH:return epe;case Z.SOFTPLUS:return tpe;case Z.SQRT:return rpe;case Z.SQUARE:return ope;case Z.STEP:return npe;case Z.TAN:return spe;case Z.TANH:return ape;case Z.TO_INT:return ipe;default:throw new Error(`BinaryType ${r} is not implemented!`)}}function gr(r,e=!1,t=!1,o=3){if(r===null)return"";let n="";if(r==="linear")n=Ri(Z.LINEAR);else if(r==="relu")n=Ri(Z.RELU,t);else if(r==="elu")n=Ri(Z.ELU,t);else if(r==="relu6")n=Ri(Z.RELU6,t);else if(r==="prelu")n=ec(fe.PRELU,t);else if(r==="sigmoid")n=Ri(Z.SIGMOID,t);else if(r==="leakyrelu")n=Ri(Z.LEAKYRELU,t);else throw new Error(`Activation ${r} has not been implemented for the WebGPU backend.`);let a=Ae(t?4:1),i="";return e?i=`
      fn activation(a : ${a}, coords : vec${o}<i32>) -> ${a} {
        let b = getPreluActivationWeightsByOutputCoords(coords);
        ${n}
      }`:i=`
      fn activation(a : ${a}, coords : vec${o}<i32>) -> ${a} {
        ${n}
      }`,i}function no(r,e){return`
      ${r?"value = value + getBiasByOutputCoords(coords);":""}
      ${e?"value = activation(value, coords);":""}
      `}function mv(r,e,t=!1,o=!1,n=!1,s=1){y.assert(r&&s===1||!r,()=>`transposeA ${r} is not compatible with component size ${s}`);let a=`
      ${r?"value = getA(batch, col, row);":"value = getA(batch, row, col);"}

    `,i=e?"value = getB(batch, col, row);":"value = getB(batch, row, col);";return`
  fn mm_readA(batch: i32, row: i32, col: i32) -> ${Ae(s)} {
    var value = ${Ae(s)}(0.0);
    ${t&&n?a:`
    ${r?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}
    {
      ${a}
    }
    `}
    return value;
  }

  fn mm_readB(batch: i32, row: i32, col: i32) -> ${Ae(s)} {
    var value = ${Ae(s)}(0.0);
    ${i}
    return value;
  }
  `}function Sm(r,e,t,o,n=!1,s=!1,a=!1,i=1){return`
  ${mv(t,o,n,s,a,i)}
  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ${Ae(i)}) {
    ${n&&s?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}
    {
      var value = valueIn;
      let coords = vec3<i32>(batch, row, col);
      ${no(r,e)}
      setOutputAtCoords(coords[0], coords[1], coords[2], value);
    }
  }
  `}var upe=(r,e)=>r?`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol * ${e});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRow + innerRow,
          kStart + inputCol * ${e});
        `,ppe=(r,e,t,o)=>{if(r)return`
      for (var k = 0; k < ${o}; k++) {
        let BCached0 = mm_Bsub[k][tileCol];
        let ACached0 = mm_Asub[k][localRow];
        for (var i = 0; i < ${t}; i++) {
          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);
        }
      }`;{let n="",s="";for(let a=0;a<e;a++)n+=`let BCached${a} = mm_Bsub[k * ${e} + ${a}][tileCol];`,s+=`acc[i] = fma(BCached${a}, vec4<f32>(ACached[${a}]), acc[i]);`;return`
      for (var k = 0; k < ${o/e}; k++) {
        ${n}
        for (var i = 0; i < ${t}; i++) {
          let ACached = mm_Asub[tileRow + i][k];
          ${s}
        }
      }`}};function Fp(r,e,t=!1,o=32,n=!1,s=32,a=!1){let i=e[1]*r[1],p=e[0]*r[0],u=t?i:o,l=t?o:i,c=u/e[0],m=o/e[1],d=r[1],f=r[0];return y.assert((t&&c===4&&r[1]===4||!t&&(c===3||c===4))&&u%e[0]===0&&o%e[1]===0&&r[0]===4,()=>`If transposeA ${t} is true, innerElementSize ${c} and workPerThread[1] ${r[1]} must be 4.
          Otherwise, innerElementSize ${c} must be 3 or 4.
      tileAWidth ${u} must be divisible by workgroupSize[0]${e[0]}. tileInner ${o} must be divisible by workgroupSize[1] ${e[1]}. colPerThread ${r[0]} must be 4.`),`
  var<workgroup> mm_Asub : array<array<vec${c}<f32>, ${u/c}>, ${l}>;
  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${p/r[0]}>, ${o}>;

  ${G()} {
    let localRow = i32(localId.y);
    let tileRow = localRow * ${d};
    let tileCol = i32(localId.x);

    let globalRow = i32(globalId.y) * ${d};
    let globalCol = i32(globalId.x) * ${f};
    let batch = ${n?"0":"i32(globalId.z)"};
    let batchA = ${n||!a?"batch":"batch % uniforms.aShape[0]"};
    let batchB = ${n||!a?"batch":"batch % uniforms.bShape[0]"};
    let globalRowStart = i32(workgroupId.y) * ${i};

    let numTiles = ${n?`${Math.ceil(s/o)}`:`(uniforms.dimInner - 1) / ${o} + 1`};
    var kStart = ${n?`i32(globalId.z) * ${s}`:"0"};

    var acc: array<vec4<f32>, ${d}>;

    // Loop over shared dimension.
    let tileRowB = localRow * ${m};
    for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < ${d}; innerRow++) {
            let inputRow = tileRow + innerRow;
            let inputCol = tileCol;
            ${upe(t,c)}
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${m}; innerRow++) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);
        }
        kStart = kStart + ${o};
        workgroupBarrier();

        // Compute acc values for a single thread.
        ${ppe(t,c,d,o)}
        workgroupBarrier();
    }

    for (var innerRow = 0; innerRow < ${d}; innerRow++) {
        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
    }
  }`}var Hz=r=>r?`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol);
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRowStart + inputRow,
          kStart + inputCol);
        `,lpe=r=>r?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];";function Pp(r,e,t=!1,o=32,n=!1,s=32,a=!1,i=!1){let p=r[1]*e[1],u=r[0]*e[0],l=t?p:o,c=t?o:p;y.assert(c%e[1]===0&&l%e[0]===0&&o%e[1]===0,()=>`tileAHight ${c} must be divisible by workgroupSize[1]${e[1]}, tileAWidth ${l} must be divisible by workgroupSize[0]${e[0]}, tileInner ${o} must be divisible by workgroupSize[1]${e[1]}`);let m=c/e[1],d=l/e[0],f=o/e[1],h=r[1],g=r[0],x=a?`
      let localRow = i32(localId.y);
      let localCol = i32(localId.x);
      let globalRowStart = i32(workgroupId.y) * ${p};
      let globalColStart = i32(workgroupId.x) * ${u};

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var inputRow = localRow; inputRow < ${c}; inputRow = inputRow + ${e[1]}) {
          for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${e[0]}) {
            ${Hz(t)}
          }
        }
        // Load one tile of B into local memory.
        for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${e[1]}) {
              for (var inputCol = localCol; inputCol < ${u}; inputCol = inputCol + ${e[0]}) {
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
              kStart + inputRow,
              globalColStart + inputCol);
          }
        }
        kStart = kStart + ${o};
        workgroupBarrier();

        // Compute acc values for a single thread.
        var BCached : array<f32, ${g}>;
        for (var k = 0; k < ${o}; k++) {
          for (var inner = 0; inner < ${g}; inner++) {
            BCached[inner] = mm_Bsub[k][localCol + inner * ${e[0]}];
          }
          for (var innerRow = 0; innerRow < ${h}; innerRow++) {
            let ACached = ${t?`mm_Asub[k][localRow + innerRow * ${e[1]}];`:`mm_Asub[localRow + innerRow * ${e[1]}][k];`}
            for (var innerCol = 0; innerCol < ${g}; innerCol++) {
              acc[innerRow][innerCol] =
                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
            }
          }
        }
        workgroupBarrier();
      }
      for (var innerRow = 0; innerRow < ${h}; innerRow++) {
        let gRow = globalRowStart + localRow + innerRow * ${e[1]};
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          let gCol = globalColStart + localCol + innerCol * ${e[0]};
          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
        }
      }
      `:`
  let tileRow = i32(localId.y) * ${h};
  let tileCol = i32(localId.x) * ${g};

  let globalRow = i32(globalId.y) * ${h};
  let globalCol = i32(globalId.x) * ${g};
  let globalRowStart = i32(workgroupId.y) * ${p};

  let tileRowA = i32(localId.y) * ${m};
  let tileColA = i32(localId.x) * ${d};
  let tileRowB = i32(localId.y) * ${f};
  // Loop over shared dimension.
  for (var t = 0; t < numTiles; t++) {
    // Load one tile of A into local memory.
    for (var innerRow = 0; innerRow < ${m}; innerRow++) {
      for (var innerCol = 0; innerCol < ${d}; innerCol++) {
        let inputRow = tileRowA + innerRow;
        let inputCol = tileColA + innerCol;
        ${Hz(t)}
      }
    }

    // Load one tile of B into local memory.
    for (var innerRow = 0; innerRow < ${f}; innerRow++) {
      for (var innerCol = 0; innerCol < ${g}; innerCol++) {
        let inputRow = tileRowB + innerRow;
        let inputCol = tileCol + innerCol;
        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
          kStart + inputRow,
          globalCol + innerCol);
      }
    }
    kStart = kStart + ${o};
    workgroupBarrier();

    // Compute acc values for a single thread.
    var BCached : array<f32, ${g}>;
    for (var k = 0; k < ${o}; k++) {
      for (var inner = 0; inner < ${g}; inner++) {
        BCached[inner] = mm_Bsub[k][tileCol + inner];
      }

      for (var innerRow = 0; innerRow < ${h}; innerRow++) {
        ${lpe(t)}
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          acc[innerRow][innerCol] =
              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
        }
      }
    }

    workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < ${h}; innerRow++) {
    for (var innerCol = 0; innerCol < ${g}; innerCol++) {
      mm_write(batch, globalRow + innerRow, globalCol + innerCol,
          acc[innerRow][innerCol]);
    }
  }
  `;return`
    var<workgroup> mm_Asub : array<array<f32, ${l}>, ${c}>;
    var<workgroup> mm_Bsub : array<array<f32, ${u}>, ${o}>;

    ${G()} {
      let batch = ${n?"0":"i32(globalId.z)"};
      let batchA = ${n||!i?"batch":"batch % uniforms.aShape[0]"};
      let batchB = ${n||!i?"batch":"batch % uniforms.bShape[0]"};
      let numTiles = ${n?`${Math.ceil(s/o)}`:`(uniforms.dimInner - 1) / ${o} + 1`};
      var kStart = ${n?`i32(globalId.z) * ${s}`:"0"};

      var acc : array<array<f32, ${g}>, ${h}>;

      // Without this initialization strange values show up in acc.
      for (var innerRow = 0; innerRow < ${h}; innerRow++) {
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          acc[innerRow][innerCol] = 0.0;
        }
      }
      ${x}
    }
  `}var cpe=r=>r?`
      mm_readA(batchA, colA, globalRow),
      mm_readA(batchA, colA + 1, globalRow),
      mm_readA(batchA, colA + 2, globalRow),
      mm_readA(batchA, colA + 3, globalRow)
  `:`
      mm_readA(batchA, globalRow, colA),
      mm_readA(batchA, globalRow, colA + 1),
      mm_readA(batchA, globalRow, colA + 2),
      mm_readA(batchA, globalRow, colA + 3)
  `;function mpe(r,e=!1){y.assert(r[1]===1&&r[2]===1,()=>`A linear work group size is required. But got ${r}.`);let t=r[0]*4;return`
    var<workgroup> mm_Asub : array<vec4<f32>, ${r[0]}>;

    ${G()} {
      let tileCol = i32(localId.x);
      let globalCol = i32(globalId.x);
      let globalRow = i32(globalId.y);

      let numTiles = (uniforms.dimInner - 1) / ${t} + 1;
      let batch = i32(globalId.z);
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      // Without this initialization strange values show up in acc.
      var acc = 0.0;

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        let colA = t * ${t} + tileCol * 4;
        mm_Asub[tileCol] = vec4<f32>(${cpe(e)});
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < ${t/4}; k++) {
          let rowB = t * ${t} + k * 4;
          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),
                              mm_readB(batchB, rowB + 1, globalCol),
                              mm_readB(batchB, rowB + 2, globalCol),
                              mm_readB(batchB, rowB + 3, globalCol));

          let ACached = mm_Asub[k];
          acc = acc + dot(ACached, BCached);
        }

        workgroupBarrier();
      }

      mm_write(batch, globalRow, globalCol, acc);
    }
  `}var ax=class{constructor(e,t,o=!1,n=!1,s=null,a=null,i=null,p=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0]};let u=o?e[1]:e[2];if(this.isVec4=(u%4===0&&!o||t[1]%4===0&&o)&&t[2]%4===0&&!n,this.outputComponent=this.isVec4?4:1,this.isVectorA=t[1]===1&&!o,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workgroupSize=[32,1,1];else{let m=lv(t[1],u,t[2],o);this.workgroupSize=m.workgroupSize,this.elementsPerThread=m.elementsPerThread}this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread);let l=s!=null,c=i!=null;l&&this.variableNames.push("bias"),c&&this.variableNames.push("preluActivationWeights"),this.sequentialAccessByThreads=p,this.transposeA=o,this.transposeB=n,this.addBias=l,this.activation=a,this.hasPreluActivationWeights=c,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(t[1],t[2],u),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${o}_${n}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`}getShapeFit(e,t,o){let n=this.workgroupSize[1]*this.elementsPerThread[1],s=this.workgroupSize[0]*this.elementsPerThread[0];!this.isVec4&&this.isVectorA?this.tileInner=this.workgroupSize[0]*4:this.tileInner=s;let a=e%n===0,i=t%s===0,p=o%this.tileInner===0;return[a,i,p]}getUserCode(){return`
      ${gr(this.activation,this.hasPreluActivationWeights,this.isVec4)}
      ${Sm(this.addBias,this.activation,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}
      ${this.isVec4?Fp(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,!0):this.isVectorA?mpe(this.workgroupSize,this.transposeA):Pp(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.sequentialAccessByThreads,!0)}
    `}};function dpe(r){return`
    var<workgroup> sumValues : array<f32, ${r}>;
    ${G()} {
      let coords = getOutputCoords();
      let batch = coords[0];
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      let row = coords[1];
      let col = coords[2];
      var sum = 0.0;
      let Length = uniforms.dimInner;
      for (var k = i32(localId.x); k < Length; k = k + ${r}) {
        let dataA = mm_readA(batchA, row, k);
        let dataB = mm_readB(batchB, k, col);
        sum = sum + dataA * dataB;
      }
      sumValues[localId.x] = sum;
      workgroupBarrier();

      for(var currentSize = ${r/2}u; currentSize > 1u;
          currentSize = currentSize / 2u) {
        if (localId.x < currentSize)
        {
          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];
        }
        workgroupBarrier();
      }

      if (localId.x == 0u) {
        sum = sumValues[0] + sumValues[1];
        mm_write(batch, row, col, sum);
      }
    }
  `}var ix=class{constructor(e,t=!1,o=!1,n=null,s=null,a=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize);let i=n!=null,p=a!=null;i&&this.variableNames.push("bias"),p&&this.variableNames.push("preluActivationWeights"),this.transposeA=t,this.transposeB=o,this.addBias=i,this.activation=s,this.hasPreluActivationWeights=p,this.shaderKey=`matMulReduce_${this.activation}_${t}_${o}`}getUserCode(){return`
      ${gr(this.activation,this.hasPreluActivationWeights)}
      ${Sm(this.addBias,this.activation,this.transposeA,this.transposeB)}
      ${dpe(this.workgroupSize[0])}
    `}};function fpe(r){let e=r[1],t=r[0],o=e>t?e:t;return`
  var<workgroup> mm_Asub : array<array<f32, ${o}>, ${e}>;
  var<workgroup> mm_Bsub : array<array<f32, ${t}>, ${o}>;

  // If the output size is small for matrix multiplication, avoid to use vec4
  // and handle some elements per thread to optimally utilize the ALU.
  // Read data from global memory to registers firstly, then store them into
  // shared memory, so it is instruction-Level parallelism for arithmetic
  // operations and others handle IO operations between barrier api, makes ALU
  // and load/store units work simultaneously, could improves the performance.
  ${G()} {
    let tileRow = i32(localId.y);
    let tileCol = i32(localId.x);
    let globalRow = i32(globalId.y);
    let globalCol = i32(globalId.x);
    let batch = i32(globalId.z);
    let batchA = batch % uniforms.aShape[0];
    let batchB = batch % uniforms.bShape[0];

    // uniforms.dimInner should be greater than 0.
    let numTiles = (uniforms.dimInner - 1) / ${o} + 1;
    var acc = 0.0;

    var globalColA = tileCol;
    var globalRowB = 0;
    var regA = mm_readA(batchA, globalRow, globalColA);
    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
    globalColA = globalColA + ${o};
    globalRowB = globalRowB + ${o};

    for (var t = 0; t < numTiles; t = t + 1) {
      mm_Asub[tileRow][tileCol] = regA;
      mm_Bsub[2 * tileRow][tileCol] = regB0;
      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;

      workgroupBarrier();

      regA = mm_readA(batchA, globalRow, globalColA);
      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
      globalColA = globalColA + ${o};
      globalRowB = globalRowB + ${o};

      for (var k = 0; k < ${o}; k = k + 1) {
        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];
      }
      workgroupBarrier();
    }

    mm_write(batch, globalRow, globalCol, acc);
  }
  `}var ux=class{constructor(e,t,o,n=!1,s=!1,a=null,i=null,p=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[16,8,1],this.outputShape=o,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(o[2]/this.workgroupSize[0]),Math.ceil(o[1]/this.workgroupSize[1]),o[0]];let u=a!=null;u&&this.variableNames.push("bias");let l=p!=null;l&&this.variableNames.push("preluActivationWeights"),this.transposeA=n,this.transposeB=s,this.addBias=u,this.activation=i,this.hasPreluActivationWeights=l,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${n}_${s}`}getUserCode(){return`
      ${gr(this.activation,this.hasPreluActivationWeights)}
      ${Sm(this.addBias,this.activation,this.transposeA,this.transposeB)}
      ${fpe(this.workgroupSize)}
    `}};var px=class{constructor(e,t,o=!1,n=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[8,8,1],this.atomic=!0,this.splitedDimInner=128,y.assert(e[0]===1,()=>"MatMulSplitKProgram only supports batch = 1."),this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0,3]};let s=(o&&this.outputShape[1]%4===0||!o&&t%4===0)&&this.outputShape[2]%4===0;this.elementsPerThread=[4,4,this.splitedDimInner],this.outputComponent=s?4:1,s||(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=H(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],t],this.workgroupSize,this.elementsPerThread),this.transposeA=o,this.transposeB=n,this.shaderKey=`matMulSplitK_${o}_${n}_${this.elementsPerThread}_${this.outputComponent}`}getUserCode(){let e=this.outputComponent;return`
      ${mv(!1,this.transposeB,!1,!1,!1,e)}
      fn mm_write(batch: i32, row : i32, col : i32, value : ${Ae(e)}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
          let coords = vec3<i32>(batch, row, col);
          let flatIndex = getOutputIndexFromCoords(coords);
          // The problem is that we should initialize output to zero before using.
          // Otherwise, the original value will be added to the result.
          for (var i = 0; i < ${e}; i = i + 1) {
            ${oo("&result[flatIndex + i]",`${e>1?"value[i]":"value"}`,"float32")}
          }
        }
      }
      ${e===4?Fp(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner):Pp(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner)}
    `}},lx=class{constructor(e,t=null,o=null,n=null){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=t!=null,this.hasPreluActivationWeights=n!=null,this.activation=o,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`biasActivation_${o}`}getUserCode(){return`
    ${gr(this.activation,this.hasPreluActivationWeights)}
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        var value = getXByOutputIndex(index);
        ${no(this.addBias,this.activation)}
        setOutputAtIndex(index, value);
      }
    }
    `}};var cx=class{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="fill"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.size) {
        setOutputAtIndex(index, uniforms.value);
      }
    }
  `}};function Nt(r){let{backend:e,attrs:t}=r,{shape:o,value:n}=t,{dtype:s}=t;if(s=s||y.inferDtype(n),s==="string"){let a=y.getArrayFromDType(s,y.sizeFromShape(o));return a.fill(n),e.makeTensorInfo(o,s,a)}else{let a=new cx(o),i=[{type:"float32",data:[n]}];return e.runWebGPUProgram(a,[],s,i)}}var Kz={kernelName:da,backendName:"webgpu",kernelFunc:Nt};function le(r){let{inputs:e,attrs:t}=r,{x:o}=e,{shape:n}=t,s=y.sizeFromShape(o.shape),a=y.inferFromImplicitShape(n,s),i=y.sizeFromShape(a);return y.assert(s===i,()=>`The new shape (${a}) has ${i} elements and the old shape (${o.shape}) has ${s} elements. The new shape and old shape must have the same number of elements.`),r.backend.incRef(o.dataId),{dataId:o.dataId,shape:a,dtype:o.dtype}}var qz={kernelName:Ca,backendName:"webgpu",kernelFunc:le};function Op({a:r,b:e,transposeA:t,transposeB:o,backend:n,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:p=null}){let u=r.shape.length,l=e.shape.length,c=t?r.shape[u-2]:r.shape[u-1],m=o?e.shape[l-1]:e.shape[l-2],d=t?r.shape[u-1]:r.shape[u-2],f=o?e.shape[l-2]:e.shape[l-1],h=r.shape.slice(0,-2),g=e.shape.slice(0,-2),x=y.sizeFromShape(h),b=y.sizeFromShape(g),S=kr.assertAndGetBroadcastShape(r.shape.slice(0,-2),e.shape.slice(0,-2)).concat([d,f]);y.assert(c===m,()=>`Error in matMul: inner shapes (${c}) and (${m}) of Tensors with shapes ${r.shape} and ${e.shape} and transposeA=${t} and transposeB=${o} must match.`);let k=t?[x,c,d]:[x,d,c],T=o?[b,f,m]:[b,m,f],E=le({inputs:{x:r},backend:n,attrs:{shape:k}}),R=le({inputs:{x:e},backend:n,attrs:{shape:T}}),D=[E,R],F=Math.max(x,b),O=[E,R],M=[{type:"int32",data:[d]},{type:"int32",data:[f]},{type:"int32",data:[c]}],L,B,z=[F,d,f],U=A().get("WEBGPU_MATMUL_PROGRAM_TYPE");if(U<0){let q=A().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),Y=q>0?q:n.thresholdToIncreaseWorkgroups,J=F*Math.ceil(d/32)*Math.ceil(f/32);J<=Y||d<=8&&J<=Y*2?F*d*f<=128?U=pn.MatMulReduceProgram:F===1&&m>=2e3?U=pn.MatMulSplitKProgram:U=pn.MatMulSmallOutputSizeProgram:U=pn.MatMulPackedProgram}switch(U){case pn.MatMulReduceProgram:L=new ix(z,t,o,s,p,a);break;case pn.MatMulSplitKProgram:{if(B=Nt({backend:n,attrs:{shape:z,value:0,dtype:r.dtype}}),L=new px(z,m,t,o),s||p){B=n.runWebGPUProgram(L,O,r.dtype,M,B);let Y=new lx(B.shape,s,p,a),J=null,re=[B];s&&re.push(s),a&&re.push(a),p==="leakyrelu"&&(J=[{type:"float32",data:[i]}],Y.uniforms+=" alpha : f32,");let ne=n.runWebGPUProgram(Y,re,B.dtype,J);D.push(B);let ee=le({inputs:{x:ne},backend:n,attrs:{shape:S}});D.push(ne);for(let oe of D)n.disposeData(oe.dataId);return ee}break}case pn.MatMulSmallOutputSizeProgram:L=new ux(k,T,z,t,o,s,p,a);break;case pn.MatMulPackedProgram:let q=n.adapterInfo.isIntel();L=new ax(k,z,t,o,s,p,a,q);break;default:throw new Error(`Unsupported MatMulProgramType ${U}.`)}s&&O.push(s),a&&O.push(a),p==="leakyrelu"&&(M.push({type:"float32",data:[i]}),L.uniforms+=" alpha : f32,"),B=n.runWebGPUProgram(L,O,r.dtype,M,B);let j=le({inputs:{x:B},backend:n,attrs:{shape:S}});D.push(B);for(let q of D)n.disposeData(q.dataId);return j}function hpe(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s,bias:a,preluActivationWeights:i}=e,{transposeA:p,transposeB:u,activation:l,leakyreluAlpha:c}=o;return Op({a:n,b:s,transposeA:p,transposeB:u,backend:t,bias:a,preluActivationWeights:i,leakyreluAlpha:c,activation:l})}var jz={kernelName:qo,backendName:"webgpu",kernelFunc:hpe};var Im=class{constructor(e,t,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=C.assertAndGetBroadcastShape(t,o),this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`binaryOpComplex_${e}`,this.op=e}getUserCode(){return`
      fn binaryOpComplex(
          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {
        ${ec(this.op,!1)}
      }

      ${G("index")} {
        if(index < uniforms.size) {
          let areal = getARealByOutputIndex(index);
          let aimag = getAImagByOutputIndex(index);
          let breal = getBRealByOutputIndex(index);
          let bimag = getBImagByOutputIndex(index);
          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));
        }
      }
    `}};var Di=class{constructor(e,t,o){if(this.size=!0,this.variableNames=["A","B"],this.outputShape=C.assertAndGetBroadcastShape(t,o),this.dispatchLayout=X(this.outputShape),this.op=e,this.useSharedMemoryWithA=t.length<=1&&o.length>1&&t[0]<128,this.useSharedMemoryWithB=o.length<=1&&t.length>1&&o[0]<128,this.useSharedMemoryWithA||this.useSharedMemoryWithB)this.outputComponent=1,this.variableComponents=[1,1],this.lastDimensionSize=this.useSharedMemoryWithB?o[0]:t[0],this.shaderKey=`binary_${e}_${this.lastDimensionSize}`,this.type="shared",this.workgroupSize=[256,1,1];else{let n=t.length>0&&t[t.length-1]%4===0,s=o.length>0&&o[o.length-1]%4===0;n&&s?(this.outputComponent=4,this.variableComponents=[4,4]):n&&(y.isScalarShape(o)||o[o.length-1]===1)||s&&(y.isScalarShape(t)||t[t.length-1]===1)?(this.outputComponent=4,this.variableComponents=n?[4,1]:[1,4]):(this.outputComponent=1,this.variableComponents=[1,1]),this.type="nonshared",this.shaderKey=`binary_${e}_${this.variableComponents}`,this.workgroupSize=[128,1,1]}this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.outputComponent,1,1])}getUserCode(){let e,t=this.outputComponent===4?"vec4<f32>":"f32",o=`
    fn binaryOperation(a : ${t}, b : ${t}) -> ${t} {
      ${ec(this.op,this.outputComponent===4)}
    };
    `;if(this.type==="shared"){let n=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",s=this.useSharedMemoryWithB?`let a = getAByOutputIndex(index);
          let b = sharedBuf[${n}];`:`let a = sharedBuf[${n}];
          let b = getBByOutputIndex(index);`;e=`
        ${o}
        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;
        ${G("index")} {
          // Fill in the shared memory buffer.
          let localIndex = i32(localId.x);
          if(localIndex < ${this.lastDimensionSize}) {
            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);
          }
          workgroupBarrier();

          if(index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            ${s}
            setOutputAtIndex(index, binaryOperation(a, b));
          }
        }
        `}else e=`
       ${o}
       ${G("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index * ${this.outputComponent});
           let a = ${t}(getAByOutputCoords(coords));
           let b = ${t}(getBByOutputCoords(coords));
           setOutputAtIndex(index, binaryOperation(a, b));
         }
       }
       `;return e}};function Pt(r){let{inputs:e}=r,{x:t}=e;return r.backend.incRef(t.dataId),{dataId:t.dataId,shape:t.shape,dtype:t.dtype}}var Xz={kernelName:vo,backendName:"webgpu",kernelFunc:Pt};function Uo(r){let{inputs:e,backend:t}=r,{real:o,imag:n}=e,s=t.makeTensorInfo(o.shape,"complex64"),a=t.tensorMap.get(s.dataId),i=Pt({inputs:{x:o},backend:t}),p=Pt({inputs:{x:n},backend:t});return a.complexTensorInfos={real:i,imag:p},s}var Yz={kernelName:ei,backendName:"webgpu",kernelFunc:Uo};var so=class{constructor(e,t,o=""){this.variableNames=["A"],this.size=!0;let n=128;this.workgroupSize=[n,1,1],this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.op=t,o!==""&&(this.uniforms=o),this.shaderKey=`unary_${t}`}getUserCode(){return`
      fn unaryOperation(a : f32) -> f32 {
        ${Ri(this.op,!1)}
      }
      ${G("index")} {
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          setOutputAtIndex(index, unaryOperation(a));
        }
      }
      `}};function ye({opType:r,cpuKernelImpl:e,dtype:t}){return({inputs:o,backend:n})=>{let{x:s}=o,a=n,i=t||s.dtype;if(a.shouldExecuteOnCPU([s])&&e!=null){let u=a.tensorMap.get(s.dataId),l=e(u.values,i);return a.makeTensorInfo(s.shape,i,l)}let p=new so(s.shape,r);return a.runWebGPUProgram(p,[s],i)}}function tt({opType:r,cpuKernelImpl:e,supportsComplex:t=!1,dtype:o}){return({inputs:n,backend:s})=>{let{a,b:i}=n,p=s;if(t&&a.dtype==="complex64"){let c=p.tensorMap.get(a.dataId),m=p.tensorMap.get(i.dataId),d,f;if(r!==fe.MUL)[d,f]=[[c.complexTensorInfos.real,m.complexTensorInfos.real],[c.complexTensorInfos.imag,m.complexTensorInfos.imag]].map(g=>{let[x,b]=g,w={dataId:x.dataId,dtype:x.dtype,shape:a.shape},S={dataId:b.dataId,dtype:b.dtype,shape:i.shape},k=new Di(r,a.shape,i.shape);return p.runWebGPUProgram(k,[w,S],pt(x.dtype,b.dtype))});else{let g=new Im(fe.COMPLEX_MULTIPLY_REAL,a.shape,i.shape),x=new Im(fe.COMPLEX_MULTIPLY_IMAG,a.shape,i.shape),b=[{dataId:c.complexTensorInfos.real.dataId,dtype:c.complexTensorInfos.real.dtype,shape:a.shape},{dataId:c.complexTensorInfos.imag.dataId,dtype:c.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:m.complexTensorInfos.real.dataId,dtype:m.complexTensorInfos.real.dtype,shape:i.shape},{dataId:m.complexTensorInfos.imag.dataId,dtype:m.complexTensorInfos.imag.dtype,shape:i.shape}];d=p.runWebGPUProgram(g,b,"float32"),f=p.runWebGPUProgram(x,b,"float32")}let h=Uo({inputs:{real:d,imag:f},backend:p});return p.disposeData(d.dataId),p.disposeData(f.dataId),h}let u=o||pt(a.dtype,i.dtype);if((a.dtype==="string"||i.dtype==="string"||p.shouldExecuteOnCPU([a,i]))&&e!=null){let c=p.tensorMap.get(a.dataId).values,m=p.tensorMap.get(i.dataId).values,d=a.dtype==="string"?C.fromUint8ToStringArray(c):c,f=a.dtype==="string"?C.fromUint8ToStringArray(m):m,[h,g]=e(a.shape,i.shape,d,f,u);return p.makeTensorInfo(g,u,h)}let l=new Di(r,a.shape,i.shape);return p.runWebGPUProgram(l,[a,i],u)}}var Lv={};qe(Lv,{addImpl:()=>hv,bincountImpl:()=>Jz,bincountReduceImpl:()=>eV,bitwiseAndImpl:()=>gv,castImpl:()=>fv,ceilImpl:()=>xv,concatImpl:()=>tV,equalImpl:()=>yv,expImpl:()=>bv,expm1Impl:()=>Cv,floorDivImpl:()=>Sv,floorImpl:()=>wv,gatherNdImpl:()=>rV,gatherV2Impl:()=>oV,greaterEqualImpl:()=>vv,greaterImpl:()=>Iv,lessEqualImpl:()=>Nv,lessImpl:()=>kv,linSpaceImpl:()=>nV,logImpl:()=>Tv,maxImpl:()=>sV,maximumImpl:()=>_v,minimumImpl:()=>Ev,multiplyImpl:()=>km,negImpl:()=>aV,notEqualImpl:()=>$v,prodImpl:()=>iV,raggedGatherImpl:()=>pV,raggedRangeImpl:()=>cV,raggedTensorToTensorImpl:()=>fV,rangeImpl:()=>hV,rsqrtImpl:()=>Av,scatterImpl:()=>gV,sigmoidImpl:()=>xV,simpleAbsImpl:()=>Qz,sliceImpl:()=>yV,sparseFillEmptyRowsImpl:()=>bV,sparseReshapeImpl:()=>CV,sparseSegmentReductionImpl:()=>wV,sqrtImpl:()=>SV,squaredDifferenceImpl:()=>Fv,staticRegexReplaceImpl:()=>Pv,stridedSliceImpl:()=>IV,stringNGramsImpl:()=>vV,stringSplitImpl:()=>kV,stringToHashBucketFastImpl:()=>NV,subImpl:()=>Mv,tileImpl:()=>TV,topKImpl:()=>EV,transposeImpl:()=>Rv,uniqueImpl:()=>$V});function Ai(r,e){Array.isArray(r)||(r=[r]),r.forEach(t=>{t!=null&&y.assert(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the CPU backend.`)})}function Qz(r){let e=new Float32Array(r.length);for(let t=0;t<r.length;++t)e[t]=Math.abs(r[t]);return e}function ht(r){return(e,t,o,n,s)=>{let a=C.assertAndGetBroadcastShape(e,t),i=a.length,p=y.computeStrides(a),u=y.sizeFromShape(a),l=y.getTypedArrayFromDType(s,u),c=e.length,m=t.length,d=y.computeStrides(e),f=y.computeStrides(t),h=C.getBroadcastDims(e,a),g=C.getBroadcastDims(t,a);if(h.length+g.length===0)for(let x=0;x<l.length;++x)l[x]=r(o[x%o.length],n[x%n.length]);else for(let x=0;x<l.length;++x){let b=y.indexToLoc(x,i,p),w=b.slice(-c);h.forEach(E=>w[E]=0);let S=y.locToIndex(w,c,d),k=b.slice(-m);g.forEach(E=>k[E]=0);let T=y.locToIndex(k,m,f);l[x]=r(o[S],n[T])}return[l,a]}}function tc(r){let{inputs:e,backend:t}=r,{real:o,imag:n}=e,s=t.data.get(o.dataId).values,a=t.data.get(n.dataId).values,i=t.makeTensorInfo(o.shape,"complex64"),p=t.data.get(i.dataId);return p.complexTensorInfos={real:t.makeTensorInfo(o.shape,"float32",s),imag:t.makeTensorInfo(n.shape,"float32",a)},i}function mx(r,e,t="float32"){if(t==="complex64"){let n=mx(r,e,"float32"),s=mx(r,e,"float32");return tc({inputs:{real:n,imag:s},backend:r})}let o=y.makeZerosTypedArray(y.sizeFromShape(e),t);return r.makeTensorInfo(e,t,o)}function dv(r){let{inputs:e,backend:t}=r,{x:o}=e;return t.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function Zz(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.data.get(o.dataId).complexTensorInfos.real,s=t.data.get(n.dataId).values;return t.makeTensorInfo(n.shape,n.dtype,s)}function fv(r,e,t,o){if(o==="int32"){let n=Int32Array.from(r);return[e,"int32",n]}if(o==="bool"){let n=y.toTypedArray([0],t),[s,a]=ht((i,p)=>i!==p?1:0)(e,[],r,n,"bool");return[a,"bool",s]}throw new Error(`Error in Cast: failed to cast ${t} to ${o}`)}function vm(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return dv({inputs:{x:n},backend:t});let l=mx(t,n.shape,n.dtype),c=vm({inputs:{x:n},backend:t,attrs:{dtype:"float32"}}),m=tc({inputs:{real:c,imag:l},backend:t});return t.disposeIntermediateTensorInfo(l),t.disposeIntermediateTensorInfo(c),m}if(n.dtype==="complex64"){let l=Zz({inputs:{input:n},backend:t}),c=vm({inputs:{x:l},backend:t,attrs:{dtype:s}});return t.disposeIntermediateTensorInfo(l),c}if(!y.hasEncodingLoss(n.dtype,s)){let l=dv({inputs:{x:n},backend:t});return{dataId:l.dataId,shape:l.shape,dtype:s}}let a=t.data.get(n.dataId).values,[i,p,u]=fv(a,n.shape,n.dtype,s);return t.makeTensorInfo(i,p,u)}function wt(r,e,t,o){return t==null?({inputs:n,backend:s})=>{let{a,b:i}=n,p=s;Ai([a,i],r);let u=p.data.get(a.dataId).values,l=p.data.get(i.dataId).values,c=a.dtype==="string"?C.fromUint8ToStringArray(u):u,m=a.dtype==="string"?C.fromUint8ToStringArray(l):l,d=o||a.dtype,[f,h]=e(a.shape,i.shape,c,m,d);return p.makeTensorInfo(h,d,f)}:({inputs:n,backend:s})=>{let{a,b:i}=n,p=s;if(a.dtype==="complex64"||i.dtype==="complex64"){let u=vm({inputs:{x:a},backend:p,attrs:{dtype:"complex64"}}),l=p.data.get(u.dataId),c=l.complexTensorInfos.real,m=l.complexTensorInfos.imag,d=p.data.get(c.dataId).values,f=p.data.get(m.dataId).values,h=vm({inputs:{x:i},backend:p,attrs:{dtype:"complex64"}}),g=p.data.get(h.dataId),x=g.complexTensorInfos.real,b=g.complexTensorInfos.imag,w=p.data.get(x.dataId).values,S=p.data.get(b.dataId).values,[k,T,E]=t(a.shape,i.shape,d,f,w,S),R=p.makeTensorInfo(E,"float32",k),D=p.makeTensorInfo(E,"float32",T),F=tc({inputs:{real:R,imag:D},backend:p});return p.disposeIntermediateTensorInfo(u),p.disposeIntermediateTensorInfo(h),p.disposeIntermediateTensorInfo(R),p.disposeIntermediateTensorInfo(D),F}else{let u=p.data.get(a.dataId).values,l=p.data.get(i.dataId).values,c=o||a.dtype,[m,d]=e(a.shape,i.shape,u,l,c);return p.makeTensorInfo(d,c,m)}}}function rc(r){return(e,t,o,n,s,a)=>{let i=C.assertAndGetBroadcastShape(e,t),p=y.sizeFromShape(i),u=i.length,l=y.computeStrides(i),c=y.getTypedArrayFromDType("float32",p),m=y.getTypedArrayFromDType("float32",p),d=C.getBroadcastDims(e,i),f=C.getBroadcastDims(t,i),h=C.mergeRealAndImagArrays(o,n),g=C.mergeRealAndImagArrays(s,a),x=e.length,b=y.computeStrides(e),w=t.length,S=y.computeStrides(t);if(d.length+f.length===0)for(let k=0;k<c.length;k++){let T=k%h.length,E=k%g.length,R=r(h[T*2],h[T*2+1],g[E*2],g[E*2+1]);c[k]=R.real,m[k]=R.imag}else for(let k=0;k<c.length;k++){let T=y.indexToLoc(k,u,l),E=T.slice(-x);d.forEach(M=>E[M]=0);let R=y.locToIndex(E,x,b),D=T.slice(-w);f.forEach(M=>D[M]=0);let F=y.locToIndex(D,w,S),O=r(h[R*2],h[R*2+1],g[F*2],g[F*2+1]);c[k]=O.real,m[k]=O.imag}return[c,m,i]}}var hv=ht((r,e)=>r+e),gpe=rc((r,e,t,o)=>({real:r+t,imag:e+o})),uLt=wt(Rr,hv,gpe);function Jz(r,e,t,o,n){let s=y.sizeFromShape(o),a=y.makeZerosTypedArray(n,t);for(let i=0;i<r.length;i++){let p=r[i];if(p<0)throw new Error("Input x must be non-negative!");p>=n||(s>0?a[p]+=e[i]:a[p]+=1)}return a}function eV(r,e,t,o=!1){let n=r.shape[0],s=r.shape[1],a=ie([n,t],e.dtype);for(let i=0;i<n;i++)for(let p=0;p<s;p++){let u=r.get(i,p);if(u<0)throw new Error("Input x must be non-negative!");u>=t||(o?a.set(1,i,u):e.size>0?a.set(a.get(i,u)+e.get(i,p),i,u):a.set(a.get(i,u)+1,i,u))}return a}var gv=ht((r,e)=>r&e),hLt=wt(_n,gv);function Qt(r){return(e,t,o)=>{let n=y.getArrayFromDType(t,e.length);for(let s=0;s<e.length;++s)n[s]=r(e[s],o);return n}}function dx(r,e,t){let o=Qt(e);return Wr(r,o,t)}function Wr(r,e,t){return({inputs:o,attrs:n,backend:s})=>{let{x:a}=o;Ai(a,r);let i=s,p=i.data.get(a.dataId).values,u;if(a.dtype==="string"){if(!Array.isArray(p))throw new Error("String tensor's value was not an instance of Array");u=C.fromUint8ToStringArray(p)}else u=p;let l=t||a.dtype,c=e(u,l,n);return i.makeTensorInfo(a.shape,l,c)}}var xv=Qt(r=>Math.ceil(r)),NLt=Wr(go,xv);function tV(r,e,t,o){let n=y.getArrayFromDType(t,y.sizeFromShape(e));if(o&&t!=="string"){let s=0;r.forEach(a=>{let i=y.sizeFromShape(a.shape);n.set(a.vals,s),s+=i})}else{let s=0;r.forEach(a=>{let i=t==="string"?C.fromUint8ToStringArray(a.vals):a.vals,p=0;for(let u=0;u<a.shape[0];++u){let l=u*e[1]+s;for(let c=0;c<a.shape[1];++c)n[l+c]=i[p++]}s+=a.shape[1]})}return n}var yv=ht((r,e)=>r===e?1:0),ALt=wt(xo,yv,null,"bool");var bv=Qt(r=>Math.exp(r)),LLt=Wr(yo,bv,"float32");var Cv=Qt(r=>Math.expm1(r)),ULt=Wr(bo,Cv);var wv=Qt(r=>Math.floor(r)),jLt=Wr(Co,wv);var Sv=ht((r,e)=>Math.floor(r/e)),JLt=wt(wo,Sv,null,"int32");function rV(r,e,t,o,n,s,a,i,p){let u=ie([o,s],t);for(let l=0;l<o;l++){let c=[],m=0;for(let d=0;d<n;d++){let f=r[l*n+d];m+=f*a[d],c.push(f)}if(m<0||m>=p/s)throw new Error(`Invalid indices: ${c} does not index into ${i}`);for(let d=0;d<s;d++)u.values[l*s+d]=e.get(...e.indexToLoc(m*s+d))}return u}function oV(r,e,t){let o=ie(t,r.dtype);for(let n=0;n<o.size;++n){let a=o.indexToLoc(n).slice(),i=a[0],p=a[2],u=e.locToIndex([i,p]);a[2]=e.values[u];let l=r.locToIndex(a);0<=l&&l<r.values.length&&(o.values[n]=r.values[l])}return o}var Iv=ht((r,e)=>r>e?1:0),uBt=wt(So,Iv,null,"bool");var vv=ht((r,e)=>r>=e?1:0),dBt=wt(Io,vv,null,"bool");var kv=ht((r,e)=>r<e?1:0),yBt=wt(ko,kv,null,"bool");var Nv=ht((r,e)=>r<=e?1:0),IBt=wt(No,Nv,null,"bool");function nV(r,e,t){let o=(e-r)/(t-1),n=y.makeZerosTypedArray(t,"float32");n[0]=r;for(let s=1;s<n.length;s++)n[s]=n[s-1]+o;return n}var Tv=Qt(r=>Math.log(r)),$Bt=Wr(To,Tv);function sV(r,e,t,o){let n=y.getTypedArrayFromDType(o,y.sizeFromShape(t));for(let s=0;s<n.length;++s){let a=s*e,i=r[a];for(let p=0;p<e;++p){let u=r[a+p];(Number.isNaN(u)||u>i)&&(i=u)}n[s]=i}return n}var _v=ht((r,e)=>Math.max(r,e)),MBt=wt(_o,_v);var Ev=ht((r,e)=>Math.min(r,e)),WBt=wt(Eo,Ev);var km=ht((r,e)=>r*e),xpe=rc((r,e,t,o)=>({real:r*t-e*o,imag:r*o+e*t})),qBt=wt($o,km,xpe);function aV(r,e,t){let o=y.createScalarValue(-1,t);return km([],e,o,r,t)}var $v=ht((r,e)=>r!==e?1:0),rzt=wt(Ro,$v,null,"bool");function Rv(r,e,t,o,n){let s=e.length,a=y.sizeFromShape(e),i=y.computeStrides(e),p=y.computeStrides(n),u=y.getTypedArrayFromDType(t,y.sizeFromShape(n));for(let l=0;l<a;++l){let c=y.indexToLoc(l,s,i),m=new Array(c.length);for(let f=0;f<m.length;f++)m[f]=c[o[f]];let d=y.locToIndex(m,s,p);u[d]=r[l]}return u}function iV(r,e,t,o){let[n,s]=C.computeOutAndReduceShapes(r,o),a=pt(e,"int32"),i=y.makeZerosTypedArray(y.sizeFromShape(n),a),p=y.sizeFromShape(s);for(let u=0;u<i.length;++u){let l=u*p,c=1;for(let m=0;m<p;++m)c*=t[l+m];i[u]=c}return{outVals:i,outShape:n,outDtype:a}}function ype(r,e,t){r.forEach((o,n)=>{if(o<0||o>=t){let s=y.indexToLoc(n,e.length,y.computeStrides(e)).join(",");throw new Error(`indices[${s}] = ${o} is not in [0, ${t})`)}})}function bpe(r,e){for(let t=0;t<r.length;++t){let o=r[t],n=t===r.length-1?e:r[t+1].length;if(o.length===0)throw new Error("Ragged splits may not be empty");if(o[0]<0)throw new Error("Ragged splits must be non-negative");if(o[o.length-1]>n)throw new Error("Ragged splits must not point past values");for(let s=1;s<o.length;++s)if(o[s-1]>o[s])throw new Error("Ragged splits must be sorted in ascending order")}}function Cpe(r,e,t,o){let n=[],s=0,a=e.length-1+t.length,i=new Array(a).fill(null).map(()=>[0]);bpe(t,o);let p=1;for(let u=0;u<e.length-1;++u){p*=e[u];let l=e[u+1];for(let c=1;c<p+1;++c)i[u].push(c*l)}for(let u=0;u<r.length;++u){let l=r[u],c=r[u]+1;for(let m=0;m<t.length;++m){let d=t[m],f=m+e.length-1;if(f>=0){let h=i[f],g=h[h.length-1]-d[l];for(let x=l;x<c;++x)i[f].push(d[x+1]+g)}l=d[l],c=d[c]}c!==l&&(n.push([l,c]),s+=c-l)}return{outSplits:i,valueSlices:n,numValues:s}}function wpe(r){let e=[];for(let t=0;t<r.length;++t){let o=r[t].length,n=y.getArrayFromDType("int32",o);e.push(n),r[t].forEach((s,a)=>n[a]=s)}return e}function uV(r,e){let t=r.slice(0,e);for(;t.length<e;)t.push(1);for(let o=e;o<r.length;o++)t[e-1]*=r[o];return t}function Spe(r,e,t,o,n,s){let a=uV(e,2)[1],i=uV(s,2)[1],p=0;for(let u of t)for(let l=u[0];l<u[1];++l){for(let c=0;c<o;++c)n[p*i+c]=r[l*a+c];++p}}function Ipe(r,e,t,o,n){let s=e.slice();s[0]=n;let a=y.getArrayFromDType(t,y.sizeFromShape(s)),i=r.length,p=i===0?0:i/e[0];return Spe(r,e,o,p,a,s),[a,s]}function pV(r,e,t,o,n,s,a,i){if(r.length===0)throw new Error("paramsNestedSplits must be non empty");if(e[0].length===0)throw new Error("Split tensors must not be scalars");let p=e[0][0]-1;if(ype(s,a,p),o.length===0)throw new Error("params.rank must be nonzero");let u=o[0],{outSplits:l,valueSlices:c,numValues:m}=Cpe(s,a,r,u),d=wpe(l),f=Ipe(t,o,n,c,m);return[d,f[0],f[1]]}var lV=2147483647;function cV(r,e,t,o,n,s,a){if(e.length>1)throw new Error("starts must be a scalar or vector");if(n.length>1)throw new Error("limits must be a scalar or vector");if(a.length>1)throw new Error("deltas must be a scalar or vector");let i=e.length===0,p=n.length===0,u=a.length===0,l=[];i||l.push(e[0]),p||l.push(n[0]),u||l.push(a[0]);for(let g=1;g<l.length;++g)if(l[g]!==l[g-1])throw new Error("starts, limits, and deltas must have the same shape");let c=l.length===0?1:l[0],m=y.getArrayFromDType("int32",c+1);m[0]=0;for(let g=0;g<c;++g){let x=i?r[0]:r[g],b=p?o[0]:o[g],w=u?s[0]:s[g];if(w===0)throw new Error("Requires delta != 0");let S;if(w>0&&b<x||w<0&&b>x)S=0;else if(S=Math.ceil(Math.abs((b-x)/w)),S>lV)throw new Error(`Requires ((limit - start) / delta) <= ${lV}`);m[g+1]=m[g]+S}let d=m[c],f=y.getArrayFromDType(t,d),h=0;for(let g=0;g<c;++g){let x=m[g+1]-m[g],b=i?r[0]:r[g],w=u?s[0]:s[g];for(let S=0;S<x;++S)f[h++]=b,b+=w}return[m,f]}var ln=C.RowPartitionType,Dv=class r{constructor(e,t,o,n,s,a,i,p,u,l){this.shape=e,this.shapeShape=t,this.values=o,this.valuesShape=n,this.valuesDType=s,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=p,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=C.getRowPartitionTypesHelper(l),this.raggedRank=C.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===ln.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===ln.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){let t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case ln.VALUE_ROWIDS:return r.getMaxWidthValueRowID(t);case ln.ROW_SPLITS:return r.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${ln[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){let t=e.length;if(t===0||t===1)return 0;let o=0;for(let n=0;n<t-1;++n){let s=e[n+1]-e[n];s>o&&(o=s)}return o}static getMaxWidthValueRowID(e){let t=e.length;if(t===0)return 0;let o=0,n=e[0],s=0;for(let a=1;a<t;++a){let i=e[a];i!==n&&(n=i,s=Math.max(a-o,s),o=a)}return Math.max(t-o,s)}tensorShapeFromTensor(e,t,o=!0){if(t.length===0){if(e[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return dV(e,o)}calculateOutputSize(e){let t=this.valuesShape,o=this.defaultValueShape;C.validateDefaultValueShape(o,t);let n=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=C.combineRaggedTensorToTensorShapes(this.raggedRank,n,t);a[0]<0&&(a[0]=e);for(let i=1;i<=this.raggedRank;++i)a[i]<0&&(a[i]=this.getMaxWidth(i));return a}calculateFirstParentOutputIndex(e,t,o){let n=Math.min(e,o),s=[],a=0;for(let i=0;i<n;++i,a+=t)s.push(a);for(let i=n;i<e;++i)s.push(-1);return y.assert(s.length===e,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(e,t,o,n){let s=e.length,a=[];for(let i=0;i<s-1;++i){let p=e[i+1]-e[i],u=Math.min(n,p),l=t[i];l===-1&&(u=0);for(let c=0;c<u;++c)a.push(l),l+=o;for(let c=0;c<p-u;++c)a.push(-1)}if(s>0&&a.length!==e[s-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,o,n){let s=e.length,a=[];if(s===0)return[];let i=0,p=e[0];if(p>=t.length)throw new Error(`Got currentValueRowId=${p}, which is not less than ${t.length}`);let u=t[p];a.push(u);for(let l=1;l<s;++l){let c=e[l];if(c===p)u>=0&&(++i,i<n?u+=o:u=-1);else{if(i=0,p=c,c>=t.length)throw new Error(`Got nextValueRowId=${c} which is not less than ${t.length}`);u=t[c]}a.push(u)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,o,n){let s=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case ln.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,o,n);case ln.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,o,n);default:throw new Error(`Unsupported partition type: ${ln[a]}`)}}getFirstDimensionSize(){let e=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");let t=this.rowPartitionTypes[0];switch(t){case ln.FIRST_DIM_SIZE:return e[0];case ln.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case ln.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${ln[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");let t=this.getFirstDimensionSize(),o=this.calculateOutputSize(t),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let p=n.length-2;p>=0;--p)n[p]=n[p+1]*o[p+1];let s=dV(o,!1),a=y.getArrayFromDType(this.valuesDType,y.sizeFromShape(s));if(n[0]*o[0]>0){let p=this.calculateFirstParentOutputIndex(t,n[0],o[0]);for(let u=1;u<=this.raggedRank;++u)p=this.calculateOutputIndex(u-1,p,n[u],o[u]);this.setOutput(this.raggedRank,p,a,s)}return[s,a]}setOutput(e,t,o,n){if(o.length===0)return;let s=this.values,a=o,i=n.slice();i=i.slice(e+1);let p=y.sizeFromShape(i),u=t.length,l=this.defaultValue;if(l.length!==p&&l.length!==1){let f=this.defaultValueShape;De(()=>{let h=W(l,f);l=Oa(h,i).dataSync()})}let c=0,m=0,d=0;for(let f=0;f<=u;++f){let h=f<u?t[f]:-1;if(h===d){++d;continue}if(m<d){let g=s.subarray(c*p),x=a.subarray(m*p),b=(d-m)*p;mV(x,g,b)}if(f>=u){let g=o.length;h=Math.floor(g/p)}if(h>d)if(this.defaultValue.length===1)a.subarray(d*p,h*p).fill(this.defaultValue[0]),d=h;else for(;h>d;){let g=a.slice(d*p);mV(g,l,p),++d}h<0?(c=f+1,m=d):(c=f,m=d,d=m+1)}}};function mV(r,e,t){for(let o=0;o<t;o++)r[o]=e[o]}function dV(r,e){let t=[];for(let o of r){if(o<0){if(!e)throw new Error(`Dimension ${o} must be >= 0`);if(o<-1)throw new Error(`Dimension ${o} must be >= -1`);o=-1}t.push(o)}return t}function fV(r,e,t,o,n,s,a,i,p,u){return new Dv(r,e,t,o,n,s,a,i,p,u).compute()}function hV(r,e,t,o){let n=r===e,s=r<e&&t<0,a=e<r&&t>1;if(n||s||a)return y.makeZerosTypedArray(0,o);let i=Math.abs(Math.ceil((e-r)/t)),p=y.makeZerosTypedArray(i,o);e<r&&t===1&&(t=-1),p[0]=r;for(let u=1;u<p.length;u++)p[u]=p[u-1]+t;return p}var Av=Qt(r=>1/Math.sqrt(r)),Nzt=Wr(Do,Av);function gV(r,e,t,o,n,s,a,i,p,u){let l=[o/n,n],c=r.values,m=e.values;if(o===0)return ie(t,e.dtype);let d=p instanceof Ge?p:ie(l,e.dtype);typeof p=="string"||typeof p=="number"?d.values.fill(p):typeof p=="boolean"&&d.values.fill(+p);for(let f=0;f<s;f++){let h=[],g=0;for(let x=0;x<a;x++){let b=c[f*a+x];h.push(b),g+=b*i[x]}if(g<0||g>=o/n)throw new Error(`Invalid indices: ${h} does not index into ${t}`);for(let x=0;x<n;x++)u?d.values[g*n+x]+=m[f*n+x]:d.values[g*n+x]=e.rank===0?m[0]:m[f*n+x]}return d}var xV=Qt(r=>1/(1+Math.exp(-r))),Azt=dx(Ao,r=>1/(1+Math.exp(-r)));function yV(r,e,t,o,n){let s=nt.isSliceContinous(o,e,t),a=y.sizeFromShape(t),i=y.computeStrides(o);if(s){let c=nt.computeFlatOffset(e,i);return n==="string"?r.slice(c,c+a):r.subarray(c,c+a)}let p=n==="string"?C.fromUint8ToStringArray(r):r,u=ie(o,n,p),l=ie(t,n);for(let c=0;c<l.size;++c){let m=l.indexToLoc(c),d=m.map((f,h)=>f+e[h]);l.set(u.get(...d),...m)}return n==="string"?C.fromStringArrayToUint8(l.values):l.values}function bV(r,e,t,o,n,s,a){let i=e[0],p=s[0],u=new Array(p),l=new Array(i),c=e[1];if(p===0){if(i!==0)throw new Error(C.getSparseFillEmptyRowsIndicesDenseShapeMismatch(i));let g=y.getArrayFromDType(t,0),x=y.getArrayFromDType(n,0);return[g,[0,c],x,u,l]}let m=!0,d=0,f=new Array(p).fill(0);for(let g=0;g<i;++g){let x=r[g*c];if(x<0)throw new Error(C.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,x));if(x>=p)throw new Error(C.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,x,p));++f[x],m=m&&x>=d,d=x}let h=!0;for(let g=0;g<p;++g){let x=f[g]===0;u[g]=x,h=h&&!x,f[g]=Math.max(f[g],1),g>0&&(f[g]+=f[g-1])}if(h&&m){let g=r,x=o;for(let b=0;b<i;++b)l[b]=b;return[g,[i,c],x,u,l]}else{let g=f[p-1],x=y.getArrayFromDType(t,g*c),b=y.getArrayFromDType(n,g),w=new Array(p).fill(0);for(let S=0;S<i;++S){let k=r[S*c],T=w[k],E=(k===0?0:f[k-1])+T;w[k]++;for(let R=0;R<c;++R)x[E*c+R]=r[S*c+R];b[E]=o[S],l[S]=E}for(let S=0;S<p;++S)if(w[S]===0){let T=S===0?0:f[S-1];x[T*c+0]=S;for(let E=1;E<c;++E)x[T*c+E]=0;b[T]=a}return[x,[g,c],b,u,l]}}function CV(r,e,t,o,n){let s=y.sizeFromShape(o),a=e[0],i=n.length,p=[],u=1,l=-1;for(let g=0;g<i;++g){let x=n[g];if(x===-1){if(l!==-1)throw new Error(C.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(l,g));l=g,p.push(1)}else{if(x<0)throw new Error(C.getSparseReshapeNegativeOutputDimErrorMessage(g,x));u*=x,p.push(x)}}if(l!==-1){if(u<=0)throw new Error(C.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let g=Math.trunc(s/u);if(u*g!==s)throw new Error(C.getSparseReshapeInputOutputMultipleErrorMessage(o,p));p[l]=g}if(y.sizeFromShape(p)!==s)throw new Error(C.getSparseReshapeInputOutputMismatchErrorMessage(o,p));let m=o.length,d=[];if(m>0){d[m-1]=1;for(let g=m-2;g>=0;--g)d[g]=d[g+1]*o[g+1]}let f=[];if(i>0){f[i-1]=1;for(let g=i-2;g>=0;--g)f[g]=f[g+1]*p[g+1]}let h=y.getArrayFromDType(t,a*i);for(let g=0;g<a;++g){let x=0;for(let b=0;b<m;++b)x+=r[g*m+b]*d[b];for(let b=0;b<i;++b)h[g*i+b]=Math.trunc(x/f[b]),x%=f[b]}return[h,[a,i],p]}function wV(r,e,t,o,n,s=!1,a=0){let i=o.length,p=[e[0],r.length/e[0]],u=p[1],c=i>0?n[i-1]+1:0;if(c<0)throw new Error(C.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=e.slice();m[0]=c;let d=m.reduce((w,S)=>w*S,1),f=y.getArrayFromDType(t,d);if(i===0)return c>0&&f.fill(a),[f,m];if(c<=0)throw new Error(C.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let h=0,g=1,x=0,b=n[h];for(;;){let w=0;if(g<i){if(w=n[g],b===w){++g;continue}if(b>=w)throw new Error(C.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=c)throw new Error(C.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,c));b>x&&f.fill(a,x*u,b*u);for(let S=h;S<g;++S){let k=o[S];if(k<0||k>=p[0])throw new Error(C.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(S,o[S],p[0]));for(let T=0;T<u;T++)f[b*u+T]+=r[k*u+T]}if(s)for(let S=0;S<u;S++)f[b*u+S]/=g-h;if(h=g,++g,x=b+1,b=w,g>i)break}return x<c&&f.fill(a,x*u,c*u),[f,m]}var SV=Qt(r=>Math.sqrt(r)),qzt=dx(Fo,r=>Math.sqrt(r));var Fv=ht((r,e)=>{let t=r-e;return t*t}),Zzt=wt(Po,Fv);var Pv=Qt((r,e)=>{let{pattern:t,replaceGlobal:o,rewrite:n}=e;return r.replace(new RegExp(t,o?"g":""),n)}),oVt=Wr(pi,Pv);function IV(r,e,t,o){let n=ie(r,e.dtype);for(let s=0;s<n.size;s++){let a=n.indexToLoc(s),i=new Array(a.length);for(let p=0;p<i.length;p++)i[p]=a[p]*t[p]+o[p];n.set(e.get(...i),...a)}return n}var Ov=class{constructor(e,t,o,n,s,a){this.separator=y.encodeString(e),this.nGramWidths=t,this.leftPad=y.encodeString(o),this.rightPad=y.encodeString(n),this.padWidth=s,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){let o=this.getPadWidth(t);return Math.max(0,e+2*o-t+1)}createNGrams(e,t,o,n,s,a){for(let i=0;i<s;++i){let p=this.getPadWidth(a),u=Math.max(0,p-i),l=Math.max(0,p-(s-(i+1))),c=a-(u+l),m=t+(u>0?0:i-p),d=0;d+=u*this.leftPad.length;for(let b=0;b<c;++b)d+=e[m+b].length;d+=l*this.rightPad.length;let f=u+l+c-1;d+=f*this.separator.length,o[n+i]=new Uint8Array(d);let h=o[n+i],g=0,x=b=>b.forEach(w=>h[g++]=w);for(let b=0;b<u;++b)x(this.leftPad),x(this.separator);for(let b=0;b<c-1;++b)x(e[m+b]),x(this.separator);if(c>0){x(e[m+c-1]);for(let b=0;b<l;++b)x(this.separator),x(this.rightPad)}else{for(let b=0;b<l-1;++b)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(e,t){let o=e.length,n=t.length;if(n>0){let p=t[0];if(p!==0)throw new Error(`First split value must be 0, got ${p}`);for(let u=1;u<n;++u){let l=t[u]>=p;if(l=l&&t[u]<=o,!l)throw new Error(`Invalid split value ${t[u]}, must be in [${p}, ${o}]`);p=t[u]}if(p!==o)throw new Error(`Last split value must be data size. Expected ${o}, got ${p}`)}let s=n-1,a=y.getArrayFromDType("int32",n);if(o===0||n===0){let p=new Array(o);for(let u=0;u<=s;++u)a[u]=0;return[p,a]}a[0]=0;for(let p=1;p<=s;++p){let u=t[p]-t[p-1],l=0;this.nGramWidths.forEach(c=>{l+=this.getNumNGrams(u,c)}),this.preserveShort&&u>0&&l===0&&(l=1),a[p]=a[p-1]+l}let i=new Array(a[s]);for(let p=0;p<s;++p){let u=t[p],l=a[p];if(this.nGramWidths.forEach(c=>{let m=t[p+1]-t[p],d=this.getNumNGrams(m,c);this.createNGrams(e,u,i,l,d,c),l+=d}),this.preserveShort&&l===a[p]){let c=t[p+1]-t[p];if(c===0)continue;let m=c+2*this.padWidth;this.createNGrams(e,u,i,l,1,m)}}return[i,a]}};function vV(r,e,t,o,n,s,a,i){return new Ov(t,o,n,s,a,i).compute(r,e)}function vpe(r,e,t,o){if(!r.length)return;if(e.length===0){for(let s=0;s<r.length;++s)o.push(r.subarray(s,s+1));return}if(e.length===1){let s=e[0],a=r.indexOf(s);for(;a!==-1;){let i=r.subarray(0,a);(!t||i.length!==0)&&o.push(i),r=r.subarray(a+1),a=r.indexOf(s)}(!t||r.length!==0)&&o.push(r);return}let n=0;for(let s=0;s<r.length+1;s++)if(s===r.length||e.indexOf(r[s])!==-1){let a=r.subarray(n,s);(!t||a.length!==0)&&o.push(a),n=s+1}}function kV(r,e,t){let o=r.length,n=[],s=0,a=0,i=new Array(o);for(let m=0;m<o;++m){let d=n.length;vpe(r[m],e,t,n);let f=n.length-d;i[m]=f,s+=f,a=Math.max(a,f)}let p=y.getArrayFromDType("int32",s*2),u=new Array(s),l=[o,a],c=0;for(let m=0;m<o;++m)for(let d=0;d<i[m];++d)p[c*2]=m,p[c*2+1]=d,u[c]=n[c],++c;return[p,u,l]}function NV(r,e){let t=y.getArrayFromDType("int32",r.length);for(let o=0;o<r.length;++o)t[o]=y.fingerPrint64(r[o]).modulo(e).getLowBitsUnsigned();return t}var Mv=ht((r,e)=>r-e),kpe=rc((r,e,t,o)=>({real:r-t,imag:e-o})),gVt=wt(Oo,Mv,kpe);function TV(r,e){let t=new Array(r.rank);for(let n=0;n<t.length;n++)t[n]=r.shape[n]*e[n];let o=ie(t,r.dtype);for(let n=0;n<o.values.length;++n){let s=o.indexToLoc(n),a=new Array(r.rank);for(let p=0;p<a.length;p++)a[p]=s[p]%r.shape[p];let i=r.locToIndex(a);o.values[n]=r.values[i]}return o}var Nm=(r,e)=>{let t=e.value-r.value;return t===0?r.index-e.index:t};function _V(r,e,t=0,o=r.length-1){for(;o>t;){if(o-t>600){let i=o-t+1,p=e-t+1,u=Math.log(i),l=.5*Math.exp(2*u/3),c=.5*Math.sqrt(u*l*(i-l)/i)*Math.sign(p-i/2),m=Math.max(t,Math.floor(e-p*l/i+c)),d=Math.min(o,Math.floor(e+(i-p)*l/i+c));_V(r,e,m,d)}let n=r[e],s=t,a=o;for(y.swap(r,t,e),Nm(r[o],n)>0&&y.swap(r,t,o);s<a;){for(y.swap(r,s,a),s++,a--;Nm(r[s],n)<0;)s=s+1;for(;Nm(r[a],n)>0;)a=a-1}Nm(r[t],n)===0?y.swap(r,t,a):(a=a+1,y.swap(r,a,o)),a<=e&&(t=a+1),e<=a&&(o=a-1)}}function EV(r,e,t,o,n){let s=e[e.length-1],[a,i]=[r.length/s,s],p=y.getTypedArrayFromDType(t,a*o),u=y.getTypedArrayFromDType("int32",a*o);for(let c=0;c<a;c++){let m=c*i,d=r.subarray(m,m+i),f=new Array(d.length);d.forEach((b,w)=>f[w]={value:b,index:w}),o<f.length&&(_V(f,o),f=f.slice(0,o)),n&&f.sort(Nm);let h=c*o,g=p.subarray(h,h+o),x=u.subarray(h,h+o);for(let b=0;b<o;b++)g[b]=f[b].value,x[b]=f[b].index}let l=e.slice();return l[l.length-1]=o,[ie(l,t,p),ie(l,"int32",u)]}function $V(r,e,t,o){let n=y.parseAxisParam(e,t)[0],s=[1,t[0],1];for(let f=0;f<n;f++)s[0]*=t[f];s[1]=t[n];for(let f=n+1;f<t.length;f++)s[2]*=t[f];let a=new Map,i=new Int32Array(t[n]),p=new Ge(s,o,r),u=[],l=s[0]===1&&s[2]===1;for(let f=0;f<t[n];f++){let h;if(l)h=r[f].toString();else{let x=[];for(let b=0;b<s[0];b++)for(let w=0;w<s[2];w++)x.push(p.get(b,f,w));h=x.join(",")}let g=a.get(h);if(g!=null)i[f]=g;else{let x=a.size;a.set(h,x),i[f]=x,u.push(f)}}let c=s.slice();c[1]=a.size;let m=new Ge(c,o);u.forEach((f,h)=>{for(let g=0;g<s[0];g++)for(let x=0;x<s[2];x++)m.set(p.get(g,f,x),g,h,x)});let d=t.slice();return d[n]=c[1],{outputValues:m.values,outputShape:d,indices:i}}var{addImpl:RV,castImpl:DV,ceilImpl:AV,concatImpl:FV,equalImpl:PV,expImpl:OV,expm1Impl:MV,floorImpl:LV,floorDivImpl:BV,gatherNdImpl:zV,gatherV2Impl:VV,greaterEqualImpl:WV,greaterImpl:UV,lessEqualImpl:GV,lessImpl:HV,logImpl:KV,maxImpl:qV,maximumImpl:jV,minimumImpl:XV,multiplyImpl:YV,negImpl:QV,notEqualImpl:ZV,prodImpl:JV,rangeImpl:eW,rsqrtImpl:tW,scatterImpl:rW,simpleAbsImpl:oW,sliceImpl:nW,stridedSliceImpl:sW,stringNGramsImpl:aW,subImpl:iW,tileImpl:uW,topKImpl:pW,transposeImpl:lW,uniqueImpl:CWt}=Lv;var Npe=ye({opType:Z.ABS,cpuKernelImpl:oW}),cW={kernelName:fn,backendName:"webgpu",kernelFunc:Npe};var Tpe=ye({opType:Z.ACOS}),mW={kernelName:hn,backendName:"webgpu",kernelFunc:Tpe};var _pe=ye({opType:Z.ACOSH}),dW={kernelName:gn,backendName:"webgpu",kernelFunc:_pe};var Epe=tt({opType:fe.ADD,cpuKernelImpl:RV,supportsComplex:!0}),fW={kernelName:Rr,backendName:"webgpu",kernelFunc:Epe};var fx=class{constructor(e){this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e[0],this.variableNames=e.map((t,o)=>`T${o}`),this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){let e=[];this.variableNames.forEach(n=>{e.push(`let v${n} = get${n}ByOutputCoords(coords);`)});let t=this.variableNames.map(n=>`v${n}`).join(" + ");return`
      ${G("index")} {
        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if (flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            ${e.join(`
        `)}
            setOutputAtIndex(flatIndex, ${t});
          }
        }
      }
    `}};function $pe(r){let{inputs:e,backend:t}=r,o=e;if(o.length===1)return Pt({inputs:{x:o[0]},backend:t});let n=o.map(i=>i.dtype).reduce((i,p)=>pt(i,p)),s=o.map(i=>i.shape),a=new fx(s);return t.runWebGPUProgram(a,o,n)}var hW={kernelName:xn,backendName:"webgpu",kernelFunc:$pe};var hx=class{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[16,16,1];let o=new Array(e.length);for(let n=0;n<o.length;n++)o[n]=e[t[n]];this.outputShape=o,this.dispatchLayout={x:[0],y:[1]},this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){y.assert(this.workgroupSize[0]===this.workgroupSize[1],()=>`Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`);let e=this.workgroupSize[0];return`
      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0]+1}>, ${this.workgroupSize[0]}>;
      ${G()} {
        var x = i32(workgroupId.x) * ${e} + i32(localId.x);
        var y = i32(workgroupId.y) * ${e} + i32(localId.y);
        let width = uniforms.outShape[0];
        let height = uniforms.outShape[1];
        if (x < width && y < height) {
          tile[localId.y][localId.x] = f32(A[y * width + x]);
        }
        workgroupBarrier();

        x = i32(workgroupId.y) * ${e} + i32(localId.x);
        y = i32(workgroupId.x) * ${e} + i32(localId.y);
        if (x < height && y < width) {
          setOutputAtIndex((y * height + x), tile[localId.x]
            [localId.y]);
        }
      }
    `}};var gx=class{constructor(e,t){this.variableNames=["A"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0;let o=new Array(e.length);for(let n=0;n<o.length;n++)o[n]=e[t[n]];this.outputShape=o,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.newDim=t,this.shaderKey=`transpose_${t}`}getUserCode(){let e=ft(this.outputShape.length),t=Bv(this.newDim);return`
      ${G("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(
              ${e}(${t}), uniforms.aShape)]);
          }
        }
      }
    `}};function Bv(r){let e=r.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);let t=new Array(e);for(let o=0;o<r.length;o++)t[r[o]]=`coords.${un(o)}`;return t.join()}function Cr(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{perm:s}=o,a=t,i=n.shape.length,p=new Array(i);for(let l=0;l<p.length;l++)p[l]=n.shape[s[l]];if(t.shouldExecuteOnCPU([n])){let c=a.tensorMap.get(n.dataId).values,m=lW(c,n.shape,n.dtype,s,p);return t.makeTensorInfo(p,n.dtype,m)}if(n.shape.length===2&&y.arraysEqual(s,[1,0])){let l=new hx(n.shape,s);return a.runWebGPUProgram(l,[n],n.dtype)}let u=new gx(n.shape,s);return a.runWebGPUProgram(u,[n],n.dtype)}var gW={kernelName:Kr,backendName:"webgpu",kernelFunc:Cr};var xx=class{constructor(e,t,o){this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[e.batchSize,e.inSize];let[n]=C.computeOutAndReduceShapes(this.inputShape,[1]);this.outputShape=n.length===0?[1]:n,e.inSize>=32768&&o>=512?this.workgroupSize=[512,1,1]:e.inSize>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=t,this.shaderKey=`reduce_${t}`}getUserCode(){let e="",t="0.0",o=this.workgroupSize[0];this.reduceType==="min"||this.reduceType==="max"?(e=`
         if (isnan(candidate)) {
          bestValue = uniforms.NAN;
         } else if (!isnan(bestValue) && candidate ${this.reduceType==="min"?"<":">"} bestValue)
           {  bestValue = candidate; }`,t="f32(x[offset])"):this.reduceType==="sum"||this.reduceType==="mean"?e=" bestValue = bestValue + candidate; ":this.reduceType==="prod"?(e=" bestValue = bestValue * candidate; ",t="1.0"):this.reduceType==="all"?(e=" bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ",t="1.0"):this.reduceType==="any"&&(e=" bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ",t="0.0");let n=this.reduceType==="mean"?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);";return`
       fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
       }

       ${`
         var<workgroup> xBestValues : array<f32, ${o}>;
       `}
       fn getOffset(outputIndex : i32) -> i32 {
         let outputCoords = getCoordsFromIndex(outputIndex);
         let offset = ${this.outputShape.length===1?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;
          return offset;
       }
       ${G("index")} {
         let outputIndex = index / ${o};
         let offset = getOffset(outputIndex);
         var bestValue = ${t};
         let Length = uniforms.reduceSize;
         let WorkPerThread = DIV_CEIL(u32(Length), ${o}u);
         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;
             k = k + ${o}) {
           let candidate = f32(x[offset + k]);
           ${e}
         }
         xBestValues[localId.x] = bestValue;
         workgroupBarrier();

         var reduceSize = min(u32(Length), ${o}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            ${e}
            xBestValues[localId.x] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (localId.x == 0u && outputIndex < uniforms.size) {
          ${n}
        }
       }
     `}};var Rpe={mean:"float32",all:"bool",any:"bool"};function ao(r,e,t,o,n){let s=r.shape.length,a=[],i=y.parseAxisParam(e,r.shape),p=i,u=C.getAxesPermutation(p,s),l=r;u!=null&&(l=Cr({inputs:{x:r},attrs:{perm:u},backend:n}),p=C.getInnerMostAxes(p.length,s),a.push(l)),C.assertAxesAreInnerMostDims(o,p,s);let[c,m]=C.computeOutAndReduceShapes(l.shape,p),d=c;t&&(d=C.expandShapeToKeepDim(c,i));let f;if((o==="max"||o==="prod")&&n.shouldExecuteOnCPU([l])){let h=n.tensorMap.get(l.dataId).values;switch(o){case"max":let g=qV(h,y.sizeFromShape(m),d,r.dtype);f=n.makeTensorInfo(d,r.dtype,g);break;case"prod":let{outVals:x,outShape:b,outDtype:w}=JV(l.shape,l.dtype,h,p);f=n.makeTensorInfo(b,w,x);break;default:throw new Error(`${o} CPU implementation is not yet supported.`)}}else{let h=y.sizeFromShape(m),x=y.sizeFromShape(l.shape)/h,b={windowSize:h,inSize:h,batchSize:x,outSize:1},w=Rpe[o]||mi(r.dtype),S=[{type:"int32",data:[h]}],k=new xx(b,o,n.device.limits.maxComputeWorkgroupSizeX),T=n.runWebGPUProgram(k,[l],w,S);a.push(T),f=le({inputs:{x:T},attrs:{shape:d},backend:n})}return a.forEach(h=>n.disposeData(h.dataId)),f}function Dpe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{keepDims:s,axis:a}=o;return ao(n,a,s,"all",t)}var xW={kernelName:yn,backendName:"webgpu",kernelFunc:Dpe};function Ape(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{keepDims:s,axis:a}=o;return ao(n,a,s,"any",t)}var yW={kernelName:bn,backendName:"webgpu",kernelFunc:Ape};var oc=class{constructor(e,t,o){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0;let n=[t];this.op=o==="min"?"<":">";let[s,a]=C.computeOutAndReduceShapes(e,n);this.outputShape=s.length===0?[1]:s,this.dispatchLayout=X(this.outputShape),y.sizeFromShape(a)<32?(this.type="plain",this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize)):(this.type="shared",this.dispatch=H(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=e,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){let e=this.workgroupSize[0],t=()=>this.inputShape.length===1?"uniforms.xShape":`uniforms.xShape.${un(this.inputShape.length-1)}`,o=()=>{let n="";if(this.outputShape.length===1)this.inputShape.length!==1&&(n+="outputCoords,");else for(let s=0;s<this.outputShape.length;s++)n+=`outputCoords.${un(s)},`;return n};return this.type==="shared"?`
      fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
      }

      ${`
      var<workgroup> xBestIndices : array<i32, ${e}>;
      var<workgroup> xBestValues : array<f32, ${e}>;
    `}

      ${G("index")} {
        let outputIndex = index / ${e};
        let reduceLength = ${t()};

        var bestIndex = i32(localId.x);
        var bestValue = uniforms.infinityValue;
        let outputCoords = getCoordsFromIndex(outputIndex);
        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;
            k = k + ${e}) {
          let candidate = getX(${o()} k);
          if (!isnan(candidate) && candidate ${this.op} bestValue) {
            bestValue = candidate;
            bestIndex = k;
          }
        }
        xBestValues[localId.x] = bestValue;
        xBestIndices[localId.x] = bestIndex;
        workgroupBarrier();

        var reduceSize = min(u32(reduceLength), ${e}u);
        for (var currentSize = reduceSize / 2u; reduceSize > 1u;
            currentSize = reduceSize / 2u) {
          let interval = DIV_CEIL(reduceSize, 2u);
          if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              xBestValues[localId.x] = bestValue;
              xBestIndices[localId.x] = xBestIndices[localId.x + interval];
            }
          }
          reduceSize = interval;
          workgroupBarrier();
        }

        if (localId.x == 0u && outputIndex < uniforms.size) {
          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);
        }
      }
    `:`
      ${G("index")} {
        if (index < uniforms.size) {
          let outputCoords = getCoordsFromIndex(index);
          var bestIndex = 0;
          var bestValue = getX(${o()} 0);
          let reduceLength = ${t()};
          for (var i = 1; i < reduceLength; i++) {
            let candidate = getX(${o()} i);
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              bestIndex = i;
            }
          }
          setOutputAtIndexI32(index, bestIndex);
        }
      }
      `}};function Fpe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o,a=y.parseAxisParam(s,n.shape),i=C.getAxesPermutation(a,n.shape.length),p=n,u=[];i!=null&&(p=Cr({inputs:{x:n},backend:t,attrs:{perm:i}}),u.push(p),a=C.getInnerMostAxes(a.length,p.shape.length)),C.assertAxesAreInnerMostDims("argMax",[a[0]],p.shape.length);let l=new oc(p.shape,a[0],"max"),c=[{type:"float32",data:[Number.NEGATIVE_INFINITY]}],m=t.runWebGPUProgram(l,[p],"int32",c);return u.forEach(d=>t.disposeData(d.dataId)),m}var bW={kernelName:na,backendName:"webgpu",kernelFunc:Fpe};function Ppe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o,a=y.parseAxisParam(s,n.shape),i=C.getAxesPermutation(a,n.shape.length),p=n,u=[];i!=null&&(p=Cr({inputs:{x:n},backend:t,attrs:{perm:i}}),u.push(p),a=C.getInnerMostAxes(a.length,p.shape.length)),C.assertAxesAreInnerMostDims("argMin",[a[0]],p.shape.length);let l=new oc(p.shape,a[0],"min"),c=[{type:"float32",data:[Number.POSITIVE_INFINITY]}],m=t.runWebGPUProgram(l,[p],"int32",c);return u.forEach(d=>t.disposeData(d.dataId)),m}var CW={kernelName:sa,backendName:"webgpu",kernelFunc:Ppe};var Ope=ye({opType:Z.ASIN}),wW={kernelName:Cn,backendName:"webgpu",kernelFunc:Ope};var Mpe=ye({opType:Z.ASINH}),SW={kernelName:wn,backendName:"webgpu",kernelFunc:Mpe};var Lpe=ye({opType:Z.ATAN}),IW={kernelName:Sn,backendName:"webgpu",kernelFunc:Lpe};var Bpe=tt({opType:fe.ATAN2}),vW={kernelName:vn,backendName:"webgpu",kernelFunc:Bpe};var zpe=ye({opType:Z.ATANH}),kW={kernelName:In,backendName:"webgpu",kernelFunc:zpe};var yx=class{constructor(e){this.variableNames=["x"],this.uniforms="strides : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];

          let xRCCorner = coords.yz * uniforms.strides;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          let value = getX(batch, xRCorner, xCCorner, d);
          setOutputAtIndex(index, value);
        }
      }
    `}};var Ka=class{constructor(e,t,o=!1,n=!1,s=!1){if(this.variableNames=["x"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workgroupSize=[128,1,1],this.size=!0,t==="avg"&&o)throw new Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=o,this.flattenPositions=n,this.includeBatchIndex=s,this.shaderKey=`pool2D_${t}_${o}_${n}_${s}`}getUserCode(){let e;this.poolType==="avg"?e="resultValue = resultValue + value; count = count + 1.0;":this.computePositions?e=`let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"wR * uniforms.filterDims.y + wC"};
      }`:e="resultValue = max(value, resultValue);";let t="resultValue";return this.poolType==="avg"&&(t="resultValue / max(count, 1.0)"),`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];
          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          ${this.computePositions?`var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;`:`var resultValue = ${this.poolType==="avg"?"0.0":"-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {
            let xR = xRCorner + wR;

            if (xR < 0 || xR >= uniforms.convDims.x) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {
              let xC = xCCorner + wC;
              if (xC < 0 || xC >= uniforms.convDims.y) {
                continue;
              }

              let value = getX(batch, xR, xC, d);
              ${e}
            }
          }

          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}
        }
      }
    `}},$u=class{constructor(e,t,o=!1,n=!1,s=!1){if(this.variableNames=["x"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,",this.workgroupSize=[128,1,1],this.size=!0,t==="avg"&&o)throw new Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=o,this.flattenPositions=n,this.includeBatchIndex=s,this.shaderKey=`pool3D_${t}_${o}_${n}_${s}`}getUserCode(){let e;this.poolType==="avg"?e="resultValue += value; count += 1.0;":this.computePositions?e=`let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC"};
      }`:e="resultValue = max(value, resultValue);";let t="resultValue";return this.poolType==="avg"&&(t="resultValue / max(count, 1.0)"),`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords.x;
          let ch = coords.u;

          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
          let xDCorner = xCorner.x;
          let xRCorner = xCorner.y;
          let xCCorner = xCorner.z;

          ${this.computePositions?`var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;`:`var resultValue = ${this.poolType==="avg"?"0.0":"-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {
            let xD = xDCorner + wD;
            if (xD < 0 || xD >= uniforms.convDims.x) {
              continue;
            }

            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {
              let xR = xRCorner + wR;
              if (xR < 0 || xR >= uniforms.convDims.y) {
                continue;
              }

              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {
                let xC = xCCorner + wC;
                if (xC < 0 || xC >= uniforms.convDims.z) {
                  continue;
                }

                let value = getX(batch, xD, xR, xC, ch);
                ${e}
              }
            }
          }

          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}
        }
      }
    `}};function zv(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reductionIndices:s,keepDims:a}=o;return ao(n,s,a,"max",t)}var NW={kernelName:os,backendName:"webgpu",kernelFunc:zv};function Vv(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{keepDims:s,axis:a}=o;return ao(n,a,s,"mean",t)}var TW={kernelName:ss,backendName:"webgpu",kernelFunc:Vv};function bx(r,e,t,o){if(e.filterWidth===1&&e.filterHeight===1&&y.arraysEqual(e.inShape,e.outShape))return Pt({inputs:{x:r},backend:o});if(e.filterWidth===e.inWidth&&e.filterHeight===e.inHeight&&e.batchSize===1&&e.padInfo.type==="VALID"){let a=r.shape.length,i=le({inputs:{x:r},backend:o,attrs:{shape:[r.shape[a-3]*r.shape[a-2],r.shape[a-1]]}}),p;t==="avg"?p=Vv({inputs:{x:i},backend:o,attrs:{axis:0,keepDims:!1}}):(y.assert(t==="max",()=>`Invalid pool type ${t}`),p=zv({inputs:{x:i},backend:o,attrs:{reductionIndices:0,keepDims:!1}}));let u=le({inputs:{x:p},backend:o,attrs:{shape:e.outShape}});return o.disposeData(i.dataId),o.disposeData(p.dataId),u}let n,s=[{type:"int32",data:[e.strideHeight,e.strideWidth]}];return e.filterHeight===1&&e.filterWidth===1?n=new yx(e):(t==="avg"?n=new Ka(e,"avg"):(y.assert(t==="max",()=>`Invalid pool type ${t}`),n=new Ka(e,"max")),s.push({type:"int32",data:[e.padInfo.top,e.padInfo.left]},{type:"int32",data:[e.dilationHeight,e.dilationWidth]},{type:"int32",data:[e.inHeight,e.inWidth]},{type:"int32",data:[e.effectiveFilterHeight,e.effectiveFilterWidth]})),o.runWebGPUProgram(n,[r],r.dtype,s)}function Vpe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:a,pad:i,dimRoundingMode:p}=o,l=C.computePool2DInfo(n.shape,s,a,1,i,p);return bx(n,l,"avg",t)}var _W={kernelName:kn,backendName:"webgpu",kernelFunc:Vpe};function Wpe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:a,pad:i,dataFormat:p,dimRoundingMode:u}=o,l=[1,1,1],c=C.computePool3DInfo(n.shape,s,a,l,i,u,p),m=new $u(c,"avg"),d=[{type:"int32",data:[c.strideDepth,c.strideHeight,c.strideWidth]},{type:"int32",data:[c.padInfo.front,c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.inDepth,c.inHeight,c.inWidth]},{type:"int32",data:[c.effectiveFilterDepth,c.effectiveFilterHeight,c.effectiveFilterWidth]}];return t.runWebGPUProgram(m,[n],n.dtype,d)}var EW={kernelName:aa,backendName:"webgpu",kernelFunc:Wpe};var Cx=class{constructor(e){this.variableNames=["dy"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, avgMultiplier : f32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool2DBackprop"}getUserCode(){return`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);

            dotProd = dotProd + dyValue * uniforms.avgMultiplier;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}},wx=class{constructor(e){this.variableNames=["dy"],this.uniforms=`strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool3DBackprop"}getUserCode(){return`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              dotProd += dyValue * uniforms.avgMultiplier;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}};function Upe(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,a=s,{filterSize:i,strides:p,pad:u,dimRoundingMode:l}=o,c=C.computePool3DInfo(a.shape,i,p,1,u,l),m=new wx(c),d=1/(c.filterDepth*c.filterHeight*c.filterWidth),f=[{type:"int32",data:[c.strideDepth,c.strideHeight,c.strideWidth]},{type:"int32",data:[c.effectiveFilterDepth-1-c.padInfo.front,c.effectiveFilterHeight-1-c.padInfo.top,c.effectiveFilterWidth-1-c.padInfo.left]},{type:"int32",data:[c.effectiveFilterDepth,c.effectiveFilterHeight,c.effectiveFilterWidth]},{type:"int32",data:[c.outDepth]},{type:"int32",data:[c.outHeight]},{type:"int32",data:[c.outWidth]},{type:"float32",data:[d]}];return t.runWebGPUProgram(m,[n],a.dtype,f)}var $W={kernelName:Vi,backendName:"webgpu",kernelFunc:Upe};function Gpe(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,a=s;wm([n,s],"avgPoolGrad");let{filterSize:i,strides:p,pad:u}=o,l=C.computePool2DInfo(a.shape,i,p,1,u),c=new Cx(l),m=1/(l.filterHeight*l.filterWidth),d=[{type:"int32",data:[l.strideHeight,l.strideWidth]},{type:"int32",data:[l.effectiveFilterHeight-1-l.padInfo.top,l.effectiveFilterWidth-1-l.padInfo.left]},{type:"int32",data:[l.dilationHeight,l.dilationWidth]},{type:"int32",data:[l.effectiveFilterHeight,l.effectiveFilterWidth]},{type:"int32",data:[l.outHeight]},{type:"int32",data:[l.outWidth]},{type:"float32",data:[m]}];return t.runWebGPUProgram(c,[n],a.dtype,d)}var RW={kernelName:zi,backendName:"webgpu",kernelFunc:Gpe};function Hpe(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s}=e,{transposeA:a,transposeB:i}=o;return Op({a:n,b:s,transposeA:a,transposeB:i,backend:t})}var DW={kernelName:Nn,backendName:"webgpu",kernelFunc:Hpe};var Sx=class{constructor(e,t){this.variableNames=["source"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.rank=t.length,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.start=e,this.uniforms=`start : ${ft(e.length)}, `,this.shaderKey="slice"}getUserCode(){let e=ft(this.rank),t=Kpe(this.rank),o;return this.start.length===1?o=this.outputShape.map((s,a)=>"sourceLoc = uniforms.start + coords;"):o=this.outputShape.map((s,a)=>`sourceLoc.${Wv[a]} = uniforms.start.${un(a)} + coords.${Wv[a]};`),`
      ${G("index")} {
        if (index < uniforms.size) {
          var sourceLoc : ${e};
          let coords = getCoordsFromIndex(index);
          ${o.join(`
`)}
          setOutputAtIndex(index, getSource(${t}));
        }
      }
    `}},Wv=["x","y","z","w","u","v"];function Kpe(r){if(r===1)return"sourceLoc";if(r<=6)return Wv.slice(0,r).map(e=>`sourceLoc.${e}`).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}function ea(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,size:a}=o,[i,p]=nt.parseSliceParams(n,s,a);if(nt.assertParamsValid(n,i,p),t.shouldExecuteOnCPU([n])||n.dtype==="string"){let c=t.tensorMap.get(n.dataId),m=nW(c.values,i,p,n.shape,n.dtype);return t.makeTensorInfo(p,n.dtype,m)}if(y.sizeFromShape(p)===0)return t.makeTensorInfo(p,n.dtype,[]);let u=new Sx(i,p),l=[{type:"int32",data:i}];return t.runWebGPUProgram(u,[n],n.dtype,l)}var AW={kernelName:_s,backendName:"webgpu",kernelFunc:ea};var qpe=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,crops:a}=o;y.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");let i=s.reduce((b,w)=>b*w),p=C.getReshaped(n.shape,s,i),u=C.getPermuted(p.length,s.length),l=C.getReshapedPermuted(n.shape,s,i),c=C.getSliceBeginCoords(a,s.length),m=C.getSliceSize(l,a,s.length),d=[],f=le({inputs:{x:n},backend:t,attrs:{shape:p}}),h=Cr({inputs:{x:f},backend:t,attrs:{perm:u}}),g=le({inputs:{x:h},backend:t,attrs:{shape:l}}),x=ea({inputs:{x:g},backend:t,attrs:{begin:c,size:m}});return d.push(f),d.push(h),d.push(g),d.forEach(b=>t.disposeData(b.dataId)),x},FW={kernelName:ia,backendName:"webgpu",kernelFunc:qpe};var jpe=`
  fn bincount_write(index: i32, value: f32) {
    ${oo("&result[index]","value","float32")}
  }
`,Xpe=`
  fn bincount_write(index: i32, value: f32) {
    atomicStore(&result[index], bitcast<i32>(value));
  }
`,nc=class{constructor(e,t,o=!1){this.outputShape=[],this.variableNames=["x"],this.uniforms="binCountSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.hasWeights=!0,this.binaryOutput=!1,this.outputShape=e,this.rank=e.length,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.binaryOutput=o,o&&(this.atomic=!1),this.hasWeights=t,this.hasWeights&&this.variableNames.push("w"),this.shaderKey=`bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`}getUserCode(){return`
    ${this.binaryOutput?Xpe:jpe}
  ${G("index")} {
    ${this.rank===1?`if (index < uniforms.xShape) {
      let indexVal = i32(getX(index));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput?1:this.hasWeights?"getW(index)":"1."};
        bincount_write(indexVal, value);
      }
    }`:`let coord = getCoordsFromIndex(index);
    if (coordsInBounds2D(coord, uniforms.xShape)) {
      let indexVal = i32(getX(coord[0], coord[1]));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput?1:this.hasWeights?"getW(coord[0], coord[1])":"1."};
        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);
      }
    }`}
  }
  `}};function Ype(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,weights:s}=e,{size:a}=o,i=y.sizeFromShape(n.shape),u=y.sizeFromShape(s.shape)>0,l=[a],c=s.dtype,m=Nt({backend:t,attrs:{shape:l,value:0,dtype:c}}),d=new nc([i],u),f=[{type:"int32",data:[a]}],h=u?[n,s]:[n];return t.runWebGPUProgram(d,h,c,f,m)}var PW={kernelName:Tn,backendName:"webgpu",kernelFunc:Ype};var Ix=class{constructor(e){this.outputShape=[],this.variableNames=["s0","s1"],this.uniforms="s0Size : i32, s1Size : i32, ",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="broadcastArgs"}getUserCode(){return`
  ${G("index")} {
    if (index < uniforms.size) {
      var s0 = 1.0;
      var s1 = 1.0;
      let indexS0 = index - uniforms.size + uniforms.s0Size;
      let indexS1 = index - uniforms.size + uniforms.s1Size;
      if (indexS0 >= 0) {
        s0 = getS0(indexS0);
      }
      if (indexS1 >= 0) {
        s1 = getS1(indexS1);
      }

      if (s0 == 1.0) {
        setOutputAtIndex(index, s1);
      } else if (s1 == 1.0) {
        setOutputAtIndex(index, s0);
      } else if (s0 != s1) {
        setOutputAtIndex(index, uniforms.NAN);
      } else {
        setOutputAtIndex(index, s0);
      }
    }
  }
  `}};function Qpe(r){let{inputs:e,backend:t}=r,{s0:o,s1:n}=e;if(t.shouldExecuteOnCPU([o,n])){let l=t.tensorMap.get(o.dataId),c=t.tensorMap.get(n.dataId),m=l.values,d=c.values,f=C.assertAndGetBroadcastShape(Array.from(m),Array.from(d));return t.makeTensorInfo([f.length],"int32",Int32Array.from(f))}let s=y.sizeFromShape(o.shape),a=y.sizeFromShape(n.shape),i=Math.max(s,a),p=new Ix(i),u=[{type:"int32",data:[s]},{type:"int32",data:[a]}];return t.runWebGPUProgram(p,[o,n],"int32",u)}var OW={kernelName:ua,backendName:"webgpu",kernelFunc:Qpe};var Uv=tt({opType:fe.NOT_EQUAL,dtype:"bool",cpuKernelImpl:ZV}),MW={kernelName:Ro,backendName:"webgpu",kernelFunc:Uv};function Fi(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.tensorMap.get(o.dataId);return Pt({inputs:{x:n.complexTensorInfos.real},backend:t})}var LW={kernelName:si,backendName:"webgpu",kernelFunc:Fi};function BW(r,e){let t=new so(r.shape,Z.TO_INT),o=e.runWebGPUProgram(t,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function Gv(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return Pt({inputs:{x:n},backend:t});let a=Yr(n.shape),i=Gv({inputs:{x:n},backend:t,attrs:{dtype:"float32"}}),p=Uo({inputs:{real:i,imag:a},backend:t});return a.dispose(),t.disposeData(i.dataId),p}if(n.dtype==="complex64"){let a=Fi({inputs:{input:n},backend:t}),i=Gv({inputs:{x:a},backend:t,attrs:{dtype:s}});return t.disposeData(a.dataId),i}if(!y.hasEncodingLoss(n.dtype,s)){let a=Pt({inputs:{x:n},backend:t});return{dataId:a.dataId,shape:a.shape,dtype:s}}if(t.shouldExecuteOnCPU([n])){let a=t.tensorMap.get(n.dataId).values,[i,p,u]=DV(a,n.shape,n.dtype,s);return t.makeTensorInfo(i,p,u)}if(s==="int32")return BW(n,t);if(s==="bool"){let a=t.makeTensorInfo([],"bool",y.getTypedArrayFromDType("bool",1)),p=Uv({inputs:{a:n,b:a},backend:t});return t.disposeData(a.dataId),p}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var zW={kernelName:ho,backendName:"webgpu",kernelFunc:Gv};var Zpe=ye({opType:Z.CEIL,cpuKernelImpl:AV}),VW={kernelName:go,backendName:"webgpu",kernelFunc:Zpe};var vx=class{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workgroupSize=[64,1,1],this.outputComponent=4,this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`
      ${G("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          var clampedValue = clamp(
              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));
          clampedValue = select(clampedValue, value, isnanVec4(value));
          setOutputAtIndex(index, clampedValue);
        }
      }
    `}};var kx=class{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="clip"}getUserCode(){return`
      ${G("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          if (isnan(value)) {
            setOutputAtIndex(index, value);
            return;
          }
          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));
        }
      }
    `}};function Jpe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{clipValueMin:s,clipValueMax:a}=o,i,p=[{type:"float32",data:[s]},{type:"float32",data:[a]}];return y.sizeFromShape(n.shape)%4===0?i=new vx(n.shape):i=new kx(n.shape),t.runWebGPUProgram(i,[n],n.dtype,p)}var WW={kernelName:Go,backendName:"webgpu",kernelFunc:Jpe};var Nx=class{constructor(e){this.outputShape=[],this.variableNames=["real","imag"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="complexAbs"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.size) {
        let re = abs(getRealByOutputIndex(index));
        let im = abs(getImagByOutputIndex(index));
        let mx = max(re, im);

        // The length function in wgsl may be not underflow-safe on some GPUs.
        // So the safe solution is to ensure underflow-safety in all cases.
        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));
      }
    }
  `}};function UW(r,e){return{dataId:e.dataId,dtype:e.dtype,shape:r.shape}}function ele(r){let{inputs:e,backend:t}=r,{x:o}=e,n=t.tensorMap.get(o.dataId),s=new Nx(o.shape),a=[UW(o,n.complexTensorInfos.real),UW(o,n.complexTensorInfos.imag)];return t.runWebGPUProgram(s,a,a[0].dtype)}var GW={kernelName:Wi,backendName:"webgpu",kernelFunc:ele};var Tx=class{constructor(e){this.uniforms="",this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=C.computeOutShape(e,1),this.variableNames=e.map((t,o)=>`T${o}`),this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.offsetLength=e.length-1;for(let t=0;t<this.offsetLength;t++)this.uniforms+=`offset${t} : i32,`;this.shaderKey="concat"}getUserCode(){let e=[];if(this.offsetLength>0){e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let s=1;s<this.offsetLength;s++)e.push(`else if (yC < uniforms.offset${[s]}){ setOutputAtCoords(coords.x, coords.y, getT${s}(yR, yC - uniforms.offset${s-1})); }`);let o=this.offsetLength,n=this.offsetLength-1;e.push(`else { setOutputAtCoords(coords.x, coords.y, getT${o}(yR, yC - uniforms.offset${n})); }`)}else e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`
      ${G("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            let yR = coords.x;
            let yC = coords.y;

            ${e.join(`
        `)}
          }
        }
      }
    `}};function Mp(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.tensorMap.get(o.dataId);return Pt({inputs:{x:n.complexTensorInfos.imag},backend:t})}var HW={kernelName:Qi,backendName:"webgpu",kernelFunc:Mp};function sc(r,e,t){let o=r[0].dtype;if(o==="complex64"){let f=r.map(w=>Fi({inputs:{input:w},backend:t})),h=r.map(w=>Mp({inputs:{input:w},backend:t})),g=sc(f,e,t),x=sc(h,e,t),b=Uo({inputs:{real:g,imag:x},backend:t});return f.forEach(w=>t.disposeData(w.dataId)),h.forEach(w=>t.disposeData(w.dataId)),t.disposeData(g.dataId),t.disposeData(x.dataId),b}let n=t.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let f=r.map(k=>{let E=[-1,y.sizeFromShape(k.shape.slice(e))];return le({inputs:{x:k},backend:t,attrs:{shape:E}})}),h=f.map(k=>({vals:t.readSync(k.dataId),shape:k.shape})),g=C.computeOutShape(f.map(k=>k.shape),1),x=f[0].shape[0]===1,b=FV(h,g,o,x),w=C.computeOutShape(r.map(k=>k.shape),e),S=t.makeTensorInfo(w,o,b);return f.forEach(k=>t.disposeData(k.dataId)),S}let s=t.device.limits.maxStorageBuffersPerShaderStage-1;if(r.length>s){let f=[];for(let g=0;g<r.length;g+=s){let x=r.slice(g,g+s);f.push(sc(x,e,t))}let h=sc(f,e,t);for(let g of f)t.disposeData(g.dataId);return h}let{tensors2D:a,outShape:i}=tle(r,e,t),p=a.map(f=>f.shape),u=new Tx(p),l=[],c=new Array(p.length-1);if(c.length>0){c[0]=p[0][1],l.push({type:"int32",data:[c[0]]});for(let f=1;f<c.length;f++)c[f]=c[f-1]+p[f][1],l.push({type:"int32",data:[c[f]]})}let m=t.runWebGPUProgram(u,a,a[0].dtype,l);a.forEach(f=>t.disposeData(f.dataId));let d=le({inputs:{x:m},backend:t,attrs:{shape:i}});return t.disposeData(m.dataId),d}function tle(r,e,t){let o=C.computeOutShape(r.map(s=>s.shape),e);return{tensors2D:r.map(s=>le({inputs:{x:s},backend:t,attrs:{shape:[y.sizeFromShape(s.shape.slice(0,e)),y.sizeFromShape(s.shape.slice(e))]}})),outShape:o}}function Hv(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,e[0].shape)[0],a=e.map(u=>u.shape);C.assertParamsConsistent(a,s);let i=C.computeOutShape(e.map(u=>u.shape),s);if(y.sizeFromShape(i)===0)return t.makeTensorInfo(i,e[0].dtype,[]);let p=e.filter(u=>y.sizeFromShape(u.shape)>0);return p.length===1?Pt({inputs:{x:p[0]},backend:t}):sc(p,s,t)}var KW={kernelName:pa,backendName:"webgpu",kernelFunc:Hv};function rle(r,e,t,o,n=!1,s=null,a=!1,i=4,p=4,u=4){let l=D=>{switch(D){case 1:return"resData = f32(x[xIndex]);";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = vec4<f32>(x[xIndex / 4]);";default:throw new Error(`innerElementSize ${D} is not supported.`)}},c=D=>{switch(D){case 1:return"return f32(W[row * uniforms.wShape[3] + col]);";case 4:return"return vec4<f32>(W[(row * uniforms.wShape[3] + col) / 4]);";default:throw new Error(`innerElementSize ${D} is not supported.`)}},m=r?`
      let coord = vec4<i32>(batch, xRow, xCol, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, xRow, xCol);
      `,d=r?`
      let coords = vec4<i32>(
        batch,
        row / outWidth,
        row % outWidth,
        col);
      `:`
      let coords = vec4<i32>(
        batch,
        row,
        col / outWidth,
        col % outWidth);
      `,f=r?"uniforms.xShape[1]":"uniforms.xShape[2]",h=r?"uniforms.xShape[2]":"uniforms.xShape[3]",g=r?"row":"col",x=r?"col":"row",b=`
      let inChannels = uniforms.wShape[2];
      let outWidth = ${r?"uniforms.outShape[2]":"uniforms.outShape[3]"};
      let outRow = ${g} / outWidth;
      let outCol = ${g} % outWidth;

      let WRow = ${x} / (uniforms.filterDims[1] * inChannels);
      let WCol = ${x} / inChannels % uniforms.filterDims[1];
      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];
      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];
      let xCh = ${x} % inChannels;
      var resData = ${Ae(i)}(0.0);
      // The bounds checking is always needed since we use it to pad zero for
      // the 'same' padding type.
      if (xRow >= 0 && xRow < ${f} && xCol >= 0 && xCol < ${h}) {
        ${m}
        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);
        ${l(i)}
      }
      return resData;`,w=r?e&&o?`
      ${b}`:`
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${b}
      }
      return ${Ae(i)}(0.0);`:o&&t?`
      ${b}`:`
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${b}
      }
      return ${Ae(i)}(0.0);`,S=`${c(p)}`,k=Ae(u),T=r?Ae(i):Ae(p),E=r?Ae(p):Ae(i);return`
      ${gr(s,a,u===4,4)}
      fn mm_readA(batch: i32, row : i32, col : i32) -> ${T} {
        ${r?w:S}
      }

      fn mm_readB(batch: i32, row : i32, col : i32) -> ${E} {
        ${r?S:w}
      }

      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ${k}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
        {
        var value = valueIn;
        let outWidth = ${r?"uniforms.outShape[2]":"uniforms.outShape[3]"};
        ${d}
        ${no(n,s)}
        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }`}var _x=class{constructor(e,t,o,n,s=!1,a=null,i=!1,p=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.outShape,this.isChannelsLast=e.dataFormat==="channelsLast",this.isVec4=((e.inChannels%4===0||e.inChannels%3===0)&&this.isChannelsLast||e.outWidth%4===0&&!this.isChannelsLast)&&e.outChannels%4===0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workgroupSize=ym(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=bm(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4?(this.outputComponent=4,this.isChannelsLast&&e.inChannels%4!==0?(this.innerElementSize=3,this.variableComponents=[1,4]):(this.innerElementSize=4,this.variableComponents=[4,4]),s&&(this.variableNames.push("bias"),this.variableComponents.push(4)),i&&(this.variableNames.push("preluActivationWeights"),this.variableComponents.push(4))):(this.innerElementSize=this.elementsPerThread[0],s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights")),this.sequentialAccessByThreads=p,this.addBias=s,this.activation=a,this.hasPreluActivationWeights=i,this.tileAOuter=this.workgroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workgroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workgroupSize[0]*this.innerElementSize,this.workgroupSize[1]),this.fitAOuter=t%this.tileAOuter===0,this.fitBOuter=o%this.tileBOuter===0,this.fitInner=n%this.tileInner===0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`}getUserCode(){let e=this.isVec4?Fp(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner):Pp(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner,!1,null,this.sequentialAccessByThreads),t=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`
    ${rle(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,t[0],t[1],t[2])}
    ${e}
  `}};var Ex=class{constructor(e,t=!1,o=null,n=!1){this.variableNames=["x","W"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,",this.workgroupSize=[4,4,8],this.outputShape=e.outShape,this.isChannelsLast=e.dataFormat==="channelsLast",this.dispatchLayout=this.isChannelsLast?{x:[2],y:[1],z:[0,3]}:{x:[3],y:[2],z:[0,1]},this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=t,this.activation=o,this.hasPreluActivationWeights=n,t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`conv2dnaive_${this.activation}_${this.isChannelsLast}`}getUserCode(){return`
       ${gr(this.activation,this.hasPreluActivationWeights,!1,4)}
       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{
         let coords = vec4<i32>(batch, row, col, chan);
         if (coordsInBounds4D(coords, uniforms.xShape)) {
           return  getX(batch, row, col, chan);
         } else {
          return 0.0;
         }
       }
       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{
         let coords = vec4<i32>(row, col, xChannel, outChannel);
         if(coordsInBounds4D(coords, uniforms.wShape)) {
           return getW(row, col, xChannel, outChannel);
          } else {
            return 0.0;
          }
       }
       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {
         let coords = ${this.isChannelsLast?"vec4<i32>(batch, row, col, chan);":"vec4<i32>(batch, chan, row, col);"}
         if (coordsInBounds4D(coords, uniforms.outShape)) {
           var value = valueIn;
           ${no(this.addBias,this.activation)}
           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);
         }
       }
       ${G("index")} {
         let coords = getOutputCoords();
         let batch = coords[0];
         let outChannel = ${this.isChannelsLast?"coords[3];":"coords[1];"}
         let outRow = ${this.isChannelsLast?"coords[1];":"coords[2];"}
         let outCol = ${this.isChannelsLast?"coords[2];":"coords[3];"}
         var acc : f32 = 0.0;
         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {
           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {
             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];
             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];
             for (var xChannel = 0; xChannel < ${this.isChannelsLast?"uniforms.xShape[3];":"uniforms.xShape[1];"} xChannel = xChannel + 1) {
               ${this.isChannelsLast?"let v = readInp(batch, xRow, xCol, xChannel);":"let v = readInp(batch, xChannel, xRow, xCol);"}
               let f = readFilt(row, col, xChannel, outChannel);
               acc = acc + v * f;
             }
           }
         }
         writeResult(batch, outRow, outCol, outChannel, acc);
       }
     `}};var $x=class{constructor(e,t){this.variableNames=["x"],this.uniforms=`pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,
       inChannels : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=t,this.shaderKey=`im2col_${this.isChannelsLast}`}getUserCode(){let e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,o=this.isChannelsLast?"coords[1]":"coords[2]",n=this.isChannelsLast?"coords[2]":"coords[1]",s=this.isChannelsLast?"getX(batch, xRow, xCol, ch)":"getX(batch, ch, xRow, xCol)";return`
    ${G("index")} {
      let coords = getCoordsFromIndex(index);
      if(index < uniforms.size) {
        let batch = coords[0];
        let row = ${o};
        let col = ${n};
        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];
        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);
        var value = 0.0;
        if(xRow < uniforms.xShape[${e}] && xRow >= 0) {
          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -
              uniforms.pads[1];
          let xCol = offsetX + uniforms.dilations[1] * ((col %
              uniforms.itemsPerBlockRow) / uniforms.inChannels);
          let ch = col % uniforms.inChannels;
          if(xCol < uniforms.xShape[${t}] && xCol >= 0) {
            value = ${s};
          }
        }
        setOutputAtIndex(index, value);
      }
    }
   `}};function Rx(r,e){let t=r.length;return t>=3?e?[...r.slice(0,-3),r[t-3]*r[t-2],r[t-1]]:[...r.slice(0,-3),r[t-3],r[t-2]*r[t-1]]:!e&&t===1&&r[0]>1?[r[0],1]:null}function ole({x:r,filter:e,convInfo:t,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:a=0,activation:i=null}){let p=t.dataFormat==="channelsLast",u=!p,l=!1,c=p&&t.filterHeight===t.inHeight&&t.filterWidth===t.inWidth&&t.padInfo.type==="VALID",m=[],d,f;if(c){let x=t.inHeight*t.inWidth*t.inChannels;d=le({inputs:{x:r},backend:o,attrs:{shape:[1,t.batchSize,x]}}),f=le({inputs:{x:e},backend:o,attrs:{shape:[1,x,t.outChannels]}})}else d=le({inputs:{x:r},backend:o,attrs:{shape:p?[t.batchSize,t.inHeight*t.inWidth,t.inChannels]:[t.batchSize,t.inChannels,t.inHeight*t.inWidth]}}),f=le({inputs:{x:e},backend:o,attrs:{shape:[1,t.inChannels,t.outChannels]}});if(m.push(d),m.push(f),s!=null){let x=Rx(s.shape,p);x!=null&&(s=le({inputs:{x:s},backend:o,attrs:{shape:x}}),m.push(s))}if(n!=null){let x=Rx(n.shape,p);x!=null&&(n=le({inputs:{x:n},backend:o,attrs:{shape:x}}),m.push(n))}let h=Op({a:p?d:f,b:p?f:d,transposeA:u,transposeB:l,backend:o,bias:n,activation:i,preluActivationWeights:s,leakyreluAlpha:a}),g=le({inputs:{x:h},backend:o,attrs:{shape:t.outShape}});m.push(h);for(let x of m)o.disposeData(x.dataId);return g}function nle({x:r,filter:e,convInfo:t,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:a=0,activation:i=null}){let{filterWidth:p,filterHeight:u,inChannels:l,strideWidth:c,strideHeight:m,padInfo:d,outWidth:f,outHeight:h,dilationWidth:g,dilationHeight:x,dataFormat:b}=t,w=b==="channelsLast",S=p*u*l,k=h*f,T=w?[t.batchSize,k,S]:[t.batchSize,S,k],E=new $x(T,w),R=[{type:"int32",data:[d.top,d.left]},{type:"int32",data:[m,c]},{type:"int32",data:[x,g]},{type:"int32",data:[f]},{type:"int32",data:[l*p]},{type:"int32",data:[l]}],D=o.runWebGPUProgram(E,[r],r.dtype,R),F=[];F.push(D);let O=le({inputs:{x:e},backend:o,attrs:{shape:[1,S,-1]}});if(F.push(O),s!=null){let U=Rx(s.shape,w);U!=null&&(s=le({inputs:{x:s},backend:o,attrs:{shape:U}}),F.push(s))}if(n!=null){let U=Rx(n.shape,w);U!=null&&(n=le({inputs:{x:n},backend:o,attrs:{shape:U}}),F.push(n))}let B=Op({a:w?D:O,b:w?O:D,transposeA:!w,transposeB:!1,backend:o,bias:n,activation:i,preluActivationWeights:s,leakyreluAlpha:a}),z=le({inputs:{x:B},backend:o,attrs:{shape:t.outShape}});F.push(B);for(let U of F)o.disposeData(U.dataId);return z}function Dx({x:r,filter:e,convInfo:t,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:a=0,activation:i=null}){let p=n!=null,u=s!=null,l=t.dataFormat==="channelsLast",c=l&&t.filterHeight===t.inHeight&&t.filterWidth===t.inWidth&&t.padInfo.type==="VALID",m=A().getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");if(!m&&(c||t.filterHeight===1&&t.filterWidth===1&&t.dilationHeight===1&&t.dilationWidth===1&&t.strideHeight===1&&t.strideWidth===1&&(t.padInfo.type==="SAME"||t.padInfo.type==="VALID")))return ole({x:r,filter:e,convInfo:t,backend:o,bias:n,activation:i,preluActivationWeights:s,leakyreluAlpha:a});let d=A().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),f=d>-1?d:o.thresholdToIncreaseWorkgroups,h=t.batchSize*Math.ceil(t.outHeight*t.outWidth/32)*Math.ceil(t.outChannels/32);if(A().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER")||h<=f)return nle({x:r,filter:e,convInfo:t,backend:o,bias:n,preluActivationWeights:s,leakyreluAlpha:a,activation:i});let g,x=[t.padInfo.top,t.padInfo.left],b=[{type:"int32",data:[t.filterHeight,t.filterWidth]},{type:"int32",data:[...x]},{type:"int32",data:[t.strideHeight,t.strideWidth]},{type:"int32",data:[t.dilationHeight,t.dilationWidth]}];if(m)g=new Ex(t,p,i,u);else{let T=l?t.outHeight*t.outWidth:t.outChannels,E=l?t.outChannels:t.outHeight*t.outWidth,R=t.filterHeight*t.filterWidth*t.inChannels;b.push({type:"int32",data:[T]},{type:"int32",data:[E]},{type:"int32",data:[R]});let D=o.adapterInfo.isIntel();g=new _x(t,T,E,R,p,i,u,D)}let w=[],S=[r,e];p&&(!l&&n.shape.length===1&&(n=le({inputs:{x:n},backend:o,attrs:{shape:[n.shape[0],1,1]}}),w.push(n)),S.push(n)),u&&(!l&&s.shape.length===1&&(s=le({inputs:{x:s},backend:o,attrs:{shape:[s.shape[0],1,1]}}),w.push(s)),S.push(s)),i==="leakyrelu"&&(b.push({type:"float32",data:[a]}),g.uniforms+=" alpha : f32,");let k=o.runWebGPUProgram(g,S,r.dtype,b);for(let T of w)o.disposeData(T.dataId);return k}function sle(r){let{inputs:e,attrs:t,backend:o}=r,{x:n,filter:s}=e,{strides:a,pad:i,dataFormat:p,dilations:u,dimRoundingMode:l}=t,c=C.convertConv2DDataFormat(p),m=C.computeConv2DInfo(n.shape,s.shape,a,u,i,l,!1,c);return Dx({x:n,filter:s,convInfo:m,backend:o})}var qW={kernelName:En,backendName:"webgpu",kernelFunc:sle};var Ax=class{constructor(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,",this.workgroupSize=[64,1,1],this.size=!1,this.isVec4=!1,this.workPerThread=1,this.outputShape=e.inShape,this.isChannelsLast=e.dataFormat==="channelsLast",this.isVec4=this.isChannelsLast&&e.outChannels%4===0&&e.inChannels%4===0,this.isVec4?(this.workPerThread=2,this.outputComponent=4,this.workgroupSize=[4,4,4],this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[4,this.workPerThread,1])):(this.size=!0,this.workPerThread=1,this.workgroupSize=[64,1,1],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize)),this.shaderKey=`conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${this.workPerThread}`}getUserCode(){let e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,o=this.isChannelsLast?3:1,n=`
    ${G()} {
      let batch = i32(globalId.z) / uniforms.outShape[1];
      let r = i32(globalId.z) % uniforms.outShape[1];
      let c = i32(globalId.y) * ${this.workPerThread};
      let d1 = i32(globalId.x) * 4;

      let dyCorner = vec2<i32>(r, c) - uniforms.pads;

      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
      // ? = to be determined. : = across all values in that axis.
      var dotProd: array<vec4<f32>, ${this.workPerThread}>;
      for (var i = 0; i < ${this.workPerThread}; i++) {
        dotProd[i] = vec4<f32>(0.0);
      }
      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);
        let wRPerm = uniforms.filterDims.x - 1 - wR;
        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||
            fract(dyR) > 0.0) {
          continue;
        }
        let idyR = i32(dyR);

        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);
          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);
          let wCPerm = uniforms.filterDims.y - 1 - wC;
          var bDyCVal = true;
          var bDyCVal2 = true;
          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
              fract(dyC) > 0.0) {
            bDyCVal = false;
          }
          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||
              fract(dyC2) > 0.0) {
            bDyCVal2 = false;
          }

          let idyC = i32(dyC);
          let idyC2 = i32(dyC2);
          if (bDyCVal && bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
              xValue = getDy(batch, idyR, idyC2, d2);
              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),
                                                  dot(xValue, wValue1),
                                                  dot(xValue, wValue2),
                                                  dot(xValue, wValue3));
            }
          } else if (bDyCVal) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
            }
          } else if (bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC2, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[1] = dotProd[1] + tmpval;
            }
          }
        }
      }

      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
        let coords = vec4<i32>(batch, r, c + i, d1);
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);
        }
      }
    }
    `;return this.isVec4?`
    ${n}
    `:`
    ${G("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[${o}];

        let dyCorner = vec2<i32>(coords[${e}], coords[${t}]) - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);
          let wRPerm = uniforms.filterDims.x - 1 - wR;
          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||
              wRPerm < 0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);
            let wCPerm = uniforms.filterDims.y - 1 - wC;
            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
                fract(dyC) > 0.0 || wCPerm < 0) {
              continue;
            }
            let idyC = i32(dyC);

            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {
              let xValue = ${this.isChannelsLast?"getDy(batch, idyR, idyC, d2)":"getDy(batch, d2, idyR, idyC)"};
              let wValue = getW(wRPerm, wCPerm, d1, d2);
              dotProd = dotProd + xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}},Fx=class{constructor(e){this.variableNames=["x","dy"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=e.dataFormat==="channelsLast",this.shaderKey=`conv2DDerFilter_${this.isChannelsLast}`}getUserCode(){return`
    ${G("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let d2 = coords[3];

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b = b + 1) {
          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];
            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              if (${this.isChannelsLast}) {
                let dyValue = getDy(b, yR, yC, d2);
                let xValue = getX(b, xR, xC, d1);
                dotProd = dotProd + xValue * dyValue;
              } else {
                let dyValue = getDy(b, d2, yR, yC);
                let xValue = getX(b, d1, xR, xC);
                dotProd = dotProd + xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}},Px=class{constructor(e){this.variableNames=["x","dy"],this.uniforms=`pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,
       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerFilter"}getUserCode(){return`
    ${G("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wF = coords.x;
        let wR = coords.y;
        let wC = coords.z;
        let d1 = coords.w;
        let d2 = coords.u;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yF = 0; yF < uniforms.outDepth; yF++) {
            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];
            if (xF < 0 || xF >= uniforms.inDepth) {
              continue;
            }

            for (var yR = 0; yR < uniforms.outHeight; yR++) {
              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];
              if (xR < 0 || xR >= uniforms.inHeight) {
                continue;
              }

              for (var yC = 0; yC < uniforms.outWidth; yC++) {
                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];
                if (xC < 0 || xC >= uniforms.inWidth) {
                  continue;
                }

                let dyValue = getDy(b, yF, yR, yC, d2);
                let xValue = getX(b, xF, xR, xC, d1);
                dotProd += xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}},Ox=class{constructor(e){this.variableNames=["dy","W"],this.uniforms=`filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerInput"}getUserCode(){return`
    ${G("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let d1 = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyFCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);
          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {
            continue;
          }
          let idyF = i32(dyF);

          let wFPerm = uniforms.filterDims[0] - 1 - wF;

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            let wRPerm = uniforms.filterDims[1] - 1 - wR;

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let wCPerm = uniforms.filterDims[2] - 1 - wC;

              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {
                let xValue = getDy(batch, idyF, idyR, idyC, d2);
                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}};function ale(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:a,pad:i,dataFormat:p,dimRoundingMode:u,filterShape:l}=o,c=C.convertConv2DDataFormat(p),m=C.computeConv2DInfo(n.shape,l,a,1,i,u,!1,c),d=new Fx(m),f=[{type:"int32",data:[m.padInfo.top,m.padInfo.left]},{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.batchSize]},{type:"int32",data:[m.outHeight]},{type:"int32",data:[m.outWidth]},{type:"int32",data:[m.inHeight]},{type:"int32",data:[m.inWidth]}];return t.runWebGPUProgram(d,[n,s],n.dtype,f)}var jW={kernelName:Ui,backendName:"webgpu",kernelFunc:ale};function ile(r=4){let e=s=>{switch(s){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];
            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];
            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];
            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${s} is not supported.`)}},o=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${`
      let outRow = row / uniforms.outShape[2];
      let outCol = row % uniforms.outShape[2];

      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];
      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {
        return ${Ae(r)}(0.0);
      }
      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {
        return ${Ae(r)}(0.0);
      }
      let coord = vec4<i32>(
          batch,
          i32(xR),
          i32(xC),
          col % uniforms.outBackprop[3]);
      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${r}];`}
      }
      return ${Ae(r)}(0.0);`;return`
  fn mm_readA(batch: i32, row : i32, col : i32) -> ${Ae(r)} {
    ${o}
  }

  fn mm_readB(batch: i32, row : i32, col : i32) -> ${Ae(r)} {
    let coordX = uniforms.filterDims.x - 1 -
        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
    let coordY = uniforms.filterDims.y - 1 -
        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];
    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&
        coordX >= 0 && coordY >= 0) {
      let rowInner = row % uniforms.outBackprop[3];
      let coord = vec4<i32>(coordX, coordY, col, rowInner);
      ${e(r)}
    }
    return ${Ae(r)}(0.0);
  }

  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ${Ae(r)}) {
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outCoord = vec4<i32>(
          batch,
          row / uniforms.outShape[2],
          row % uniforms.outShape[2],
          col);
      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${r}] = value;
    }
  }`}var Mx=class{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.inShape,y.assert(e.dataFormat==="channelsLast",()=>"TODO: NCHW is unimplemented"),this.isVec4=e.inChannels%4===0&&e.outChannels%4===0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workgroupSize=ym(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=bm(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4&&(this.outputComponent=4,this.variableComponents=[4,1]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){let e=this.isVec4?Fp(this.elementsPerThread,this.workgroupSize):Pp(this.elementsPerThread,this.workgroupSize);return`
    ${ile(this.isVec4?4:1)}
    ${e}
    `}};function ule(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{inputShape:a,strides:i,pad:p,dataFormat:u,dimRoundingMode:l}=o,c=C.convertConv2DDataFormat(u),m=C.computeConv2DInfo(a,s.shape,i,1,p,l,!1,c),d=[{type:"int32",data:[m.filterHeight,m.filterWidth]},{type:"int32",data:[m.filterHeight-1-m.padInfo.top,m.filterWidth-1-m.padInfo.left]},{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.batchSize,m.outHeight,m.outWidth,m.outChannels]}],f;if(A().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE")||m.dataFormat!=="channelsLast")f=new Ax(m);else{f=new Mx(m);let h=m.inHeight*m.inWidth,g=m.inChannels,x=m.filterHeight*m.filterWidth*m.outChannels;d.push({type:"uint32",data:[h]},{type:"uint32",data:[g]},{type:"uint32",data:[x]})}return t.runWebGPUProgram(f,[n,s],"float32",d)}var XW={kernelName:$n,backendName:"webgpu",kernelFunc:ule};var Lx=class{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3dnaive"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords.x;
        let d2 = coords.u;

        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
        let xFCorner = xFRCCorner.x;
        let xRCorner = xFRCCorner.y;
        let xCCorner = xFRCCorner.z;

        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;
        let inputDepthVec4Remainder = uniforms.xShape.u % 4;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let xF = xFCorner + wF * uniforms.dilations[0];
          if (xF < 0 || xF >= uniforms.xShape.y) {
            continue;
          }

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let xR = xRCorner + wR * uniforms.dilations[1];
            if (xR < 0 || xR >= uniforms.xShape.z) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let xC = xCCorner + wC * uniforms.dilations[2];
              if (xC < 0 || xC >= uniforms.xShape.w) {
                continue;
              }

              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {
                let xValues = vec4<f32>(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                let wValues = vec4<f32>(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (inputDepthVec4Remainder == 1) {
                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *
                  getW(wF, wR, wC, inputDepthNearestVec4, d2);
              } else if (inputDepthVec4Remainder == 2) {
                let xValues = vec2<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)
                );
                let wValues = vec2<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (inputDepthVec4Remainder == 3) {
                let xValues = vec3<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)
                );
                let wValues = vec3<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }`}};function ple(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:a,pad:i,dilations:p}=o,u=C.computeConv3DInfo(n.shape,s.shape,a,p,i),l=[u.padInfo.front,u.padInfo.top,u.padInfo.left],c=[{type:"int32",data:[u.filterDepth,u.filterHeight,u.filterWidth]},{type:"int32",data:[...l]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.dilationDepth,u.dilationHeight,u.dilationWidth]}],m=new Lx(u),d=pt(n.dtype,s.dtype);return t.runWebGPUProgram(m,[n,s],d,c)}var YW={kernelName:Rn,backendName:"webgpu",kernelFunc:ple};function lle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:a,pad:i,filterShape:p}=o,u=C.computeConv3DInfo(n.shape,p,a,1,i),l=new Px(u),c=[{type:"int32",data:[u.padInfo.front,u.padInfo.top,u.padInfo.left]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.batchSize]},{type:"int32",data:[u.outDepth]},{type:"int32",data:[u.outHeight]},{type:"int32",data:[u.outWidth]},{type:"int32",data:[u.inDepth]},{type:"int32",data:[u.inHeight]},{type:"int32",data:[u.inWidth]}];return t.runWebGPUProgram(l,[n,s],s.dtype,c)}var QW={kernelName:ti,backendName:"webgpu",kernelFunc:lle};function cle(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{strides:a,pad:i,inputShape:p}=o,u=C.computeConv3DInfo(p,s.shape,a,1,i),l=new Ox(u),c=[{type:"int32",data:[u.filterDepth,u.filterHeight,u.filterWidth]},{type:"int32",data:[u.filterDepth-1-u.padInfo.front,u.filterHeight-1-u.padInfo.top,u.filterWidth-1-u.padInfo.left]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.outDepth]},{type:"int32",data:[u.outHeight]},{type:"int32",data:[u.outWidth]},{type:"int32",data:[u.outChannels]}];return t.runWebGPUProgram(l,[n,s],n.dtype,c)}var ZW={kernelName:Dn,backendName:"webgpu",kernelFunc:cle};var mle=ye({opType:Z.COS}),JW={kernelName:An,backendName:"webgpu",kernelFunc:mle};var dle=ye({opType:Z.COSH}),eU={kernelName:Fn,backendName:"webgpu",kernelFunc:dle};var Bx=class{constructor(e,t,o,n){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workgroupSize=[64,1,1],this.size=!0;let[s]=t;this.outputShape=[s,o[0],o[1],e],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.methodId=n==="bilinear"?1:0,this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){let[e,t]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[o,n,s]=this.cropHeightBiggerThan1?[`(${e} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${e} + f32(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${e}`],[a,i,p]=this.cropWidthBiggerThan1?[`(${t} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${t} + f32(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${t}`];return`
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let height_ratio = f32(${o});
        let width_ratio = f32(${a});
        let b = coords[0];
        let y = coords[1];
        let x = coords[2];
        let d = coords[3];
        // get box vals
        let y1 = getBoxes(b, 0);
        let x1 = getBoxes(b, 1);
        let y2 = getBoxes(b, 2);
        let x2 = getBoxes(b, 3);
        // get image in batch index
        let bInd = i32(round(getBoxInd(b)));
        if(bInd < 0 || bInd >= uniforms.outShape[0]) {
          return;
        }
        let height_scale = ${n};
        let width_scale = ${i};
        let in_y = ${s};
        if( in_y < 0.0 || in_y > ${e} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let in_x = ${p};
        if( in_x < 0.0 || in_x > ${t} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let sourceFracIndexCR = vec2<f32>(in_x,in_y);
        if(${this.methodId} == 1) {
          // Compute the four integer indices.
          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);
          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));
          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);
          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);
          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);
          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);
          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);
          let top = topLeft + (topRight - topLeft) * fracCR.x;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          let newValue = top + (bottom - top) * fracCR.y;
          setOutputAtIndex(index, newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          let sourceNearestCR = vec2<i32>(floor(
            sourceFracIndexCR + vec2<f32>(0.5,0.5)));
          let newValue = getImage(
            bInd, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutputAtIndex(index, newValue);
        }
      }
    }
    `}};var fle=r=>{let{inputs:e,backend:t,attrs:o}=r,{image:n,boxes:s,boxInd:a}=e,{cropSize:i,method:p,extrapolationValue:u}=o,l=new Bx(n.shape[3],s.shape,i,p),c=[{type:"float32",data:[u]}];return t.runWebGPUProgram(l,[n,s,a],"float32",c)},tU={kernelName:Mn,backendName:"webgpu",kernelFunc:fle};var Lp;(function(r){r.Prod="*",r.Sum="+"})(Lp||(Lp={}));var Tm=class{constructor(e,t,o,n){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.exclusive=o,this.reverse=n,this.op=e,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){let e=this.outputShape.length,t=this.op===Lp.Prod?"1.0":"0.0",o=this.exclusive?t:`getX(${rU(e,"coords",this.op)})`,n=this.outputShape[this.outputShape.length-1],s="",a="";return this.exclusive?(s=this.reverse?`end != ${n-1}`:"end != 0",a=this.reverse?"end + 1":"end - 1"):(s=this.reverse?`end + pow2 < ${n}`:"end >= pow2",a=this.reverse?"end + pow2":"end - pow2"),`
      ${G("index")} {
       if (index < uniforms.size) {
         var coords = getCoordsFromIndex(index);

         let end = ${oU(e,"coords",this.op)};
         var val = ${o};
         let pow2 = i32(pow(2.0, uniforms.index));
         if (${s}) {
           let idx = ${a};
           ${oU(e,"coords",this.op)} = idx;
           val ${this.op}= getX(${rU(e,"coords",this.op)});
         }
         setOutputAtIndex(index, val);
       }
      }
    `}};function rU(r,e,t){if(r===1)return`${e}`;if(r===2)return`${e}.x, ${e}.y`;if(r===3)return`${e}.x, ${e}.y, ${e}.z`;if(r===4)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative ${t} for rank ${r} is not yet supported`)}function oU(r,e,t){if(r===1)return`${e}`;if(r===2)return`${e}.y`;if(r===3)return`${e}.z`;if(r===4)return`${e}.w`;throw Error(`Cumulative ${t} for rank ${r} is not yet supported`)}function zx(r,e,t,o,n,s){let a=e.shape.length,i=C.getAxesPermutation([o],a),p=e;i!=null&&(p=Cr({inputs:{x:e},backend:t,attrs:{perm:i}}));let u=C.getInnerMostAxes(1,a)[0];if(u!==a-1)throw new Error(`WebGPU cumprod shader expects an inner-most axis=${e.shape.length-1} but got axis=${o}`);let l=p.shape[u],c=Pt({inputs:{x:p},backend:t});for(let m=0;m<=Math.ceil(Math.log2(l))-1;m++){let d=new Tm(r,p.shape,!1,s),f=c,h=[{type:"float32",data:[m]}];c=t.runWebGPUProgram(d,[c],c.dtype,h),t.disposeData(f.dataId)}if(n){let m=new Tm(r,p.shape,n,s),d=c,f=[{type:"float32",data:[0]}];c=t.runWebGPUProgram(m,[c],c.dtype,f),t.disposeData(d.dataId)}if(i!=null){let m=C.getUndoAxesPermutation(i),d=Cr({inputs:{x:c},backend:t,attrs:{perm:m}});return t.disposeData(c.dataId),t.disposeData(p.dataId),d}return c}function hle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:a,reverse:i}=o;return zx(Lp.Prod,n,t,s,a,i)}var nU={kernelName:Pn,backendName:"webgpu",kernelFunc:hle};function gle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:a,reverse:i}=o;return zx(Lp.Sum,n,t,s,a,i)}var sU={kernelName:On,backendName:"webgpu",kernelFunc:gle};function xle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,weights:s}=e,{size:a,binaryOutput:i}=o,p=n.shape.length===1,l=y.sizeFromShape(s.shape)>0,c=s.dtype,m=p?[n.shape[0]]:[n.shape[0],n.shape[1]],d=p?[a]:[n.shape[0],a],f=Nt({backend:t,attrs:{shape:d,value:0,dtype:c}}),h=new nc(m,l,i),g=[{type:"int32",data:[a]}],x=l?[n,s]:[n];return t.runWebGPUProgram(h,x,c,g,f)}var aU={kernelName:la,backendName:"webgpu",kernelFunc:xle};var Vx=class{constructor(e,t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`depthToSpace_${t}`,this.dataFormat=t}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let h = ${this.getHeightCoordString()};
          let w = ${this.getWidthCoordString()};
          let d = ${this.getDepthCoordString()};

          let in_h = h / uniforms.blockSize;
          let offset_h = h % uniforms.blockSize;
          let in_w = w / uniforms.blockSize;
          let offset_w = w % uniforms.blockSize;
          let offset_d = (offset_h * uniforms.blockSize + offset_w) *
            ${this.getOutputDepthSize()};
          let in_d = d + offset_d;

          let rlt = ${this.getInputSamplingString()};
          setOutputAtIndex(index, rlt);
        }
      }`}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function yle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockSize:s,dataFormat:a}=o,i=n.shape[0],p=a==="NHWC"?n.shape[1]:n.shape[2],u=a==="NHWC"?n.shape[2]:n.shape[3],l=a==="NHWC"?n.shape[3]:n.shape[1],c=p*s,m=u*s,d=l/(s*s),f=a==="NHWC"?[i,c,m,d]:[i,d,c,m],h=[{type:"int32",data:[s]}],g=new Vx(f,a);return t.runWebGPUProgram(g,[n],n.dtype,h)}var iU={kernelName:Ln,backendName:"webgpu",kernelFunc:yle};var Wx=class{constructor(e,t,o,n=!1,s=null,a=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[16,16,1],this.outputShape=e,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),n&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.addBias=n,this.activation=s,this.hasPreluActivation=a,this.filterHeight=t,this.filterWidth=o,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){let e=this.filterWidth*this.filterHeight,t=this.workgroupSize[0]*this.workgroupSize[1]*this.workgroupSize[2],o=this.workgroupSize[1]+this.filterHeight-1,n=this.workgroupSize[0]+this.filterWidth-1;return`
      ${gr(this.activation,this.hasPreluActivation,!1,4)}

      var<workgroup> mm_Asub : array<array<f32, ${n}>, ${o}>;
      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;
      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {
        var value = 0.0;
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, channel, row, col);
        }
        return value;
      }

      ${G()} {
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;
        let channelMul = uniforms.wShape[3];
        let d1 = coords[1] / channelMul;
        let q = coords[1] % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;

        let localRow = i32(localId.y);
        let localCol = i32(localId.x);

        // Load one tile of X into local memory.
        for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${this.workgroupSize[1]}) {
          for (var inputCol = localCol; inputCol < ${n}; inputCol = inputCol + ${this.workgroupSize[0]}) {
            let rowOffset = inputRow - localRow;
            let colOffset = inputCol - localCol;
            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);
          }
        }

        // Load one tile of W into local memory.
        var wIndex = i32(localIndex);
        ${e<t?`if (wIndex < ${e})`:`for(; wIndex < ${e}; wIndex = wIndex + ${t})`}

        {
          let wRow = wIndex / ${this.filterWidth};
          let wCol = wIndex % ${this.filterWidth};
          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);
        }

        workgroupBarrier();

        var value = 0.0;
        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {
          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {
            let xVal = mm_Asub[localRow + wR][localCol + wC];
            let wVal = mm_Bsub[wR][wC];
            value = fma(xVal, wVal, value);
          }
        }
        ${no(this.addBias,this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}};var ac=class{constructor(e,t=!1,o=null,n=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,",this.workgroupSize=[64,1,1],this.workPerThread=4,this.outputComponent=4,this.outputShape=e.outShape,this.virtualWidth=Math.ceil(this.outputShape[2]/this.workPerThread)*this.workPerThread;let s=[this.outputShape[0],this.outputShape[1],this.virtualWidth,this.outputShape[3]];this.dispatchLayout=X(s),this.dispatch=H(this.dispatchLayout,s,this.workgroupSize,[this.outputComponent*this.workPerThread,1,1]),y.assert(e.dataFormat==="channelsLast",()=>"TODO: NCHW is unimplemented"),t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=o,this.hasPreluActivation=n,this.shaderKey=`depthwiseVec4_${o}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`}getUserCode(){let e=(this.workPerThread-1)*this.convInfo.strideWidth+this.convInfo.filterWidth,t=this.convInfo.strideHeight,o=this.convInfo.strideWidth;return`
      ${gr(this.activation,this.hasPreluActivation,!0,4)}
      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {
        var value = vec4<f32>(0.0);
        if (col >=0 && col < uniforms.inDims[1]) {
          value = getX(batch, row, col, channel);
        }
        return value;
      }

      ${G("index")} {
        let width0 = uniforms.outShape[3] / ${this.outputComponent};
        let d1 = (index % width0) * ${this.outputComponent};
        var index1 = index / width0;
        let width1 = uniforms.virtualWidth / ${this.workPerThread};
        let c = (index1 % width1) * ${this.workPerThread};
        index1 = index1 / width1;
        let r = index1 % uniforms.outShape[1];
        let batch = index1 / uniforms.outShape[1];

        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${t}, ${o}) - uniforms.pads;

        let xRCorner = xRCCorner.x;
        let xCCorner = xRCCorner.y;
        var xVals : array<vec4<f32>, ${e}>;
        var dotProd : array<vec4<f32>, ${this.workPerThread}>;
        for (var i = 0; i < ${this.workPerThread}; i++) {
          dotProd[i] = vec4<f32>(0.0);
        }

        // Use constant instead of uniform can give better performance.
        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {
          let xR = xRCorner + wR;
          if (xR >=0 && xR < uniforms.inDims[0]) {
            for (var i = 0; i < ${e}; i++) {
              xVals[i] = readX(batch, xR, xCCorner + i, d1);
            }
            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {
              let wValue = getW(wR, wC, d1, 0);
              for (var i = 0; i < ${this.workPerThread}; i++) {
                dotProd[i] = fma(xVals[i * ${o} + wC], wValue, dotProd[i]);
              }
            }
          }
        }

        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let coords = vec4<i32>(batch, r, c + i, d1);
          if (coordsInBounds4D(coords, uniforms.outShape)) {
            var value = dotProd[i];
            ${no(this.addBias,this.activation)}
            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
          }
        }
      }
    `}};var ic=class{constructor(e,t=!1,o=null,n=!1){this.variableNames=["x","W"],this.uniforms=`pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,
      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,`,this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=e.dataFormat==="channelsLast",t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=o,this.hasPreluActivation=n,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){let e=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`
      ${gr(this.activation,this.hasPreluActivation,!1,4)}

      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let batch = coords[0];
          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.strides - uniforms.pads;
          let d2 = coords[${this.isChannelsLast?3:1}];
          let channelMul = uniforms.wShape[3];
          let d1 = d2 / channelMul;
          let q = d2 % channelMul;

          let inputRowStart = xRCCorner.x;
          let inputColStart = xRCCorner.y;
          let inputRowEnd = inputRowStart + uniforms.filterHeight *
              uniforms.dilations[0];
          let inputColEnd = inputColStart + uniforms.filterWidth *
              uniforms.dilations[1];

          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get
          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all
          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.
          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.
          var value = 0.0;

          // Extract if checking out of for loop for performance.
          if (inputRowStart >= 0 && inputColStart >= 0 &&
            inputRowEnd < uniforms.inDims[0] &&
                inputColEnd < uniforms.inDims[1]) {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  let xVal = ${e};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            } else {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                if (xR < 0 || xR >= uniforms.inDims[0]) {
                  continue;
                }

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  if (xC < 0 || xC >= uniforms.inDims[1]) {
                    continue;
                  }

                  let xVal = ${e};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            }
            ${no(this.addBias,this.activation)}
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}};function ble(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:a,pad:i,dataFormat:p,dilations:u,dimRoundingMode:l}=o,c=C.convertConv2DDataFormat(p),m=u;m==null&&(m=[1,1]);let d=C.computeConv2DInfo(n.shape,s.shape,a,m,i,l,!0,c),f=[{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.inHeight,d.inWidth]}],h=d.dataFormat==="channelsLast",g;return!h&&d.inHeight>16&&d.inWidth>16&&d.strideHeight===1&&d.strideWidth===1&&d.dilationWidth===1&&d.dilationHeight===1&&d.inChannels===d.outChannels?g=new Wx(d.outShape,d.filterHeight,d.filterWidth):h&&d.outHeight>4&&d.outWidth>4&&d.strideWidth<=2&&d.inChannels===d.outChannels&&d.dilationHeight===1&&d.dilationWidth===1&&d.inChannels%4===0?(g=new ac(d),f.push({type:"int32",data:[g.virtualWidth]})):(g=new ic(d),f.push({type:"int32",data:[d.filterHeight]},{type:"int32",data:[d.filterWidth]},{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]})),t.runWebGPUProgram(g,[n,s],n.dtype,f)}var uU={kernelName:Bn,backendName:"webgpu",kernelFunc:ble};var Ux=class{constructor(e){this.variableNames=["x","dy"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,
      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_filter"}getUserCode(){return`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let dm = coords[3];
        let d2 = d1 * uniforms.channelMul + dm;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yR = 0; yR < uniforms.outHeight; yR++) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];

            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC++) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              let dyValue = getDy(b, yR, yC, d2);
              let xValue = getX(b, xR, xC, d1);
              dotProd += xValue * dyValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}},Gx=class{constructor(e){this.variableNames=["dy","W"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, channelMul : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_input"}getUserCode(){return`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[3];
        let dyCorner = coords.yz - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }

          let idyR = i32(dyR);
          let wRPerm = uniforms.filterDims[0] - 1 - wR;

          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }

            let idyC = i32(dyC);
            let wCPerm = uniforms.filterDims[1] - 1 - wC;

            for (var dm = 0; dm < uniforms.channelMul; dm++) {
              let d2 = d1 * uniforms.channelMul + dm;
              let xValue = getDy(batch, idyR, idyC, d2);
              let wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}};function Cle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:a,dilations:i,pad:p,dimRoundingMode:u,filterShape:l}=o,c=C.computeConv2DInfo(n.shape,l,a,i,p,u,!0),m=new Ux(c),d=[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.filterHeight,c.filterWidth]},{type:"int32",data:[c.outHeight]},{type:"int32",data:[c.outWidth]},{type:"int32",data:[c.inHeight]},{type:"int32",data:[c.inWidth]},{type:"int32",data:[c.batchSize]},{type:"int32",data:[c.outChannels/c.inChannels]}];return t.runWebGPUProgram(m,[n,s],"float32",d)}var pU={kernelName:Gi,backendName:"webgpu",kernelFunc:Cle};function wle(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{strides:a,dilations:i,pad:p,dimRoundingMode:u,inputShape:l}=o,c=C.computeConv2DInfo(l,s.shape,a,i,p,u,!0),m=new Gx(c),d=[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.filterHeight-1-c.padInfo.top,c.filterWidth-1-c.padInfo.left]},{type:"int32",data:[c.filterHeight,c.filterWidth]},{type:"int32",data:[c.outHeight]},{type:"int32",data:[c.outWidth]},{type:"int32",data:[c.outChannels/c.inChannels]}];return t.runWebGPUProgram(m,[n,s],n.dtype,d)}var lU={kernelName:Hi,backendName:"webgpu",kernelFunc:wle};var Hx=class{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,e],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="diag"}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);
          setOutputAtIndex(index, value);
        }
      }
    `}};function Sle(r){let{inputs:e,backend:t}=r,{x:o}=e,n=[...o.shape,...o.shape],s=y.sizeFromShape(o.shape),a=le({inputs:{x:o},backend:t,attrs:{shape:[s]}}),i=new Hx(s),p=t.runWebGPUProgram(i,[a],a.dtype),u=le({inputs:{x:p},backend:t,attrs:{shape:n}});return t.disposeData(a.dataId),t.disposeData(p.dataId),u}var cU={kernelName:ca,backendName:"webgpu",kernelFunc:Sle};var Kx=class{constructor(e){this.variableNames=["x","w"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="dilation2d"}getUserCode(){return`
       ${G("index")} {
         if (index < uniforms.size) {
           let neg_infinity = -3.4e38;
           let coords = getOutputCoords();
           let batch = coords.x;
           let d1 = coords.w;
           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;
           let hBeg = outTopLeftCorner.x;
           let wBeg = outTopLeftCorner.y;

           var curVal = neg_infinity;
           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {
             let hIn = hBeg + h * uniforms.dilations[0];

             if (hIn >= 0 && hIn < uniforms.xShape[1]) {
               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {
                 let wIn = wBeg + w * uniforms.dilations[1];

                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {
                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);
                   if (val > curVal) {
                     curVal = val;
                   }
                 }
               }
             }
           }

           setOutputAtIndex(index, curVal);
         }
       }
     `}};function Ile(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:a,pad:i,dilations:p}=o,u=C.computeDilation2DInfo(n.shape,s.shape,a,i,"NHWC",p),l=[u.padInfo.top,u.padInfo.left],c=[{type:"int32",data:[u.filterHeight,u.filterWidth]},{type:"int32",data:[...l]},{type:"int32",data:[u.strideHeight,u.strideWidth]},{type:"int32",data:[u.dilationHeight,u.dilationWidth]}],m=new Kx(u);return t.runWebGPUProgram(m,[n,s],n.dtype,c)}var mU={kernelName:zn,backendName:"webgpu",kernelFunc:Ile};var qx=class{constructor(e,t){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.inShape,this.dispatchLayout=X(e.outShape),this.dispatch=H(this.dispatchLayout,e.outShape,this.workgroupSize),t!=="float32"&&t!=="int32")throw new Error(`Dilation2DBackpropInput only supports float32 and int32
          types, does not support ${t} type.`);this.type=t,this.shaderKey="dilation2DBackpropInput"}getUserCode(){return`
       ${G("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var xRMax = 0;
           var xCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     xRMax = xR;
                     xCMax = xC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.xShape[3] *
               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));
           let value = getDy(b, r, c, d);
           ${oo("&result[flatIndexIn]","value",this.type)}
         }
       }
     `}},jx=class{constructor(e,t,o){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.filterShape,this.dispatchLayout=X(e.outShape),this.dispatch=H(this.dispatchLayout,e.outShape,this.workgroupSize),o!=="float32"&&o!=="int32")throw new Error(`Dilation2DBackpropFilter only supports float32 and int32
          types, does not support ${o} type.`);this.type=o,this.shaderKey="dilation2DBackpropFilter"}getUserCode(){return`
       ${G("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var wRMax = 0;
           var wCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     wRMax = wR;
                     wCMax = wC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);
           let value = getDy(b, r, c, d);
           ${oo("&result[flatIndexIn]","value",this.type)}
         }
       }
     `}};function vle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,dy:a}=e,{strides:i,pad:p,dilations:u}=o,l=C.computeDilation2DInfo(n.shape,s.shape,i,p,"NHWC",u),c=s.dtype,m=new jx(l,s.shape,c),d=[{type:"int32",data:[l.filterHeight,l.filterWidth]},{type:"int32",data:[l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.strideHeight,l.strideWidth]},{type:"int32",data:[l.dilationHeight,l.dilationWidth]},{type:"int32",data:[y.sizeFromShape(l.outShape)]}],f=Nt({backend:t,attrs:{shape:s.shape,value:0,dtype:c}});return t.runWebGPUProgram(m,[n,s,a],c,d,f)}var dU={kernelName:qi,backendName:"webgpu",kernelFunc:vle};function kle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,dy:a}=e,{strides:i,pad:p,dilations:u}=o,l=C.computeDilation2DInfo(n.shape,s.shape,i,p,"NHWC",u),c=n.dtype,m=new qx(l,c),d=[{type:"int32",data:[l.filterHeight,l.filterWidth]},{type:"int32",data:[l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.strideHeight,l.strideWidth]},{type:"int32",data:[l.dilationHeight,l.dilationWidth]},{type:"int32",data:[y.sizeFromShape(l.outShape)]}],f=Nt({backend:t,attrs:{shape:l.inShape,value:0,dtype:c}});return t.runWebGPUProgram(m,[n,s,a],c,d,f)}var fU={kernelName:Ki,backendName:"webgpu",kernelFunc:kle};var Xx=class{constructor(e,t,o){this.variableNames=["Image"],this.uniforms="alpha: f32,",this.workgroupSize=[64,1,1],this.pixelsOpType=$i.DRAW,this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.type=t,this.textureFormat=o,this.shaderKey=`draw_${t}_${o}`}getUserCode(){let e,t=this.type==="float32"?"value":"value / 255.0";return e=`
      if (uniforms.numChannels == 1) {
        rgba[0] = ${t};
        rgba[1] = ${t};
        rgba[2] = ${t};
      } else {
        rgba[d] = ${t};
      }`,`
       @group(0) @binding(0) var outImage : texture_storage_2d<${this.textureFormat}, write>;
       ${G("index")} {
         if (index < uniforms.size) {
           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);
           for (var d = 0; d < uniforms.numChannels; d = d + 1) {
             let value = f32(inBuf[index * uniforms.numChannels + d]);
             ${e}
           }
           rgba.x = rgba.x * rgba.w;
           rgba.y = rgba.y * rgba.w;
           rgba.z = rgba.z * rgba.w;
           let coords = getCoordsFromIndex(index);
           textureStore(outImage, vec2<i32>(coords.yx), rgba);
         }
       }
      `}};function Nle(r){let{inputs:e,backend:t,attrs:o}=r,{image:n}=e,{canvas:s,options:a}=o,[i,p]=n.shape.slice(0,2),{imageOptions:u}=a||{},l=(u==null?void 0:u.alpha)||1,c=t.device.features.has("bgra8unorm-storage")?"bgra8unorm":"rgba8unorm",m=[i,p],d=new Xx(m,n.dtype,c);s.width=p,s.height=i;let f="webgpu",h=s.getContext(f),g;h||(g=new OffscreenCanvas(p,i),h=g.getContext(f));let x=n.shape.length===3?n.shape[2]:1;h.configure({device:t.device,format:c,usage:GPUTextureUsage.STORAGE_BINDING,alphaMode:"premultiplied"});let b="int32",w=t.makeTensorInfo(m,b),S=t.tensorMap.get(w.dataId);S.resource=h.getCurrentTexture(),S.external=!0;let k=[{type:"uint32",data:[x]},{type:"float32",data:[l]}];if(t.runWebGPUProgram(d,[n],b,k,w),g){let T=s.getContext("2d");if(!T)throw new Error("Please make sure this canvas has only been used for 2d or webgpu context!");T.drawImage(g,0,0)}return t.disposeData(w.dataId),n}var hU={kernelName:Mu,backendName:"webgpu",kernelFunc:Nle};var Kv=tt({opType:fe.MUL,cpuKernelImpl:YV,supportsComplex:!0}),gU={kernelName:$o,backendName:"webgpu",kernelFunc:Kv};function qv(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o;return ao(n,s,a,"sum",t)}var xU={kernelName:As,backendName:"webgpu",kernelFunc:qv};function Tle(r){let{inputs:e,backend:t,attrs:o}=r,{equation:n}=o,s=e,{allDims:a,summedDims:i,idDims:p}=C.decodeEinsumEquation(n,s.length);C.checkEinsumDimSizes(a.length,p,s);let{path:u,steps:l}=C.getEinsumComputePath(i,p),c=l.length,m=null,d=a.length,f=[];for(let h=0;h<c;++h){for(let g of l[h]){let{permutationIndices:x,expandDims:b}=C.getEinsumPermutation(d,p[g]),w;C.isIdentityPermutation(x)?w=s[g]:(w=Cr({inputs:{x:s[g]},backend:t,attrs:{perm:x}}),f.push(w));let S=w.shape.slice();for(let k=0;k<b.length;++k)S.splice(b[k],0,1);y.arraysEqual(w.shape,S)||(w=le({inputs:{x:w},backend:t,attrs:{shape:S}}),f.push(w)),m===null?m=w:(m=Kv({inputs:{a:w,b:m},backend:t}),f.push(m))}h<c-1&&(u[h]>=0&&(m=qv({inputs:{x:m},backend:t,attrs:{axis:u[h]-(a.length-d),keepDims:!1}}),f.push(m)),d--)}for(let h of f)h!==m&&t.disposeData(h.dataId);return m}var yU={kernelName:ji,backendName:"webgpu",kernelFunc:Tle};var _le=ye({opType:Z.ELU}),bU={kernelName:Wn,backendName:"webgpu",kernelFunc:_le};var Ele=r=>{let{inputs:e,backend:t}=r,{dy:o,y:n}=e,s=new Di(fe.ELU_DER,o.shape,n.shape);return t.runWebGPUProgram(s,[o,n],o.dtype)},CU={kernelName:ri,backendName:"webgpu",kernelFunc:Ele};var $le=tt({opType:fe.EQUAL,dtype:"bool",cpuKernelImpl:PV}),wU={kernelName:xo,backendName:"webgpu",kernelFunc:$le};var Rle=ye({opType:Z.ERF}),SU={kernelName:Un,backendName:"webgpu",kernelFunc:Rle};var Dle=ye({opType:Z.EXP,cpuKernelImpl:OV,dtype:"float32"}),IU={kernelName:yo,backendName:"webgpu",kernelFunc:Dle};function Yx(r){let{inputs:e,attrs:t,backend:o}=r,{dim:n}=t,{input:s}=e,a=s.shape.length,i=s.shape.slice(),p=n;return n<0&&(y.assert(-(a+1)<=n,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),p=a+n+1),i.splice(p,0,1),le({inputs:{x:s},backend:o,attrs:{shape:i}})}var vU={kernelName:ma,backendName:"webgpu",kernelFunc:Yx};var Ale=ye({opType:Z.EXPM1,cpuKernelImpl:MV}),kU={kernelName:bo,backendName:"webgpu",kernelFunc:Ale};var _m=class{constructor(e,t){this.variableNames=["real","imag"],this.outputShape=[],this.uniforms="exponentMultiplier : f32, denominator: f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.component=e,this.shaderKey=`fft_${e}`}getUserCode(){return`
    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {
      ${this.component==="real"?"return real * expR - imag * expI;":"return real * expI + imag * expR;"}
    }

    fn mulMatDFT(batch: i32, index: i32) -> f32 {
      let indexRatio = f32(index) / f32(uniforms.realShape[1]);
      let exponentMultiplierTimesIndexRatio =
          uniforms.exponentMultiplier * indexRatio;

      var result = 0.0;

      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {
        // x = (-2|2 * PI / N) * index * i;
        let x = exponentMultiplierTimesIndexRatio * f32(i);
        let expR = cos(x);
        let expI = sin(x);
        let real = getReal(batch, i);
        let imag = getImag(batch, i);

        result = result +
            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;
      }

      return result;
    }

    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));
      }
    }
  `}};function Qx(r,e,t){let o=t.tensorMap.get(r.dataId),n=y.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],a=n/s,i=[],p=le({inputs:{x:r},backend:t,attrs:{shape:[a,s]}});i.push(p);let u=p.shape,l=new _m("real",u),c=new _m("imag",u),m=[{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:u},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:u}],d=e?2*Math.PI:-2*Math.PI,f=e?u[1]:1,h=[{type:"float32",data:[d]},{type:"float32",data:[f]}],g=t.runWebGPUProgram(l,m,"float32",h);i.push(g);let x=t.runWebGPUProgram(c,m,"float32",h);i.push(x);let b=Uo({inputs:{real:g,imag:x},backend:t});i.push(b);let w=le({inputs:{x:b},backend:t,attrs:{shape:r.shape}});return i.forEach(S=>t.disposeData(S.dataId)),w}function Fle(r){let{inputs:e,backend:t}=r,{input:o}=e;return Qx(o,!1,t)}var NU={kernelName:Xi,backendName:"webgpu",kernelFunc:Fle};var Zx=class{constructor(e){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let coordX = uniforms.xShape[2] - coords[2] - 1;
          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);
          setOutputAtIndex(index, outputValue);
        }
      }
    `}};var TU={kernelName:Gn,backendName:"webgpu",kernelFunc:({inputs:r,backend:e})=>{let{image:t}=r,o=e,n=new Zx(t.shape);return o.runWebGPUProgram(n,[t],t.dtype)}};var Ple=ye({opType:Z.FLOOR,cpuKernelImpl:LV}),_U={kernelName:Co,backendName:"webgpu",kernelFunc:Ple};var Ole=tt({opType:fe.FLOOR_DIV,cpuKernelImpl:BV,dtype:"int32"}),EU={kernelName:wo,backendName:"webgpu",kernelFunc:Ole};var Jx=class{constructor(e,t,o=!1){this.pixelsOpType=$i.FROM_PIXELS,this.outputShape=[0],this.variableNames=[],this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[t,1,1]),this.importVideo=o,this.shaderKey=`fromPixels_${this.importVideo}`}getUserCode(){let e=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)";return`
      @binding(1) @group(0) var src: ${this.importVideo?"texture_external":"texture_2d<f32>"};
      ${G("index")} {
        let flatIndex = index * uniforms.numChannels;
        if (flatIndex < uniforms.size) {
          let coords = getCoordsFromIndex(flatIndex);
          let values = ${e};
          for (var i = 0; i < uniforms.numChannels; i = i + 1) {
            result[flatIndex + i] = i32(floor(255.0 * values[i]));
          }
        }
      }
  `}};var $U={kernelName:Lu,backendName:"webgpu",kernelFunc:Mle},uc,jv=A().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function Mle(r){let{inputs:e,backend:t,attrs:o}=r,{pixels:n}=e,{numChannels:s}=o;if(n==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let a=typeof HTMLVideoElement!="undefined"&&n instanceof HTMLVideoElement,i=typeof HTMLImageElement!="undefined"&&n instanceof HTMLImageElement,p=typeof HTMLCanvasElement!="undefined"&&n instanceof HTMLCanvasElement||typeof OffscreenCanvas!="undefined"&&n instanceof OffscreenCanvas,u=typeof ImageBitmap!="undefined"&&n instanceof ImageBitmap,[l,c]=a?[n.videoWidth,n.videoHeight]:[n.width,n.height],m=[c,l,s],d=A().getBool("WEBGPU_IMPORT_EXTERNAL_TEXTURE")&&a,f=a||i;if(u||p||f){let b;if(d)b=t.device.importExternalTexture({source:n});else{if(f){let L=A().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(uc==null||L!==jv)&&(jv=L,uc=document.createElement("canvas").getContext("2d",{willReadFrequently:jv})),uc.canvas.width=l,uc.canvas.height=c,uc.drawImage(n,0,0,l,c),n=uc.canvas}let F=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,M=t.textureManager.acquireTexture(m[1],m[0],"rgba8unorm",F);t.queue.copyExternalImageToTexture({source:n},{texture:M},[m[1],m[0]]),b=M}let w=y.sizeFromShape(m),S=y.computeStrides(m),k=new Jx(m,s,d),T=[{type:"uint32",data:[w]},{type:"uint32",data:[s]},{type:"uint32",data:[...S]}],E=t.makeTensorInfo([c,l],"int32"),R=t.tensorMap.get(E.dataId);R.resource=b;let D=t.runWebGPUProgram(k,[E],"int32",T);return t.disposeData(E.dataId),D}let h=n.data,g=h;if(s!=null&&s!==4){g=new Uint8Array(n.width*n.height*s);let b=h.length,w=0;for(let S=0;S<b;S++)S%4<s&&(g[w++]=h[S])}let x=t.makeTensorInfo(m,"int32",new Int32Array(g));return t.uploadToGPU(x.dataId),x}var ey=class{constructor(e,t,o,n,s){this.uniforms="varianceEpsilon : f32,",this.workgroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],C.assertAndGetBroadcastShape(e,t),C.assertAndGetBroadcastShape(e,o),this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),n!=null&&(C.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset")),s!=null&&(C.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale")),this.offsetShape=n,this.scaleShape=s,this.shaderKey="batchNorm"}getUserCode(){let e="0.0";this.offsetShape!=null&&(e="getOffsetByOutputIndex(index)");let t="1.0";return this.scaleShape!=null&&(t="getScaleByOutputIndex(index)"),`
      ${G("index")} {
        if (index < uniforms.size)
        {
          let xValue = getXByOutputIndex(index);
          let meanValue = getMeanByOutputIndex(index);
          let varianValue = getVarianceByOutputIndex(index);
          let offsetValue = ${e};
          let scaleValue = ${t};
          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));
          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));
        }
      }
  `}};var RU={kernelName:Hn,backendName:"webgpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{x:o,scale:n,offset:s,mean:a,variance:i}=r,{varianceEpsilon:p}=e,u=t,l=[o,a,i],c=null;s!=null&&(c=s.shape,l.push(s));let m=null;n!=null&&(m=n.shape,l.push(n));let d=new ey(o.shape,a.shape,i.shape,c,m),f=[{type:"float32",data:[p]}];return u.runWebGPUProgram(d,l,o.dtype,f)}};function Lle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=e,{strides:p,pad:u,dataFormat:l,dilations:c,dimRoundingMode:m,activation:d,leakyreluAlpha:f}=o,h=C.convertConv2DDataFormat(l),g=C.computeConv2DInfo(n.shape,s.shape,p,c,u,m,!1,h);return Dx({x:n,filter:s,convInfo:g,backend:t,bias:a,preluActivationWeights:i,leakyreluAlpha:f,activation:d})}var DU={kernelName:jo,backendName:"webgpu",kernelFunc:Lle};function Ble(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=e,{strides:p,pad:u,dilations:l,dimRoundingMode:c,activation:m,leakyreluAlpha:d}=o,f=l;f==null&&(f=[1,1]),y.assert(C.eitherStridesOrDilationsAreOne(p,f),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${p} and dilations '${f}'`);let h=C.computeConv2DInfo(n.shape,s.shape,p,f,u,c,!0),g=[n,s],x=a!=null,b=i!=null;x&&g.push(a),b&&g.push(i);let w=[{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.inHeight,h.inWidth]}],S;return h.outHeight>4&&h.outWidth>4&&h.strideWidth<=2&&h.inChannels===h.outChannels&&h.dilationHeight===1&&h.dilationWidth===1&&h.inChannels%4===0?(S=new ac(h,x,m,b),w.push({type:"int32",data:[S.virtualWidth]})):(S=new ic(h,x,m,b),w.push({type:"int32",data:[h.filterHeight]},{type:"int32",data:[h.filterWidth]},{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]})),m==="leakyrelu"&&(w.push({type:"float32",data:[d]}),S.uniforms+=" alpha : f32,"),t.runWebGPUProgram(S,g,"float32",w)}var AU={kernelName:Xo,backendName:"webgpu",kernelFunc:Ble};var ty=class{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`gathernd_${e}`,this.sliceDim=e,this.uniforms=`sliceDim : i32, strides : ${ft(e)},`}getUserCode(){let e;return this.sliceDim>1?e="uniforms.strides[j]":e="uniforms.strides",`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          var flattenIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexTemp = i32(round(getIndices(coords[0], j)));
            let strideNum = ${e};
            flattenIndex = flattenIndex + indexTemp * strideNum;
          }

          setOutputAtIndex(index, getA(flattenIndex, coords[1]));
        }
      }
      `}};function zle(r){let{inputs:e,backend:t}=r,{params:o,indices:n}=e,s=n.shape,a=s[s.length-1],i=y.sizeFromShape(o.shape),[p,u,l,c]=C.prepareAndValidate(o,n),m=le({inputs:{x:n},backend:t,attrs:{shape:[u,a]}}),d=le({inputs:{x:o},backend:t,attrs:{shape:[y.sizeFromShape(o.shape)/l,l]}});if(t.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let b=t.readSync(n.dataId),w=t.bufferSync(o),S=zV(b,w,o.dtype,u,a,l,c,o.shape,i);return t.makeTensorInfo(p,o.dtype,S.values)}let f=new ty(a,[u,l]),h=[{type:"int32",data:[a]},{type:"int32",data:c}],g=t.runWebGPUProgram(f,[d,m],d.dtype,h),x=le({inputs:{x:g},backend:t,attrs:{shape:p}});return t.disposeData(m.dataId),t.disposeData(d.dataId),t.disposeData(g.dataId),x}var FU={kernelName:Kn,backendName:"webgpu",kernelFunc:zle};var ry=class{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.slice(),this.aShape=e,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gather"}getUserCode(){let e=Vle(this.aShape);return`
      ${G("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let indexZ = i32(getIndices(resRC.x, resRC.z));
          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);
          setOutputAtIndex(index, inBounds * getA(${e}));
        }
      }
    `}};function Vle(r){let e=["resRC.x","resRC.y","resRC.z","resRC.w"],t=[];for(let o=0;o<r.length;o++)o===2?t.push("indexZ"):t.push(`${e[o]}`);return t.join()}function Xv(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,indices:s}=e,{axis:a,batchDims:i}=o,p=y.parseAxisParam(a,n.shape)[0],u=C.segment_util.collectGatherOpShapeInfo(n,s,p,i),l=y.sizeFromShape(s.shape),c=[],m=le({inputs:{x:n},backend:t,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=le({inputs:{x:s},backend:t,attrs:{shape:[u.batchSize,l/u.batchSize]}});c.push(m),c.push(d);let f=[u.batchSize,u.outerSize,l/u.batchSize,u.sliceSize];if(t.shouldExecuteOnCPU([n,s])){let w=t.tensorMap.get(d.dataId).values,S=ie(d.shape,d.dtype,w),T=t.tensorMap.get(m.dataId).values,E=ie(m.shape,m.dtype,T),R=VV(E,S,f);return c.forEach(D=>t.disposeData(D.dataId)),t.makeTensorInfo(u.outputShape,R.dtype,R.values)}let h=new ry(m.shape,f),g=t.runWebGPUProgram(h,[m,d],m.dtype);c.push(g);let x=le({inputs:{x:g},backend:t,attrs:{shape:u.outputShape}});return c.forEach(b=>t.disposeData(b.dataId)),x}var PU={kernelName:fa,backendName:"webgpu",kernelFunc:Xv};var Wle=tt({opType:fe.GREATER,cpuKernelImpl:UV,dtype:"bool"}),OU={kernelName:So,backendName:"webgpu",kernelFunc:Wle};var Ule=tt({opType:fe.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:WV}),MU={kernelName:Io,backendName:"webgpu",kernelFunc:Ule};function Gle(r){let{inputs:e,backend:t}=r,{input:o}=e;return Qx(o,!0,t)}var LU={kernelName:Yi,backendName:"webgpu",kernelFunc:Gle};var Hle=ye({opType:Z.IS_FINITE,dtype:"bool"}),BU={kernelName:qn,backendName:"webgpu",kernelFunc:Hle};var Kle=ye({opType:Z.IS_INF,dtype:"bool"}),zU={kernelName:jn,backendName:"webgpu",kernelFunc:Kle};var qle=ye({opType:Z.IS_NAN,dtype:"bool"}),VU={kernelName:Xn,backendName:"webgpu",kernelFunc:qle};function jle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{alpha:s}=o,a=[{type:"float32",data:[s]}],i=new so(n.shape,Z.LEAKYRELU,"alpha : f32,");return t.runWebGPUProgram(i,[n],"float32",a)}var WU={kernelName:Yn,backendName:"webgpu",kernelFunc:jle};var Xle=tt({opType:fe.LESS,dtype:"bool",cpuKernelImpl:HV}),UU={kernelName:ko,backendName:"webgpu",kernelFunc:Xle};var Yle=tt({opType:fe.LESS_EQUAL,dtype:"bool",cpuKernelImpl:GV}),GU={kernelName:No,backendName:"webgpu",kernelFunc:Yle};var oy=class{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="start : f32, step : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="linSpace"}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);
        }
      }
    `}};function Qle(r){let{backend:e,attrs:t}=r,{start:o,stop:n,num:s}=t,a=(n-o)/(s-1),i=new oy(s),p=[{type:"float32",data:[o]},{type:"float32",data:[a]}];return e.runWebGPUProgram(i,[],"float32",p)}var HU={kernelName:Qn,backendName:"webgpu",kernelFunc:Qle};var Zle=ye({opType:Z.LOG,cpuKernelImpl:KV}),KU={kernelName:To,backendName:"webgpu",kernelFunc:Zle};var Jle=ye({opType:Z.LOG1P}),qU={kernelName:Zn,backendName:"webgpu",kernelFunc:Jle};var ece=tt({opType:fe.LOGICAL_AND,dtype:"bool"}),jU={kernelName:Jn,backendName:"webgpu",kernelFunc:ece};var tce=ye({opType:Z.LOGICAL_NOT}),XU={kernelName:es,backendName:"webgpu",kernelFunc:tce};var rce=tt({opType:fe.LOGICAL_OR}),YU={kernelName:ts,backendName:"webgpu",kernelFunc:rce};var QU=`
  var powValue = 0.0;
  let basis = uniforms.bias + uniforms.alpha * sum;
  if (uniforms.beta == 0.5) {
    powValue = inverseSqrt(basis);
  } else if (uniforms.beta == 1.0) {
    powValue = 1.0 / basis;
  } else {
    powValue = exp(log(basis) * (-uniforms.beta));
  }
`,ny=class{constructor(e){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];
        let d = coords[3];

        let x = getX(b, r, c, d);
        var sum = 0.0;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let idx = d + i;
          if (idx >= 0 && idx < uniforms.xShape[3]) {
            let z = getX(b, r, c, idx);
            sum = sum + z * z;
          }
        }
        ${QU}

        setOutputAtIndex(index, x * powValue);
      }
    }
  `}},sy=class{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[256,1,1],this.maxAllowRadius=16,y.assert(t<=this.maxAllowRadius,()=>`Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${t}`),this.outputShape=e,this.elementsPerWorkgroup=this.workgroupSize[0]-2*this.maxAllowRadius,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=H(this.dispatchLayout,this.outputShape,[this.elementsPerWorkgroup,this.workgroupSize[1],this.workgroupSize[2]]),this.shaderKey="lrn_shared"}getUserCode(){return`
    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;
    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};
    const maxAllowRadius = ${this.maxAllowRadius};

    ${G()} {
      let localDepth = i32(localId.x);
      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;
      let xDepth = workgroupDepth + localDepth - maxAllowRadius;
      let b = i32(globalId.z) / uniforms.xShape[1];
      let r = i32(globalId.z) - b * uniforms.xShape[1];
      let c = i32(globalId.y);
      let d = workgroupDepth + localDepth;

      var x = 0.0;
      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {
        x = getX(b, r, c, xDepth);
      }
      lrnSub[localDepth] = x;
      workgroupBarrier();

      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {
        var sum = 0.0;
        let index = localDepth + maxAllowRadius;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let z = lrnSub[index + i];
          sum = sum + z * z;
        }
        ${QU}

        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);
      }
    } `}};function oce(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{depthRadius:s,bias:a,alpha:i,beta:p}=o,u;s>16?u=new ny(n.shape):u=new sy(n.shape,s);let l=[{type:"int32",data:[s]},{type:"float32",data:[a]},{type:"float32",data:[i]},{type:"float32",data:[p]}];return t.runWebGPUProgram(u,[n],n.dtype,l)}var ZU={kernelName:rs,backendName:"webgpu",kernelFunc:oce};var ay=class{constructor(e){this.outputShape=[],this.variableNames=["inputImage","outputImage","dy"],this.uniforms="depthRadius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn_grad"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];

        let MIN_DEPTH_BEGIN = 0;
        let MAX_DEPTH_END = uniforms.outShape[3];
        var result = 0.0;
        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {
          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);
          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);

          var norm = 0.0;
          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            } else {
              break;
            }
          }

          norm = uniforms.alpha * norm + uniforms.bias;

          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              var dyi = -2.0 * uniforms.alpha * uniforms.beta
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * uniforms.beta);
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            } else {
              break;
            }
          }
        }

        setOutputAtIndex(index, result);
      }
    }
  `}};function nce(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,y:s,dy:a}=e,{depthRadius:i,bias:p,alpha:u,beta:l}=o,c=new ay(n.shape),m=[{type:"int32",data:[i]},{type:"float32",data:[p]},{type:"float32",data:[u]},{type:"float32",data:[l]}];return t.runWebGPUProgram(c,[n,s,a],n.dtype,m)}var JU={kernelName:oi,backendName:"webgpu",kernelFunc:nce};var sce=tt({opType:fe.MAX,cpuKernelImpl:jV}),eG={kernelName:_o,backendName:"webgpu",kernelFunc:sce};function ace(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:a,pad:i,dimRoundingMode:p}=o,l=C.computePool2DInfo(n.shape,s,a,1,i,p);return bx(n,l,"max",t)}var tG={kernelName:ns,backendName:"webgpu",kernelFunc:ace};function ice(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:a,pad:i,dataFormat:p,dimRoundingMode:u}=o,l=[1,1,1],c=C.computePool3DInfo(n.shape,s,a,l,i,u,p),m=new $u(c,"max"),d=[{type:"int32",data:[c.strideDepth,c.strideHeight,c.strideWidth]},{type:"int32",data:[c.padInfo.front,c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.inDepth,c.inHeight,c.inWidth]},{type:"int32",data:[c.effectiveFilterDepth,c.effectiveFilterHeight,c.effectiveFilterWidth]}];return t.runWebGPUProgram(m,[n],n.dtype,d)}var rG={kernelName:ha,backendName:"webgpu",kernelFunc:ice};var iy=class{constructor(e){this.variableNames=["dy","maxPos"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool2DBackprop"}getUserCode(){return`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);
            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            let curPosValue = wR * uniforms.filterDims[1] + wC;
            let mask = select(0.0, 1.0, maxPosValue == curPosValue);
            dotProd += dyValue * mask;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}},uy=class{constructor(e){this.variableNames=["dy","maxPos"],this.uniforms=`strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool3DBackprop"}getUserCode(){return`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;

        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;
              let mask = select(0.0, 1.0, maxPosValue == curPosValue);
              dotProd += dyValue * mask;
            }
          }
        }

        setOutputAtIndex(index, dotProd);
      }
    }
    `}};function uce(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,a=s,{filterSize:i,strides:p,pad:u,dimRoundingMode:l}=o,c=[1,1,1],m=C.computePool3DInfo(a.shape,i,p,c,u,l),d=new $u(m,"max",!0),f=[{type:"int32",data:[m.strideDepth,m.strideHeight,m.strideWidth]},{type:"int32",data:[m.padInfo.front,m.padInfo.top,m.padInfo.left]},{type:"int32",data:[m.inDepth,m.inHeight,m.inWidth]},{type:"int32",data:[m.effectiveFilterDepth,m.effectiveFilterHeight,m.effectiveFilterWidth]}],h=t.runWebGPUProgram(d,[a],"int32",f),g=new uy(m);f=[{type:"int32",data:[m.strideDepth,m.strideHeight,m.strideWidth]},{type:"int32",data:[m.effectiveFilterDepth-1-m.padInfo.front,m.effectiveFilterHeight-1-m.padInfo.top,m.effectiveFilterWidth-1-m.padInfo.left]},{type:"int32",data:[m.effectiveFilterDepth,m.effectiveFilterHeight,m.effectiveFilterWidth]},{type:"int32",data:[m.outDepth]},{type:"int32",data:[m.outHeight]},{type:"int32",data:[m.outWidth]}];let x=t.runWebGPUProgram(g,[n,h],a.dtype,f);return t.disposeData(h.dataId),x}var oG={kernelName:Ji,backendName:"webgpu",kernelFunc:uce};function pce(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s,output:a}=e,i=s;wm([s,a],"maxPoolGrad");let{filterSize:p,strides:u,pad:l,dimRoundingMode:c}=o,m=C.computePool2DInfo(i.shape,p,u,1,l,c),d=new Ka(m,"max",!0),f=[{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.padInfo.top,m.padInfo.left]},{type:"int32",data:[m.dilationHeight,m.dilationWidth]},{type:"int32",data:[m.inHeight,m.inWidth]},{type:"int32",data:[m.effectiveFilterHeight,m.effectiveFilterWidth]}],h=t.runWebGPUProgram(d,[i],"int32",f),g=new iy(m);f=[{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.effectiveFilterHeight-1-m.padInfo.top,m.effectiveFilterWidth-1-m.padInfo.left]},{type:"int32",data:[m.dilationHeight,m.dilationWidth]},{type:"int32",data:[m.effectiveFilterHeight,m.effectiveFilterWidth]},{type:"int32",data:[m.outHeight]},{type:"int32",data:[m.outWidth]}];let x=t.runWebGPUProgram(g,[n,h],i.dtype,f);return t.disposeData(h.dataId),x}var nG={kernelName:Zi,backendName:"webgpu",kernelFunc:pce};function lce(r){let{inputs:e,backend:t,attrs:o}=r,{filterSize:n,strides:s,pad:a,includeBatchInIndex:i}=o,{x:p}=e;y.assert(p.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${p.shape.length}.`);let u=[1,1];y.assert(C.eitherStridesOrDilationsAreOne(s,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);let l=C.computePool2DInfo(p.shape,n,s,u,a),c=[{type:"int32",data:[l.strideHeight,l.strideWidth]},{type:"int32",data:[l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.dilationHeight,l.dilationWidth]},{type:"int32",data:[l.inHeight,l.inWidth]},{type:"int32",data:[l.effectiveFilterHeight,l.effectiveFilterWidth]}],m=new Ka(l,"max",!1),d=t.runWebGPUProgram(m,[p],p.dtype,c);m=new Ka(l,"max",!0,!0,i);let f=t.runWebGPUProgram(m,[p],"int32",c);return[d,f]}var sG={kernelName:ga,backendName:"webgpu",kernelFunc:lce};function cce(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o;return ao(n,s,a,"min",t)}var aG={kernelName:as,backendName:"webgpu",kernelFunc:cce};var mce=tt({opType:fe.MIN,cpuKernelImpl:XV}),iG={kernelName:Eo,backendName:"webgpu",kernelFunc:mce};var py=class{constructor(e,t,o){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((n,s)=>n[0]+e[s]+n[1]),this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,t.map((n,s)=>{this.uniforms+=` pad${s} : vec2<i32>,`}),this.offset=o==="reflect"?0:1,this.shaderKey=`mirrorPad_${o}`}getUserCode(){let e=this.xShape.length,t=this.xShape.map((u,l)=>`uniforms.pad${l}[0]`).join(","),o=this.xShape.map((u,l)=>`uniforms.pad${l}[0] + uniforms.xShape${e>1?`[${l}]`:""}`).join(","),n=e===1?"start":"start[i]",s=e===1?"end":"end[i]",a=e===1?"outC":"outC[i]",i=ft(e),p=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`
      ${G("index")} {
        if (index < uniforms.size) {
          let start = ${i}(${t});
          let end = ${i}(${o});
          var outC = getCoordsFromIndex(index);
          for (var i = 0; i < ${e}; i = i + 1) {
            if (${a} < ${n}) {
              ${a} = ${n} * 2 - ${a} - ${this.offset};
            } else if(${a} >= ${s}) {
              ${a} = (${s} - 1) * 2 - ${a} + ${this.offset};
            }
          }
          let coords = outC - start;
          setOutputAtIndex(index, getX(${p}));
        }
      }
    `}};var uG={kernelName:is,backendName:"webgpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{x:o}=r,{paddings:n,mode:s}=e,a=t,i=n.map(l=>({type:"int32",data:[l[0],l[1]]})),p=new py(o.shape,n,s);return a.runWebGPUProgram(p,[o],o.dtype,i)}};var dce=tt({opType:fe.MOD}),pG={kernelName:us,backendName:"webgpu",kernelFunc:dce};var ly=class{constructor(e,t){this.variableNames=["probs"],this.outputShape=[],this.uniforms="seed : f32, numOutcomes: i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="multinomial"}getUserCode(){return`
    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {
      let HASHSCALE1 = 443.8975;
      let p = resultUV * seed;
      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);
      p3 = p3 + dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords[0];

        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),
            f32(coords[0]) / f32(uniforms.outShape[0]));
        let r = random(uniforms.seed, resUV);
        var cdf = 0.0;
        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {
          cdf = cdf + getProbs(batch, i);

          if (r < cdf) {
            setOutputAtIndexI32(index, i);
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);
      }
    }
  `}};var cy=class{constructor(e){this.variableNames=["logits"],this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=[this.outputShape[0],1,1],this.outputShape[1]>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.shaderKey="softmax"}getUserCode(){return`
    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;
    var<workgroup> rowMaxShared : f32;
    var<workgroup> rowSumShared : f32;
    const blockSize = ${this.workgroupSize[0]};
    ${G("index")} {
      let row = index / blockSize;
      let tid = i32(localId.x);
      let cols = uniforms.outShape[1];

      var threadMax = -3.402823e+38f;
      for (var col = tid; col < cols; col += blockSize) {
        let value = getLogits(row, col);
        threadMax = max(threadMax, value);
      }
      if (tid < cols) {
        buf[tid] = threadMax;
      }
      workgroupBarrier();

      var reduceSize = min(cols, blockSize);
      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
        reduceSize = currSize + (reduceSize & 1);
        if (tid < currSize) {
          buf[tid] = max(buf[tid], buf[tid + reduceSize]);
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowMaxShared = buf[0];
      }
      workgroupBarrier();

      var threadSum = 0.0;
      for (var col = tid; col < cols; col += blockSize) {
        let subExp = exp(getLogits(row, col) - rowMaxShared);
        threadSum += subExp;
      }
      buf[tid] = threadSum;
      workgroupBarrier();

      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {
        if (tid < currSize) {
          buf[tid] = buf[tid] + buf[tid + currSize];
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowSumShared = buf[0];
      }
      workgroupBarrier();

      for (var col = tid; col < cols; col += blockSize) {
        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;
        setOutputAtCoords(row, col, value);
      }
  }
    `}};function Yv(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{dim:s}=o,a=le({inputs:{x:n},backend:t,attrs:{shape:[y.sizeFromShape(n.shape)/n.shape[s],n.shape[s]]}}),i=new cy(a.shape),p=t.runWebGPUProgram(i,[a],n.dtype),u=le({inputs:{x:p},backend:t,attrs:{shape:n.shape}});return t.disposeData(a.dataId),t.disposeData(p.dataId),u}var lG={kernelName:Fs,backendName:"webgpu",kernelFunc:Yv};function fce(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{numSamples:s,seed:a,normalized:i}=o,p=i?n:Yv({inputs:{logits:n},backend:t,attrs:{dim:n.shape.length-1}}),u=p.shape[0],l=p.shape[1],c=new ly(u,s),m=[{type:"float32",data:[a]},{type:"int32",data:[l]}],d=t.runWebGPUProgram(c,[p],"int32",m);return i||t.disposeData(p.dataId),d}var cG={kernelName:ps,backendName:"webgpu",kernelFunc:fce};function hce(r){let{inputs:e,backend:t}=r,{x:o}=e;if(t.shouldExecuteOnCPU([o])){let s=t.tensorMap.get(o.dataId),[a,i]=QV(s.values,o.shape,o.dtype);return t.makeTensorInfo(i,o.dtype,a)}let n=new so(o.shape,Z.NEG);return t.runWebGPUProgram(n,[o],o.dtype)}var mG={kernelName:ls,backendName:"webgpu",kernelFunc:hce};function gce(r){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p}=o,u=t.readSync(n.dataId),l=t.readSync(s.dataId),{selectedIndices:c}=Ut.nonMaxSuppressionV3Impl(u,l,a,i,p);return t.makeTensorInfo([c.length],"int32",new Int32Array(c))}var dG={kernelName:cs,backendName:"webgpu",kernelFunc:gce};function xce(r){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p,softNmsSigma:u}=o,l=t.readSync(n.dataId),c=t.readSync(s.dataId),m=a,d=i,f=p,h=u,{selectedIndices:g,selectedScores:x}=Ut.nonMaxSuppressionV5Impl(l,c,m,d,f,h);return[t.makeTensorInfo([g.length],"int32",new Int32Array(g)),t.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var fG={kernelName:ms,backendName:"webgpu",kernelFunc:xce};var my=class{constructor(e,t){this.variableNames=["x"],this.uniforms="onValue : f32, offValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="onehot"}getUserCode(){return`
      ${G("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,
                                      f32(i32(round(getX(coords.x))) == coords.y)));
        }
      }
    `}};function yce(r){let{inputs:e,backend:t,attrs:o}=r,{indices:n}=e,{dtype:s,depth:a,onValue:i,offValue:p}=o,u=y.sizeFromShape(n.shape),l=new my(u,a),c=le({inputs:{x:n},backend:t,attrs:{shape:[u]}}),m=[{type:"float32",data:[i]},{type:"float32",data:[p]}],d=t.runWebGPUProgram(l,[c],s,m);t.disposeData(c.dataId);let f=[...n.shape,a],h=le({inputs:{x:d},backend:t,attrs:{shape:f}});return t.disposeData(d.dataId),h}var hG={kernelName:ds,backendName:"webgpu",kernelFunc:yce};function Em(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="complex64"){let n=Fi({inputs:{input:o},backend:t}),s=Em({inputs:{x:n},backend:t}),a=Mp({inputs:{input:o},backend:t}),i=Em({inputs:{x:a},backend:t}),p=Uo({inputs:{real:s,imag:i},backend:t});return t.disposeData(n.dataId),t.disposeData(s.dataId),t.disposeData(a.dataId),t.disposeData(i.dataId),p}else return Nt({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:t})}var gG={kernelName:_a,backendName:"webgpu",kernelFunc:Em};function xG(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=Fi({inputs:{input:o},backend:t}),s=xG({inputs:{x:n},backend:t}),a=Mp({inputs:{input:o},backend:t}),i=Em({inputs:{x:a},backend:t}),p=Uo({inputs:{real:s,imag:i},backend:t});return t.disposeData(n.dataId),t.disposeData(s.dataId),t.disposeData(a.dataId),t.disposeData(i.dataId),p}else return Nt({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:t})}var yG={kernelName:xa,backendName:"webgpu",kernelFunc:xG};function bce(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o;if(e.length===1)return Yx({inputs:{input:e[0]},backend:t,attrs:{dim:n}});let s=e[0].shape,a=e[0].dtype;e.forEach(l=>{y.assertShapesMatch(s,l.shape,"All tensors passed to stack must have matching shapes"),y.assert(a===l.dtype,()=>"All tensors passed to stack must have matching dtypes")});let i=[],p=e.map(l=>{let c=Yx({inputs:{input:l},backend:t,attrs:{dim:n}});return i.push(c),c}),u=Hv({inputs:p,backend:t,attrs:{axis:n}});return i.forEach(l=>t.disposeData(l.dataId)),u}var bG={kernelName:ya,backendName:"webgpu",kernelFunc:bce};function Qv(r,e=!1){let t=r.length,o=ft(t),n=r.map((c,m)=>`uniforms.pad${m}[0]`).join(","),s=r.map((c,m)=>`uniforms.pad${m}[0] + uniforms.xShape${t>1?`[${m}]`:""}`).join(","),a=t>1?`${o}(${n})`:`${n}`,i=t>1?`${o}(${s})`:`${s}`,p=t>1?"any(paddedCoords < start)":"paddedCoords < start",u=t>1?"any(paddedCoords >= end)":"paddedCoords >= end",l=t>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,t):"coords";return`
        let start = ${a};
        let end = ${i};
        if (${p} || ${u}) {
          setOutputAtIndex(index, ${e?0:"uniforms.constantValue"});
        } else {
          let coords = paddedCoords - start;
          setOutputAtIndex(index, getX(${l}));
        }
  `}var dy=class{constructor(e,t){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((o,n)=>o[0]+e[n]+o[1]),this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),t.map((o,n)=>{this.uniforms+=` pad${n} : vec2<i32>,`}),this.xShape=e,this.shaderKey="pad"}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let paddedCoords = getCoordsFromIndex(index);
          ${Qv(this.xShape)}
        }
      }
    `}};var Cce=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{paddings:s,constantValue:a}=o;if(s.every(u=>y.arraysEqual(u,[0,0])))return Pt({inputs:{x:n},backend:t});if(y.sizeFromShape(n.shape)===0){let u=s.map((l,c)=>l[0]+n.shape[c]+l[1]);return Nt({backend:t,attrs:{shape:u,value:a,dtype:n.dtype}})}let i=[{type:"float32",data:[a]}];s.map(u=>i.push({type:"int32",data:[u[0],u[1]]}));let p=new dy(n.shape,s);return t.runWebGPUProgram(p,[n],n.dtype,i)},CG={kernelName:fs,backendName:"webgpu",kernelFunc:Cce};var wce=tt({opType:fe.POW}),wG={kernelName:hs,backendName:"webgpu",kernelFunc:wce};function Sce(r){let{inputs:e,backend:t}=r,{x:o,alpha:n}=e,s=new Di(fe.PRELU,o.shape,n.shape);return t.runWebGPUProgram(s,[o,n],"float32")}var SG={kernelName:gs,backendName:"webgpu",kernelFunc:Sce};function Ice(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:a}=o;return ao(n,s,a,"prod",t)}var IG={kernelName:Ho,backendName:"webgpu",kernelFunc:Ice};var vce=r=>{let{backend:e,attrs:t}=r,{start:o,stop:n,step:s,dtype:a}=t,i=eW(o,n,s,a);return e.makeTensorInfo([i.length],a,i)},vG={kernelName:ba,backendName:"webgpu",kernelFunc:vce};var kce=tt({opType:fe.DIV}),kG={kernelName:Vn,backendName:"webgpu",kernelFunc:kce};var Nce=ye({opType:Z.RECIPROCAL}),NG={kernelName:xs,backendName:"webgpu",kernelFunc:Nce};var Tce=ye({opType:Z.RELU}),TG={kernelName:ys,backendName:"webgpu",kernelFunc:Tce};var _ce=ye({opType:Z.RELU6}),_G={kernelName:ws,backendName:"webgpu",kernelFunc:_ce};var fy=class{constructor(e,t,o){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,o,e[3]],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC =
            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *
            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);

          // Compute the four integer indices.
          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);
          let sourceCeilRC = vec2<i32>(
            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));

          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);
          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);
          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);
          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);

          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);

          let top = topLeft + (topRight - topLeft) * fracRC.y;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
          let newValue = top + (bottom - top) * fracRC.x;

          setOutputAtIndex(index, newValue);
        }
      }
    `}};function Ece(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,size:a,halfPixelCenters:i}=o,[p,u]=a,l=s&&p>1?1:0,c=s&&u>1?1:0,d=[{type:"float32",data:[l,c]},{type:"float32",data:[i?.5:0]}],f=new fy(n.shape,p,u);return t.runWebGPUProgram(f,[n],"float32",d)}var EG={kernelName:Cs,backendName:"webgpu",kernelFunc:Ece};var hy=class{constructor(e,t){this.variableNames=["dy"],this.uniforms=`effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,
       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey=`resizeBilinearBackprop_${t}`}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let dxR = f32(dyR) * uniforms.heightScale;
              let topDxRIndex = i32(floor(dxR));
              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));
              let dxRLerp = dxR - f32(topDxRIndex);
              let inverseDxRLerp = 1.0 - dxRLerp;

              let dxC = f32(dyC) * uniforms.widthScale;
              let leftDxCIndex = i32(floor(dxC));
              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));
              let dxCLerp = dxC - f32(leftDxCIndex);
              let inverseDxCLerp = 1.0 - dxCLerp;

              if (r == topDxRIndex && c == leftDxCIndex) {
                // topLeft
                accumulator +=
                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
              }

              if (r == topDxRIndex && c == rightDxCIndex) {
                // topRight
                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
              }

              if (r == bottomDxRIndex && c == leftDxCIndex) {
                // bottomLeft
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
              }

              if (r == bottomDxRIndex && c == rightDxCIndex) {
                // bottomRight
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `}};function $ce(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:a}=o,[,i,p]=n.shape,[,u,l]=s.shape,c=[a&&u>1?i-1:i,a&&l>1?p-1:p],m=[a&&u>1?u-1:u,a&&l>1?l-1:l],d=c[0]/m[0],f=c[1]/m[1],h=1/d,g=1/f,x=Math.ceil(h)*2+2,b=Math.ceil(g)*2+2,w=new hy(n.shape,a),S=[{type:"int32",data:c},{type:"int32",data:m},{type:"float32",data:[d]},{type:"float32",data:[f]},{type:"float32",data:[h]},{type:"float32",data:[g]},{type:"int32",data:[x]},{type:"int32",data:[b]}];return t.runWebGPUProgram(w,[s],s.dtype,S)}var $G={kernelName:ii,backendName:"webgpu",kernelFunc:$ce};var gy=class{constructor(e,t,o,n){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,o,e[3]],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.halfPixelCenters=n,this.shaderKey=`resizeNearest_${n}`}getUserCode(){let e;return this.halfPixelCenters?e="max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":e="vec2<f32>(rc) * effectiveInputOverOutputRatioRC",`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC = ${e};

          // Compute the coordinators of nearest neighbor point.
          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));
          let sourceNearestRC = vec2<i32>(
            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));
          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);

          setOutputAtIndex(index, newValue);
        }
      }
    `}};function Rce(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:a,size:i}=o,[p,u]=i,l=s&&p>1?1:0,c=s&&u>1?1:0,d=[{type:"float32",data:[l,c]},{type:"float32",data:[s?.5:0]}],f=new gy(n.shape,p,u,a);return t.runWebGPUProgram(f,[n],n.dtype,d)}var RG={kernelName:bs,backendName:"webgpu",kernelFunc:Rce};var xy=class{constructor(e,t){this.variableNames=["dy"],this.uniforms=`effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,
       winHeight : i32, winWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey=`resizeNearestNeigborBackprop_${t}`}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *
                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));

              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *
                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));

              let sourceNearestRow =
                  i32(min(f32(uniforms.outShape[1] - 1),
                  ${this.alignCorners?"floor(sourceFracRow + 0.5)":"floor(sourceFracRow)"}));

              let sourceNearestCol =
                  i32(min(f32(uniforms.outShape[2] - 1),
                  ${this.alignCorners?"floor(sourceFracCol + 0.5)":"floor(sourceFracCol)"}));

              if (r == sourceNearestRow && c == sourceNearestCol) {
                accumulator += getDy(b, dyR, dyC, d);
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `}};function Dce(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:a}=o,[,i,p]=n.shape,[,u,l]=s.shape,c=[a&&u>1?i-1:i,a&&l>1?p-1:p],m=[a&&u>1?u-1:u,a&&l>1?l-1:l],d=c[0]/m[0],f=c[1]/m[1],h=1/d,g=1/f,x=Math.ceil(h)*2+2,b=Math.ceil(g)*2+2,w=new xy(n.shape,a),S=[{type:"int32",data:c},{type:"int32",data:m},{type:"float32",data:[h]},{type:"float32",data:[g]},{type:"int32",data:[x]},{type:"int32",data:[b]}];return t.runWebGPUProgram(w,[s],s.dtype,S)}var DG={kernelName:ai,backendName:"webgpu",kernelFunc:Dce};var yy=class{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=" axis : vec4<i32>,",this.shaderKey="reverse"}getUserCode(){return`
      
      // Using uniform variables as judging conditions, so the function has
      // coherent execution within all threads.
      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {
        var reverseCoords = coords;
        if (uniforms.axis[0] == 1) {
          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;
        }
        if (uniforms.axis[1] == 1) {
          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;
        }
        if (uniforms.axis[2] == 1) {
          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;
        }
        if (uniforms.axis[3] == 1) {
          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;
        }

        return reverseCoords;
      }
    
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let reverseCoords = getReverseCoords(coords);
          setOutputAtIndex(index, getX(reverseCoords[0],
              reverseCoords[1], reverseCoords[2], reverseCoords[3]));
        }
      }
    `}};function Ace(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dims:s}=o,a=n.shape.length;if(a===0)return Pt({inputs:{x:n},backend:t});let i=n.shape,p=[1,1,1,1];i.forEach((g,x)=>{let b=x+4-a;p[b]=g});let u=y.parseAxisParam(s,n.shape),l=[0,0,0,0];u.forEach(g=>{let x=g+4-a;l[x]=1});let c=[{type:"int32",data:l}],m=le({inputs:{x:n},backend:t,attrs:{shape:p}}),d=new yy(p),f=t.runWebGPUProgram(d,[m],m.dtype,c);t.disposeData(m.dataId);let h=le({inputs:{x:f},backend:t,attrs:{shape:i}});return t.disposeData(f.dataId),h}var AG={kernelName:Ss,backendName:"webgpu",kernelFunc:Ace};var by=class{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=`centerX : f32, centerY : f32, sinRadians : f32,
          cosRadians : f32,`,this.shaderKey="rotate",this.outputShape=e,typeof t=="number"?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`
        ${G("index")} {
          if (index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *
                uniforms.sinRadians;
            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *
                uniforms.cosRadians;
            let coordX = i32(round(coordXFloat + uniforms.centerX));
            let coordY = i32(round(coordYFloat + uniforms.centerY));
            ${this.fillSnippet}
            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&
                coordY < uniforms.xShape[1]) {
              outputValue = getX(coords[0], coordY, coordX, coords[3]);
            }
            setOutputAtIndex(index, outputValue);
          }
        }
      `}};var FG={kernelName:Vs,backendName:"webgpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{image:o}=r,{radians:n,fillValue:s,center:a}=e,i=t,p=new by(o.shape,s),[u,l]=C.getImageCenter(a,o.shape[1],o.shape[2]),c=[{type:"float32",data:[u]},{type:"float32",data:[l]},{type:"float32",data:[Math.sin(n)]},{type:"float32",data:[Math.cos(n)]}];return typeof s=="number"?c.push({type:"float32",data:[Number.parseFloat(s.toFixed(2))]}):c.push({type:"float32",data:s}),i.runWebGPUProgram(p,[o],o.dtype,c)}};var Fce=ye({opType:Z.ROUND}),PG={kernelName:Is,backendName:"webgpu",kernelFunc:Fce};var Pce=ye({opType:Z.RSQRT,cpuKernelImpl:tW}),OG={kernelName:Do,backendName:"webgpu",kernelFunc:Pce};var qa=class{constructor(e,t,o,n,s,a,i,p=!0){this.variableNames=["updates","indices"],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=a,this.type=i,this.sumDupeIndices=p,this.dispatchLayout=X(e),this.dispatch=H(this.dispatchLayout,e,this.workgroupSize),this.sliceDimGreaterThanOne=t>1,this.shaderKey=`scatter_${o}_${n}_${this.sliceDimGreaterThanOne}_${i}_${p}_${s.length}`;let u=ft(s.length);this.uniforms=`sliceDim : i32, strides: ${u}, updatesSize: i32,`,this.updatesRank=n,this.indicesRank=o}getUserCode(){let e="";this.indicesRank===1?e="coords[0]":this.indicesRank===2&&(e="coords[0], j");let t=`getIndices(${e})`,o=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides",n="",s="";this.dispatchLayout.x.length===1?(n="flattenedIndex",s=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {
        return index;
      }
      `):this.dispatchLayout.x.length===2&&(n="vec2<i32>(flattenedIndex, coords[1])",s=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {
        // N.B. |updates| could be a scalar tensor, conceptually representing a
        // 2D tensor with all values equal to that. By design, its size must be
        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|
        // gives the other.
        let sliceSize = uniforms.outShape[1];
        let d0 = index / sliceSize;
        let d1 = index - d0 * sliceSize;
        return vec2<i32>(d0, d1);
      }
      `);let i=`getUpdates(${Array.from({length:this.updatesRank},(u,l)=>`coords[${l}]`).join(", ")})`;return`
    ${s}
      ${G("index")} {
        if (index < uniforms.updatesSize) {
          let coords = getUpdatesCoordsFromFlatIndex(index);
          var flattenedIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexInside = i32(round(${t}));
            flattenedIndex = flattenedIndex + indexInside * ${o};
          }
          let updateValue =
              ${Eu(this.type)}(${i});
          let flatIndex = getOutputIndexFromCoords(${n});

          ${this.sumDupeIndices?oo("&result[flatIndex]","updateValue",this.type):"atomicStore(&result[flatIndex], bitcast<i32>(updateValue));"}
        }
      }`}};function Oce(r){let{inputs:e,backend:t,attrs:o}=r,{indices:n,updates:s}=e,{shape:a}=o,{sliceRank:i,numUpdates:p,sliceSize:u,strides:l,outputSize:c}=C.calculateShapes(s,n,a),m=[c/u,u];if(c===0)return t.makeTensorInfo(a,n.dtype);let d=le({inputs:{x:n},backend:t,attrs:{shape:[p,i]}}),f=le({inputs:{x:s},backend:t,attrs:{shape:[p,u]}}),h=f.dtype,g=Nt({backend:t,attrs:{shape:m,value:0,dtype:h}}),x=y.sizeFromShape(f.shape),b=[{type:"int32",data:[i]},{type:"int32",data:l},{type:"int32",data:[x]}],w=new qa(f.shape,i,d.shape.length,f.shape.length,l,m,h),S=t.runWebGPUProgram(w,[f,d],h,b,g),k=le({inputs:{x:S},backend:t,attrs:{shape:a}});return t.disposeData(d.dataId),t.disposeData(f.dataId),t.disposeData(S.dataId),k}var MG={kernelName:vs,backendName:"webgpu",kernelFunc:Oce};var Cy=class{constructor(e,t){this.outputShape=[],this.variableNames=["sortedSequence","values"],this.uniforms="numInputs : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.side=t,this.shaderKey=`search_sorted_${t}`}getUserCode(){return`
      fn findBound(batch: i32, value: f32) -> i32 {
        var left = i32(0);
        var right = uniforms.numInputs;
        while (left < right) {
          var mid = (left + right) / 2;
          if (getSortedSequence(batch, mid) ${this.side==="left"?"<":"<="} value) {
            left = mid + 1;
          } else {
            right = mid;
          }
        }
        return right;
      }

      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let value = getValuesByOutputIndex(index);
          setOutputAtIndexI32(index, findBound(coords[0], value));
        }
      }
    `}};function Mce(r){let{inputs:e,backend:t,attrs:o}=r,{sortedSequence:n,values:s}=e,{side:a}=o,i=new Cy([s.shape[0],s.shape[1]],a),p=[{type:"int32",data:[n.shape[1]]}];return t.runWebGPUProgram(i,[n,s],"int32",p)}var LG={kernelName:Ns,backendName:"webgpu",kernelFunc:Mce};var wy=class{constructor(e,t,o){this.variableNames=["c","a","b"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.cRank=e,this.rank=o,this.shaderKey="select"}getUserCode(){let e,t;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(this.rank===1)t="resRC",e="resRC";else{let n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],a=[];for(let i=0;i<this.outputShape.length;i++)a.push(`${n[i]}`),i<this.cRank&&s.push(`${n[i]}`);e=s.join(),t=a.join()}return`
      ${G("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let cVal = getC(${e});
          if (cVal >= 1.0) {
            setOutputAtIndex(index, getA(${t}));
          } else {
            setOutputAtIndex(index, getB(${t}));
          }
        }
      }
    `}};function Lce(r){let{inputs:e,backend:t}=r,{condition:o,t:n,e:s}=e,a=new wy(o.shape.length,n.shape,n.shape.length);return t.runWebGPUProgram(a,[o,n,s],pt(n.dtype,s.dtype))}var BG={kernelName:wa,backendName:"webgpu",kernelFunc:Lce};var Bce=ye({opType:Z.SELU}),zG={kernelName:Ts,backendName:"webgpu",kernelFunc:Bce};var zce=ye({opType:Z.SIGMOID}),VG={kernelName:Ao,backendName:"webgpu",kernelFunc:zce};var Vce=ye({opType:Z.SIGN}),WG={kernelName:Rs,backendName:"webgpu",kernelFunc:Vce};var Wce=ye({opType:Z.SIN}),UG={kernelName:Es,backendName:"webgpu",kernelFunc:Wce};var Uce=ye({opType:Z.SINH}),GG={kernelName:$s,backendName:"webgpu",kernelFunc:Uce};var Gce=ye({opType:Z.SOFTPLUS}),HG={kernelName:Ds,backendName:"webgpu",kernelFunc:Gce};var Sy=class{constructor(e,t,o,n,s,a){this.variableNames=["x"],this.outputShape=[],this.uniforms="",this.workgroupSize=[64,1,1],this.size=!0;let i=new Array(n.length);for(let p=0;p<i.length;p++)i[p]=n[s[p]];this.outputShape=i,this.newDim=s,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,this.paddedXShape=t,this.uniforms+=`reshapedPaddedXShape : ${ft(n.length)}, paddedXShapeStrides : ${ft(a)}, `,o.map((p,u)=>{this.uniforms+=` pad${u} : vec2<i32>,`}),this.shaderKey=`spaceToBatchND_${s}`}getUserCode(){let e=ft(this.outputShape.length),t=Bv(this.newDim);return`
      ${xm(this.paddedXShape,"PaddedX")}
      ${G("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${e}(${t}), uniforms.reshapedPaddedXShape);
          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);
          ${Qv(this.xShape,!0)}
        }
      }
    `}};var Hce=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,paddings:a}=o;y.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");let i=s.reduce((b,w)=>b*w),p=[[0,0]];p.push(...a);for(let b=1+s.length;b<n.shape.length;++b)p.push([0,0]);let u=p.map((b,w)=>b[0]+n.shape[w]+b[1]),l=C.getReshaped(u,s,i,!1),c=C.getPermuted(l.length,s.length,!1),m=C.getReshapedPermuted(u,s,i,!1),d=y.computeStrides(u),f=new Sy(n.shape,u,p,l,c,d.length),h=[{type:"int32",data:l},{type:"int32",data:d}];p.map(b=>h.push({type:"int32",data:[b[0],b[1]]}));let g=t.runWebGPUProgram(f,[n],n.dtype,h),x=le({inputs:{x:g},backend:t,attrs:{shape:m}});return t.disposeData(g.dataId),x},KG={kernelName:Sa,backendName:"webgpu",kernelFunc:Hce};var Iy=class{constructor(e,t,o){this.variableNames=["input","indices","segmentIds"],this.outputShape=[],this.uniforms="segmentSize : i32, sparseSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e,this.type=o,this.dispatchLayout=X([t]),this.dispatch=H(this.dispatchLayout,[t],this.workgroupSize),this.shaderKey="sparseSegmentSum"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.sparseSize) {
        let indexInSegmentIds = index / uniforms.segmentSize;
        let indexInSegment = index % uniforms.segmentSize;
        let indexInInput = indices[indexInSegmentIds];
        let segmentId = segmentIds[indexInSegmentIds];

        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];
        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;
        ${oo("&result[outIndex]","value",this.type)}
      }
    }
  `}},vy=class{constructor(e,t){this.variableNames=["segmentIds"],this.outputShape=[],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=[e],this.dispatchLayout=X(t),this.dispatch=H(this.dispatchLayout,t,this.workgroupSize),this.shaderKey="sparseSegmentIdCountProgram"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.segmentIdsShape) {
        let segmentId = segmentIds[index];
        ${oo("&result[segmentId]","1","int32")}
      }
    }
  `}},ky=class{constructor(e,t){this.variableNames=["segmentSum","sameSegmentIdCount"],this.outputShape=[],this.uniforms="segmentSize : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.type=t,this.dispatchLayout=X(e),this.dispatch=H(this.dispatchLayout,e,this.workgroupSize),this.shaderKey="sparseSegmentMean"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.size) {
        let segmentId = index / uniforms.segmentSize;
        let count = sameSegmentIdCount[segmentId];
        if (count != 0) {
          ${this.type==="float32"?"setOutputAtIndex(index, segmentSum[index] / f32(count));":"setOutputAtIndexI32(index, segmentSum[index] / count);"}
        }
      }
    }
  `}};function Ny(r,e,t,o=!1,n){let a=y.sizeFromShape(r.shape)/r.shape[0],i=r.dtype,p=y.sizeFromShape(e.shape),u=n.readSync(t.dataId),c=p>0?u[p-1]+1:0,m,d=r.shape.slice();d[0]=c;let f=p*a,h=Nt({backend:n,attrs:{shape:d,value:0,dtype:i}});m=new Iy(d,f,i);let g=[{type:"int32",data:[a]},{type:"int32",data:[f]}],x=n.runWebGPUProgram(m,[r,e,t],i,g,h);if(o)return x;let b=Nt({backend:n,attrs:{shape:[c],value:0,dtype:"int32"}});m=new vy(c,t.shape);let w=n.runWebGPUProgram(m,[t],"int32",null,b),S=Nt({backend:n,attrs:{shape:d,value:0,dtype:i}});m=new ky(d,i),g=[{type:"int32",data:[a]}];let k=n.runWebGPUProgram(m,[x,w],i,g,S);return n.disposeData(x.dataId),n.disposeData(w.dataId),k}function Kce(r){let{inputs:e,backend:t}=r,{data:o,indices:n,segmentIds:s}=e;return Ny(o,n,s,!1,t)}var qG={kernelName:va,backendName:"webgpu",kernelFunc:Kce};function qce(r){let{inputs:e,backend:t}=r,{data:o,indices:n,segmentIds:s}=e;return Ny(o,n,s,!0,t)}var jG={kernelName:ka,backendName:"webgpu",kernelFunc:qce};var Ty=class{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[64,1,1],this.size=!0;let o=new Array(e.length);for(let n=0;n<o.length;n++)o[n]=e[n]*t[n];this.outputShape=o,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){let e=jce(this.rank,"uniforms.");return`
      ${G("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          setOutputAtIndex(index, getA(${e}));
        }
      }
    `}};function jce(r,e=""){if(r>=5)throw Error(`Tile for rank ${r} is not yet supported`);if(r===1)return`(resRC % ${e}aShape)`;let t=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r;n++)o.push(`(${t[n]} % ${e}aShape[${n}])`);return o.join()}function $m(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reps:s}=o;if(t.shouldExecuteOnCPU([n])||n.dtype==="string"||n.shape.length>=5){let p=t.readSync(n.dataId),u=n.dtype==="string"?p.map(m=>y.decodeString(m)):p,l=ie(n.shape,n.dtype,u),c=uW(l,s);return t.makeTensorInfo(c.shape,c.dtype,c.values)}let a=new Ty(n.shape,s);return t.runWebGPUProgram(a,[n],n.dtype)}var XG={kernelName:Mo,backendName:"webgpu",kernelFunc:$m};function Xce(r){let{inputs:e,backend:t,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:a}=e,{outputShape:i}=o,{sliceRank:p,numUpdates:u,sliceSize:l,strides:c,outputSize:m}=C.calculateShapes(s,n,i),d=!1;if(s.dtype==="string"){let R=t.bufferSync(n),D=t.bufferSync(s),F=y.decodeString(t.readSync(a.dataId)[0]),O=rW(R,D,i,m,l,u,p,c,F,d);return t.makeTensorInfo(i,O.dtype,O.values)}let f=[m/l,l],h=le({inputs:{x:n},backend:t,attrs:{shape:[u,p]}}),g=s.shape.length?le({inputs:{x:s},backend:t,attrs:{shape:[u,l]}}):Pt({inputs:{x:s},backend:t}),x=g.dtype,b=t.makeTensorInfo([],x,y.makeZerosTypedArray(1,x)),w=le({inputs:{x:a},backend:t,attrs:{shape:Array(f.length).fill(1)}}),S=$m({inputs:{x:w},backend:t,attrs:{reps:f}}),k=y.sizeFromShape([u,l]),T=[{type:"int32",data:[p]},{type:"int32",data:c},{type:"int32",data:[k]}];switch(u){case 0:break;case 1:{let R=new qa([u,l],p,h.shape.length,g.shape.length,c,f,x,d);t.runWebGPUProgram(R,[g,h],x,T,S)}break;default:{let R=new qa([u,l],p,h.shape.length,b.shape.length,c,f,x,d);t.runWebGPUProgram(R,[b,h],x,T,S)}{let R=new qa([u,l],p,h.shape.length,g.shape.length,c,f,x);t.runWebGPUProgram(R,[g,h],x,T,S)}}let E=le({inputs:{x:S},backend:t,attrs:{shape:i}});return t.disposeData(h.dataId),t.disposeData(g.dataId),t.disposeData(w.dataId),t.disposeData(b.dataId),t.disposeData(S.dataId),E}var YG={kernelName:Ps,backendName:"webgpu",kernelFunc:Xce};function Yce(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{numOrSizeSplits:s,axis:a}=o,i=y.parseAxisParam(a,n.shape)[0],p=C.prepareSplitSize(n,s,i),u=n.shape.length,l=new Array(u).fill(0),c=n.shape.slice();return p.map(m=>{let d=[...c];d[i]=m;let f=ea({inputs:{x:n},backend:t,attrs:{begin:l,size:d}});return l[i]+=m,f})}var QG={kernelName:Ia,backendName:"webgpu",kernelFunc:Yce};var Qce=ye({opType:Z.SQRT}),ZG={kernelName:Fo,backendName:"webgpu",kernelFunc:Qce};var JG={kernelName:tu,backendName:"webgpu",kernelFunc:({inputs:r,backend:e})=>{let{x:t}=r,o=e,n=new so(t.shape,Z.SQUARE);return o.runWebGPUProgram(n,[t],t.dtype)}};var Zce=tt({opType:fe.SQUARED_DIFFERENCE}),e4={kernelName:Po,backendName:"webgpu",kernelFunc:Zce};function Jce({inputs:r,attrs:e,backend:t}){let{x:o}=r,n=new so(o.shape,Z.STEP,"stepAlpha : f32,"),s=[{type:"float32",data:[e.alpha]}];return t.runWebGPUProgram(n,[o],o.dtype,s)}var t4={kernelName:Ko,backendName:"webgpu",kernelFunc:Jce};var _y=class{constructor(e){this.variableNames=["x"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]);let t=ft(this.outputShape.length);this.uniforms=`begin : ${t},  strides : ${t}, `,this.shaderKey="stridedSlice"}getUserCode(){let e=this.outputShape.length,t="";if(e===1)t="coords * uniforms.strides + uniforms.begin";else{let n=0;t=this.outputShape.map((s,a)=>(n++,this.outputShape.length===1?`coords * uniforms.strides[${a}] + uniforms.begin[${a}]`:`coords[${n-1}] * uniforms.strides[${a}] + uniforms.begin[${a}]`)).join(",")}return`
       ${G("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index);
           setOutputAtIndex(index, getX(${t}));
         }
       }
     `}};function eme(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,end:a,strides:i,beginMask:p,endMask:u,ellipsisMask:l,newAxisMask:c,shrinkAxisMask:m}=o,{finalShapeSparse:d,finalShape:f,isIdentity:h,sliceDim0:g,isSimpleSlice:x,begin:b,end:w,strides:S}=nt.sliceInfo(n.shape,s,a,i,p,u,l,c,m),k;if(h)k=le({inputs:{x:n},backend:t,attrs:{shape:f}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let T=nt.computeOutShape(b,w,S),E=ea({inputs:{x:n},backend:t,attrs:{begin:b,size:T}});k=le({inputs:{x:E},backend:t,attrs:{shape:f}}),t.disposeData(E.dataId)}else if(t.shouldExecuteOnCPU([n])){let E=t.readSync(n.dataId),R=ie(n.shape,n.dtype,E),D=sW(d,R,S,b);k=t.makeTensorInfo(f,n.dtype,D.values)}else{let E=new _y(d),R=[{type:"int32",data:b},{type:"int32",data:S}],D=t.runWebGPUProgram(E,[n],n.dtype,R);k=le({inputs:{x:D},backend:t,attrs:{shape:f}}),t.disposeData(D.dataId)}return k}var r4={kernelName:Os,backendName:"webgpu",kernelFunc:eme};function tme(r){let{inputs:e,backend:t,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:a,rightPad:i,padWidth:p,preserveShortSequences:u}=o,{data:l,dataSplits:c}=e,m=t.readSync(l.dataId),d=t.readSync(c.dataId),[f,h]=aW(m,d,n,s,a,i,p,u);return[t.makeTensorInfo([f.length],"string",f),t.makeTensorInfo(c.shape,"int32",h)]}var o4={kernelName:Na,backendName:"webgpu",kernelFunc:tme};var rme=tt({opType:fe.SUB,cpuKernelImpl:iW,supportsComplex:!0}),n4={kernelName:Oo,backendName:"webgpu",kernelFunc:rme};var ome=ye({opType:Z.TAN}),s4={kernelName:Ms,backendName:"webgpu",kernelFunc:ome};var nme=ye({opType:Z.TANH}),a4={kernelName:Ls,backendName:"webgpu",kernelFunc:nme};function sme(r){let{inputs:e,backend:t,attrs:o}=r,{tensor:n,indices:s,updates:a}=e,{}=o,{sliceRank:i,numUpdates:p,sliceSize:u,strides:l,outputSize:c}=C.calculateShapes(a,s,n.shape),m=[c/u,u];if(c===0)return t.makeTensorInfo(n.shape,s.dtype);let d=[],f=le({inputs:{x:s},backend:t,attrs:{shape:[p,i]}});d.push(f);let h=le({inputs:{x:a},backend:t,attrs:{shape:[p,u]}});d.push(h);let g=le({inputs:{x:n},backend:t,attrs:{shape:m}});d.push(g);let x=$m({inputs:{x:g},backend:t,attrs:{reps:Array(m.length).fill(1)}}),b=new qa([p,u],i,f.shape.length,h.shape.length,l,m,n.dtype,!1),w=y.sizeFromShape([p,u]),S=[{type:"int32",data:[i]},{type:"int32",data:l},{type:"int32",data:[w]}],k=t.runWebGPUProgram(b,[h,f],g.dtype,S,x);d.push(k);let T=le({inputs:{x:k},backend:t,attrs:{shape:n.shape}});return d.forEach(E=>t.disposeData(E.dataId)),T}var i4={kernelName:ks,backendName:"webgpu",kernelFunc:sme};var Ey=class{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=`inputSize : i32, firstPass : i32, negativeInf : f32,
        dir : i32, inc : i32,`,this.shaderKey="swap"}getUserCode(){return`
        ${G("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // We compare elements pair-wise within a group of size 2 * inc.
            // The comparing rule for each group alternates between ascending
            // and descending. Within each group, we compare each pair at
            // positions i and i+inc. To decide whether an element at position i
            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
            // inc, it is in the first half of the group, we denote it as x0,
            // otherwise we denote it as x1.
            // For example, as shown in the Bitonic top K paper referenced
            // above, Figure5(a) shows that element[1] is in the second half of
            // the group when group size is 2, but it is in the first half of
            // the group when group size is 4.
            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;
            var i = 0;
            if (isFirstInPair) {
              i = elemIdx;
            } else {
              i = elemIdx - uniforms.inc;
            }

            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }

            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.inc;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.inc));
            }

            var x0 = f32(0.0);
            var x1 = f32(0.0);
            if (i0 < uniforms.inputSize) {
              x0 = getX(batch, i0);
            } else {
              x0 = uniforms.negativeInf;
            }
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = uniforms.negativeInf;
            }

            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;
            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
            if (reverse == isGreater) {
              // Elements in opposite order of direction
              let iTemp = i0;
              i0 = i1;
              i1 = iTemp;
            }
            if (isFirstInPair) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}},$y=class{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`
        ${G("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // The output size is half of the previous size.
            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _
            // (k=4), we only need to output the indices at positions |, the
            // indices at positions _ can be thrown away, see Figure5(b) After
            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced
            // above.
            // For example, the paper shows we only need to output the orange
            // bars. The output sequence should look like this | | | | | | | |.
            // Because the sequence is halved, to map the output index back to
            // the previous sequence to find the corresponding value, we need
            // to double the index. When we double the index, we basically
            // interpolate a position, so 2i looks like
            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k
            // position of each 2k positions by - elemIdx % k. E.g. for output
            // at index 4,5,6,7, we want to get the corresponding element at
            // original index 8,9,10,11, for output at index 8,9,10,11,
            // we want to get the corresponding element at original index
            // 16,17,18,19, so on and so forth.

            var i = 0;
            if (elemIdx < uniforms.k) {
              i = elemIdx;
            } else {
              i = elemIdx * 2 - elemIdx % uniforms.k;
            }
            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }
            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.k;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.k));
            }

            let x0 = getX(batch, i0);
            var x1 = f32(0.0);
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = x0;
            }

            if (x0 >= x1) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}};function pc(r,e){e!==null&&r.disposeData(e.dataId)}function u4(r){let e=1;for(;e<r;)e*=2;return e}function ame(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{k:s,sorted:a}=o,i=n.shape,p=i[i.length-1];if(t.shouldExecuteOnCPU([n])){let k=t.readSync(n.dataId),[T,E]=pW(k,i,n.dtype,s,a);return[t.makeTensorInfo(T.shape,T.dtype,T.values),t.makeTensorInfo(E.shape,E.dtype,E.values)]}if(s===0)return i[i.length-1]=0,[t.makeTensorInfo(i,n.dtype,[]),t.makeTensorInfo(i,"int32",[])];if(p===1)return[n,Nt({attrs:{shape:i,dtype:"int32",value:0},backend:t})];let l=y.sizeFromShape(i)/p,c=le({inputs:{x:n},attrs:{shape:[l,p]},backend:t}),m=u4(s),d=u4(p),f=null,h=()=>f===null?[c,c]:[c,f],g=(k,T,E)=>{let R=h(),D=new Ey(E),O=[{type:"int32",data:[p]},{type:"int32",data:[f===null?1:0]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[k]},{type:"int32",data:[T]}],M=f;f=t.runWebGPUProgram(D,R,"int32",O),pc(t,M)};for(let k=1;k<m;k*=2){let T=k*2;for(let E=k;E>=1;E/=2)g(T,E,[l,d])}for(let k=d;k>m;k/=2){let T=h(),E=new $y([l,k/2]),D=[{type:"int32",data:[p]},{type:"int32",data:[f===null?1:0]},{type:"int32",data:[m]}],F=f;f=t.runWebGPUProgram(E,T,"int32",D),pc(t,F);let O=m/2,M=O*2;for(let L=O;L>=1;L/=2)g(M,L,f.shape)}let x=f;f=ea({inputs:{x:f},backend:t,attrs:{begin:0,size:[l,s]}}),pc(t,x);let b=Xv({inputs:{x:c,indices:f},backend:t,attrs:{axis:1,batchDims:1}});pc(t,c);let w=i.slice(0,-1);w.push(s),x=f,f=le({inputs:{x:f},attrs:{shape:w},backend:t}),pc(t,x);let S=b;return b=le({inputs:{x:b},attrs:{shape:w},backend:t}),pc(t,S),[b,f]}var p4={kernelName:Bs,backendName:"webgpu",kernelFunc:ame};var Ry=class{constructor(e){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="transform"}getUserCode(){return`
          fn mapCoord(outCoord : f32, len : f32) -> f32{
            var inCoord = outCoord;
            if(uniforms.fillModeId == 2) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  if (inCoord < sz2) {
                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +
                    inCoord;
                  }
                  if (inCoord < -len) {
                    inCoord = inCoord + sz2;
                  } else {
                    inCoord = -inCoord - 1.0;
                  }
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));
                  if (inCoord >= len) {
                    inCoord = sz2 - inCoord - 1.0;
                  }
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 3) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 4) {
              return clamp(outCoord, 0.0, len - 1.0);
            }
            return outCoord;
          }
          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,
            channel : i32) -> f32 {
            var outputValue : f32;
            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {
                outputValue = getImage(batch, coordY, coordX, channel);
            } else {
              outputValue = uniforms.fillValue;
            }
            return outputValue;
          }

          ${G("index")} {
            if (index < uniforms.size) {
              let coords = getCoordsFromIndex(index);
              var outputValue : f32;
              let batch = coords[0];
              let x = coords[2];
              let y = coords[1];
              let channel = coords[3];
              let xf = f32(x);
              let yf = f32(y);
              let a1 = getTransforms(batch, 0);
              let a2 = getTransforms(batch, 1);
              let a3 = getTransforms(batch, 2);
              let b1 = getTransforms(batch, 3);
              let b2 = getTransforms(batch, 4);
              let b3 = getTransforms(batch, 5);
              let c1 = getTransforms(batch, 6);
              let c2 = getTransforms(batch, 7);
              let projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = uniforms.fillValue;
              } else {
                let inX = (a1 * xf + a2 * yf + a3) / projection;
                let inY = (b1 * xf + b2 * yf + b3) / projection;
                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));
                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));

                if (uniforms.interpolationModeId == 1) {
                  let coordY = i32(round(mapY));
                  let coordX = i32(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  let yFloor = floor(mapY);
                  let xFloor = floor(mapX);
                  let yCeil = yFloor + 1.0;
                  let xCeil = xFloor + 1.0;
                  let valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);
                  let valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutputAtIndex(index, outputValue);
            }
          }
        `}};function ime(r){let{inputs:e,backend:t,attrs:o}=r,{image:n,transforms:s}=e,{interpolation:a,fillMode:i,fillValue:p,outputShape:u}=o,[l,c,m,d]=n.shape,[f,h]=u!=null?u:[c,m],g=[l,f,h,d],x=new Ry(g),b=a==="nearest"?1:2,w;switch(i){case"constant":w=1;break;case"reflect":w=2;break;case"wrap":w=3;break;case"nearest":w=4;break;default:w=1;break}let S=[{type:"int32",data:[b]},{type:"int32",data:[w]},{type:"float32",data:[p]}];return t.runWebGPUProgram(x,[n,s],"float32",S)}var l4={kernelName:zs,backendName:"webgpu",kernelFunc:ime};function ume(r){let{inputs:e,backend:t,attrs:o}=r,{value:n}=e,{axis:s}=o;s<0&&(s+=n.shape.length);let a=n,i=a.shape.length,p=n.shape[s],u=new Array(i-1),l=0;for(let h=0;h<i;h++)h!==s&&(u[l++]=a.shape[h]);let c=[],m=new Array(i).fill(0),d=a.shape.slice();d[s]=1;let f=new Array(p);for(let h=0;h<f.length;h++){m[s]=h;let g=ea({inputs:{x:a},backend:t,attrs:{begin:m,size:d}}),x=le({inputs:{x:g},backend:t,attrs:{shape:u}});f[h]=x,c.push(g)}return c.forEach(h=>t.disposeData(h.dataId)),f}var c4={kernelName:Ta,backendName:"webgpu",kernelFunc:ume};var Dy=class{constructor(e,t,o){if(this.outputShape=[],this.variableNames=["x","segmentIds"],this.uniforms="numSegments : i32, xSize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t,this.dispatchLayout=X(e),this.dispatch=H(this.dispatchLayout,e,this.workgroupSize),o!=="float32"&&o!=="int32")throw new Error(`UnsortedSegmentSum only supports float32 and int32
              types, does not support ${o} type.`);this.type=o,this.shaderKey="unsortedSegmentSum"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.xSize) {
        let coords = getXCoordsFromIndex(index);
        let b = coords[0];
        let inCol = coords[1];

        let segmentId = i32(getSegmentIds(inCol));
        if (segmentId >= 0) {
          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;
          let value = getX(b, inCol);

          ${oo("&result[flatIndex]","value",this.type)}
        }
      }
    }
  `}};function pme(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,segmentIds:s}=e,{numSegments:a}=o,i=n.shape.length,p=[],u=0,l=C.getAxesPermutation([u],i),c=n;l!=null&&(c=Cr({inputs:{x:n},backend:t,attrs:{perm:l}}),p.push(c),u=C.getInnerMostAxes(1,i)[0]);let m=C.segment_util.computeOutShape(c.shape,u,a),d=y.sizeFromShape([c.shape[u]]),f=le({inputs:{x:c},backend:t,attrs:{shape:[-1,d]}});p.push(f);let h=n.dtype,g=[f.shape[0],a],x=Nt({backend:t,attrs:{shape:g,value:0,dtype:h}}),b=new Dy(f.shape,g,h),w=[{type:"int32",data:[a]},{type:"int32",data:[y.sizeFromShape(f.shape)]}],S=t.runWebGPUProgram(b,[f,s],h,w,x),k=le({inputs:{x:S},backend:t,attrs:{shape:m}});p.push(S);let T=k;if(l!=null){p.push(k);let E=C.getUndoAxesPermutation(l);T=Cr({inputs:{x:T},backend:t,attrs:{perm:E}})}return p.forEach(E=>t.disposeData(E.dataId)),T}var m4={kernelName:su,backendName:"webgpu",kernelFunc:pme};var lme=[jz,cW,mW,dW,fW,hW,xW,yW,bW,CW,wW,SW,IW,vW,kW,_W,EW,$W,RW,DW,FW,PW,OW,zW,VW,WW,Yz,GW,KW,qW,jW,XW,YW,QW,ZW,JW,eU,tU,nU,sU,aU,iU,pU,lU,uU,cU,mU,dU,fU,hU,yU,bU,CU,wU,SU,IU,vU,kU,NU,Kz,TU,$U,_U,EU,RU,DU,AU,FU,PU,OU,MU,Xz,LU,HW,BU,zU,VU,WU,UU,GU,HU,qU,KU,jU,XU,YU,ZU,JU,NW,eG,tG,nG,rG,oG,sG,TW,aG,iG,uG,pG,cG,gU,mG,dG,fG,MW,hG,yG,bG,CG,wG,SG,IG,vG,LW,kG,NG,TG,_G,qz,EG,$G,RG,DG,AG,FG,PG,OG,MG,LG,BG,zG,VG,WG,UG,GG,AW,t4,r4,o4,lG,HG,KG,qG,jG,YG,QG,ZG,JG,e4,n4,xU,s4,a4,i4,XG,p4,l4,gW,c4,m4,gG];for(let r of lme)li(r);var d4="4.17.0",cme="4.17.0",mme="4.17.0",dme="4.17.0",fme="4.17.0",hme="4.14.0",gme={tfjs:d4,"tfjs-core":d4,"tfjs-converter":cme,"tfjs-backend-cpu":mme,"tfjs-backend-webgl":dme,"tfjs-backend-wasm":fme,"tfjs-backend-webgpu":hme};var qtr=void 0;export{fn as Abs,hn as Acos,gn as Acosh,sp as AdadeltaOptimizer,ap as AdagradOptimizer,ip as AdamOptimizer,up as AdamaxOptimizer,Rr as Add,xn as AddN,yn as All,bn as Any,na as ArgMax,sa as ArgMin,Cn as Asin,wn as Asinh,Sn as Atan,vn as Atan2,In as Atanh,kn as AvgPool,aa as AvgPool3D,Vi as AvgPool3DGrad,zi as AvgPoolGrad,gm as BackendWasm,Nn as BatchMatMul,ia as BatchToSpaceND,Tn as Bincount,_n as BitwiseAnd,ua as BroadcastArgs,Sme as BroadcastTo,ho as Cast,go as Ceil,Go as ClipByValue,ei as Complex,Wi as ComplexAbs,pa as Concat,En as Conv2D,Ui as Conv2DBackpropFilter,$n as Conv2DBackpropInput,Rn as Conv3D,ti as Conv3DBackpropFilterV2,Dn as Conv3DBackpropInputV2,An as Cos,Fn as Cosh,Mn as CropAndResize,Pn as Cumprod,On as Cumsum,mn as DataStorage,la as DenseBincount,Ln as DepthToSpace,Bn as DepthwiseConv2dNative,Gi as DepthwiseConv2dNativeBackpropFilter,Hi as DepthwiseConv2dNativeBackpropInput,ca as Diag,zn as Dilation2D,qi as Dilation2DBackpropFilter,Ki as Dilation2DBackpropInput,Mu as Draw,xw as ENV,ji as Einsum,Wn as Elu,ri as EluGrad,Cc as Environment,xo as Equal,Un as Erf,yo as Exp,ma as ExpandDims,bo as Expm1,Xi as FFT,da as Fill,Gn as FlipLeftRight,Co as Floor,wo as FloorDiv,Lu as FromPixels,Hn as FusedBatchNorm,jo as FusedConv2D,Xo as FusedDepthwiseConv2D,kp as GPGPUContext,Kn as GatherNd,fa as GatherV2,Kc as GraphModel,So as Greater,Io as GreaterEqual,Yi as IFFT,vo as Identity,Qi as Imag,qn as IsFinite,jn as IsInf,Xn as IsNan,mo as KernelBackend,rs as LRN,oi as LRNGrad,Yn as LeakyRelu,ko as Less,No as LessEqual,Qn as LinSpace,To as Log,Zn as Log1p,Ime as LogSoftmax,Jn as LogicalAnd,es as LogicalNot,ts as LogicalOr,gk as LogicalXor,vme as LowerBound,Il as MathBackendCPU,Ul as MathBackendWebGL,kme as MatrixBandPart,os as Max,ns as MaxPool,ha as MaxPool3D,Ji as MaxPool3DGrad,Zi as MaxPoolGrad,ga as MaxPoolWithArgmax,_o as Maximum,ss as Mean,as as Min,Eo as Minimum,is as MirrorPad,us as Mod,pp as MomentumOptimizer,ps as Multinomial,$o as Multiply,ls as Neg,cs as NonMaxSuppressionV3,ni as NonMaxSuppressionV4,ms as NonMaxSuppressionV5,Ro as NotEqual,Bw as OP_SCOPE_SUFFIX,ds as OneHot,xa as OnesLike,_r as Optimizer,Vc as OptimizerConstructors,ya as Pack,fs as PadV2,Nme as Pool,hs as Pow,gs as Prelu,Ho as Prod,lp as RMSPropOptimizer,Qp as RaggedGather,Zp as RaggedRange,Jp as RaggedTensorToTensor,ba as Range,Ew as Rank,si as Real,Vn as RealDiv,xs as Reciprocal,Dt as Reduction,ys as Relu,ws as Relu6,Ca as Reshape,Cs as ResizeBilinear,ii as ResizeBilinearGrad,bs as ResizeNearestNeighbor,ai as ResizeNearestNeighborGrad,Ss as Reverse,Vs as RotateWithOffset,Is as Round,Do as Rsqrt,wi as SGDOptimizer,vs as ScatterNd,Ns as SearchSorted,wa as Select,Ts as Selu,Ao as Sigmoid,Rs as Sign,Es as Sin,$s as Sinh,_s as Slice,Fs as Softmax,Ds as Softplus,Sa as SpaceToBatchND,eu as SparseFillEmptyRows,ui as SparseReshape,va as SparseSegmentMean,ka as SparseSegmentSum,Ps as SparseToDense,Ia as SplitV,Fo as Sqrt,tu as Square,Po as SquaredDifference,pi as StaticRegexReplace,Ko as Step,Os as StridedSlice,Na as StringNGrams,ru as StringSplit,ou as StringToHashBucketFast,Oo as Sub,As as Sum,Ms as Tan,Ls as Tanh,dt as Tensor,Ge as TensorBuffer,ks as TensorScatterUpdate,Mo as Tile,Bs as TopK,zs as Transform,Kr as Transpose,nu as Unique,Ta as Unpack,su as UnsortedSegmentSum,Tme as UpperBound,ci as Variable,Jl as WebGPUBackend,_a as ZerosLike,qo as _FusedMatMul,er as abs,g1 as acos,x1 as acosh,Ce as add,y1 as addN,b1 as all,C1 as any,w1 as argMax,S1 as argMin,I1 as asin,v1 as asinh,k1 as atan,N1 as atan2,T1 as atanh,Id as avgPool,$1 as avgPool3d,Hk as backend,C as backend_util,R1 as basicLSTMCell,mu as batchNorm,A1 as batchNorm2d,F1 as batchNorm3d,P1 as batchNorm4d,vd as batchToSpaceND,kd as bincount,O1 as bitwiseAnd,oX as booleanMaskAsync,M1 as broadcastArgs,Oa as broadcastTo,kr as broadcast_util,XT as browser,ie as buffer,Ue as cast,L1 as ceil,B1 as clipByValue,Xr as clone,Ar as complex,bt as concat,z1 as concat1d,V1 as concat2d,W1 as concat3d,U1 as concat4d,G1 as conv1d,du as conv2d,H1 as conv2dTranspose,K1 as conv3d,j1 as conv3dTranspose,Pme as copyRegisteredKernels,X1 as cos,Y1 as cosh,Mc as cosineWindow,Q1 as cumprod,Z1 as cumsum,Nr as customGrad,J1 as denseBincount,zw as deprecationWarn,e2 as depthToSpace,cl as depthwiseConv2d,aY as deregisterOp,uu as device_util,t2 as diag,r2 as dilation2d,Kde as disableDeprecationWarnings,Lt as dispose,qde as disposeVariables,Xe as div,n2 as divNoNan,s2 as dot,hX as dropout,fu as einsum,Ed as elu,Hde as enableDebugMode,Gde as enableProdMode,cS as enclosingPowerOfTwo,cr as engine,a2 as ensureShape,A as env,_d as equal,i2 as erf,l2 as euclideanNorm,Jo as exp,Ks as expandDims,c2 as expm1,$d as eye,fl as fft,Ma as fill,efe as findBackend,tfe as findBackendFactory,Rd as floor,Sd as floorDiv,EA as forceHalfFloat,mS as fused,Dd as gather,dX as gatherND,xf as gather_util,Gk as getBackend,Cw as getGradient,tl as getKernel,ad as getKernelsForBackend,kie as getThreadsCount,k0 as gpgpu_util,a6 as grad,i6 as grads,ju as greater,Ad as greaterEqual,ep as ifft,gu as imag,b5 as image,xX as inTopKAsync,Si as io,tf as irfft,m2 as isFinite,d2 as isInf,f2 as isNaN,Fr as keep,Ut as kernel_impls,Fd as leakyRelu,Fc as less,ml as lessEqual,C5 as linalg,h2 as linspace,r7 as loadGraphModel,o7 as loadGraphModelSync,g2 as localResponseNormalization,yi as log,Pd as log1p,x2 as logSigmoid,y2 as logSoftmax,Ld as logSumExp,Xu as logicalAnd,Bd as logicalNot,zd as logicalOr,b2 as logicalXor,w5 as losses,C2 as lowerBound,Je as matMul,HT as math,La as max,Wd as maxPool,w2 as maxPool3d,S2 as maxPoolWithArgmax,Ud as maximum,Yu as mean,jde as memory,I2 as meshgrid,Ac as min,Qu as minimum,v2 as mirrorPad,k2 as mod,N2 as moments,aX as movingAverage,se as mul,T2 as multiRNNCell,_2 as multinomial,mr as neg,IS as nextFrame,qtr as node,qu as norm,Gd as notEqual,Oc as oneHot,Ba as ones,E2 as onesLike,N as op,$2 as outerProduct,za as pad,R2 as pad1d,D2 as pad2d,A2 as pad3d,F2 as pad4d,P2 as pool,xi as pow,Kd as prelu,wd as print,O2 as prod,Xde as profile,M2 as raggedGather,L2 as raggedRange,B2 as raggedTensorToTensor,z2 as rand,iN as randomGamma,Zd as randomNormal,uN as randomStandardNormal,dl as randomUniform,pN as randomUniformInt,xu as range,Zde as ready,bi as real,lN as reciprocal,pu as registerBackend,Dme as registerGradient,li as registerKernel,sY as registerOp,yu as relu,Jd as relu6,Jde as removeBackend,W as reshape,Bo as reverse,cN as reverse1d,mN as reverse2d,dN as reverse3d,fN as reverse4d,hl as rfft,ef as round,hN as rsqrt,ke as scalar,uX as scatterND,Cu as scatter_util,Pc as searchSorted,gN as selu,xN as separableConv2d,AT as serialization,Qde as setBackend,rfe as setPlatform,vie as setThreadsCount,Sie as setWasmPath,Iie as setWasmPaths,BI as setWebGLContext,yN as setdiff1dAsync,Xf as shared,Pa as sigmoid,bN as sign,y5 as signal,CN as sin,wN as sinh,Ye as slice,SN as slice1d,IN as slice2d,vN as slice3d,kN as slice4d,nt as slice_util,NN as softmax,Md as softplus,Hd as spaceToBatchND,S5 as sparse,cX as sparseToDense,x5 as spectral,Ci as split,Pr as sqrt,tr as square,rf as squaredDifference,gl as squeeze,Tr as stack,of as step,TN as stridedSlice,I5 as string,Te as sub,ot as sum,mi as sumOutType,_N as tan,Dc as tanh,pr as tensor,rr as tensor1d,bu as tensor2d,nf as tensor3d,EN as tensor4d,$N as tensor5d,RN as tensor6d,AN as tensorScatterUpdate,Vk as tensor_util,aN as test_util,De as tidy,hu as tile,Yde as time,FN as topk,cHe as train,yl as transpose,PN as truncatedNormal,ON as unique,Fme as unregisterGradient,Ame as unregisterKernel,MN as unsortedSegmentSum,zo as unstack,pt as upcastType,LN as upperBound,y as util,u6 as valueAndGrad,p6 as valueAndGrads,BN as variable,eS as variableGrads,gme as version,s7 as version_converter,t8 as version_core,M7 as version_cpu,Nie as version_wasm,DJ as version_webgl,sut as webgl,Fl as webgl_util,cv as webgpu_util,Lo as where,af as whereAsync,Yr as zeros,Kt as zerosLike};
